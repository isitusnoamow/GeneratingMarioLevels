(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[   1877921,      33694]
NotebookOptionsPosition[   1858863,      33409]
NotebookOutlinePosition[   1859300,      33426]
CellTagsIndexPosition[   1859257,      33423]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Generating New Levels of Super Mario Bros", "Title",
 CellChangeTimes->{{3.866444571786456*^9, 
  3.86644458251127*^9}},ExpressionUUID->"3c6aaa4b-051c-474a-a12b-\
8412ef28bce2"],

Cell[CellGroupData[{

Cell["Setup", "Chapter",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.866460435053638*^9, 3.866460441888548*^9}, 
   3.8664604760355167`*^9},ExpressionUUID->"215ba60d-b7ed-434b-98a8-\
c25726cea34a"],

Cell["\<\
Importing pictures of the first level in each world of Super Mario Bros., the \
reason I do this is because they\[CloseCurlyQuote]re all overworld style maps \
to simplify it. I also remove the extra stuff around the image and remove the \
alpha channel to make sure they\[CloseCurlyQuote]re all consistent.\
\>", "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.866898300921633*^9, 3.866898412387833*^9}, {
  3.866898462181843*^9, 
  3.8668984915790854`*^9}},ExpressionUUID->"cf227777-fca4-4742-b0b7-\
9db9a0a2b9fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", "$UserDocumentsDirectory", "]"}], 
  ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.866428879086277*^9, 3.866428879095687*^9}, 
   3.866460476036232*^9, 3.866991878835919*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"f49790f6-8fd1-4e7b-beb1-cbd6b6845771"],

Cell[BoxData[{
 RowBox[{"map11", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map11.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"map21", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map21.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", 
         RowBox[{"-", "240"}]}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"map31", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map31.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", 
         RowBox[{"-", "240"}]}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"map41", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map41.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"map51", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map51.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"map52", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map52.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", 
         RowBox[{"-", "240"}]}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"map61", " ", "=", " ", 
   RowBox[{"RemoveAlphaChannel", "[", 
    RowBox[{"Import", "[", "\"\<Wolfram/map61.png\>\"", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"map71", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map71.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"map81", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/map81.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"mapl11", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/mapl11.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"mapl31", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/mapl31.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", 
         RowBox[{"-", "240"}]}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"mapl41", " ", "=", " ", 
  RowBox[{"RemoveAlphaChannel", "[", 
   RowBox[{"ImagePad", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<Wolfram/mapl41.png\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "240"}], ",", 
         RowBox[{"-", "240"}]}], "}"}]}], "}"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mapl42", " ", "=", " ", 
   RowBox[{"RemoveAlphaChannel", "[", 
    RowBox[{"ImagePad", "[", 
     RowBox[{
      RowBox[{"Import", "[", "\"\<Wolfram/mapl42.png\>\"", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mapl61", " ", "=", " ", 
   RowBox[{"RemoveAlphaChannel", "[", 
    RowBox[{"ImagePad", "[", 
     RowBox[{
      RowBox[{"Import", "[", "\"\<Wolfram/mapl61.png\>\"", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mapl71", " ", "=", " ", 
   RowBox[{"RemoveAlphaChannel", "[", 
    RowBox[{"ImagePad", "[", 
     RowBox[{
      RowBox[{"Import", "[", "\"\<Wolfram/mapl71.png\>\"", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "240"}], ",", "0"}], "}"}]}], "}"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.866429003129846*^9, {3.866429033200844*^9, 3.866429044264093*^9}, {
   3.866433963416031*^9, 3.866433966634865*^9}, {3.8664375588125668`*^9, 
   3.866437571520336*^9}, {3.866438301705328*^9, 3.866438303460348*^9}, {
   3.86643962894781*^9, 3.866439667080738*^9}, {3.866442003469084*^9, 
   3.866442003604725*^9}, {3.8664538280225983`*^9, 3.866453892394205*^9}, {
   3.866455389913571*^9, 3.866455403551034*^9}, 3.866460476040058*^9, {
   3.866460645729006*^9, 3.866460647878203*^9}, {3.866461411911489*^9, 
   3.866461411965069*^9}, {3.866461922482485*^9, 3.8664619423496027`*^9}, {
   3.866462196511813*^9, 3.866462230484983*^9}, {3.866462736229287*^9, 
   3.866462778290593*^9}, {3.86646308353871*^9, 3.866463087140499*^9}, {
   3.866463245829265*^9, 3.866463246958449*^9}, {3.866463423106806*^9, 
   3.866463446284553*^9}, {3.866467237095269*^9, 3.866467253081121*^9}, {
   3.8664672901681633`*^9, 3.866467309111196*^9}, {3.8669053108214912`*^9, 
   3.866905327015173*^9}, {3.8669707093035507`*^9, 3.866970715416155*^9}, {
   3.866970796187984*^9, 3.8669707962387867`*^9}, {3.86705983645334*^9, 
   3.867059874755391*^9}, 3.8670602294108963`*^9, {3.8670710151262503`*^9, 
   3.867071058047922*^9}, {3.867071191796918*^9, 3.867071200580019*^9}, {
   3.8670716184711*^9, 3.867071618599263*^9}, {3.867071687690126*^9, 
   3.8670716931133823`*^9}, {3.867072417924198*^9, 3.867072469932481*^9}, {
   3.867132075258339*^9, 3.867132142103959*^9}, {3.867132313132518*^9, 
   3.8671323254799833`*^9}, 3.867140231050785*^9, {3.8672340939563093`*^9, 
   3.867234141393528*^9}, {3.867236670737691*^9, 3.867236672272656*^9}, {
   3.867236703043963*^9, 3.867236708137829*^9}},
 NumberMarks->False,
 CellLabel->
  "In[470]:=",ExpressionUUID->"d07f06cf-649f-4bd7-b221-75fe99765e93"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
3Ta/X5btfIi1dzxkGz/Zzodrq30/3Vvful/TUu37Re/58A5iyX68zX10Z/2c
8AYBmrnVq99ulFuVas7PY9+rz8uvN9vPD29woJlvtdovf/BkG9Uvj5lS1pPe
GA/QL/UklDOez22f0doz2+cbzqcvo80X1llvY92e1X7ZeqR7f8412vkQa+94
yDZ+sp0P11b7frq3vnW/pqXa94ve8+EdxJL9ePdj7/1i788JbxCgmS9//P2R
hwUh/+9Hryxxr9a9Xdeb7eeHNzjQzDT7PrSV/VclG7Huyd/z1pPeGA/QL/Uk
lDOez22f0doz2+cbzqcvo80X1p2+wBo/u9yf2K480m3ZntnOh1h7x0O28ZPt
fLi2s++fj4fPT8is9v2i93x4B7F04f14b9wCqh7hDQI0My9KHzbxLkvWhOtD
4e/IPC3CS643288Pb3Cgmem8/VcPm6/sv+qR8QD9Uk9COeP53PYZrT33rp/O
p6/Pfxq0z1DzhXXW21jz57ZP2/PLH7+GYrTzIdbe8ZBt/GQ7H66t9v10b33r
fk1Lte8XvefDO4ilC+/He7XOTy+OvfeLvT8nvEGAZp7Wq0//Y87PY0+pz1eu
N9vPD29woJnJ96ExYzxAv9STUM54Prd9RmvPveun8+nr858G7TPUfGGd9TZW
tue52c6HWL3vT8h2Plxb7fvp3vrW/ZqWsu1/y5YP7yCW7Me7H3vvF3t/TniD
AM3srVfDT3h5/qnq89o/P7zBgWYm34fGjPEA/VJPQjnj+dz2Ga09966fzqev
z38atM9Q84V11ttY2Z7nZjsfYvW+PyHb+XBtte+ne+tb92tayrb/LVs+vINY
sh/vfuy9X+z9OeENAjTzZfGNzbcCdb4+ZP489tX6trLu7brebD8/vMGBZibf
h8aM8QD9Uk9COeP53PYZrT2zfb7hfPoy2nxh3fEV1fg5Itvz3GznQ6ze9ydk
Ox+u7ez75+Ph8xMyy7b/LVs+vINYuvB+vDduAVWP8AYBmnmoVx9+c+R2ZP48
9tUNfeX1Xdeb7eeHNzjQzOT70JgxHqBf6kkoZzyf2z6jtWe2zzecT19Gmy+s
s97GyvY8N9v5EKv3/QnZzodrq30/3Vvful/TUrb9b9ny4R3E0oX3420OyIdj
7/1i788JbxCgmfV69eH1hOvDufX58nqz/fzwBgeamXwfGjPGA/RLPQnljOdz
22e09sz2+Ybz6cto84V11ttY2Z7nZjsfYvW+PyHb+XBtte+ne+tb92tayrb/
LVs+vINYsh/vfuy9X+z9OeENAjTztF79Ovti5+Sfx55Sn69cb7afH97gQDOT
70NjxniAfqknoZzxfG77jNae2T7fcD59GW2+sM56Gyvb89xs50Os3vcnZDsf
rq32/XRvfet+TUvZ9r9ly4d3EEv2492PvfeLvT8nvEGAZp7Wq7fV4GkRG37C
D1aWuFfr3q7rzfbzwxscaGbyfWjMGA/QL/UklDOez22f0doz2+cbzqcvo80X
1p2+wBo/u2R7npvtfIjV+/6EbOfDtZ19/3w8fH5CZtn2v2XLh3cQSxfej/fG
LaDqEd4gQDMr9erUw+9Hz2/ir27uD6/sut5sPz+8wYFmJt+HxozxAP1ST0I5
4/nc9hmtPbN9vuF8+jLafGGd9TbW/WHuyjOsL7NHuqOdD7H2jods4yfb+XBt
te+ne+tb92taqn2/6D0f3kEsXXg/3qt1fmWs7rpf7P054Q0CNHOrV6dnpen8
xds/J7w/vlefl19vtp8f3uBAM5PvQ2PGeIB+qSehnPF8bvuM1p7ZPt9wPn0Z
bb6wznoba/Nh7v3x1u0fRjsfYu0dD9nGT7bz4dpq30/31rfu17RU+37Rez68
g1iyH28+UHfdL/b+nPAGAZr58uz3R15JeH98rz4vv95sPz+8wYFmNt+5HDzC
L5BdjAfol3oSyhnP57bPaO2Z7fMN59OX0eYL66y3sUoe5t6OW9uOdj7E2jse
so2fbOfDWmd9jT+Hg2rfT/fWt+7XtFT7ftF7PryDWLIfbz5Kd90v9v6c8AYB
mim8Od6P8BM+eP69H+ENDjRmJWHOeIAe1Zi5R47wBoEVxvO57TNae2a7XufT
F+3D3N7xYPwEtn+D51nZzodYe8dDtvGT7Xx45X6En8kRu8ZbwiO8AenarsH2
xv2i93x4B7F04f14u8ZngyO8QQCAcOqNDKatv1K6+SdK5xl/mbR3xgMAAAB9
+fb9Rd//hFmJ6fsj2l1550/m/s02Hno//0E8HOHnA3zku1/0ng/vUJY62o83
H06bgQdPv7MuMF9y/uENDgCcbr7z53Tq7Td64b39Vw9bsLR814wHAAAA+nJ7
LFX4cHb6/vfOduWdP5n7N9t46P38R/D0CD8rINv9ovd8eIey1NF+vPk+t6eB
r7N9cX/4K+ev98tF5UvOP7zBAYDTfauJF9t4lpt/3qTeLu4F34fGnfEAAABA
X27PXjcf0d7/nsLevPMnc/9mGw+9n/847MSDbLLdL3rPh3coS/bj2Y8HADSz
ufOn8Mu45luAfCvX6b3g+9CGYjwAAADQl/sT2JVHtNPs2Jt3/mTu32zjoffz
H4f9eJBNtvtF7/nwDmVpkP1407MjMF9y/uENDgCcbjpvP55v5arXC74PbSjG
AwAAAH2ZP4d9+hzq9vURy+e5hXnnT+b+zTYeej//cdiPB9lku1/0ng/vUJYG
2Y+X7fWS8w9vcADgdJPvx0tgsxd8H9pQjAcAAAD60vvz3N7Pn9j+zTYeej9/
gCjZ7he958M7lCX78UJeLzn/8AYHAE43+X68BDZ7wfehDcV4AAAAoC+9P8/t
/fyJ7d9s46H38weIku1+0Xs+vENZsh8v5PWS8w9vcADgdJPvx0tgsxd8H9pQ
jAcAAAD60vvz3N7Pn9j+zTYeej//ESyP8FMCPvLdL3rPh3coSx3tx3s68B5M
z45O8+ENDgCcbvL9eAls9oLvQxuK8QAAAEBfen+e2/v5E9u/2cZD7+c/goc9
eLbkQRLZ7he958M7lKWO9uO9GmBXfT28wQGA002+Hy+BzV7wfWhDMR4AAADo
S+/Pc3s/f2L7N9t46P38R2A/HuSU7X7Rez68Q1myHy/t6+ENDgCcbvL9eAls
9oLvQxuK8QAAAEBfen+e2/v5E9u/2cZD7+c/An+vFnLKdr/oPR/eoSzZj5f2
9fAGBwBON/l+vAQ2e8H3oQ3FeAAAAKAvvT/P7f38ie3fbOOh9/Mfge/Hg5yy
3S96z4d3KEsd7cebBjvCGxwAON3k+/ES2OwF34c2FOMBAACAvtwfzq48Y5o/
ot2bd/5k7t9s46H38x+B/XiQU7b7Re/58A5lqaP9ePNNnq82f17p9fAG78ty
8Qk/JQBYmnw/XgKbvdDL96Gpf85qxmuMBwAYgfoHAD5+PL9eeTj78Ih2b975
p7K80vBTiu3fbOOh9/Mfgb9XCzllu1/0ng/v0HMtrzT8lN5gP17a18MbvAu/
T7/lg9GeJyYAV7VZOR88wi+wC1Pn34em/jm9PbseDwAwAvUPAMyVPJy9Hbdn
T3vzzj+D36+qt/qndv9mGw+9nz9AlGz3i97z4R16it+vqrf65yn78dK+Ht7g
yb2chi8mZvgJA8BdYQm96wi/qI5M3X4fmvqnUqt2Oh4AYATqHwBY2vWR0ZfZ
HzIrzDv/FP3bbf1Tu3/35nu/3vAOBaik9vo5Wj68Q88ZD93WP091tB9v13i7
wBHe4Jl9a6CSmXibjD/+Ify0AUq4v4xg8n1c2v+t01b/VGrYHscDAIxA/QPA
IL78/NPtT5KVmL4/cq2ad72BEtY/2forW/+Odr3Z1HuScjvCLxBWZBv/2dbD
0fLhA/LoYE5W/5yio/14jb+zbrngNP6uvPAGT2vfZJw6m5IA0/S4FeREVsIk
Jt/Hpf33n7P6x3gAgKGofwAYx9fffi185Hq749XOu94oOeufbP2VrX9Hu95s
PE9hZNnGf7b1cLR8+IA8MpIT1j+n+LP9eIvXp9XDfrxYOybjcj72MCUBlgvd
kzK4fCVcLIzhF8iH7+OK1l37q3+MBwAYjfoHgKHcnqVuPnK93/Fq511viLT1
T7b+yta/o11vNsuJ43kK48g2/rOth6PlwwfkWcM4Sf1zCvvxHl6fCg778aLs
m4xP52P6KQkwbe0MKdkccv8XJ9/alNJmL5d0sZ4dpP3VP8YDAIxG/QPAaO5P
VFceuc6fUtXOu972Mtc/2forW/+Odr3ZTJ6nMLBs4z/bejhaPnxAvjeG09Y/
p+hoP9402BHe4Nl8a5Rd0/DVfMw9JQGm8+rnh+LZ+8c8Nnt5s4v17CDtr/4x
HgBgNOofAAY0f6769DscHr5Nonbe9TaWvP7J1l/Z+ne0681m8jyFgWUb/9nW
w9Hy4QPyjQGcuf45RUf78eaD6tVgO/j6VHyc+7/79PXwBk9lx2Scz8dfnk3G
3FMSYEr2+yzUsNnLJV2sZy/f/uof4wEARqP+AWBMoz3PHe161+Wvf7L1V7b+
He16s5k8T2Fg2cZ/tvVwtHz4gNw7epPXP6ewH+/VcF0/zv3fffp6eIPnsW8y
PszH1Vj4pQEsTcl+n4UaNnt5s4v17OXbX/1jPADAaNQ/AAxrtOe5o13vii7q
n2z9la1/R7vebCbPUxhYtvGfbT0cLR8+IHcN3fz1zynsx3s6VkuO2ucT3uBJ
7J6M5fMx5ZQEmJL9Pgs1bPZySRfr2Qu3v/rHeACA0ah/ABjZaM9zR7veV3qp
f7L1V7b+He16s5k8T2Fg2cZ/tvVwtHz4gCwft13UP6foaD/eNNgR3uAZfGuI
vZNx/+QNv0yAuSnZ77NQw2Yvb3axnr1w+6t/jAcAGI36B4DBjfY8d7Trfaqj
+idbf2Xr39GuN5vJ8xQGlm38Z1sPR8uHD8jCQdtL/XOKjvbjvRpgZ72+96h9
PuENHq7FZMw3JQGmZL/PQg2bvVzSxXr2ku2v/jEeAGA06h8AGO157mjXu9RX
/ZOtv7L172jXm83keQoDyzb+s62Ho+XDB2TJiO2o/jmF/XjLgVp41D6f8AaP
1W4yJpuSAFOy32ehhs1e3uxiPXvJ9lf/GA8AMBr1DwB85Ht+7Xqr6q7+ydZf
2fp3tOvNZvI8hYFlG//Z1sPR8uEDcnO49lX/nMJ+vOVALTxqn094gwdqPRkz
TUmAKdnvs1DDZi+XdLGevVj7q3+MBwAYjfoHAG5Ge5472vXO9Vj/ZOuvbP07
2vVmM3mewsCyjf9s6+Fo+fABuT5Wu6t/TtHRfrxpsCO8wSM7uv1kTDMlAaZk
v89CDZu9vNnFevZi7a/+MR4AYDTqHwC4uz9sXXlmNH/kWjvveiv59j/WYf2T
rb+y9e9o15vN5HkKA8s2/rOth6PlwwfkykDtsf45RUf78eabPF9t/jzy+sow
fjW2q55PeIOHiJyMOaYkfDzbfhx+SrQ0Jft9FmrY7OWSLtazl2l/9Y/xwIf6
B2Aw6h/4UP8AM5sPW++PpW7/UDvvemv49r/UZ/2Trb+y9e9o13vCRPjjcfwH
ep7CsLKN/2zr4Wj58AH5apR2Wv+cwn48+/FulhfYvovjJ2OCKcnIfp9+z4Zl
5jsp59p7P9p7hF8gH76PK1qq9lf/hEs1Hgak/gEYkPqHwal/gKWSh6234/Ys
qXbe9Z7u2/9YePHzbv2Trb+y9e9o1/v+FLgdZ9c/hY3z9hHedLAi2/jPth6O
lg8fkM+HaHjxE/r5j/14g+/H+/16oj//yTIZo6ckY3o5DV9MzPATpoG9d6WS
I/yiuJt8H5f2/3Em8WXP8PVPnvEwGvUPwJjUP4xM/QO8susjvr3Ps97Iu97z
rze87DlQ/9Ru/9p54znWv55Z5fpnVysVHuFNB4XyjP9d/xMJ7xe958OH4pPx
EF72RH/+09F+vF3j7QJHo/bM8flP6Zn8UnzOx3+OQiuZvbOjdv7kS9s7bo3P
Nxo5qH+PnLPva7qwK/VvR+tttvZX/ySRZDy8HCTqH/XPkUaOXm/hqjpab7NR
/7BJ/aP+OdrI1lty+PLzT7c/MVZi+v4INVV+eUXnrrfZrvd4+2w0RbL6J1t7
puov8/1czeqfKfHne7Wpf6g3/rOtV/KB6/kbwzJb/VO7ibrur4/Z9+Od+B10
b3853on/u69eTzf+q53SvpOZzpiShT8n3ywY1ryQKCmDa+fPvbQ3x63xuaeR
o/r3rNO+18O+r+kyLtO/Ha232dpf/ZNHhvGweWLqn2HH55FGzrDewiV1tN5m
o/5hk/pH/XOwka235PH1t18LH8ndZny2/MPlnL7eZrveg+2z3hQJ659s7Zmn
v8z3c7Wsf6asn+/Vpv7ho+b4z7ZeyUet52+MyYT1T+331/321439ePHjv8JZ
7Ztcjedj5SlJ6QiZHsuGlZKydv78qzsybo3PkhaO69/jJ3+wfp5nernqcVyg
f/tab7O1v/onlfDx8HyEqH/UP0daOM16CxfT13qbjfqH7RGi/lH/HGlh6y3J
3J61bT6Su8/4bPn7hVRab7Nd79vtsy5t/ZOtPZP0l/l+rqPjf//Hrdk+36vt
1mDqHz5qjv9s65V8yHr+xoDMWf+8d38p12l/3dmPl2L8n3piu2dW+/lYc0pS
MkKWleS8Enjondr506/uhHFrfJ43frKZRv19rkH03r99rbfZ2l/9k022+aj+
Uf8cbOFU6y1cSV/rbTbqHzZHiPpH/XOkha23JHR/4rbySG424ads+dtV1Ftv
s13ve+2z7pz1v079k609M/SX+X6uc8b/zk9cU32+V9uk/mGm3vjPtl7Jt1/P
3xiNaeuf9+4v5Xrsr8e+G+nIO/5POrcdJ3M/h6fns/dy3vg5+abDIKbX9eSt
GHgoiWvnz72008at8XnS+MlmOlw/zzPJL3ZAvfdvR+tttvZX/ySUbT6qf9Q/
LccPUK6j9TYb9Q8lg0T9o/5pNn6gjflzt6ffyfDwNRHZ8rerqLfeZrve99pn
xZnrf4Wfk609w/vLfD/XmeN/z4euv6823//dxyUo9+ftbzSy+oe7euM/23ol
H3u/KxmKmeuf9+4v5brrrwfzk3x18kden3Yetc8n9fg/5Y9wvTGPfjkwGQ/+
nHwzYgTT029aXlYRq58PnJg/8bpOHrfG5xnjJ5vpcP08dfX7XKPpvX97WW+z
tb/6J6ds81H9UzpuxxiftccPUK6X9TYb9Q+F40T9o/5pNn6gjWzPZ0/cj3fK
epvtes99fpq//snWnr3vT8h2vbHtc/74L/7cdb7sPFl5cn/e/kY7q3+4qzf+
s61X8rH3u81xmLz+ee/+Uq6v/lqan+Srkz/y+rTzqH0+2cf/gRHyxlw4NA3P
+jn5JsW1Ta+Lh+mPhcT047uXq+ZPvK4q49b4PDZ+Elq5hML6+eFi017pmLru
317W22ztr/5JK9V8VP/sG7cDjM+q4wco18t6m436h8Jxov5R/zQbP9BMtuez
bzwfrLreZrveE5+fdlH/ZGvP3vcnZLvewPapNf7LPnp9tQQ9LESv/lceFqsG
I+dIO6t/mKs3/rOtV/Kx97v1QZi//nnv/lKuo/56an6Sr07+yOvTzqP2+XQw
/t8aJO/MiCTz8ewpyfo4eVU9Lt06tmr+xOuqOG6Nz3fHT/gJl1zF8kKmrfp5
6ur3uUbTb//2st5ma3/1T2Z55qP6551xe/XxWW/8hJ8wdKSX9TYb9Q+F40T9
o/5pNn7CT5ihZHs+uzdfe73Ndr1nPT/tpf7J1p6970/Idr1R7VN3/Bd8+jpf
hZYL0ZT18/Y32ln9w4N64z/beiUfe79bGYFd1D/v3V/K9dJfa/040tHH+N95
nu+cTDb5psaV3Mf/egHZ3r3fjwyAFuN/7PH59vg5pX9rXM7B+vnh7Viqq6O7
/m22PreZj43bX/2TXPh8VP8YnwcH8JXqH0jlYvVPQOuFFzDuL4mpf4zPkPFz
yfWWtLI9n92br73eZrveU56fdlT/ZGvP3vcnZLvevfnpEvXPFP35Xm33zlL/
sFRv/Gdbr+Rj73evhl94YVP1/lKui/5a8eqEz3p979HgfO5jOPX4Lz69K0zG
U6ckyxHS8iPWN+rV2xm+NwDajf9Rx+eR8XO8f2tf0a1z99bPUye/zzWmvvq3
5frcZj62bH/1T36x81H9Y3yeNXpzrrfQr+vVP41bL750cX9JTP1jfEaNn+ut
t2SW7fms/Xi1n3f3Vf9ka8/e9ydku9739uNNndc/U1eft7/RwuofVtQb/9nW
K/nY+93TsRde1dS+v5TL31/rXp3wWa/vPRqcz0f/9c8FJ+N5U5KHEVL7Pf5B
9zN8o/dbj//xxufx8XOkfxtc1K1n99bP80yqS+Ojq/5tvz43mI/N2l/904XA
+aj+MT7PGrpp11vo1CXrn5atF1+0uL8kpv4xPmPHz5XWW5LL9nzWfryqz7u7
q3+ytWfv+xOyXe8b833qv/6Z+vm8/Y0WVv+wrt74z7Zeycfe75YDL7ykaXB/
KZe8vza9OuGzXt971D6fa9Q/15yMJ01J5mq/wT/R9GOvbOGlxYz/wcZnYP/W
M1X7fRYy6Kh/O1pvs7W/+qcXgfMxcH7Vno/qnwa6WG+hUx2tt9mof9gUXtWo
f7pmvaUj2Z7P2o9X73l3j/VPtvbsfX9Ctus9Mt+nbuufqZ/P2/dS/7Cp3vjP
tl7Jx97vHkZdeD3T5v5SLnN/lfbpSMc16p/LTsYzpiS/j5D0vxy9LFkLq/HI
8T/G+Kwxfsr7t/alHayf55kMV8RcF/2bYX2uNB8btL/6pyMh8zHD/Ko3H9U/
DQbtVesfCJdhfe53Pqp/2B4h0fOr3nxU//Q4fvpdb+nC/WHcyjOg+SO5bPna
C2y2692bv3f0t/8QXqjsl609m/WX+f40f436Z+rh8/a9nnaQ+oeleuM/23ol
v55vOeTCi5lm95dyafur0HzT4KvNhEdeX2mWV21V9XwuU//Ez5qsU5KPHv5M
yXrVmncyjjE+q46f8Nabqv0+Cxnk799U63PVq6vR/vHrv/tLpvGQfH6dPh/j
x/+1xmfj8XP51oN1qdbn7uZj/Prv/pJbqvl1+nyMH/9XH5/qH3q0+TDu/pjp
9g/Z8rWX1mzXuzd/6+Vv/xReorwlW3u26S/z/VX+GvXPlP7z9r1edY36h6V6
4z/beiW/nm823sIrmZb3l3I5+6vc4Pvxeqx/4k8m95Tk49Kfx2YZ/5cen1XH
T3jTTVf8fS7u8vdvqvW56tWd3v5Z1n/3lxzjIf/8Onc+Zhn/FxqfjcfPtZsO
NqVan/uaj1nWf/eXxFLNr3PnY5bxf+nxqf6hRyUP4+5Pmqbvz1tT5Wsvrdmu
d2/+I8/6/5Zs7dmgv8z3lfw16p8p/efte73qGvUPS/XGf7b1Sn4932awxS/+
be8v5RL21y724/VV/2Q5mcRTkvu4rf3uvn2xmmv8X3p8Vho/GRptutzvczHX
Rf8mWZ9rX9q57Z9r/Xd/iR4P+efXufMx1/i/yvhsOX6u3WhQKMn63Nd8zLX+
u78klmR+nTsfc43/S49P9Q/d2fuwKVu+wepa9fxb5MOX/WO3jOrtkylvvq/n
r1H/TD183v7G0FL/UKLe+K+9/sifm28w0uKX/eb3l33tk6m/qp7/BY7e65/P
IXT/E8kPlv/tbQuivLy8vLy8vLy8vLx8F/na73+zXa+8/JF8+AdK5pe8vLy8
vLy8vLz8sHnvL+Tl5eXl5eXl5a+Uv/9bS9P3b9dcf0VeXl5eXl5eXl5eXj5t
vvbn+dmuV17+SD58A575JS8vLy8vLy8vLz9s3vsLeXl5eXl5eXl5eXl5eXl5
eXl5eXl5+fx5n+fLy5fnwzfgmV/y8vLy8vLy8vLyw+a9v5CXl5eXl5eXl5eX
l5eXl5eXl5eXl5fPn/d5vrx8eT58A575JS8vLy8vLy8vLz9s3vsLeXl5eXl5
eXn5ofLT979yKy8vLy8vLy8vLy8v310+/PP85O0jLz9/JXwDnvklLy8vLy8v
Ly8vP2ze+wt5eXl5eXl5eflx8rf/fz8+/6O8vLy8vLy8vLy8vHwv+djP8/O3
j7z8PB++Ac/8kpeXl5eXl5eXlx827/2FvLy8vLy8vLz8OPnP/3ZuKtjvJy8v
Ly8vLy8vLy8vnyQf+3l+/vaRl285X8wveXl5eXl5eXl5eflXee8v5OXl5eXl
5eXlh8qvvyIvLy8vLy8vLy8vL582H/55fvL2kZefvxK+Ac/8kpeXl5eXl5eX
lx827/2FvLy8vLy8vLy8vLy8vLy8vLy8vLy8fP68z/Pl5cvz4RvwzC95eXl5
eXl5eXn5YfPeX8jLy8vLy8vLy8vLy8vLy8vLy8vLy8vnz/s8X16+PB++Ac/8
kpeXl5eXl5eXlx827/2FvLy8vLy8vLz8lfK3oyQsLy8vLy8vLy8vLy/fV772
5/nZrlde/kg+fAOe+SUvLy8vLy8vLy8/bN77C3l5eXl5eXl5+SvlP1/8tPy3
5OXl5eXl5eXl5eXle8/X/jw/2/XKyx/Jh2/AM7/k5eXl5eXl5eXlh817fyEv
Ly8vLy8vL3+x/Oc/zP+t27EMy8vLy8vLy8vLy8vL95Vv8Hl+quuVl888X8wv
eXl5eXl5eXl5eflXee8v5OXl5eXl5eXlr5e/uf1bt39RXl5eXl5eXl5eXl6+
93ybz/PzXK+8/JF8+AY880teXl5eXl5eXl5+2Lz3F/Ly8vLy8vLy8lfNr78+
fT/k5eXl5eXl5eXl5eV7ybf8PD/D9crLH8mHb8Azv+Tl5eXl5eXl5eWHzXt/
IS8vLy8vLy8vf6X8/R/mx5fve/mevi4vLy8vLy8vLy8vL99Lvvbn+dmuV17+
SD58A575JS8vLy8vLy8vLz9s3vsLeXl5eXl5eXn5i+W//vgavQf3f/FOXl5e
Xl5eXl5eXl6+o3yDz/NTXa+8/JF8+AY880teXl5eXl5eXl5+2Lz3F/Ly8vLy
8vLy8lfK3/+tpWnxrXrLV+Tl5eXl5eXl5eXl5dPma3+en+165eWP5MM34Jlf
8vLy8vLy8vLy8sPmvb+Ql5eXl5eXl5eXl5eXl5eXl5eXl5eXz5/3eb68fHk+
fAOe+SUvLy8vLy8vLy8/bN77C3l5eXl5eXl5eXl5eXl5eXl5eXl5efn8eZ/n
y8uX58M34Jlf8vLy8vLy8vLy8sPmvb+Ql5eXl5eXl5cfKj99/yu38vLy8vLy
8vLy8vLy3eXDP89P3j7y8vNXwjfgmV/y8vLy8vLy8vLyw+a9v5CXl5eXl5eX
lx8nf/v/9+PzP8rLy8vLy8vLy8vLy/eSj/08P3/7yMvP8+Eb8MwveXl5eXl5
eXl5+WHz3l/Iy8vLy8vLy8uPk//8b+emgv1+8vLy8vLy8vLy8vLySfKxn+fn
bx95+ZbzxfySl5eXl5eXl5eXl3+V9/5CXl5eXl5eXl5+qPz6K/Ly8vLy8vLy
8vLy8mnz4Z/nJ28fefn5K+Eb8MwveXl5eXl5eXl5+WHz3l/Iy8vLy8vLy8vL
y8vLy8vLy8vLy8vL58/7PF9evjwfvgHP/JKXl5eXl5eXl5cfNu/9hby8vLy8
vLy8vLy8vLy8vLy8vLy8vHz+vM/z5eXL8+Eb8MwveXl5eXl5eXl5+WHz3l/I
y8vLy8vLy8tfKX87SsLy8vLy8vLy8vLy8vJ95Wt/np/teuXlj+TDN+CZX/Ly
8vLy8vLy8vLD5r2/kJeXl5eXl5eXv1L+88VPy39LXl5eXl5eXl5eXl6+93zt
z/OzXa+8/JF8+AY880teXl5eXl5eXl5+2Lz3F/Ly8vLy8vLy8hfLf/7D/N+6
HcuwvLy8vLy8vLy8vLx8X/kGn+enul55+czzxfySl5eXl5eXl5eXl3+V9/5C
Xl5eXl5eXl7+evmb2791+xfl5eXl5eXl5eXl5eV7z7f5PD/P9crLH8mHb8Az
v+Tl5eXl5eXl5eWHzXt/IS8vLy8vLy8vf9X8+uvT90NeXl5eXl5eXl5eXr6X
fMvP8zNcr7z8kXz4BjzzS15eXl5eXl5eXn7YvPcX8vLy8vLy8vLyV8rf/2F+
fPm+l+/p6/Ly8vLy8vLy8vLy8r3ka3+en+165eWP5MM34Jlf8vLy8vLy8vLy
8sPmvb+Ql5eXl5eXl5e/Uv7/A3dmhqg=
    "], {{0, 180.}, {2532., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2532., 180.},
  PlotRange->{{0, 2532.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236708483634*^9}},
 CellLabel->
  "Out[470]=",ExpressionUUID->"71b5ce3d-2f2a-4260-a67e-f100ae1a0729"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
m5qZ2vzbzTO/3nN77j++0O/mD+r9ZpZnvqj3g9Yezvf7bfMkt8jMHl6pjeX6
+j81+klno1Ub48d4IyfzC2ZjvvTC+gztmF8wG/OlF9ZnaMf8gtmYL72wPkM7
HdX7mV+l13R9yquv9Vt/0Z96v5nlmS/q/aCp9WS/+e2Ymyk/yf0xud82Wj9f
lJsXv61+wGn6k85H/fgx3sjM/IJ5mC99sT5DO+YXzMN86Yv1Gdoxv2Ae5ktf
rM/QSMJ6P/PrgMt6PeWfK/38fb6kmi9LsiP86sCBlp8n+/Zh/OfxcEU6f6Wq
HT/GG10wv2B45kunrM/QjvkFwzNfOmV9hnbMLxie+dIp6zMcLlu9n/l12JW9
nPKPGr+1b+r9ZpVtvrxcQG6Oku/02/M+4RcI9vvL/bryuE4Bc2Fmb48f4w1e
Mr+gHfsf9rA+QzvmF7Rj/8Me1mdox/yCdux/2MP6zJCS1PuZX00u7vWsV5V+
l0O931TS7n/U+8Gx9txGl9VX5poOczphG2a8MS3zC9qx/2EP6zO0Y35BO/Y/
7GF9hnbML2jH/oc9rM+MKkO9n/nV8Po+OdT7zSPz/ke9Hxxo/830+g6mw4TO
3IwZb8zG/IJ27H/Yw/oM7Zhf0I79D3tYn6Ed8wvasf9hD+szAwuv9zO/ml/i
R4d6v0kk3/9slOSFHOHXC/Y48Fh+1PqGnxSnCTyMN4ZnfkE75gt7BB7GG8Mz
v6Ad84U9Ag/jjeGZX9CO+cIegYfxRmvh9X7m1xlX+e5Q7zeJ5PPl2Xf0PavH
K/lOvz3vE3694D2/3aAPPZZpvgiXFuPHeIML8wvasf9hD+sztGN+QTv2P+xh
fYZ2zC9ox/6HPazPDO9avPesMOZSD3P9c21+4z9tfp16oX8+1PsNr4v9j3o/
2K/pnXSG++Pkwndi68N4YzDmF7Rj/8Me1mdox/yCdux/2MP6DO2YX9CO/Q97
WJ+ZwcvivZsSvtr8s/+u+RVwrVeHer+x9bL/Ue8H+/Uy38nJfgzaMb+gHfsf
9phtff46wvucecw2v+BM9j/sYX2GdswvaMf+hz2sz8ygpHhvXcJXm3/23zW/
Yi73j0O939h62f8ULianHeEXDt6ztJnyJsUkGo2f2sN4Y0jmF7Rj/8Me86zP
1yO8z5nHPPMLzmf/wx7WZ2jH/IJ27H/Yw/rM8KqKYTa+L+tZfvs/HT23fj1m
m1+XQ73f8EL2P9e/7/vLy8CNh9+5F5gvaX/4VYar65T/m19eT+SSzGw3x8kd
Pn6MN7gyv6Ad+x/2mGF9vjnC+5x5zDC/IIr9D3tYn6Ed8wvasf9hD+szY9uu
eLlxqZOpym//182vEN/U+83h/P3Puo7uYWBdd7e2UY8XlS9pf/glhrX7Kf9w
XpffTOe8RU5r//gx3uAZ8wvasf9hj7HX54dHeJ8zj7HnF8Sy/2EP6zO0Y35B
O/Y/7GF9ZmCX8pXC4r3l+9/nW5V/2QDz63x/+Oe/Uu83iZP3P+r9INZ6yl+t
Z/r9i9srwIS3yJntGT/GG2wzv6Ad+x/2GH59vh7hXc2Ehp9fEMj+hz2sz9CO
+QXt2P+wh/WZUV3/psuS4r1LvV9VvqQN5tfJ1PtN5cz9z556v+XREZgvaX/4
xYUb1/n+cI5fZ/r9K8+O8DPiTPvHj/EGz5hf0I79D3sMvz4b2AQafn5BIPsf
9rA+QzvmF7Rj/8Me1mdGda3Q2yjhuymPqcqXtMH8Opl6v6mcuf855Pv9krxe
0v7wiwv3/nK/vpv1D9eBZ0f5TZyRHDJ+jDd4yPyCdux/2GPs9fl6hPczcxp7
fkEs+x/2sD5DO+YXtGP/wx7WZ4a0rtN7WPdy+esv/zL+K/OFzTC/zqTebzan
7X/U+0Eey12t72UWb0zwme+M3Hh7/Bhv8JL5Be2YL+xhfYZ2zC9ox3xhD+sz
tGN+QTvmC3tYnxlJknq/K/PrBOr9ptV6vqj3g1R+u3GvZvT9i+sJPvOdkXvv
jR/jDUqYX9CO+cIe1mdox/yCdswX9rA+QzvmF7RjvrCH9ZlhZKv3+zC/2lPv
N7Om8+XhQrHx9333ng+/mlDi4Yg1kilUO36MNyhnfkE75gt7jLQ+X4/wXoWL
keYXZGO+sIf1Gdoxv6Ad84U9rM8MIGG934X51Y56PxrNl2cLwqivh19HAAAA
eOha6afkDwAAAAAGk7bej3bU+9FItno89X4AAABM6KbGT8kfAAAAAIxEvd+E
1PvRSLZ6PPV+AAAATEi9HwAAAAAMTL3fhNT70cgy2RHe4QAAAHDv4RHeKgAA
AADgEOr9JqTej0YyfOfema+HdzgAAADc8/1+AAAAADCwa/HexndYrUv4avPh
J8g99X40kq0eT70fAAAAE1LvBwAAAAADe1m8d1PCV5sPP0HuqfejkWz1eOr9
AAAAAAAAAAAYSUnx3rqErzYffoLcU+9HI4WLwzBHeIcDAAAAAAAAADCVquKW
z9Vf1FuYDz9B7qn3o5GTv3Pv4Zpz5nf9hXc4MJJrIXHJHy7ft5xHeO8BZ3q4
NXpojDxchd9w3a+7Fj4AjLdUwi+Q6wvQhfAF3/0CgAGE3xAnv//23n6GV/V8
NpvPv/1d+eS61L1U5cNPkHvq/WikdX3d+s/blcaN/rs3r4d3ODCMqiXlhPXN
egg88+vPg3/8faHffn7sOR/e4aSS7f7rft2XbOPBeDMeXF+A/LKt/+4XAPQo
2/1xtvtv7+1nbLXPZ8MbfOPbL3/+LCvhuxTS1ObDT5B76v1o5Jx9y3ax37Xk
b8L9EtCv5cevhxTG/PwIRPn8Xi/36w+Gryrl1vV1/ebDO5xUst1/3a/7km08
GG/Gg+sLkF+29d/9AoAeZbs/znb/7b39jK32+Wx4g29cavM+X5XwXatoavPh
J8g99X40UlKJN9IR3uHAtKLXv9sjvEOA03z+/P14Nx/IvPw+ve7y4R1OKqE3
2wOO8A6cXPT1P/sI7/Dkoq/P3iO8AwEmEb3e7z3COxAAPvq/n9Ye4R2+s//D
GwwduVbobZTwredXbT78BLmn3o9GTvjdhPLNwAm/KxHe4cAwqrZM67Wo3Xpr
PQQeWhfF3WzP7kvmlp/r63rMh3c4qWS7/7pf9yXbeDDejAfXFyC/bOu/+wUA
Pcp2f5zt/tt7+xlb7fPZ8AbfWNfpPZxfnz8X2NTmw0+Qe+r9aOSEfctSfEy4
XwL6VbufjPo50XoIfD6ql3v4jxv1dR3lwzucVLLdf92v+5JtPBhvxoPrC5Bf
tvXf/QKAHmW7P852/+29/Yyt9vlseINvqPebkHo/Gmm9P3lR4Xd3zLZfAubh
50cgymeyerzW+fAOJ5Vs91/3675kGw/Gm/Hg+gLkl239d78AoEfZ7o+z3X97
bz9kpt5vQur9aKSwDG+YI7zDgWFULSnRi9+DI7wDgdN83v2Nt8v3Arn1D4PP
6ut6zId3OKmccU9teYR34OSir//ZR3iHJxd9ffYe4R0IMIno9X7vEd6BAPDR
//209gjv8J39H95gplI15BKOT/V+E1LvRyOtfzeh9mjdnvAOB4ZRu59svb5Z
D4Fnburlbr4Z77efGZ/X13WXD+9wUsl2/3W/7ku28WC8GQ+uL0B+2dZ/9wsA
epTt/jjb/bf39jO22uez4Q2+od5vQur9aKT1/qT2mG2/BMzDz49AlM/Nermb
15dX9XX58+EdTirZ7r/u133JNh6MN+PB9QXIL9v6734BQI+y3R9nu//23n7I
TL3fhNT70Ujr/UntMdt+CehX1ZLi50cg0Oejern1X4xbUl/XUT68w0kl2/3X
/bov2caD8WY8uL4A+WVb/90vAOhRtvvjbPff3tvP2Gqfz4Y3+IZ6vwmp96OR
p4V3gx7hHQ4Mo2pJiV78HhzhHQic5vP59+M9LKLrPR/e4aQSerM94AjvwMlF
X/+zj/AOTy76+uw9wjsQYBLR6/3eI7wDAeCj//tp7RHe4Tv7P7zBTKVqyCUc
n+r9JqTej0Za/25C7X6gdXvCOxyYVuv1zXoIPLNRL7f08Pfz1ubDO5xUst1/
3a/7km08GG/Gg+sLkF+29d/9AoAeZbs/znb/7b39kNm1eG+7Zub659p8+Aly
T70fjbTen2wsO8/Woqn2S0C/Llumlxuna8zPj0CUz+/1csuj0rj1i5c/Lz/q
6/rNh3c4qWS7/7pf9yXbeDDejAfXFyC/bOu/+wUAPcp2f5zt/tt7+xlb7fPZ
8AbfeFm8dzk+f1Ta1ObDT5B76v1opPX+5OXKc78QTbVfAvpVtWU6YX2zHgLP
fD76frxnlh/1df3mwzucVLLdf92v+5JtPBhvxoPrC5BftvXf/QKAHmW7P852
/+29/Yyt9vlseINvlBTvXStnlu/1flX58BPknno/GilcHIY5wjscGMl1YSn/
Q54jvPeA00SvN2cf4R1OKtHjce8R3oGTi77+Zx/hHZ5c9PXZe4R3IMAkotf7
vUd4BwLAR//309ojvMN39n94g5nNdeCV/CGbqsn1Wfn9Wupvc1LvRyOtfzeh
9mjdnvAOBwAAAAAAAABgKp9/+7vLX9Fb4lL3UpUPP0HuqfejEfV+AAAAAAAA
AADQzrdf/lxYwnepn6nNh58g99T70Yh6PwAAAAAAAAAAaOdSm/eyhO9aP1Ob
Dz9B7qn3o5E3SvK6PsI7HAAAAAAAAACAqVwr9DZK+Nb1LbX58BPknno/Gmnx
HXp7vuKvdXvCOxwAAAAAAAAAgKms6/Qe1rfc1NjU5sNPkHvq/WhEvR8AAAAA
AAAAALSj3m9C6v1oRL0fAAAAAAAAAAC0o95vQur9aKS2Hq/3I7zDAQAAAAAA
AACYinq/Can3o5EW36H39pf7HfjfffZ6eIcDAAAAAAAAADAV9X4TUu9HI+r9
AAAAAAAAAACgHfV+E1LvRyPq/QAAAAAAAAAAoB31fhNS70cjb5TkdX2EdzgA
AAAAAAAAAFNR7zch9X400uI79PZ8xV/r9oR3OAAAAAAAAAAAU7kW723XzNzX
+xXmw0+Qe+r9aES9HwAAAAAAAAAAtPOyeO+mhK82H36C3FPvRyPq/QAAAAAA
AAAAoJ2S4r11CV9tPvwEuafej0Zq6/F6P8I7HAAAAAAAAACAqVQVt9R+v5bv
v8pJvR+NXP++7y8PvxNvHbjRe/5lh7yRD7+gAAAAAAAAAACksl3BcuNS91KV
Dz9B7qn3o5F1XdyzermHf0/uAPmHHbIzH35BAQAAAAAAAABI5VJeUli8t3z/
+3yr8uEnyD31fjSSuR5PvR8AAAAAAAAAAL27/s2VJcV7l3q/qnz4CXJPvR+N
rOvZHv4d3xv1b73nH3aIej8AAAAAAAAAAA50rdDbKOG7KXepyoefIPfU+9FI
1ffmDfb6ww5R7wcAAAAAAAAAwIHWdXoP61I+v/91lvf1foX58BPknno/GslQ
d6feDwAAAAAAAACAUan3m5B6PxrJUHen3g8AAAAAAAAAgFGp95uQej8aebhQ
bPx93/Lb+fALCgAAAAAAAABAKur9JqTej0aeLQhef+/18AsKAAAAAAAAAEAq
6v0mpN6PRrLVy/X+evgFBQAAAAAAAAAgFfV+E1LvRyPZ6uV6fz38ggIAAAAA
AAAAkIp6vwmp96ORxXHoEX5BAQAAAAAAAABIRb3fhNT70UiG78Qb6fXwCwoA
AAAAAAAAQCrX4r2N75hal/DV5sNPkHvq/WgkW71c76+HX1AAAAAAAAAAAFJ5
Wbx3U8JXmw8/Qe6p96ORbPVyvb8efkEBAAAASGJ9hDcGAAAACFRSvLcu4avN
h58g99T70Ujh4uAoPMIvKAAAAAAZrMv8lPwBAADA5KqKT67f2leeDz9B7qn3
o5Gd33H3cA058Dv0Wr//4a+HX1DoyNesuXwFcQnzCwAAgI4o8ANmUPX88Y0j
/AQBAOBAtc/HPU8fwMD1fuvh9zJwo0U+vENO9nad2/aP4fvr6Fq/v3o/CPe1
5BZuUXy+BwAAQF/U+wEzWJbl8vSqBZ8HAgAwmNrn456nD2Dger9rrdRGPd7D
2qpG+fAOier/qjq3kt+821NH1/r91ftBBpe9x8stynXWhzcYAAAACqn3A2bw
62d2f/rJg7K9P91mSvk8EACAsdQ+H/c8fQDq/dT7NVJSWecoP8IvKHTkugPZ
2KKYXwAAAHRqXfKn/A8Y0rL6fr+Ner+Swr9r8i95nwcCADCW2ufjnqcPQL2f
er/W/b8Uf5ddefHbe9+V1/r9m74efkGhI+t9yMP5dbMghDcYAAAAqqyP8MYA
HO7Aer+bYj/1fgAAjKf2+bjn6QNQ76fer3X/56nHU+8Hk7A/AQAAAIB+HVjv
5/v9AAAYnnq/Can3U+/Xuv8L69nKi/FuSvKSvL96P8jD/gQAAAAA+rX4fj8A
ACim3m9C6v3U+zVSW1/n2D7CLyh0xP4EAACAsfnLfIGxLb7fDwAAiqn3m9DA
9X4PB+qNh4VVjfLhHXKy2u+yqz2yvX/r18MvKHTE/gQAAICxqfcDxrb4fj8A
ACim3m9CA9f7qdfqq/9b1+O1fn/jB/KwPwEAAGBs6v2AsS2+3w8AAIqp95uQ
ej/1Wkn6v3U9Xuv3N34gD/sTAAAARvXwCG8VwLEW3+8HAADF1PtNSL2feq1G
3iixc2wc4RcUOmJ/AgAAwMAU+wHDW3y/HwAAFFPvN6GB6/3aV2DVHeEdcrLa
2sja/sz2/q1fD7+g0JHr5mR7jl//HN5gAAAAqKLYDxjb4vv9AACgWO3zcc/T
BzBwvZ96rb76f2MZeba2pHp/4wfyeLk5uU7zyx/CGwwAAAC1FPsBA1t8vx8A
ABSrfT7uefoA1Pup10rS/y9XkvuFJdX7Gz+QR8nm5DrTF/sTAAAAAMik9vP8
2iP8BAEA4EC1z8c9Tx+Aej/1Wo3U/nzt2D7CLyh0pGpyTbg+AwAAAEB+PmkH
AIAStc/Ha/PhJ8i9gev9qsbnCUd4h5ystjay9sj2/q1fD7+gk7v+/fVJhHfI
yb5mQXnnXOZRVT78BO9dbxwlf5jNANeXQG9sCaqO8BM838Oty0Nj5BmY/di2
CdfPbOtPtvVqtvOF00y43kJa5mMGy6u/1fflX+m7zvibfAHO5/OW7vh5nGHM
9rz+c77n6Qxc7/fwvrPx8/Wz/FHvE94hSfq/tj9bX6+j3r/16+EXdHLGQ6yv
XcRn2ZbjMn9r8+EneKOqSQnb31rv15dYy3L7aOBAE463XyfjH39f6HJf6zof
3uE0ZT+2bbb1M9v6k229mu184UyzrbeQmfmYwbK73u+m5E/PA5zM5y198fM4
I5ntef1sz9P5UO+3o76r9n3COyRJ/9f2Z+vrddT7z3a/mI3xEOuyl/h8teW4
zt/afPgJ3lh+fH3fIbHx9H59ifXrmLj72P/+YcGb5htvn98///l14X31yc+6
fqPffHiH05T92LbZ1s9s60+29Wq284UzzbbeQmbmYwaL7/cD6JzPW/ri53FG
Mtvz+tmep/Oh3m911M7f2vcJ75CTbXSR440j/IJOLvr63x7hHXKy645iY8ux
7p/afPgJUsX1ZY/l1ZOCwi8HWD8ymPlbAj5//n3Pmw3w/adAvefDO5ym7Mde
9s9U62e29SfbejXb+cKZZltvITPzMYOXV6HkEuh5gEA+b+mLn8cZSe360/t6
5Xn6hAau92s9f2uP8A45WUnNZGEJ5cMj2/u3fj38gk7OeIi13lc87J+bOV6b
Dz/BG1VNStj+1nq/vsRajnte41sCPn7+/Odm9n3efQS0/Fy/0WM+vMNpyn5s
22zrZ7b1J9t6Ndv5wplmW28hM/Mxg5dX4eUl0PMAsXze0hc/jzOS2vWn9/Vq
tufpfAxd7/ds3i1Pjtr5W/s+4R2SpP9r+7P19Trq/We7X8zGeIg12/6kqkkJ
299a79eXWIvvZzjU56PPfx7+40b9Rkf58A6nKfuxbbOtn9nWn2zr1WznC2ea
bb2FzMzHDF5ehZJLoOcBAvm8pS9+HmcktetP7+vVbM/T+VDvtzpq52/t+4R3
SJL+r+3P1tfrqPef7X4xG+Mhlv0Ja64veyy+n+FQn8nqPVrnwzucpuzHts22
fmZbf7KtV7OdL5xptvUWMjMfM3h5FV5eAj0PEMvnLX3x8zgjqV1/el+vPE+f
kHq/61E7f2vfJ7xDTvasfxzvHeEXdHLR1//2CO+Qk822P6lqUsL2t9b79SXW
4vsZDvV59zc4LN8/8FlPxmf1Gz3mwzucpuzHXvbPVOtntvUn23o12/nCmWZb
byEz8zGDl1eh5BLoeYBAPm/pi5/HGUnt+tP7ejXb83Q+hq73az1/a4/wDjlZ
Sc3ky+LJjSPb+7d+PfyCTs54iDXb/qSqSQnb31rv15dYi+9nONTnz5//3Pym
529r8vP6je7y4R1OU/Zj22ZbP7OtP9nWq9nOF84023oLmZmPGby8Ci8vgZ4H
iOXzlr74eZyRzPa8frbn6XwMXe/3ckDeHLXzt/Z9wjskSf/X9mfr63XU+892
v5iN8RDL/oQ115c9Ft/PcKjPzc9/bl5fXtVv5M+HdzhN2Y9tm239zLb+ZFuv
ZjtfONNs6y1kZj5m8PIqlFwCPQ8QyOctffHzOCOZ7Xm95+kTUu93PWrnb+37
hHdIkv6v7c/W1+uo95/tfjEb4yHWbPuTqiYlbH9rvV9fYi2+n+FQn48+//m2
+oseSuo3OsqHdzhN2Y9tm239zLb+ZFuvZjtfONNs6y1kZj5m8PIqvLwEeh4g
ls9b+uLncUYy2/P62Z6n86Heb3XUzt/a9wnvkJNtdJHjjSP8gk4u+vrfHuEd
crLZ9idVTUrY/tZ6v77EWnw/w6Eefv5zmYYPPxTqPR/e4TRlP/ayf6ZaP7Ot
P9nWq9nOF84023oLmZmPGby8CiWXQM8DBPJ5S1/8PM5Iatef3ter2Z6n8zF0
vV/r+Vt7hHfIyUpqJgtLKB8e2d6/9evhF3RyxkOs62Zje85e/1ybDz9Bqri+
7LH4foZDfSb7+xxb58M7nKbsx7bNtn5mW3+yrVeznS+cabb1FjIzHzN4eRVe
XgI9DxDL5y198fM4I5nteb3n6RMauN7v2bzbGKtV87f2fcI7JEn/1/Zn6+t1
1PvPdr+YjfEQ6+Vm4zptL3+ozYef4I1Lk142rDA2nt6vL7EW389wqM/vn/8s
jz7qWb94+fPyo36j33x4h9OU/di22dbPbOtPtvVqtvOFM8223kJm5mMGL69C
ySXQ8wCBfN7SFz+PM5LZntfP9jydD/V+Pw/Uqvlb+z7hHZKk/2v7s/X1Our9
Z7tfzMZ4iFWy2bjO3OX7/qQqH36CN6qalLD9rfV+fYlVOHjePsJP8GSfj37f
85nlyfc1dZQP73Cash/bNtv6mW39ybZezXa+cKbZ1lsCfR3hbUjOfMxg8f1+
AJ3zeUtf/DzOSGZ7Xj/b83Q+1Pv9PEqr5m/t+4R3yMkKFwdH4RF+QScXff1v
j/AOydz/G+vzs3z4CT475cI/zGaA60u4qlFUeISf1DA9mfkI73CaMh5a9FK/
PdniTM88Zuuf8AEDhzNTaO16hLckP/MxvP99vx9A19wl++J6MZLa8dz7+K9q
/BjP0xm43q9qfJ5whHfIyVrUSM/8evgFhQN9jerLVwSXuMyLpvnwDqGK68t+
i+8HAHiL9RPgHNZbmro5wtuTXL/zcYznHf32P9Avnz8Dz4yxv2JUnqdPqKN6
v/Vwehm48bCeKjBf0v7wDt8pW71c76+HX1A40GXZLNw8LN+/T7hpPrxDqOL6
st/i+wEA3mL9BDiH9ZZ2Hh7hrcqs3/m4bvnhQs6ir/4H+uXzZ+CZMfZXjMrz
9Al1VO+3rqN7GFjX3a1t1ONF5UvaH97hR12vJPVyvb8efkG747chMvf/tVK6
ZPNw2W80zYd3F1Vc395lWJ/3Py/4g+8HIKUM82tmM/S/9RPeM8P6wLGst1V9
ZX694ahKvxn6v9/5+OtVuWvJfePf1E+93zzrIXCU/J8/z3D/zUz/z2yM/RXt
xK4PnqdPSL1fSL6k/eEdvtPiOPQIv6AdufTYzS9E6MNU/X/dIWxsIdbjv3U+
vNOo4vr2K8/6vPh+AIaTZ37NaZ7+t35CrXnWB45lvS3sJfPrbfvr/ebp/37n
48uWFzZ+3f6EZ5G2/4F+Zf78eZ77b076nzH2V7SQYX3wPH1Cf5ij3m95dATm
S9of3uFHXa8l33fl9fh6+AXtxfL8i5TdhvL0/3qf8HD8X6bA/X6jUT6836ji
+nYq1fq8+H4AxpJqfk1oqv63fkKVqdYHjmW9reoi8+sNO+v9pur/fufjy5aX
ND7/WaTtf6BfaT9/nur+m5D+52OU/RWHS7I+eJ4+ocswC29Gieug2vP9fkle
L2l/eIcfdb2S1Mv1/nr4Be3Cxs3UTilV/6v3Yw/Xt0fZ1uf9zwv85h15ZJtf
s5mt/62fUG629YFjWW/L+8f80v9nnm9f8/HA59HXZMKzSNv/QL9yfv482/03
G/3PxRj7K46VZ33wPH1ClzEW3owS10Gl3q8LtfVsXt9+PfyC5vfyZmqzlKf/
1fuxh+vbnYTr8/7nBeuMmwuBEs6vqUzY/9ZPKDTh+sCxrLeFnWN+6f+TT7mv
+Xjg8+jMZ5G2/4F+Jfz8ecL7byr6n6sx9lccKNX64Hn6hC4DLLwZJa6DSr1f
FxbHoUf4Bc1vyXQ/nVBV/6v3Yw/XtzsJ1+fF9wMwioTzayoT9r/1EwpNuD5w
LOttYeeYX2+4OfR/1Sn3NR9ftryw8ev2JzyLtP0P9Cvh588T3n9T0f9cjbG/
4kCp1gfP0yd0GWDhzSjxcODduCuS6jgf3uE7PVsQvP7e6+EXNLml7GZqv5Sk
/9X7sYfr25ec6/Pi+wEYQs75NY85+9/6CSXmXB84lvW2pGfMr/esy/xqS/7m
7P9+5+PLlpc0Pv9ZpO1/oF/ZPn+e8/6bh/5nbYz9FUfJtj54nj6hy+gKb0aJ
bPVX6rtcL+Mhj2z309nU9r96P/ZwffuSc33e/7zAb96RQc75NY85+9/6CSXm
XB84lvW2pGfMr/fc1PhVlfzN2f/9zscDn0dfkwnPIm3/A/3K9vnznPffPPQ/
a2PsrzhKtvXB8/QJXUZXeDNKZKu/Ut/lehkPeWS7n86mtv/V+7GH69uXnOvz
/ucF64w7C1Fyzq95zNn/1k8oMef6wLGstyU9Y369R71frX7n44HPozOfRdr+
B/qV7fPnOe+/eeh/1sbYX3GUbOuD5+kTuoyu8GaUyFZ/pb5r2+I49Ai/oMkt
ye6ns6ntf/V+7OH69iXn+rz4fgCGkHN+zWPO/rd+Qok51weOZb0t6Rnz6z3q
/Wr1Ox9ftryw8ev2JzyLtP0P9Cvb589z3n/z0P+sjbG/4ijZ1gfP0yd0GV3h
zSjxrA5q1CO8w3fKUDM50uvhFzS5Jdn9dDa1/X/dPGysgestROt8eAdSxfXt
y5JyfV58PwBDyDm/5jFn/1s/ocSc6wPHst6W9Iz59Z51gV9Vsd+0/d/vfHzZ
8pLG5z+LtP0P9Cvb589z3n/z0P+sjbG/4ijZ1gfP0yd0GV3hzSiRrf5KfZfr
ZTzkke1+Opva/n+5ebjZQrTOh3cgVVzfviwp1+fF9wMwhJzzax5z9r/1E0rM
uT5wLOttSc+YX++5OfR/1Vn3NR9ftryw8ev2JzyLtP0P9Cvb589z3n/z0P+s
jbG/4ijZ1gfP0yd0GV3hzSiRrf5KfZfrZTzkke1+Opva/i/ZPKy3EK3z4R1I
Fde3L0vK9Xnx/QAMIef8msec/W/9hBJzrg8cy3pb0jPml/4//6z7mo+FH568
feh/YFTZPn9eprz/5qH/WWuzq/rLEX6CVMm2PniePqHL6ApvRols9Vfqu7aV
37kcJUf4BU1uSXY/nU1t/1cdn6svCm6UD+9Aqri+fVlSrs+L7wdgCDnn1zzm
7H/rJ5SYc33gWNbbkp4xv/T/+Wfd43ys+hSl8ND/wNiqlsQTPn9eprz/5qH/
uXf45srI6VS29aFqyHmePobL6ApvRomq8TbAEd7hO91XM94cx9ZM9v7+L18P
v6DJLcnup7P5GqWXr/wtcRnnqfLhHUgV46EvOdfnxfcDMISc82sec/a/9RNK
zLk+cCzrbUnPmF8P+6f1MWH/9z4ftX/U9RBoJ9vnyXPef/PQ/9yzP+Ei2/rg
+emELqMrvBklWtdTqe9qdL22PyPa32+9v/8k46G1bPfT2Xzd5T/LtgSXiZMt
H96BVDEe+pJzfV58PwBDyDm/5jFn/1s/ocSc6wPHst6W9Iz5tbN/al1+ZJ6w
/3ufj9o/6noItJPt8+Q577956H/u2Z9wUbs+/N+/rlPbHs9PJ3QZXeHNKNG6
nkp9V4vrtd2Z1y59u996f/95xsO9dR8e8m7224Eu9/qXW4LrFc+WD+9AqhgP
tY5db9/4rydcnxe/f0cQ+5+RnN//teOnxfpv/aQX9j/0znpb0jPm18P+uR8J
94PnTd8P+5/u5qP2j7oePuyrgT/dgjPt/zzZ5z8jmXP/w8s+tz9Joq/Pf06o
9/P8dDaX0RXejIvt+di6nkp9V7ur6dh/hF/Qw8fGzQ1u5zkuft4Jdb3jb2wJ
1uM5Wz68A6liPJRrsd6+0YaE6/Pi9+84nf3PeM7s/9rx0279t36Sn/0PY7De
lvSM+bXdPxv1fi8Hz3r8rEeR/U+P81H7R10Pb3opfP8DI9nzebLPf8Yz5/6H
l1fK/iRchvG/c324HPd/fpvnpxO6jK7wZpTMx2WyI/yi7FRYPHk53quN7P39
q14Pv6BHWZ7f+JYdw37jbf28c4L1ff/heL6ZUNny4R1IFeOhUKP19sBmBDZs
2f3z+DrjzsJL9j9DOq3/a8dP0/Xf+kly9j8Mw3pb0jPm13b/7Kz3eziK7H96
nI/aP+p6+LCLLINwiLc/T/b5z5Dm3P9QfrHsT8IvQeD437k+fPvj73+q9/vj
73e2x/PTCV1GV2wbCudj63qqT/VdhzqhP3t//6nGw8Xy6q63vHunePnONrpN
Zavfsz8Zm/FQot16e3hLwlvl9+9ozf5nVOf0f+34ab3+Wz/JzP6HkVhvS3rG
/Nrun531ftfkehTZ//Q4H7V/1PXwvn+shHCU9z5P9vnPqObc/1B+vexPYvs/
dvzvXB9uCvzU+/GGy+gKbED5fGxdT/WpvuvoK1t11PZP7+8/23j4KL7lLW/d
LArf3K6pkWz1e/YnYzMeXmq63jZqTOBPYX7/jqbsfwZ2Qv/Xjp8T1n/rJ2nZ
/zAY621Jz5hf2/2zs97v4Siy/+lxPmr/qOvhR7L9D4zkjc+Tff4zsDn3P5Rf
MvuTwM4PH/871wf1fux3GV1R//Wq+di6nmqpPNR3vby4jgOP8At6yJAI3wzb
NTWSrX7P/mRsxsNLTdfbRo05eX1edv887vfvKGT/M7AT+r92/Jyw/ls/Scv+
h8FYb0t6xvza7p+d9X7X5HoU2f/0OB+1f9T18CPZ/gdGot6Pk/s/4f6H8ktm
fxLY+eHjf8/68LC6b2fJn+enE7qMrqj/etV8XCY7wsfG/otbddTWRvb+/rWv
h1/QQ4ZE0/tv6/dnQ7b6PfuTsRkPL2VbD7O15+OIn8fXGTcXNtj/jC3b9T1h
PFg/SSvbepitPXTHelvYOebXRufsrPd7Norsf7qbj9pvPRzplOEc2er9Tnh/
Yvs/4f6H8ktmfxLY+RnG/9vtUe/HIS4DLOq/XjX+W9dT1R7qu15e3Kb92fv7
zzYePvLthzlQtvo9+5OxGQ8vZVsPs7Xn44ifx/3+HYXsf8aW7fqeMB6sn6SV
bT3M1h66Y70t7Bzza6Nzdtb7XZM3o8j+p7v5qP3Ww5FOGc6h3o+T+z/h/ofy
S2Z/Etj5Gcb/2+1R78chLgMs6r9eNf5b11PVHuq7Xl7cpv3Z+/vPNh4+8u2H
OVC2+j37k7EZDy9lWw+ztefjiJ/H1xk3FzbY/4wt2/U9YTxYP0kr23qYrT10
x3pb2Dnm10bn7Kz3ezaK7H+6m4/abz0c6ZThHOr9OLn/E+5/KL9k9ieBnZ9h
/L/Xno26vj0lf56fTugywKL+61Xjv3U9Ve2hvuvlxXUceIRf0KNGRdObb+v3
55ls9Xv2J2MzHkpkWw8zt8fv39Ga/c/Ysl3fM9tj/SSbbOthtvbQF+ttef+Y
X896Zme93zV5P4rsf/qaj9pvPQxvJHTnvc+Ts90fOVa262s8xLI/ydP/GcZ/
bXt+PTbr/b7+9/da4vnphC5jLLAB5eN/mewIHxv7r2zVUVsb2fv7174efkEP
HBUbk33ZvR9u+v48c90MbM+R65+z5cM7kCrGQ4nLueRZDxO2Z+fP4+uMn8fZ
1nr8Z5tfs8l2fU9oj/WTtLKth9naQ1+sty/7x/x61jPbI6dk8LwcRfY/fc1H
7bcehjcSuvPe58nZ7o8cK9v1NR5i2Z+E93+q8V/bnsvx7N22/9dtnp9O6DLM
AhtQPv5b11NtDONnY1t918sr264/e3//2cbD/cC4n+nLEbeJ1u/PQy83A9dp
cvlDtnx4B1LFeCh0PbUk62Gq9iy7fx73+3dUaT3+U82vCWW7vk3bY/0kuWzr
Ybb20BHrbUkXmV8Pu2V75BQOnvX4eTiK7H86mo/abz0Ear39eXK2+yPHynZ9
jYdA9ifhso3/qva0rvd7fuP67fD8dCSXwRbbhsLxr96vL637s/f3n208lIyN
Xt6feyWbgetMWb7vH1LlwzuQKsZDuWdnqj2L37/jdK3Hf575Nads17dde6yf
5JdtPczWHnphvS3sJfOrsE+OOs7s/9r3b9eepfP5qP3WQ6DWns+TW89H8z1W
tutrPERZ7E8SyDb+y9vT9O/zfdaMm8Pz02FkqPf7KBv/6v36Utufju0j/IKe
MDw6en9KOvzZUbvenpAP70CqGA/7u0t7Fr9/R4TW4z/J/JpWtuvbqD3WT7qQ
bT3M1h66YL0t7yjzq7Bbdh4h/V/7/o3as3Q+H7XfegjUqrpF3n+enO3+yLGy
XV/jIcRif5JDtvFf3p7ter9jG/Ds8Px0DEnq/T4Kxn/VeBvgCL8iLS7oxlFb
G9n7+9e+Hn5Bjx0b178Ofv33wke9/9f/+tXJ1+TLPs+Wb2HdgJcu47br/Jl9
y34jjYfW60Pr9bBW6/W/qiV+/46T2f/k3/+MdH3btcf6yX72P34GoYT1trCX
7H8Cx4/9Ty/zUfszrIez7X+gd3s+T852f8y2n+l9/cl2ff28GWWM/Ulrs+1/
qtvzqK5vT7Hfx1jPT9l/fc9sW8n4b11PVXu0bs/63Hvc/7Tuz97ff8946N3y
83xffnxbbNT7r+dXSZ9ny7dws+Zs3ywuPdx1/sy+Zb+RxkPr9aH1elir9fpf
1RK/f8fJ7H/y739Gur7t2mP9ZD/7n6j9D32x3hb2kv1P4Pix/+llPmp/hvVw
tv0P9G49R7bdf56c7f6YbT/T+/qT7fr6eTPKGPuT1mbb/1S3p0G9X+39a8/9
jvNlvl4l4/+mAuo6B496vfZo3Z5n166X/U/r/uz9/feMh94tCfbDl469Zh7O
r/WbZMu3vkY3zdi+WVzb1m8+fFJQpffxcOb60GI93HPurdf/qpb4/TtOZv+T
f//T+/U9pz3WT95j/5Nh/0NfrLeFvWT/Ezh+7H96mY/aH9X+mfc/0LubafLM
w8+TM9wfs+1nRlp/MlzfM9vDRs93uj9pbeb9T+18bFTvV3X/2nO/43yZr1f5
fLyxjFvv1/v+540udWwc4Rf05Pne+v3X0+3Z/Ho4N5PkW1+j+5Vn42ax7vBO
8+GTgiq9j4cz14cW6+Gec2+9/le1xO/fcTL7n/z7n96v7zntsX7yHvufDPsf
+mK9Lewl+5/A8WP/08t81P6o9s+8/4HeXWfTdabce/Z5cob7Y7b9zEjrT4br
e2Z72Oj5Tvcnrc28/3ljPt5U9+0s9vvo//kpx17fM9tWMv6XyY7e9z9vn+/y
ZJ2/eb339699PfyCnjzfW7//+to9m1/Pjgz51tdo3YHP9l03be46Hz4pqNL7
eDhzfVgarIc7z73p+l/VEr9/x8laj/8W8z1bPvwiJr++57TH+sl7zlwfSsb/
metP6/WBUVlvC3vJ/idw/LRe32rfv117ep+P2h/V/jPXh5Lxf876A2PY83ly
hvtj6/WndT58AOzs/zPfv3V72Oj5TvcnJ/TMaetDyfg/c/15Yz62q/crvH/t
ud9xvszXq2T8rxv5rPF7Xt9YXh4eZ7anx/1P6/7s/f1rXw+/oIePjZspvxy6
H656/2fzq5d8C633A9nyZ/Yt+400HlqvD63Xw1qt1/+qlvj9O05m/5N//zPS
9W3XHusn+9n/+BmEEtbbwl6y/wkcP/Y/vcxH7c+wHs62/4He7fk8Odv9Mdt+
pvf1J9v19fNmlDH2J63Ntv95Yz5+++Pvv3378edv6v04+Pqe2baS8b9u5LPG
73l9qTxat+fm2nW3/2ndn72//57xMIDlR03v9Q+B75/t55cM8731fiBb/sy+
Zb+RxsMJ60PT9fANrdf/8mb4/TvOZ/+TfP8z0vVt1x7rJ/vZ/xj2lLDelneU
/U/g+LH/6WI+an+G9XDC/Q90befnyanuj9n2MwOsP6mu7wnt4Vm3D7A/aW3C
/U/tfLwc93/e0+fDPD9l//U9uXkvx/+6kc8av+f1pfJo3Z6ba9fd/qe2Px3b
R/gFPXZsfPvxNZ7XPxx4jrXvf51f1/9fuN9Ikm+h9X4gW/7MvmW/kcZD6/Wh
9XpYq/X6X9USv3/Hyex/8u9/Rrq+7dpj/WQ/+5+o/Q99sd4W9pL9T+D4sf/p
ZT5qf4b1cLb9D/Ruz+fJ2e6P2fYzva8/2a6vnzejjLE/aW22/U9Je/7vXy9V
3ujzqvvXnvsd58t8vUrG/zLZcXPtutv/1J7vswH5cqB2+v61r4df0MPn+40D
z7H2/bP9/JJhvrfeD2TLn9m37DfSeDjn551262Gt1ut/VUv8/h0ns//Jv/8Z
6fq2a4/1k/3sf6L2P/TFelvYS/Y/gePH/qeX+aj9GdbD2fY/0Lv1VKr9PDnb
/THbfqb39Sfb9fXzZpQx9ietzbb/KWmPej/2yHy9Ssb/swYf9Xrt0bo9N9eu
u/1P6/7s/f33jIfeLT/P96XN77+Uv3+2n18yzPfW+4Fs+TP7lv1GGg8n/7xz
+HpYq/X6X9USv3/Hyex/8u9/Rrq+7dpj/WQ/+5+o/Q99sd4W9pL9T+D4sf/p
ZT5qf4b1cLb9D/Ruz+fJ2e6P2fYzva8/2a6vnzejjLE/aW22/U9Je57dUJ69
/kafV92/9tzvOF/m69Vi/Ne+Xnu0bs/Ntetu/9O6P3t//z3joXdLgv3wpWPX
S+L9/LpfM/PkW1+j1vuBbPnwSUGV3sfDmetDi/Vwz7m3Xv+rWuL37ziZ/U/+
/U/v1/ec9lg/eY/9T4b9D32x3hb2kv1P4Pix/+llPmp/VPtn3v9A7+7nZvnn
yRnuj9n2MyOtPxmu75ntYaPnO92ftDbz/qe8Pfc3lGev17ah9v61537H+TJf
rxbjv/b12qN1e3rf/7zRpY6NI/yCnjzfW7//ero9m1/P1skM+dbXqPV+IFs+
fFJQpffxcOb60GI93HPurdf/qpb4/TtOZv9z7PqWTYbre057rJ+8x/4nw/6H
vlhvC3vJ/idw/Nj/9DIftT+q/TPvf6B3ez5PznB/zLafGWn9yXB9z2wPGz3f
6f6ktZn3PyXtWSqP2jbU3r/23O84X+br1WL89370vv95+3yXJ+v8zeu9v3/t
6+EX9OT53vr919fuOrPWy+PGtc6Qb32N1r337Fi3qvd8+KSgSu/jYf3fbb0+
LA3Ww53nnuTzh8Xv33G61uO/xXzPlg+/iMmv7zntsX7ynjPXh5Lxf+b603p9
YFTW28Jesv8JHD+t17fa92/Xnt7no/ZHtf/M9aFk/J+z/sAY1rPp2fHs8+QM
98fW60/rfPgA2Nn/Z75/6/aw0fOd7k9O6JnT1oeS8X/m+lPSntb1IbX3rz33
O86X+Xq1GP+1r290y7O+Oq09Pe5/Wvdn7+/fej3P7NJjN1N+OXQ/XPX+z+ZX
L/kWXt4srsN+3dv95s/sW/YbaTy0Xh/WPdBiPaxV2552Fr9/x+laj//W8z1b
Ppts17dde6yf7Gf/E7X/oS/W28Jesv8JHD/2P73MR+3PsB7Otv+B3u35PDnb
/THbfqb39Sfb9W3dHjZ6foD9SWuz7X9K2tO6PqT2/rXnfsf5Ml+vFuO/9vWX
PXPfUU3bc3Ptutv/tO7P3t+/9Xqe3PKjpvf6h8D3z/bzS4b5XnKzuI78dW93
mj+zb9lvpPFwwvqwtFwP31DVnnYWv39HhNbjv+l8z5ZPKNX1bdce6yf72f8Y
9pSw3pZ3lP1P4Pix/+liPmp/hvVwwv0PdG3n58mp7o/Z9jMDrD+pru8J7eFZ
tw+wP2ltwv3Py/a0rg+pvX/tvN9xsuTX6/DxX/t6Yeese6lpe26uXXf7n9r+
dGwf4Rf02LHx7cfXeF7/cOA51r5/tp9fMsz3qsFZu34mzJ/Zt+w30nhovT4s
jdfDN65d0/W/qiV+/46TtR7/red7tnw22a5vu/ZYP9nP/scjGEpYbwt7yf4n
cPzY//QyH7U/w3o42/4HelfxafLd58nZ7o/Z9jO9rz/Zrq+fN6OMsT9pbbb9
T0l7qu4vb7St9v5Vmw8fVJPLfL2WBuO/92N97j3uf9YNvrF8H2DrVy5nJC8v
Ly8vLy8vLy8vLy8vLz9VPvwDHJ//yHc0PrP1j7y8vLz8N/cL+eHGW7bzlZeX
l5eXl5eXlz8zf/237i3f6zm3X5GXl5eXl5eXl5eXl5eXl5cfPh/+QHynbP0p
P/b4zNY/8vLy8vKf7hfyw423bOcrLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8v
Ly+fJx/+QNzzUPmOxme2/pGXl5eX/3S/kB9uvGU7X3l5eXl5eXl5eXl5eXl5
eXl5eXl5eXl5eXl5+Tz58AfinofKdzQ+s/WPvLy8vPyn+4X8cOMt2/nKy8vL
y8vLy8vLp8ov3/8WYHl5eXl5eXl5eXl5eXl5eflp8+EPxFs/D03e//J9jc9s
/SMvLy8v/+l+IT/ceMt2vvLy8vLy8vLy8vJ58pf/fz2+/lFeXl5eXl5eXl5e
Xl5eXl5+tnz4A/Gmz0Pz9798X+MzW//Iy8vLyy/uF/LDjbds5ysvLy8vLy8v
Ly+fJ//1v64tBfWE8vLy8vLy8vLy8vLy8vLy8oPlwx+IN30emr//5fsan9n6
R15eXl7+m/uF/HDjLdv5ysvLy8vLy8vLy6fKb78iLy8vLy8vLy8vLy8vLy8v
P3w+/IF46+ehyftfvq/xma1/5OXl5eU/3S/khxtv2c5XXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl4+Tz78gbjnofIdjc9s/SMvLy8v/+l+IT/ceMt2vvLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8nny4Q/EPQ+V72h8ZusfeXl5eflP
9wv54cZbtvOVl5eXl5eXl5eXPzN/OUrC8vLy8vLy8vLy8vLy8vLy8nPmwx+I
75StP+XHHp/Z+kdeXl5e/tP9Qn648ZbtfOXl5eXl5eXl5eXPzH+9+OX+35KX
l5eXl5eXl5eXl5eXl5eXv7wY/kB8p2z9KT/2+MzWP/Ly8vLyn+4X8sONt2zn
Ky8vLy8vLy8vL39y/usP63/rctyH5eXl5eXl5eXl5eXl5eXl5efMhz8Q3/88
NFV/yo89PrP1j7y8vLz8p/uF/HDjLdv5ysvLy8vLy8vLy5+fv7j8W5d/UV5e
Xl5eXl5eXl5eXl5eXl7+kg9/IH7I89A8/Sk/9vjM1j/y8vLy8p/uF/LDjbds
5ysvLy8vLy8vLy8fld9+ffl+yMvLy8vLy8vLy8vLy8vLy8+WD38gfuDz0Az9
KT/2+MzWP/Ly8vLyl3z4DcL9Yqq88SMvLy8vLy8vLy/fLn/9w/r4/F4r+PB1
eXl5eXl5eXl5eXl5eXl5+dny4Q/Ed8rWn/LH5sMHmPEmLy8v30U+/AbhfjFV
3viRl5eXl5eXl5eXb5r/9uNrAG9c/8UreXl5eXl5eXl5eXl5eXl5+Qnz4Q/E
9z8PTdWf8mOPz2z9Iy8vLy//zf1Cfrjxlu185eXl5eXl5eXl5c/MX/+te8vd
twLevyIvLy8vLy8vLy8vLy8vLy8/fD78gfhO2fpTfuzxma1/5OXl5eU/3S/k
hxtv2c5XXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4+Tz78gbjnofIdjc9s
/SMvLy8v/+l+IT/ceMt2vvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8nny
4Q/EPQ+V72h8ZusfeXl5eflP9wv54cZbtvOVl5eXl5eXl5eXT5Vfvv8twPLy
8vLy8vLy8vLy8vLy8vLT5sMfiLd+Hpq8/+X7Gp/Z+kdeXl5e/tP9Qn648Zbt
fOXl5eXl5eXl5eXz5C///3p8/aO8vLy8vLy8vLy8vLy8vLz8bPnwB+JNn4fm
73/5vsZntv6Rl5eXl1/cL+SHG2/ZzldeXl5eXl5eXl4+T/7rf11bCuoJ5eXl
5eXl5eXl5eXl5eXl5QfLhz8Qb/o8NH//y/c1PrP1j7y8vLz8N/cL+eHGW7bz
lZeXl5eXl5eXl0+V335FXl5eXl5eXl5eXl5eXl5efvh8+APx1s9Dk/e/fF/j
M1v/yMvLy8t/ul/IDzfesp2vvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLx8
nnz4A3HPQ+U7Gp/Z+kdeXl5e/tP9Qn648ZbtfOXl5eXl5eXl5eXl5eXl5eXl
5eXl5eXl5eXl5fPkwx+Iex4q39H4zNY/8vLy8vKf7hfyw423bOcrLy8vLy8v
Ly8vf2b+cpSE5eXl5eXl5eXl5eXl5eXl5efMhz8Q3ylbf8qPPT6z9Y+8vLy8
/Kf7hfxw4y3b+crLy8vLy8vLy8ufmf968cv9vyUvLy8vLy8vLy8vLy8vLy8v
f3kx/IH4Ttn6U37s8Zmtf+Tl5eXlP90v5Icbb9nOV15eXl5eXl5eXv7k/Ncf
1v/W5bgPy8vLy8vLy8vLy8vLy8vLy8+ZD38gvv95aKr+lB97fGbrH3l5eXn5
T/cL+eHGW7bzlZeXl5eXl5eXlz8/f3H5ty7/ory8vLy8vLy8vLy8vLy8vLz8
JR/+QPyQ56F5+lN+7PGZrX/k5eXl5T/dL+SHG2/ZzldeXl5eXl5eXl4+Kr/9
+vL9kJeXl5eXl5eXl5eXl5eXl58tH/5A/MDnoRn6U37s8Zmtf+Tl5eXlL/nw
G4T7xVR540deXl5eXl5eXl6+Xf76h/Xx+b1W8OHr8vLy8vLy8vLy8vLy8vLy
8rPlwx+I75StP+WPzYcPMONNXl5evot8+A3C/WKqvPEjLy8vLy8vLy8v3y7/
/wHUugAm
    "], {{0, 240.}, {3408., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{3408., 240.},
  PlotRange->{{0, 3408.}, {0, 240.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236708644404*^9}},
 CellLabel->
  "Out[471]=",ExpressionUUID->"87b2d136-d1f3-4556-8349-c8378796a6fa"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
z+9gKtYLRvL9+fPXtq+Yrvmb75qefQfleqHru9qrtLTywBHuF9pKu993ve11
YLs39vNF87T1xjy863lK2nw+2+dlXdp+pvT13llfWErbz6TlCXT5tqd1KYrY
u+6ctX6Nut7tVXo/kPb+9kssff16v/bjL17eqTnv1yPzA0d8fn7+9Ef3j+F+
epfndzAV6wUjuXx39PXqK6b7/PJ1jble7XrIl4Fp5YEj3C+0Vfr+3fW+rgPb
vb2fL5SnrTfm4V3PU9Lm89k+L+vS9jOlr/fO+sJS2n4mLU8g5/1e5s96H2Ae
X3/877NuJgS/7wczW/5ex8rzuy0P8q7Ja97zOwA6df0GaeUrpvv87TZ78Sau
V7i+vb3S+g8kc78AQI/e28+Xy9OX2Z6nzPZ5IZn1haW0/UxankADn/ejrS1n
Jo8ciUx7/9LX95aftpY3ZTcteH/L1rCcvMf8wBEnPr+7eXjn+R3MxnrBSJbf
Iz3szzd9+GHy2Tu4Xuj69vZK6z+QzP1CW3v3V66Pfb1m34PevbefL5enrTfm
4V3PU9Lm89k+L+ta7VtaXW9Vz2exvrCUtp9JyxNo4PN+e9eds9avUde7vUrv
B9Lev/T1veWnra9H92sP/9Z5vx6ZHzjC73UAZ7FeMBLn/Xq8nvN9YFp54Aj3
C23t3V+5Pvb1mn0Peud5NEtvzMO7nqekzeezfV7Wtdq3tLreqp7PYn1hKW0/
k5YnkPN+L/Nnvc/5nzBb6f1A2vuXvr63/LT15bzf0MwPHOH3OoCzWC8Yydvf
Rz18B9erXQ/5PjCtPHCE+4W20u73XW97vWbfg955Hs3SG/Nw1+ffZvu8rGu1
b2l1vVU9n8X6wlLafiYtTyDn/V7mz3qf8z8hkOrr0Z/Ye71Z+3LeDybm9zoA
4J7vl/qS1l5p5YEj3C8A0CPPozlitucps31eSGZ9YSltP5OWJ9DA5/1o69mE
cNZEkfb+pa/Tl68/3q/d/JdZF+7X+mV+4Ai/1wGcxXrBSHy/1Je09korDxzh
fqGttPt919teB7bzPJqlN+bhXc9T0ubz2T4v69L2M6Wv9876wlLafiYtT6CB
z/vt7ZBnrV8GwkXp/UDa+5e+Tl++Vu/Xbq63Liy7mR84wu91AGexXjAS3y/1
Ja290soDR7hfaCvtft/1tteB7TyPZumNeXjX85S0+Xy2z8u6tP1M6eu9s76w
lLafScsTyHm/l/mz3mc2pfcDae9f+jp9+Xp0v7b8YXbn/bpmfuAIv9cBnMV6
wUh8v9SXtPZKKw8c4X6hrbT7fdfbXge28zyapTfm4V3PU9Lm89k+L+vS9jOl
r/fO+sJS2n4mLU8g5/1e5s96H2AeX8//+6xnN3HAJPxeBwDc8/1SX9LaK608
cIT7BQB65Hk0R8z2PGW2zwvJrC8spe1n0vIEGvi8H20tJ4Fnk8ORuSLt/Utf
31t+2np4X3ZtSvdrvTM/cITf6wDOYr1gJNcvl1YyunGOtPZKKw8c4X6hrbT7
fdfbXq/Z96B3e/djpfO09cY8/N6fb7vx/X1eakrbz5S+3qqez2J9YSltP5OW
J9DA5/32rjtnrV+jrnd7ld4PpL2//RJLX7/er308Odq3/Fvn/XpkfuAIv9cB
nMV6wUhefrl0oSeHSGuvtPLAEe4X2kq733e97fWafQ96t3c/VjpPW2/Mw7ue
p6TN57N9Xtal7WdKX29Vz2exvrCUtp9JyxPIeb+X+bPe5/xPmK30fiDt/e2X
WPp69N9nPXu1Liy7mR844rOw1p8PqMd6caJRb4o7suXLpQudOUFae6WVB45w
v9BW2v2+622v1+x70Lu9+7HSedp6Yx7e9TwlbT6f7fOyLm0/U/p6q3o+i/WF
pbT9TFqeQM77vcyf9T7nf0IAoE+e3AHkuP5cUuuCsJX7676ktVdaeeAh9wsA
DGzvfqx0HgC2sL6wlLafSctTh+caFJLw3xSMdB2gFyWeTI33lOrz1Z/S9fKP
6Fpm/Mlc8B7zFR+Lw35ujc/14y7m8kdCbHm9kaettPZKKw8c534BgLZK7+fd
LwBQgvWFpbT9Se95AnX0UONld1rpfg/PUzXMbyl/sYqsJO28XO/XAXqxfDJ1
umGeUh1/fnfzCG+YmoGazFc8bLvWhRrE5TZ5+5dFe/O0ldZeaeWB49wvANBW
6f28+wUASrC+sJS2P+k9T6COnmgsz9E9DHwvzt0tX9/Pz+O1ym8pf7GKrCTt
vFzv19nLr+u0pf5n9qPR7x8z3T+ces8wPWrm3+swP5BjvPnK+HrPWSf91P/S
5bugr1dfGb2dp6209korzz3zA3vNfL+wl/HVlvqHUZXez7tfgCOsv22p/2TW
F5bS9ie95wnkvF+T/JbyF6tIGNxlj738Gtyuuyb1z8snU1seTt08ovppuF+l
OP78rseaMT+QZqT5yvg64lppb7+D+r93/UZo5SujI3naSmuvtPIsmR94z5z3
C3sZX22pfxhb6f28+wV4j/W3LfWfz/rCUtr+pPc8gQ4+16jpyHm/HvMbqiTa
wzOQNx/Q9e3XW7Rhlz6f/8F8ttwVqH8+Tj0/89O4v0px/PlddzVjfiDQMPOV
8XXQtbre+8fV/0PL74Ue3u/c3OPszdNWWnullefK/MDbJrxf2Mv4akv9w/BK
7+fdL8AbrL9tqf8uWF9YStuf9J4n0GUZal2KTa6d6o3zdWnXt5S/ZF3WsPwg
zyYH17dfb9GG/VnZbNtyV6D+uRjp97LKme33OswPZBpjvjK+2lL/z/h+aWxp
7ZVWngvzA0fMdr+wl/HVlvqHGaQ9X87c70FN1t+21H8vrC8spe1Pes8T6LIG
tS7FJtdO5bxfF5Yf5Nnk4Pr26y3asDMvN9u23EWpf66G+b2soqb6vQ7zA7EG
mK+Mr7bU/wrfL40trb3SyvNhfuCwqe4X9jK+2lL/MIm058uB+z2oyfrblvrv
iPWFpbT9Se95Al0WoNal2OTaqZz3A+7Zb7el/rka4/eySpvq9zrMD8QaYL4y
vg66r6td/7j6X+H7pbGltVdaeT7MDxw21f3CXsZXW+ofJpH2fDlwvwc1WX/b
Uv8dsb6wlLY/6T1PoMsC1LoU+yw73s1ryHynnk0Irr93nXUbN9u23IWof5YG
+L2sCub5vQ7zA8l6n6+Mr+MulfPsb9ep/3W+XxpbWnullcf8wHHz3C/sZXy1
pf5hHmnPl9P2e1CT9bct9d8X6wtLafuT3vMEuqw+rUuxybMONur13qXVZ+/X
WWe/3Zb6Z2mA38uqYJ7f6zA/kKz3+cr4Ou5SOc/+dp36X+f7pbGltVdaecwP
HDfP/cJexldb6h/mkfZ8OW2/BzVZf9tS/32xvrCUtj/pPU+gy+rTuhSbPOtg
o17vXVp99n6ddfbbbal/lnr/vaw65vm9DvMDyXqfr4yv4+4ravs/q/7X+X5p
bGntlVYe8wPHzXO/sJfx1Zb6h3mkPV9O2+9BTdbfttR/X6wvLKXtT3rPE+iy
+rQuxSbPOtio14Ht7LfbUv8s9f57WXXM83sd5geS9T5fGV/HXSrn2d+uU//r
fL80trT2SiuP+YHj5rlf2Mv4akv9wzzSni+n7fegJutvW+q/L9YXltL2J73n
CXRZfVqXggEtJ4Fnk4Pr26+3aMOe2G+3pf5Z6v33suqY5/c6zA8k632+Mr6O
u1TOs79dp/7XXb8sWsksb3P25mkrrb3SymN+4Lh57hf2Mr7aUv8wj9L7efcL
sJ31ty313xfrC0tp+5Pe8wS6rD6tS7FJ2vkr57vWpdVn79dbtGFP7LfbUv8s
9f57WXXM83sd5geS9T5fGV/H3VfU9n9W/a97+WXRxfVOZ2+ettLaK6085geO
m+d+YS/jqy31D/MovZ93vwDbWX/bUv99sb6wlLY/6T1PoMvq07oUm6Sdv3K+
a11affZ+vUUb9sR+uy31z9JnYa0/3zmOP7/77uT3OswPJOt9vjK+2lL/67Z8
WXRxudnZm6ettPZKK4/5gePmuV/Yy/hqS/3DPErv590vwHbW37bUf1+sLyyl
7U96zxPosvq0LsUmaeevnO+CHPbbbal/7vV4cqam48/vevm9DvMD+fqdr4yv
ttT/ifbe/7pf7ktae1Uoj/mB4+a5X9jL+GpL/QMPld7Pu19gctbfttT/wKwv
LKXtT3rPU8dl9WldCgZ0f5pxJXCf33u99/d/eZ119tttqX/uHX8+9T3o71Fc
zFM/5gfy9Tseja91JU5y3piq/n/clVz+iIctrwp52kprr7T+Ntv8QAn97k9K
M77aUv/Qr7T9fNr+DZJZf9tS/32xvowtbb8xW55Al9WndSk2KX2eyvmuc238
LMfrrff3n6Q/lGa/3Zb6597x51M/Dfp7FBfz1I/5gXz9jkfja92u+tlrwvN+
358/f237CqhOnrbS2iutv802P1BCv/uT0oyvttR/X/7lL/e9GFvafj5t/wbJ
rL9tqf++WF/GlrbfmC1PoMvq07oUm5Q+T+V817m2f5Aj9db7+8/TH+4tfxrl
lHez326ofv3v7T/n9je28HsU62rWT9v+b34mX7/j0fha9+Mj37fUfeO+p8l5
v7b7n8t3Oy+/AqqWp6209krrb+Znjhvpfsr+ZySz7X9657zfbNb7f9p+Pm3/
Buey/xmJ/U9frC9jS9tvzJYn0GX1aV2Kf7W+HpU+T+V8F9Rx/3j0+C7U/U5b
Net/b/8p0d/Y4vjzqZ8G/T2Kizr1k9D/zc/k63c8Gl/rXrbsxsZdtu+ylWfb
/1y/4Vn5CqhmnrbS2iutv5mfOW6M+yn7n/HMtv8ZzKVa7v+aAWzp/2n7+bT9
G5zF/mc89j99sb6MLW2/MVueQJfJv3UprEcD2nVq8b2zkb2//67r2wsTbmVj
fGTIu99pq1r97+0/hfobWxx/PvUd83sUJVSon5D+b34mX7/j0fha97JltzTu
SivPtv9Zfs/z8P7l5p6ldJ620torrb+ZnzlugPsp+58hzbb/Gcz3n//0vTzv
9+c/tS0PZ9nY/9P282n7NziF/c+Q7H/6Yn0ZW9p+Y7Y8gS7TftsybFyPlp3q
WWc7eH17mc/99z68fmINN1GhPnt//6n6w8XLXfHbW1D3O23Vqf+9/adcf2OL
48+nfgr4PYpyStdPTv83P5Ov3/FofK078bzfNbls5dn2P75fYimtvdL6m/mZ
43q/n7L/GdVs+5/B3Bzwc95vDNv7f9p+Pm3/BsfZ/4zK/qcv1pexpe03ZssT
6DLnNyzA9vVo2amedbaD17cX+9x/78Pr59ZzvtL1k/b+E/aHjVvi97ag7nfa
qlD/e/tP0f7GFsefT323/j2KoorWT1T/Nz+Tr9/xaHytO/G838NWnm3/4/sl
ltLaK62/mZ85ruv7Kfufgc22/xmM837j2dX/0/bzafs3OMj+Z2D2P32xvowt
bb8xW55Alwm/1b9913q07FTPOtuR63sLn1YeCOd+Z2Dud7h3/PnUT01/j6K0
ovUT1f/Nz+TrdzwaX+tOPO93TS5bebb9j++XWEprr7T+Zn7muK7vp+x/Bjbb
/mckD0/3OfLXO+f93C+Qw/5nYPY/fbG+jC1tvzFbnkCXCb/Vv916xNWzCeSs
iSXt/UuXJ1Dp8W4+aSutffWH5o4/n/pu93sUFRStn7T+n1YeuNH1eDS+Vpx4
3u9ZK6e1r/N+VJPWXoH9zfzMQV3fT6Wtj5wrrX31h42c9xuS837uF8iRtj5y
rrT21R9WWF/GlrbfmC1PoMuE3+rfvms9etbBzrq+V1p5epfWXqXff8L+kLYf
5lxp7as/NHf8+dRP7X6PooKi9ZPW/9PKAze6Ho/G14oTz/tdkzetnNa+zvtR
TVp7BfY38zMHdX0/lbY+cq609tUfNnLeb0jO+7lfIEfa+si50tpXf1hhfRlb
2n5jtjyBLhN+q3+7834nlqd3ae1V+v0n7A9p+2HOlda++kNzx59Pfbf7PYoK
itZPWv9PKw/c6Ho8Gl8rTjzv96yV09rXeT+qSWuvwP5mfuagru+n0tZHzpXW
vvrDFivn+hz565rzfu4XyJG2PnKutPbVH1ZYX8aWtt+YLU+gy4Tf6t/uvN+J
5YF8L4f8wc1n6fdnXVr76g9tHX8+9VO736OooHT9pPX/tPLAUu/j0fh65sTz
ftfkfSuntW+58vh+iaW09srsb+Znjuj9fiptfeRcae2rP6z7pQpWz/t9t3s8
xHHb+3/afj5z/wZHpK2PnCutffWHZ6wvY0vbb8yWJ9Blzm9YAOsRF8tJ49lk
cmRuSXv/0uXJ9PmrlcF+fD9c9P1Zl9a++kNbx59Pfbf7PYoKStdPWv9PKw8s
9T4eja9nXrbslsZ92cpp7VuuPNcvf1Yyy9uW0nnaSmuvzP5mfuaI3u+n0tZH
zpXWvvrDuks9vPe/km97/0/bz2fu3+CItPWRc6W1r/7wjPVlbGn7jdnyBLpM
+w0LsH09SjtPlVae3qW1V+n3n7Y/fP7mfqSfsvks/f6sS2tf/aGhz8PPp35q
+nsUpVWon7T+n1YeuBpgPBpfD71s2Y2Nu2zfh62c1r6FyvPyy5+L651L6Txt
pbVXbH8zP/O2CvuTCh8han3kXGntqz+suNTGe/8rXdjY/9P287H7NzgibX3k
XGntqz88ZH0ZW9p+Y7Y8gRJu6DauR2nnqdLK07u09ir9/jP3h88nenl/1qW1
r/7Qyufh51PfTX+PorQ69ZPW/9PKAxdjjEfj696zOjnLln9X6c9yVn6LLV/+
XFxuXkrnaSutvZL7W+n5gVF9DnE/lbY+cq609tUfnvllCvDn+Y5uS/9P288n
79/giLT1kXOlta/+cM/6Mra0/cZseQJdvvNpXYpN61Haeaq08kBHSu8/7W/b
Smtf/aGJz/5/j6KoavWT1v/TygMfA41H4+uhh9Vy0PZ/UekPcmL+XHvvZ0vn
aSutver3t7bjkU59jnI/lbY+cq609tUfnlk/71ezJJRzbv9P28+7X6Avaesj
50prX/3hCOvL2NL2G7PlqSPkvN+H9Wh6e89G9v7+pcsT7vrHwW/5c+FLv/+P
//VHJV+TL+s8LR8oqn0rlIeHPof4PYpyqtVP0fnwDcYjgTLH4xvsfx6as323
5JcV/vIVmP/Dh33ynYbr5a6ntVfN/vaG0vMDQxrmfipqffwO28/szQeKat8K
5enaw3N9DvtVU2J+SNufp+Whoaj1scT8UzMfKKp9K5SnO9aXHFvGe9r+QX49
T1vh7fWyDGnnqWqW57v//c9Lae1V+v1LlyfczUg/fc7Z9f7L8bWlztPygaLa
t0J5eOj486mfMn6PopBq9VN0PnyD8UigzPH4Bvufh+Zs3y35m3vMl18OpOV/
/yDf33/1ayO7XvN6WntV62/vKT0/MKRh7qei1sfS+5PS+UBR7VuhPF1z3q+t
EvND2v48LQ8NRa2PafsZ+5/T39/+54b1JceW8Z62f5DX/5OFt9dNAe6Lcda5
qWfX96pZnu/+9z8vpbVX6fcvXZ5wL8d76fe/VOw183B8Ld8kLX9udZ2ueftW
Lg8PDfN7FIU0+b2pjzPmw4Mf3HgkUM54PMj+56F52ndv/qban71i8//6T/16
6Ov+PJjrpa+ntVed/va20vMDQxrmfqr5+pi2n/H9T9H3N9+ucN6vvtLzQ+n9
T+95aKj5+pi2n7H/Kfr+pcvTHetLW/YzY+dpK7y9bspwX5LrPLB8nXh9r9Ll
GWz/A0svx3vp918Ot2fj6+HYDMmfW12na96+lcvDQ8P8HkUhOb83VXn+MR4J
lDMeD7L/eWie9t2bv7/TXP9yIC7/q8uhrz+c+3K9zvW09irc3w6y/+ENw9xP
NV8f0/Yzvv8p+v7m23U3p/sc9iut9PwQtz8Py0NDzdfHtP2M/U/R97f/uWF9
act+Zuw8bYW3100xdJ7B9j8vvdwHfhz7vGnvX7o84UqP913v/2x89ZIPFNW+
FcrDQ8P8HkUhmb83VWH+MR4JlDke32D/89Cc7bslvww8vB+5aYK0/PXE1/Lo
1/f37UXXC11Pa6/S/e0g+x/eMMz9VNT6mLaf8f3P6e9vvl3nvF9DJeaHtP15
Wh4ailof0/Yz9j+nv7/9zw3rSw77mfHytBXeXi/Xo2UhnxX+yPW9Ba5ZngH2
Py+ltVfp9y9dnnw3Q77h+6fdv4wx3nPat055uDfM71EUUrN+ys2H7zEeSZM5
Ht9j/3Nvzvbdkk/7vmhv/nLQ6/70l+t1rqe1V/73mfY/7DXS/VTO+pi2n/H9
T4n3N9+u+P7zn76XP5nrvF9FJeaHtP15Wh7aylkf0/Yz9j8l3t/+Z8n6ksN+
Zrw8beW31/p6tCzks8Ifub63tDXLM8b+Z11ae5V+/9LlyXcd5uX2wxvfP+3+
ZYzxntO+dcrDvWF+j6KQmvVTbj58j/FImszx+B77n3tztu+WfNr3Rbvz3w+O
fl24XuN6WnvFf59p/8NeI91P5ayPafsZ3/+UeH/z7YrLbHD/11RQYn6I25+H
5aGtnPUxbT9j/1Pi/e1/lqwvOexnxsvTVn57ra9Hy0I+K/yR63tLW7M8Y+x/
4Or7t5/xvP5Fw/e/jq/r/18fX2n5QFHtW6E8PDTS71GUUK1+is6HbzAeCZQ5
Ht9g//PQnO27JZ/2fdHe/M1PvV3c/wSc64Wup7VX+PeZ9j+8YZj7qaj1MW0/
4/uf09/ffHvjX/5y34tySswPafvztDw0FLU+pu1n7H9Of3/7nxvWlxz2M+Pl
aSu8vaxHKwbY/7z0rEOe1VHT3r90ecItp6PrqG/1/mn3LwOM96j2rVAeHhrp
9yhKqFY/RefDNxiPBMocj2+w/3lozvbdkk/7vmhvfvnzbl71X2ntVbq/HWT/
wxuGuZ+KWh/T9jMV7r9Ki2rfCuXpjvN+OUrMD2n787Q8NBS1PqbtZ+x/Tn9/
+58b1pcc9jPj5WkrvL1erkfPCnzW9b1qlmeA/c9Lae1V+v1LlyfczUgvuh9+
+f5p9y8DjPeo9q1QHh4a5vcoCqn5e1Pl5sM3GI8EyhyPb7D/eWjO9t2ST/u+
aG+++YG3yV9p7RX+fab9D28Y5n4qan1M28/4/uf09zff3pj8++coJeaHtP15
Wh4ailof0/Yz9j+nv7/9zw3rSw77mfHytBXeXi/Xo2cFPuv6XjXLM8D+56W0
9ir9/qXLE675fvhSscsp8X583c+ZOflzq+t0zdu3cnl4aJjfoyikye9NfZwx
Hx784MYjgXLG40H2Pw/N07578/dtsX4bkpZvfuBt8ldae5XubwfZ//CGYe6n
mq+PafsZ3/8UfX/z7Y1nC1zphY+L0vND2v48LQ8NNV8f0/Yz9j9F39/+54b1
pS37mbHztBXeXhv3J/cFPuv6XqXL87VzPjxQ91Bb8/3wcrg9G1/P5smE/LnV
dbrm7Vu5PDw0zO9RFJLze1OV5x/jkUA54/Eg+5+H5mnfvfm074v25psfeJv8
ldZepfvbQfY/vGGY+6nm62PafqbO/qea5u1buTywS+n5IW1/npaHhpqvj2n7
Gfufou9v/3PD+tKW/czYedoKby/r0Y3B9j8vLT/Is8555POmvX/p8oSL2g9f
R9ZyeuwoHyiqfSuUh4eG+T2KQjJ/b6rC/GM8EihzPL7B/uehOdt3S375vz6z
bIW0fPMDb5O/0tqrdH87yP6HNwxzPxW1PqbtZ3z/c/r7m29vTP79c5QS80Pa
/jwtDw1FrY9p+xn7n9Pf3/7nhvUlh/3MeHnaCm+vl+tR2nmqmuUZYP/zUlp7
lX7/0uXJdzPkG75/2v3LGOM9p33rlId7w/weRSE166fcfPge45E0mePxPfY/
9+Zs3y35je9zbYi0fPMDb5O/0tqrdH87zv6HvUa6n8pZH9P2M77/KfH+5tsl
3z/nKDE/pO3P0/LQVs76mLafsf8p8f72P0vWlxz2M+PlaSu/vdbXo7TzVDXL
M8b+Z11ae5V+/9LlyXcd5uX2wxvfP+3+ZYzxntO+dcrDvWF+j6KQmvVTbj58
j/FImszx+B77n3tztu+W/PZCXtoiLd/8wNvkr7T2Kt3fjrP/Ya+R7qdy1se0
/Yzvf0q8v/l2yffPOUrMD2n787Q8tJWzPqbtZ+x/Sry//c+S9SWH/cx4edrK
b6/19SjtPFXN8oyx/4Gr799+xvP6Fw3fP+3+ZYDxHtW+FcrDQyP9HkUJ1eqn
6Hz4BuORQJnj8Q32Pw/N2b6nl2dvc1TINz/wNvkrrb32lqdo/p79D28Y5n4q
an1M28/4/uf09zffEqv5/BC4n4/Kw7mi1se0/Yz9z+nvb/9zhPWlKPuZyfO0
Vb+9rEcretz/LAt887r/Xy+fSF5eXl5eXl5+V77IJuaAtPqRl5eXHzXf/MDb
5K+09krrn/Ly8vLy8jPkj9w7J0irT/m++mfa55WXl5eXz8yXXo/2SqsfeXl5
efnM/PWfun99/HaCceWKvLy8vLy8vPzLfJq0+pGXl5cfNd/8wNvkr7T2Suuf
8vLy8vLyM+R7l1af8n31z7TPKy8vLy+fmU+TVj/y8vLy8vLy8vLy8vLyc+bT
pNWPvLy8/Kj55gfeJn+ltVda/5SXl5eXl58h37u0+pTvq3+mfV55eXl5+cx8
mrT6kZeXl5eXl5eXl5eXl58znyatfuTl5eVHzTc/8Db5K6290vqnvLy8vLz8
DPnepdWnfF/9M+3zysvLy8tn5tOk1Y+8vLy8fKf5j1//FGB5eXl5eXl5+bfz
adLqR15eXn7UfPMDb5O/0torrX/Ky8vLy8vPkO9dWn3K99U/0z6vvLy8vHxm
Pk1a/cjLy8vL95j/+uMa9+Nv5eXl5eXl5eX35j/CpNWPvLy8/Kj55gfeJn+l
tVda/5SXl5eXl58h/9G5tPqU76t/pn1eeXl5efnM/EeYtPqRl5eXl+8x/+N/
Xb4+NpwnlJeXl5eXl5e/yadJqx95eXn5UfPND7xN/kprr7T+KS8vLy8vP0O+
d2n1Kd9X/0z7vPLy8vLymfk0afUjLy8vL99pfv2KvLy8vLy8vPzLfJq0+pGX
l5cfNd/8wNvkr7T2Suuf8vLy8vLyM+R7l1af8n31z7TPKy8vLy+fmU+TVj/y
8vLy8vLy8vLy8vLyc+bTpNWPvLy8/Kj55gfeJn+ltVda/5SXl5eXl58h37u0
+pTvq3+mfV55eXl5+cx8mrT6kZeXl5eXl5eXl5eXl58znyatfuTl5eVHzTc/
8Db5K6290vqnvLy8vLz8DPnepdWnfF/9M+3zysvLy8tn5tOk1Y+8vLy8fGb+
YktYXl5eXl5eXv5IPk1a/cjLy8uPl29+4G3yV1p7pfVPeXl5eXn5efK9S6tP
+XPzpaV9Xnl5eXn5zHyatPqRl5eXl0/L/7j443X/T8nLy8vLy8vLn5VPk1Y/
8vLy8qPmmx94m/yV1l5p/VNeXl5eXn6GfO/S6lO+r/6Z9nnl5eXl5TPzadLq
R15eXl4+Nv/jL5b/1MV9WF5eXl5eXl7+vXyatPqRl5eXHzXf/MDb5K+09krr
n/Ly8vLy8jPke5dWn/Ln5ktL+7zy8vLy8pn5NGn1Iy8vLy+fnL+8Lv/U5R+U
l5eXl5eXlz8rnyatfuTl5eVHzTc/8Db5K6290vqnvLy8vLz8DPnepdWnfF/9
M+3zysvLy8tn5tOk1Y+8vLy8fH5+/fr9+iIvLy8vLy8vvyWfJq1+5OXl5UfN
Nz/wNvkrrb3S+qe8vLy8vPwM+d6l1ad8X/0z7fPKy8vLy2fm06TVj7y8vLx8
Zv76F0tfv54VfHhdXl5eXl5eXn5v/v5iW2n1Iy8vLz9qvvmBt8lfae2V1j/l
5eXl5eVnyN9f7Etafcqfm7+/eK60zysvLy8vn5m/v9hWWv3Iy8vLy8fmv3/7
GcCb1/UfvL7k5eXl5eXl5d/I329C2kqrH3l5eflR880PvE3+SmuvtP4pLy8v
Ly8/Q/7IvXOCtPqU76t/pn1eeXl5efnMfOn1aK+0+pGXl5eXz8xf/6n718fd
rwLeX5GXl5eXl5eXf5lPk1Y/8vLy8qPmmx94m/yV1l5p/VNeXl5eXn6GfO/S
6lO+r/6Z9nnl5eXl5TPzadLqR15eXl5eXl5eXl5eXn7OfJq0+pGXl5cfNd/8
wNvkr7T2Suuf8vLy8vLyM+R7l1af8n31z7TPKy8vLy+fmU+TVj/y8vLy8vLy
8vLy8vLyc+bTpNWPvLy8/Kj55gfeJn+ltVda/5SXl5eXl58h37u0+pTvq3+m
fV55eXl5+cx8mrT6kZeXl5fvNP/x658CLC8vLy8vLy//dj5NWv3Iy8vLj5pv
fuBt8ldae6X1T3l5eXl5+RnyvUurT/m++mfa55WXl5eXz8ynSasfeXl5efke
819/XON+/K28vLy8vLy8/N78R5i0+pGXl5cfNd/8wNvkr7T2Suuf8vLy8vLy
M+Q/OpdWn/J99c+0zysvLy8vn5n/CJNWP/Ly8vLyPeZ//K/L18eG84Ty8vLy
8vLy8jf5NGn1Iy8vLz9qvvmBt8lfae2V1j/l5eXl5eVnyPcurT7l++qfaZ9X
Xl5eXj4znyatfuTl5eXlO82vX5GXl5eXl5eXf5lPk1Y/8vLy8qPmmx94m/yV
1l5p/VNeXl5eXn6GfO/S6lO+r/6Z9nnl5eXl5TPzadLqR15eXl5eXl5eXl5e
Xn7OfJq0+pGXl5cfNd/8wNvkr7T2Suuf8vLy8vLyM+R7l1af8n31z7TPKy8v
Ly+fmU+TVj/y8vLy8vLy8vLy8vLyc+bTpNWPvLy8/Kj55gfeJn+ltVda/5SX
l5eXl58h37u0+pTvq3+mfV55eXl5+cx8mrT6kZeXl5fPzF9sCcvLy8vLy8vL
H8mnSasfeXl5+fHyzQ+8Tf5Ka6+0/ikvLy8vLz9Pvndp9Sl/br60tM8rLy8v
L5+ZT5NWP/Ly8vLyafkfF3+87v8peXl5eXl5efmz8mnS6kdeXl5+1HzzA2+T
v9LaK61/ysvLy8vLz5DvXVp9yvfVP9M+r7y8vLx8Zj5NWv3Iy8vLy8fmf/zF
8p+6uA/Ly8vLy8vLy7+XT5NWP/Ly8vKj5psfeJv8ldZeaf1TXl5eXl5+hnzv
0upT/tx8aWmfV15eXl4+M58mrX7k5eXl5ZPzl9fln7r8g/Ly8vLy8vLyZ+XT
pNWPvLy8/Kj55gfeJn+ltVda/5SXl5eXl58h37u0+pTvq3+mfV55eXl5+cx8
mrT6kZeXl5fPz69fv19f5OXl5eXl5eW35NOk1Y+8vLz8qPnmB94mf6W1V1r/
lJeXl5eXnyHfu7T6lO+rf6Z9Xnl5eXn5zHyatPqRl5eXl8/MX/9i6evXs4IP
r8vLy8vLy8vL783fX2wrrX7k5eXlR803P/A2+SutvdL6p7y8vLy8/Az5+4t9
SatP+XPz9xfPlfZ55eXl5eUz8/cX20qrH3l5eXn5zPz/B8lMZS4=
    "], {{0, 180.}, {2556., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2556., 180.},
  PlotRange->{{0, 2556.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236708750683*^9}},
 CellLabel->
  "Out[472]=",ExpressionUUID->"7cd0bb6e-63e2-4f29-8a81-b3e57aa3712a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
+wPqH8ZUev3Kn5sPnwCs6U/Wj1pJ7fFs/flHmw8c8et8elQ5347wF7n9+t1v
BKDU42XfFg3DaL3+AeAJ6p8NRzbb552onG+BXdnqH/s5jMz85zLqHwZXr/45
WDw/fYQPHTCsDvYHPl5cePGj/iFC6fUrf24+fAKwpj9ZP2olpePp2D7CTyhV
/Xyaj9XPaefD5H4jAIWOLv62aOhRH/UPAKXUP/vjc/joYP9wNDnrH/s5jMz8
5xrqH0Z2Tf1TVEUfPMKHDhhc0ZKVcH/g42WFlz3qH4KUXr/y5+bDJwBrDfUn
F823Do7wAb/4fJX2crf+/KWPh5/QcMvRzpA/+a0drpwzl9BT4vuNBJ5f6F5D
6202z6z/L+/A2KJpi/onf/2TmfUW6mlovc1G/bPr+59+d/tPFh6R7cWfNknU
P9fWP1Pi/ZxnBtl6S4me5v8FY9XKepuN+odd6p/X65+R13PrLdQTu942vT+g
/mFXW/VP6fUoH5sPn96Da/181e7/LD2u70eNXW9L1R7P1p9ff3LpdPrNNsLe
gNTOn/vWCorq25G1hJ6y3m8k8PxC9xpab7N5fv1/ZXPmyPMMfFKyUf80Uf+k
Zb2Fehpab7NR/xzx9u3rwS3c2zsLf8GnTxL1z/X1T9r9nNrzB750NP+vHKjk
62026h92qX9OqX+GXc+tt1BP+Hrb7v6A+oddzdU/pdejfGw+fIYPrvXzNXh/
cvh6W6r2eLb+/PqTiybS3TbCxpSunT//3b1SVyebGNPL+z/LzClnIfb8Qt/a
Wm+zeXX9r7o/k+/zZUDqn4bqn4Sst1BPW+ttNuqfg257s7tbuPM7C3/BZ84Q
9U9Q/TPl28+pPX9g1sH8v2CIGlpvs1H/sD9D1D8n1T8DrufWW6gnyXrb6P6A
+of9GdJg/VN6PcrH5sPn+eBaP1/D9ifffrvw9bbUE0Pq2DjCL8AQ06OZvJzP
dyNTO3/+NfJ6XZ1pbkwv7/9Mp/799NjzC31ra73N5pz1v+r+TLLPl9Gof9qq
f7Kx3kI9ba232ah/jpt3aDe2cPvbL1L/xNY/2fZzas8fWGp9/l85PvnX22zU
P+zOEPXPifXPaOu59RbqybPetrg/oP5hd4Y0Wv+UXo/ysfnwqT641s/XNNgx
v+sk623t81Xay93685c+Hn4BRl31n83n25S+2yKonT/5Aikqpzfq6jTL9fTy
/s8y8/rgB55f6F5D6202Z67/tZ9njDOSkPqnrfonG+st1NPQepuN+qfIcp/2
4X7R3Z5V+As+a5KofwLrnynZfk7t+QNLrc//K8cn+XqbjfqHI5NE/XNi/TPa
em69hXryrLfN7Q+ofzgySRqtf0qvR/nYfPhUH1zr56t2/+dUeNR+Pbd3PaVZ
b0vVHs/Wn/+5+TCa6eGdwNe7Cpv9/Cfmz7w6nqirf5o+/YU5Vuzp5f2f6dS/
nx51fmEEray32Zy//td+nt7PSE7qn7bqn2yst1BPK+ttNuqfUq3v3z49T9Q/
gfVPtv2c2vMHllqf/1eOT+b1Nhv1DwfnifrnxPpntPXcegv15Flv29ofUP9w
cJ40Wv9k67+Vz7we0vr5qt3/ORUetV/P7V1PadbbUrXHs/Xnf24+DGX6fDPh
bkpPv9wbvGr+zEvj6bo6dwm9MaR3A3tk8+fFkY86vzCCVtbbbGqt/7Wfp+uT
kpD6p7n6JxXrLdTTynqbjfrnCa3v3z43T9Q/sfVPqv2c2vMH7jQ9/wMHJ9V6
m436h4PzRP1zbv0z1HpuvYV6Uq23De0PqH84OE/arX+y9d/Kp10PeeJ6CX/B
d2r3f06FR+3X8yXZeluqdDwd20f4BXixafp09q7dhqhq/szrol5dHT1Pppf3
f+62gJ5+R1HnF0bQynqbTd31v/bz9HteslH/tFj/5GG9hXpaWW+zUf88p/X9
2yfmifonvP7Js59Te/6ET3gSanf+XzwyadfbbNQ/HJwn6p/T659x1nPrLdST
bb1tZX9A/cPBedJ0/ZOt/1Y+53rIc9dL+Au+M413pFpva5+v0l7u1p+/9PHw
C/Diy3x7Al9vPgWvnIuPN/Z6mZ24hJ5e3v+5W75K387T8+eU8wt9u2x97vJ6
vGL97/rzpXvqH/MzZP50ud7CudQ/r45eeAHT5udL6/u3BTNE/ZNmfobv51w2
f7pcb3lRc/P/ggFR/7w0euEFTKbPFx7MEPVPtfnZ/Xqu/oF60tY/TewPqH/Y
nyFd1D/Z+m/ld9v8is4v52ri82tD7f7P0qP268m23paqPZ6tP3/p4+EX4AWm
fGXJ3fVye4XPnY6PWdJ7CT2F/v30V+bP6+cX+nbl+tzf9Xjd+t/v50vf1D/m
Z9T86W+9hXOpf14cvfjSpdnPl9b3bw/OkPA6R/3z2Rm5Pfn9sGS636D6h3O1
Nf+vHI3862026h92Z0h4nVPvesxQ//S9nqt/oJ7M9U/+/QH1D7szJLzOiboe
5WPz6p9Y+T+/ttXu/yw9ar+ebOttqdrj2frzlz4efgHWNiUuTuZLZnntFF8O
A5TQ08v7P8tM0VC/Pn9eOb/Qt+vX556ux6vX/04/Xzqm/jE/Y+dPT+stnEv9
8+LoxRctLX++tL5/e2SGhFc46p+Nk3J75vsxSXO/QfUPp2to/l85FPnX22zU
P+zOkIuvryuvxyT1T8frufoH6kle/yTfH1D/sDtDwiucwOtRPjav/omV/PNr
V+3+z9Kj9uvJtt6WemJIHRtH+AVYW3j5UXThfCm58fjH+RujhJ7i/n564PmF
7jW03mYTs/73+PnSsfCqpt71OE7908f8aX29hdM1tN5mo/55Xev7t7vCqxr1
z8NX/uu7/vG090OR5n6D1ltO19D8r62h9TYb9Q+7Aq+v2tdjnvqn4/Xcegv1
JF9vM+8PqH/YFV7VxF6P8rF59U+szJ9fR0yDHdnW29rnq7SXu/XnL308/AKs
fWmHVx2ll8xfj+1OfLy3YUroKeLvp9eYP8fPL/Qtw/rc7vUYuf539/nSpQzX
V73rcaj6p5v50+56C+fKsD63ez2qf04xb95u70HNP4ef97IZEn191bsem65/
QvZzMsyfdtdbTtTE/L9gEMLX53avR/UP+zMk+vqqdz2mqn+6XM/VP1BPhvV5
93pMuz+g/mF/hkRfX+HXo3xsXv0TK+3n10G1+z83huWzsar6erKtt6Vqj2fr
z68/eZ4n4cXGK1fN/lUwUgk9vbz/MxX+/fSq8+fi0YNsUq3PzV2P8et/X58v
/Ul1fZ1+PcbP/97np/oH6km1Pjd3Pcav/718vuxu3s7bULcfwk/98RkSflnV
ux7j5/9rM+H6/ZxU86eh64ga8s//K0cgXIujF1+iJP58IdX1dfr1GD//f/sK
+1vP1T9QT6r1eeN6zLk/EL/+q39yS3V9BV6P8rF59U+snJ9fx+lPjl1vS9Ue
z9afX3/yPE/Cy4xK18vHtAivn68toafL/3561flz5dBBQqnW57auxyzrf0ef
L/1JdX2dez1mmf9dz0/1D9STan1u63rMsv538flyZPN23olqaJ6kur7OvR6z
zP8XJsP1+zmp5k9D1xE15J//V45AuLZGL8v6n/jzhVTX17nXY5b5v3iR/a3n
6h+oJ9X6vHE9JtwfyLL+q38SS3V9BV6P8rF59U+shJ9fRfQnx663pUrH07F9
hF+A9UxtlijbJ+XjnIVXzpeX0FPE30+vNH/6vujgoCTrc1vXY671v5fPly4l
ub7OvR5zzf+u56f6B+pJsj63dT3mWv/b/3wp2ixq6++zJ7m+zr0ec83/Z+dn
yH5OkvnT1npLDU3M/ysHIe16m02u9T/r5wtf0lxf516Pueb/Ly+1y/Vc/QP1
JFmf99fbTPsDudb/qz5feG6qhF9c4dejfGxe/ROr9HyFv+BXXn8HR7b1ttT7
FLrdsntt+jHBlo/cWrLl5eXl5TvI164Hsr1feXl5eXl5+fz58A0N9Y+8vLy8
vLy8vLy8fKN533fk5eVbyYdv4CRf30Z7v6PlnV95eXl5eXn50fLzr1qbftx9
ffsReXl5eflG87W//2Z7v/Ly8vLy8vL587XrE/WPvLy8vLy8vLy8vHyved93
5OXlW8mHb+AkX99Ge7+j5Z1feXl5eXl5eXl5eXl5+RHyvv/Ky8vLy8vLZ8vX
rk/UP/Ly8vLy8vLy8vLyveZ935GXl28lH76Bk3x9G+39jpZ3fuXl5eXl5eXl
5eXl5eVHyPv+Ky8vLy8vL58tX7s+Uf/Iy8vLy8vLy8vLy/ea931HXl6+lXz4
Bk7y9W209zta3vmVl5eXl5eXl7/7t+//Ly8vLy/fXz78+2/y8ZGXl5eXl5fv
rz5R/8jLy8vLy8vLy8vL95r3fUdeXr6VfPgGTvL1bbT3O1re+ZWXl5eXl5eX
X/7b2//Px/s/ysvLy8v3kY/9/pt/fOTl5eXl5eWvz9euT9Q/8vLy8vLy8vLy
8vK95n3fkZeXbyUfvoGTfH0b7f2Olnd+5eXl5eXl5eWX+fd/uzQd6H+Wl5eX
l28iH/v9N//4yMvLy8vLy1+fr12fqH/k5eXl5eXl5eXl5XvN+74jLy/fSj58
Ayf5+jba+x0t7/zKy8vLy8vLy9/ltx+Rl5eXl280H/79N/n4yMvLy8vLy/dX
n6h/5OXl5eXl5eXl5eV7zfu+Iy8v30o+fAMn+fo22vsdLe/8ysvLy8vLy8vL
y8vLy4+Q9/1XXl5eXl5ePlu+dn2i/pGXl5eXl5eXl5eX7zXv+468vHwr+fAN
nOTr22jvd7S88ysvLy8vLy8vLy8vLy8/Qt73X3l5eXl5efls+dr1ifpHXl5e
Xl5eXl5eXr7XvO878vLyreTDN3CSr2+jvd/R8s6vvLy8vLy8/Gj523EkLC8v
Ly/fU772999s71deXl5eXl4+f752faL+kZeXl5eXl5eXl5fvNe/7jry8fCv5
8A2c5OvbaO93tLzzKy8vLy8vLz9a/v3Bd+tfJS8vLy/fd772999s71deXl5e
Xl4+f752faL+kZeXl5eXl5eXl5fvNe/7jry8fCv58A2c5OvbaO93tLzzKy8v
Ly8vLz9g/v2H5a+6HeuwvLy8vHxP+Qu+/6Z6v/Ly8vLy8vL587XrE/WPvLy8
vLy8vLy8vHyved935OXlW8mHb+AkX99Ge7+j5Z1feXl5eXl5+THzN7dfdfuF
8vLy8vJ956/5/pvn/crLy8vLy8vnz9euT9Q/8vLy8vLy8vLy8vK95n3fkZeX
byUfvoGTfH0b7f2Olnd+5eXl5eXl5UfObz8+/Tjk5eXl5fvIX/n9N8P7lZeX
l5eXl8+fr12fqH/k5eXl5eXl5eXl5XvN+74jLy/fSj58Ayf5+jba+x0t7/zK
y8vLy8vLj5aff1ge33/0Nj98XF5eXl6+j3zt77/Z3q+8vLy8vLx8/nzt+kT9
Iy8vLy8vLy8vLy/fa973HXl5+Vby4Rs4yde30d7vaHnnV15eXl5eXn7A/Nsv
t1m+M//Cmby8vLx8N/kLvv+mer/y8vLy8vLy+fO16xP1j7y8vLy8vLy8vLx8
r3nfd+Tl5VvJh2/gJF/fRnu/o+WdX3l5eXl5efnR8vOvWptWd11ePyIvLy8v
32i+9vffbO9XXl5eXl5ePn++dn2i/pGXl5eXl5eXl5eX7zXv+468vHwr+fAN
nOTr22jvd7S88ysvLy8vLy8vLy8vLy8/Qt73X3l5eXl5efls+dr1ifpHXl5e
Xl5eXl5eXr7XvO878vLyreTDN3CSr2+jvd/R8s6vvLy8vLy8vLy8vLy8/Ah5
33/l5eXl5eXls+Vr1yfqH3l5eXl5eXl5eXn5XvO+78jLy7eSD9/ASb6+jfZ+
R8s7v/Ly8vLy8vLyd//2/f/l5eXl5fvLh3//TT4+8vLy8vLy8v3VJ+ofeXl5
eXl5eXl5efle877vyMvLt5IP38BJvr6N9n5Hyzu/8vLy8vLy8vLLf3v7//l4
/0d5eXl5+T7ysd9/84+PvLy8vLy8/PX52vWJ+kdeXl5eXl5eXl5evte87zvy
8vKt5MM3cJKvb6O939Hyzq+8vLy8vLy8/DL//m+XpgP9z/Ly8vLyTeRjv//m
Hx95eXl5eXn56/O16xP1j7y8vLy8vLy8vLx8r3nfd+Tl5VvJh2/gJF/fRnu/
o+WdX3l5eXl5eXn5u/z2I/Ly8vLyjebDv/8mHx95eXl5eXn5/uoT9Y+8vLy8
vLy8vLy8fK9533fk5eVbyYdv4CRf30Z7v6PlnV95eXl5eXl5eXl5eXn5EfK+
/8rLy8vLy8tny9euT9Q/8vLy8vLy8vLy8vK95n3fkZeXbyUfvoGTfH0b7f2O
lnd+5eXl5eXl5eXl5eXl5UfI+/4rLy8vLy8vny1fuz5R/8jLy8vLy8vLy8vL
95r3fUdeXr6VfPgGTvL1bbT3O1re+ZWXl5eXl5cfLX87joTl5eXl5XvK1/7+
m+39ysvLy8vLy+fP165P1D/y8vLy8vLy8vLy8r3mfd+Rl5dvJR++gZN8fRvt
/Y6Wd37l5eXl5eXlR8u/P/hu/avk5eXl5fvO1/7+m+39ysvLy8vLy+fP165P
1D/y8vLy8vLy8vLy8r3mfd+Rl5dvJR++gZN8fRvt/Y6Wd37l5eXl5eXlB8y/
/7D8VbdjHZaXl5eX7yl/wfffVO9XXl5eXl5ePn++dn2i/pGXl5eXl5eXl5eX
7zXv+468vHwr+fANnOTr22jvd7S88ysvLy8vLy8/Zv7m9qtuv1BeXl5evu/8
Nd9/87xfeXl5eXl5+fz52vWJ+kdeXl5eXl5eXl5evte87zvy8vKt5MM3cJKv
b6O939Hyzq+8vLy8vLz8yPntx6cfh7y8vLx8H/krv/9meL/y8vLy8vLy+fO1
6xP1j7y8vLy8vLy8vLx8r3nfd+Tl5VvJh2/gJF/fRnu/o+WdX3l5eXl5efnR
8vMPy+P7j97mh4/Ly8vLy/eRr/39N9v7lZeXl5eXl8+fr12fqH/k5eXl5eXl
5eXl5XvN+74jLy/fSj58Ayf5+jba+x0t7/zKy8vLy8vLj5b//2Uubm0=
    "], {{0, 180.}, {2856., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2856., 180.},
  PlotRange->{{0, 2856.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236708862652*^9}},
 CellLabel->
  "Out[473]=",ExpressionUUID->"d7976b17-b29b-42b8-be18-bfa5cb96499a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3UGu5Mh2HuCEPfGgDXgL3oUHb2APDfRIhmdvIsGy4IkMSA0Y2ocX4eFb
wF1ALccLuANfd6oodjIzbwSDh3GC8RGfhOp8f2UxgzzBU8wo3n//N//zr/77
v7rdbv/4b77+31/99f/6T//wD3/9T//l3339x3/9+3/8H3/393/73/7z3//2
t3/3t//wH/7mX3+9+H+//u8//tvb7f//+s//+xMAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOM1ttXXfGbgY9QWQk/kZ
4qgvgJzMzxBHfQHkZH6GOOoLAOBAXz3V52rTYsGB1BdATuZniKO+AHIyP0Mc
9QWQk/kZ4qgvAICj3P9BxOdm02JBO/UFkJP5GeKoL4CczM8QR30B5GR+hjjq
CwDgQE87q3V/pcuC3dQXQE7mZ4ijvgByMj9DHPUFkJP5GeKoLwCAY73pr+4t
1qd/KAF7qS+AnMzPEEd9AeRkfoY46gsgJ/MzxFFfAADHetpf/enjSaPVfVdh
OOoLICfzM8RRXwA5mZ8hjvoCyMn8DHHUFwDAgdbN1VdPtW6rHlos/RXUUl8A
OZmfIY76AsjJ/Axx1BdATuZniKO+AAAO9NBcvd/0V1BFfQHkZH6GOOoLICfz
M8RRXwA5mZ8hjvoCADjE7ef2TUf1usXSa8Er6gsgJ/MzxFFfADmZnyGO+gLI
yfwMcdTXZXystu47AwDT2tFWPfRX93fQYsGW+gLIyfwMcdQXQE7mZ4ijvgBy
Mj9DHPV1GR8fH18H4refmyV8ANBFS3O1tFjrXgtYqC+AnMzPEEd9AeRkfoY4
6gsgJ/MzxFFfl/GweM8SPgDo5cBt+bcS3T8UJKG+AHIyP0Mc9QWQk/kZ4qgv
gJzMzxBHfV2G9XsA0N3t9+3IBuvnv5XQYoH6AsjJ/Axx1BdATuZniKO+AHIy
P0Mc9XUxHx8fv2026/cA4DSHd1YPXVb3DwgdqS+AnMzPEEd9AeRkfoY46gsg
J/MzxFFf12P9HgD0pb+COOoLICfzM8RRXwA5mZ8hjvoCyMn8DHHU1yU9LOGz
eA8AThbUYmmu4M/qCyAr8zPEUV8AOZmfIY76AsjJ/Axx1Nclfay27jsDD26r
LSIPM1MveSwt1p8+vm+cSjInHFPzM6NQX8CaesnD/Axx1Bewpl7yMD9DHPUF
rKmXPMzPEEd9XdJ9674bjCi0Xm5/XDP87R9Rm4eZqZdsti3W0z6qpLk64Zia
nxmL+gLu1Es25meIo76AO/WSjfkZ4qgv4E69ZGN+hjjqawg7tu77zHDi6uW+
ILB8uqjNw8zUS1rrFmuxbE9f/HzbcQWtrDY/MyL1BZNTL2mZnyGO+oLJqZe0
zM8QR33B5NRLWuZniKO+hvBytP/PbW15vfsOM5DQenn6zuv3f/hTavMwM/WS
2fborHuqpbPavvJqO2EPzc+MQn3BzNRLZuZniKO+YGbqJTPzM8RRXzAz9ZKZ
+RniqK9RPPk4P9fsLf9/WcLXfW8ZRXS9vHn/+x/x+ceFgrV5mJl6Se72c1sf
l6f/JuJ9c3V/k4jdMz8zLvUF01IvyZmfIY76gmmpl+TMzxBHfcG01Ety5meI
o75G8fhZfq7W2/6i+64yiuh6efr+22lk+SNq8zAz9TKKp0fqzfS7/E9BndWb
vTI/Mxz1BbNRL6MwP0Mc9QWzUS+jMD9DHPUFs1EvozA/Qxz1ld8fPsLqsXvr
B/F9Wr9HsdB6Wb/5w+rfhz/i9vNZf1V5mJl6GcvDP5RYJr2HSXhpqEI7qz+b
n7kW9QXzUC9jMT9DHPUF81AvYzE/Qxz1BfNQL2MxP0Mc9ZXfv3yEP67c8/Nz
qRVaLw9v/n57mGRK8t1HDzpSL4O6/dyevnjakTI/c0nqCy5PvQzK/Axx1Bdc
nnoZlPkZ4qgvuDz1MijzM8RRX8n980f4uWZv7f4/dd9D8guql2WW+OYdm7dl
l4auZaiyu77UC382P0Mk9QVx9D+0MD9DHPUFcfQ/tDA/Qxz1BXH0P7QwP0Mc
9VXiXz7FH1fu3bfuu0dau+ur8M3bC7Nwu60euTliCUOtlvpSL5ifIY76gjj6
H1qYnyGO+oI4+h9amJ8hjvqCOPofWpifIY76Kvdm675v5NRSX6Fvvm9b/sQR
6xeqtNeXepmZ+RniqC+Io/+hhfkZ4qgviKP/oYX5GeKoL4ij/6GF+RniqK9a
r7buO0ZCjfX17ft33Ja1uN0HGYKoF1p03JxvXJ76gjjqhRYdN+cbl6e+II56
oUXHzfnG5akviKNeaNFxc75xeerrqEHrvlck1Li9eed9P5D32G3cB2nCexH1
pV7mYX6GOOoL4uh/aGF+hjjqC+Lof2hhfoY46gvi6H9oYX6GOOqrxXbrvkuk
ckh9vXnzxnc+cBuxfuGN0PpSL5dnfoY46gvi6H9oYX6GOOoL4uh/aGF+hjjq
C+Lof2hhfoY46qvdw9Z9f8jjqPqKfv9DtkHrF17x9xdamJ8hjvqCOPofWpif
IY76gjj6H1qYnyGO+oI4+h9amJ8hjvo6xHrrvjPkEb1+78A/onEbt3jhjaD6
Ui+TMD9DHPUFcfQ/tDA/Qxz1BXH0P7QwP0Mc9QVx9D+0MD9DHPV1iGXrviek
ckh9Ff4Rf/r4/q1KMrX50YsX3ji8vtTLVMzPEEd9QRz9Dy3MzxBHfUEc/Q8t
zM8QR31BHP0PLczPEEd9HeK+dd8Nsmmvrx1/xNP3ebMDtfmH7RolDE+115d6
mZn5GeKoL4ij/6GF+RniqC+Io/+hhfkZ4qgviKP/oYX5GeKor3b3rftukFBj
fdX+EYv1O29fXP7E2vxVSxheaakv9YL5GeKoL4ij/6GF+RniqC+Io/+hhfkZ
4qgviKP/oYX5GeKor0b3rftukFNLfVW9/9P3XN55+8ru/MPWfYQhTnt9qZeZ
mZ8hjvqCOPofWpifIY76gjj6H1qYnyGO+oI4+h9amJ8hjvpqdI1PQZCW+ir/
I+7b9k95+uc+3Wrzn5///Od2H2EIdUh9qZdpmZ8hjvqCOPofWpifIY76gjj6
H1qYnyGO+oI4+h9amJ8hjvpqcd+67wZp7a6vHX/Q0yp7U4D78teoXKiiXmhh
foY46gviqBdamJ8hjvqCOOqFFuZniKO+II56oYX5GeKorx3uW/fdIL/aetn3
R6zf8F5l29WDSwHuy3cfSehCvdDC/Axx1BfEUS+0MD9DHPUFcdQLLczPEEd9
QRz1QgvzM8RRX7XuW/fdYAi19dLypzy8w221NeZhZuqFFuZniKO+II56oYX5
GeKoL4ijXmhhfoY46gviqBdamJ8hjvoqZ/0etWauFwAAAAAAAAAAgKNYvwcA
AAAAAAAAAADns34PAAAAAAAAAAAAzmf9HgAAAAAAAAAAAJzP+j0AAAAAAAAA
AAA4n/V7AAAAAAAAAAAAcD7r9wAAAAAAAAAAAOB81u8BAAAAAAAAAADA+azf
AwAAAICnPj/+kkr3AQEAAAAg1I9ffym/WXS73Wrz3T8gW9bvAQAAAMBTP379
Zet+X7TL690HBAAAAIBQnx9/KVySd/t9q813/4BsWb8HAAAAAE9ZvwcAAADA
me5r7b5dknf7udXmu39AtqzfAwAAAICnbsm27gMCAAAAQKhlxd2bJXnr+0W1
+e4fkC3r9wAAAADgqQzP3Fv/Z/cBAQAAACDUet3d0/tF91tG2/V7hfnuH5At
6/cAAAAA4Cnr9wAAAAA4k/V7E7J+DwAAAACesn4PAAAAgDNZvzch6/cAAAAA
4Klbsq37gAAAAAAQyvq9CVm/BwAAAABPZXjm3vr17gMCAAAAQCjr9yZk/R4A
AAAAPGX9HgAAAABnsn5vQtbvAQAAAMBT1u8BAAAAcCbr9yZk/R4AAAAAPHVL
tnUfEAAAAABCWb83Iev3AAAAAOCpDM/cW/9n9wEBAAAAINSyGO/Nv/FcL8mr
zXf/gGxZvwcAAAAAT1m/BwAAAMCZvl2M97Akrzbf/QOyZf0eAAAAADxl/R4A
AHC+Zeu+JwCcr2Qx3npJXm2++wdky3UfAAAAAJ4qvPl52tZ9QAAAgGjLN/i+
ygeYU9XNovUPxi3Md/+AbLnoAwAAAAAAAEB3D1/f+zYfYEI/fv3l/iNxS9yX
5FXlu39AtlzxAQAAAAAAAKA76/cA+Pz4S+GSvPsj9Wrz3T8gW674AAAAAAAA
ANDd0637XgFwpvtau2+X5C0/Erc23/0DsuWKDwAAAAAAAADdef4eAMuKuzdL
8m6rrTbf/QOy5YoPAAAAAAAAAN1ZvwfAet3dj19/eerp+r3CfPcPyJYrPgAA
AAAAAAAAQHfW703I+j0AAAAAAAAAAIDurN+bkPV7AAAAAAAAAJDEsnXfEwDO
Z/3ehFz3AQAAAAAAACAJ6/cAZmb93oRc9wEAAAAAAAAgCev3AGZm/d6EXPcB
AAAAAAAAoLunW/e9AuBM1u9NyBUfAAAAAAAAADKweA9gctbvTchFHwAAAAAA
AACSsHgPYGbLYrzb6229JK823/0DsuW6DwAAAAAAAAB5+BIfYFrfLsZ7WJJX
m+/+Admyfg8AAAAAAAAAAKC7ksV46yV5tfnuH5At6/cAAAAAAAAAAAC6K1yM
9/BUvfJ89w/IlvV7AAAAAAAAABDqI3jr/gEBOMSPX3+5/0jcEvcleVX57h+Q
Lev3AAAAAAAAACDUx8fHZ9hm/R7AZXx+/KVwSd79kXq1+e4fkC3r9wAAAAAA
AAAg1MfHx29/3LbL8H7bu1m/B3AZ97V23y7JW34kbm2++wdky/o9AAAAAAAA
AAi1fv7em/V7JQv5luSSt34P4DKWFXdvluTdVlttvvsHZMv6PQAAAAAAAAAI
deD6vYfFe9bvAVzJet3dj19/eerp+r3CfPcPyJb1ewAAAAAAAAAQyvP3AChh
/d6ErN8DAAAAAAAAgFCevwdACev3JmT9HgAAAAAAAACE8vw9AEpYvzch6/cA
AAAAAAAAIJTn7wFQwvq9CVm/BwAAAAAAAAChPH8PgBLW703I+j0AAAAAAAAA
COX5ewCUsH5vQtbvAQAAAAAAAEAoz98DoIT1exOyfg8AAAAAAAAAQnn+HgAl
lsV4t9fbeklebb77B2TL+j0AAAAAAAAACOX5ewCU+HYx3sOSvNp89w/IlvV7
AAAAAAAAABDqI3jr/gEBOETJYrz1krzafPcPyJb1ewAAAAAAAABwAiv3AHiv
cDHew1P1yvPdPyBb1u+RxPLzuL98G3gQke8+IAAAAAAAAMDFfHz3U3S//RG6
64yfnAvQ7sevv7xZYfLghOfX1e5Ptv1nhwuv37MebCxf88ndm/FcMmtB+e4D
AgAAAAAAAFxM+/q9hyV81u8BNLovFylc/HbC+rfa/cm2/+xw4fV71oONxfEC
AAAAAAAArs3z9wCyua9t+3YJ3PIjaLPtT7b9Zwfr96wHS8LxAgAAAAAAAK7N
8/cAsllWuL1ZAndbbdn2J9v+s4P1e9aDJeF4AQAAAAAAANfm+XsA2azXuT1d
Z/Kly/q9wv3Jtv/sYP2e9WBJOF4AAAAAAADAtXn+HkA22da/Wb83Iev3rAdL
wvECAAAAAAAArs3z9wCyybb+zfq9CVm/Zz1YEk8nljc/jzs6331AAAAAAAAA
gIvx/D2AbLKtf7N+b0IXXr9nPdhYXk0gvV7vPiAAAAAAAADAxXj+HkA22da/
Wb83oQuv37MebCyOFwAAAAAAAHBtnr8HkE229W/W703I+j3rwZJwvAAAAAAA
AIBr8/w9gGyyrX+zfm9C1u9ZD5bELdnWfUAAAAAAAACAi/H8PYBssq1/s35v
Qhdev3fGGq+arfuAJJdhjeX6P7sPCAAAAAAAAHAxnr8HkM2y+O3Nmp/1Erhs
+5Nt/9nhwuv3rAcbi+MFAAAAAAAAXJvn7wFk8+3it4clcNn2J9v+s4P1e9aD
JeF4AQAAAAAAANfm+XsA2ZQsflsvgcu2P9n2nx2s37MeLInCyeS0rfuAAAAA
AAAAABfj+XsA2VQtJjlh/U/t/mTbf3a48Pq9qvPzhK37gCT3ag3kq612LWXt
+3QfEAAAAOBwX3/rv/9IkRL3+wZD57sPOAAAoXb0h8sXlyW/KH/zfboPYPLj
pf8H2Gf0+Xb0/WeHC6/fsx5sLI4XAAAAEO3z4y+FtzTv9w1Gz3cfcAAAQtX2
h1Ut4o7v42pf7z6AyY+X/h9gn9Hn29H3nx2s37MeLAnHCwAAAIh2v1f57S3N
5b7B6PnuAw4AQKja/vD28/F67992iVm/1/d46f8B9hl9vh19/9nB+r1v13FZ
D3aON0PaZes+IAAAAMDhljuWb25pru8PjJ7vPuAAAISK7g+P+dbt9dZ9AJMf
L/0/wD6jz7ej7z87XHj93jFd43Fb9wFJ7tWayVfjWftveWrfp/uAAAAAAIdb
37d8ej/h4R7C6PnuAw4AQKja/rCqRdzxfVzt690HMPnx0v8D7DP6fDv6/rPD
hdfvveoDby+22n6y9n26D0hyjhcAAAAQLdv6OvdjAQBoYf3eWPT/AOcYfb4d
ff/Zwfq9ZavtJ2vfp/uAJOd4AQAAANGyra9zPxYAgBbR/WHt93G1r3cfwOTH
S/8PsM/o8+3o+88O1u8tW20/Wfs+3QckuVfj2WvrPiAAAADA4bKtr3M/FgCA
FtHP34veug9g8uOl/wfYZ/T5dvT9Z4cLr987pms8bus+IMmV/IVivZWssWx5
n+4DAgAAABwu2/o692MBAGgRvX6v9vu42te7D2Dy46X/B9hn9Pl29P1nhwuv
3ytpUNdbbT9Z+z7dByQ5xwsAAACIlm19nfuxAAC0iO4Pa7+Pq329+wAmP176
f4B9Rp9vR99/drB+b9lq+8na9+k+IMk5XgAAAEC0bOvr3I8FAKCF5++NRf8P
cI7R59vR958drN9bttp+svZ9ug9Icm+GtMvWfUAAAACAw2VbX+d+LAAALaLX
70Vv3Qcw+fHS/wPsM/p8O/r+s8OF1+8d0zUet3UfkORerZl8NZ4layxb3qf7
gAAAAACHW25mvrmHs76NMHq++4ADABAquj+s/T6u9vXuA5j8eOn/AfYZfb4d
ff/Z4cLr96wHG4vjBQAAAET79mbmcrvg/ovR890HHACAULX94b1F/LZRXGLW
7/U9Xvp/gH1Gn29H3392sH5vfaJaD+Z4OV4AAABwYSU3M5c7Brff738One8+
4AAAhKrtD6taxJv1e72Pl/7/yMG/6KII4KnR59vR958drN9bn6XWg3VUOJmc
tnUfEAAAAOBwVTcH3tz/GSXffcABAAi1oz+8/7rqF3Fb9wFMfrxq890/YFrL
1n1PgHOMPt+Ovv/scOHrVNX5ecLWfUBOtvx87S/fBh48XQPZMV+y/90HHAAu
4CN46/4BjScAdPf+DsCDCe/nAPMwHwJcg/kcvvWwdd8fYIfa6110fvTP2/2A
sjXQRap2PdWa9WDnW4/Dq8/79DmHb8azV75k/7sPOABcwMfHx+PNlOO2Cdeb
GU8A2Lr/db7wZqb7mcCFmQ8BrsF8Du893brvFVCr9noXnR/983Y/oGwNdIWy
Hmwsjhd9eTqQ8Qdyej8/fL342x+37a2V3/ZuE85IxnM2rr/GHyjx+fNfYpbc
zDzkfqb5AeKorxbt86HxB14xP5zp/P6WvtTXPket3DP+0Evt9S46v93DY+eH
8/ef7qzfsx4s4fF6/NnDqwXDXfIzHK8ruV8THx4QpIs2/kB3JfPDOvBmvVnJ
wrMlueQnnIuM5zxcf40/UG65Y/nmlub6dkHLn2V+gDjqq13LfGj8gVfMD+c7
s7+lL/XVYtmMPwyq9noXnV/vW8T8cOb+k0TjdepM1oONpeV4ZXt9huN1GR+v
f1CgFtr4Ax0Vzg8Hrjd7WGw250RkPCfh+mv8gSrr+5ZP7wP8+P2fZ7bfzzQ/
QBz1dYjd86HxB14xP3RxWn9LX+qr0bIZfxhU7fUuOr/sWND8cNr+k0fLdepk
1oONxfHifG8ujlpo4w90VD4/HLje7NPz4oznHFx/jT9Q65z7meYHiKO+jrJv
PjT+wCvmh158Xz8D9WX8gZzr9+LmB+v3JnTfuu9GCevBxuJ4cbJvL45aaOMP
dFE1P3heXNzgG89Lcv01/sAOJ9zPND9AHPV1oB3zofEHXjE/dOT7+stTX8Yf
+HPK9Xuh84P1exO6b913o4T1YGN5OlE8uD3bBs13H3D0z8YfyKnX+r1Pz4sz
nhNw/TX+wA7W78HQ1NeBsn0/BQzN/NCR7+svT3012m7GH0Zk/Z71e5e34yLV
S/T6q2z57gPe6NWEcNXXuw/45Aovjlpo4w+crHZ+8Ly4uPE3ntfj+mv8gX2i
72eaHyCO+jpW7Xxo/IFXzA99+b7+2tRXu/v26j+NP4wi2/q96PnB+r0JVV2h
+sq2Xiv69e4D7nhNdbxGp382/kBOHdfvfXpenOfvXZ3rr/EH9rF+D8alvo6V
7fspYFzmh758X39t6qvdfXv1n8YfRmH93rH73/2AslV1heor23qt6Ne7D7jj
NdXxGp3+2fgDOXn+Xp7xN57X4/pr/IF9rN+DcamvY2X7fgoYl/mhL9/XX5v6
arfdjD+MyPq9Y/e/+wFlq/Yi1VG29VrRr3cf8Ea3ybbuAz45/bPxB3Ly/L08
4288r8f11/gD+1i/B+NSX8fK9v0UMC7zQ1++r7829dXuvr36T+MPo7B+79j9
735A2aq6QvVVv6Jq7K37gDfKsAbyzNe7D/jk9M/GH8jJ8/fyjL/xvB7XX+MP
7LPczHxzT2Z9S7P2/c0PEEd9Hat2PjT+wCvmh76i+1v6Ul/t7tur/zT+MIra
6110/rT1e0H73/2AslV1heor23ot68Ecrysdr9Hpn40/kJPn7+UZf+N5Pa6/
xh/Y59ubmQ+3NGvf3/wAcdTXsWrnQ+MPvGJ+6Cu6v6Uv9dVuuxl/GFHt9S46
f876vbj9735A2aq9SHWUbb2W9WCO15WO1+j0z8YfyGnH+r3QrfuAnD/+xvPC
Plx/jT+wS8nNzPUtzdr3Nz9AHPV1rNr50PgDr5gf+orub+lLfRl/4K72ehed
j54fove/+wFl6751340S2dZrWQ/2XuHkcJmt+4BPTv9s/IGc9s0PAQvNProP
Rd+jYDwv6cP11/gDu1T9ZX/H/RnzA8RRX8eqnQ+NP/CK+aGv6P6WvtSX8Qfu
aq930fno+SF6/7sfULbuW/fdKFF1vl1g6z7gjU5eA7kdwJPXXnYf8Mnpn40/
kNO++WH9u57+1Ndvf+TrOmPmMZ5X5fpr/IF9vv4Wf/+RIiV2/H3f/ABxoutr
qf1DYvnVzofmN+AV80Nf0f0tfel/vh2f6G2q+W3084Gx1F6/suVnmx84wX3r
vhslrAcby2nH6/0ySMdrEq6Pxh/Iad/88NG83uxhydnkM4/xvCrXX+MP7PP5
8ZfCW7L7/n2l+QHiRNfX5+rnDUXMD9nUzofmN+AV80Nf0f0tfel/Dhyf2m3O
9XtDnw+Mpfb6lS0/2/zACe5b990oYT3YWM45Xu8P1nLIHK+E1v905ZB3c33s
6Pzxrz1/jj3fYCx9z/9e6/c+PS/uxVEwnt2Phf7nMvQ/kNn78/9+r/XbW7LL
XYUdf7r5GRZj9T/bGeDptsS6D2+j2vlQ/wOZjXj/h6NE97fU0v+cPNrbO5kP
25t/s/x+ux/Ek+e3vv3P6OcDY6m9fmXL63843H3rvhslrAcbS8lIXmnrPuAD
2ba77V2l62NfZ45/7fkTcb7BKDKc//vmhw/Piws7Csaz41HQ/1yM/gdyKjn/
lzuub27Jtvx93/wMdyP2P+tJoOSpC90HuVHtfKj/gZwynP/6n76i+1vK6X+6
jPny8d+s31sHvr3/ub4LOlv/M/r5wFhqr1/Z8vofDnffuu9Gid0Lqwbdug94
o7g1lutXCrfQNZ933Qd8FG8uZC2XLdfHvk4b/9rzJ+h8gyEkOf/3zQ/f3nX5
9pbLp+fFvTgKxrP7IXh12h/7tsf+QfQdf/0PlCs8/9f3XZ/+ff/hhsOBu6Ew
mceg/c/nZD8vrHY+1P9AQknOf/1PX9H9LYX0P92HvXH93tO7oLP1P6OfD4yl
9vqVLa//4XD3rftulLAebCyOF1vfXsV2X7lcH/s6Z/xrz5+48w3yy3P+91q/
t/2Xkt0PSpLzwXj2Hf/3Z/7h73zIn0Lf8df/QLny89/6PYg2bv/z+d1PCrtv
l/m+Muf3U/ofKJfn/Nf/9GX9Xgb6nwwj37h+77Pf8/fy9D+jnw+MJdt6vJx/
P2Iq9637bpSwHmws0eNTfrAeDpnj1UvhJWzfxcv1sa8Txr/2/Ak93yC5VOd/
r/V7n54X9+IoGM+Og19y8ke8uaMWRP8DqVSd/9bvQaih+5/Zvq9M+P2U/gfK
pTr/9T99Wb/Xnf4nyeA3rt97ehd0tv5n9POBsWRbj5fw70fM5r51340S1oON
pXY8R9+6D3h+Q//9he7jn+rvL5BcqvO/1/q97b+U7H5ckpwSxrPj4Jec/BFv
7qgF0f9AKtbvQR5D9z+zfV+Z8Psp/Q+US3X+63/6sn6vO/1PksFvXL/32en5
e6n6n9HPB8aSbT1ewr8fMZv71n03SpRcLK60dR/wRhFrGncvtjzwz331evcB
zy/6fkKq+xUTynZ8nQ/MLNv5v2N/2tebfXpe3ItDYDw7Dn7h+Z/q/ek7/vof
KJdq/V7t/sDFZLs+Vtl+X7meMdYvXuP+7Y75MNvxNd8ys2znf7b9mYr1e91l
uz5WGb3/OXD93qu7oNmOr/OBy8i2Hi/h34+YzX3rvhslrAcbi+PFg2z9LcfK
dnydD8ws2/nfZf3e9l9Kdj8uSU4J49lx8AvP/1TvT9/x1/9AOev3II9s18cq
D99XPvznMjlc5vvKhN9P6X+gXLbzP9v+TMX6ve6yXR+rjN7/HLh+7/PZ8/cS
Hl/nA5eRbT1ewr8fMZv71n03SlgPNhbHiwfZ+luOle34Oh+YWbbzv8v6vU/P
i3txCIxnx8EvPP9TvT99x1//A+Ws34M8sl0fqzx9qMj6YSP3+eEy31cm/H5K
/wPlsp3/2fZnKtbvdZft+lhl9P7nwPV7r+6CZju+zgcuI9t6vIR/P2I29637
bpSwHmwsO4Z06K37gA/h20tY48Ur+v3pO/617+98YGbZzv+W+t233uzpv5Sc
lvHMM/4R9Zit3meT7fg6H5hZ+fl/zveb6pGZZbs+ltt+X/nwTeXFvq/cNx9m
O77mW2aW7fzPtj/zsH4vg2zXx3Kj9z8Hrt/7fPH8vYTH1/nANWRbj5fz70dM
5b51340St8m27gPeKGJNY8uSy+j96T7gQ/j4fXtz8Wrvb0Pfn77jX/v+zgdm
lu3831G/y/+6b73Zp+fFGc80sl0fOVa24+t8YGbl5/9yM/b9PYTG+zPqkZll
uz6Wm+37yn3zYbbja75lZtnO/2z7M49z+lvey3Z9LDd6//Nx3Pq9N3dBsx1f
5wPXUHv9ypa/fwr9Dwe6b913o4T1YGNxvHjq4+e2vXIdcvGKfn/6jn/t+zsf
mFm2879qfz6a15u9+peSczKe3WW7PnKsbMfX+cDMCs//b2/GLrcR7r+I3h+4
pGzXx0JPf17Y+lbk1y/Wc0j3cW60ez7MdnzNt8ws2/mfbX8mcVp/y3vZro+F
Ru9/Po5bv/f5+vl7CY+v84ELqL1+ZcsvH0T/w1HuW/fdKGE92FgcL175eLGN
8v70Hf/a93c+MLNs53/5/nx4XtzRI288u8t2feRY2Y6v84GZlZz/JTdjlzsJ
t7bvI9QjM8t2fSyxft7C07nix8/njdx1H+RGLfNhtuNrvmVm2c7/bPszgzP7
W97Ldn0sMXr/82pMjtoyH9+I/Rn9fGAstdevbPn1Z4meH5iE9XvWgwWpHc/R
t+4DPpbo65frY1/Zjq/zgZllO/8L9+fD8+KOHnbjmUG26yPHynZ8nQ/M7Nvz
v+ov++33Z9QjM8t2ffzW+kEir76vfIgNrXE+zHZ8zbfMLNv5n21/Lu/k/pb3
sl0fv3WN/ufpsDRuQxzfw/fnGucDo6i9fmXLP3yc6PmBGQy0fq+qXi6wdR/w
RhFrGncvtjzwz331evcBH8ht9e8y1v+Oo9f7f/2vP34+7fn+6/fHNFs+m2zH
N3p/oEX0/BA9H9Yq358Pz4s7lPHMINv1MVs/o/859v31P2SWof9Zv+G3GmtH
PTKzbNfHqvnk8/WDF14texix/2mZD7MdX/MtmWXof1rev5Z6PN+Z/S3vZbs+
ztP/nHP/M9vxDd2fHecD1F6PRs+vP7v+h1qj92/R669qt+j9WX/2PP2P41Vy
vHjv4fp1+/k02l7vv66XkmOaLZ9NtuMbvT/QInp+iJ4Pa5XvT/v9Fs+LM57Z
ZLs+Zutn9D/Hvr/+h8wy9D8P90ze3xxrrB31yMyyXR+r5pNlBnh6j7H9/Xfk
I7TMh9mOr/mWzDL0Py3vX0s9nu/M/pb3sl0f5+l/zrn/me34hu7PjvMBaq9H
o+fXn13/Q63R+7fo9Ve1W/T+vDp2o9z/mfl48V709avk/e8Hbsk8rZf1m2TL
dz+IyY/vmfsDtc6cHyLmw5bPXl6Pnhd3LOOZQYbrY7Z+Rv8T9/76H7LJ1v88
vO0ry/2Els+uHplZhuvjvvlkPQO8us247/2z9T8t82GG43vm/kCtbP1Pzvs/
HOXM/pb3Mlwf5+x/ujx/78L9T/n5AGu116PR8+vPrv+hVsv5lsFyHV+7XXc9
WM7+p9yOIR16614gA7kl6G/X5faqXp7WZpJ894OY/PieuT9Q68z5IWI+bPns
5fXoeXHHMp4ZZLg+Zutn9D9x76//IZts/c/2zsnWUX/fV4/MLMP1cd988jAJ
bLcff/z+etz+p2U+zHB8z9wfqJWt/zlz/lGP5zuzv+W9DNfHOfsfz987dn/K
zwdYq70ejZ5ff/bo+YHrGb1/e3+ZuN6Ws/8p9+1+Nr6+ezyD9qd7gQzklqC/
XZ8br+rl1ZYh3/0gJj++Z+4P1Dpzfig5/8+cf8rr0fPijmU8M8hwfYyef6Lz
3Q9i8uN75v5ArTPnh5Lzfx14dV/lqPlHPTKzDNfHHfPJ58875O/nh/vNwDPn
twgt82GG43vm/kCtM+eHkvP/zPlHPZ7vzP6W9zJcH3fU+wX6H8/fO3B/qs4H
WKu9Ho2eX3/26PmB6xm9f1vv5Kudb3n9TTvxdDtzf/L0P47Xq9e7F8hAlrN0
fQk78Jysff9X9TJKPptsxzd6f6BF9PwQPR/WKt8fz4s7lvHMINv1MVs/o/85
9v31P2SWof858/6YemRm2a6PhfPJ/X2WwNMZ4/bs+8oR+5+W+TDb8TXfklmG
/qfl/Wupx/Od2d/yXrbr4zz9z2nP30t1fIP2Z/f5ALXXo9Hz68+u/6HW6P3b
wxXh6c63vH6r3KL35+HYJel/HK+S48W3bj/XnC+/6Pj+0fU1Yv1e6fiesD+w
2wnzQ+h8uEPh/nhe3LGMZxKpro/Z+hn9z+Hvr/8hrQz9z8n3x9QjM0t1fSyZ
T5Z3u/+v6+li/Rtvub+/Ltc4H6Y6vifsD+yWof9pfP9a6vFko3//ezGpro/z
9D+n3f9MdXwj9qflfIDa69Ho+YePr/+hyuj923onX+18y+u3yi16fx6OXZL+
p1zteI6+dS+Qgdx+XrM+fy4+P/YSVvv+S70s/7+wvpLks8l2fKP3B1pEzw/R
82Gt8v3xvLhjGc8Msl0fs/Uz+p9j31//Q2YZ+p8z74+pR2aW7fpYMp8s37b8
+Pl95foW6/p33TZfWY7Y/7TMh9mOr/mWzDL0Py3vX0s9nu/M/pb3sl0f5+l/
Tnv+XqrjG7E/LecD1F6PRs+vP7v+h1qj92+3ybaHY5ek/yn36gQ76vXaLXp/
uhfIQG5/vPwtV7Fe7x9dXyPW75WOb/T+QIvo+SF6PqxVvj+eF3cs45lBtutj
tn5G/3Ps++t/yCxD/3Pm/TH1yMyyXR9L5pPP1feVS2Y9Xdx/sWRq378lH6Fl
Psx2fM23ZJah/2l5/1rq8Xxn9re8l+36OE//c879z2zHN2J/Ws4HqL0ejZ5f
f3b9D7VG799e7fBRr9du0fvzcOyS9D+OV8nx4r2H69ct5t+nlL9/dH2NWL9X
Or7R+wMtoueH6PmwVvn+eF7csYxnBtmuj9n6Gf3Pse+v/yGzDP3PmffH1CMz
y3Z9LJlPPi/x/XW5lvkw2/E135JZhv6n5f1rqcfzndnf8l626+M8/c+Zz9/L
c3wj9qflfIDa69Ho+fVn1/9Qa/T+7dUOH/V67Ra9Pw/HLkn/43iVHC/ei75+
lbz//cCtp8RtvWznzDz57gcx+fE9c3+g1pnzQ8R82PLZy+vR8+KOZTwzyHB9
zNbP6H/i3l//QzbZ+p/tn/X+tkPLZ1ePzCzD9bF2Pvms/L5y9P6nZT7McHzP
3B+ola3/yXn/h6Oc2d/yXobr45z9T5fn712y/6k9H4767FxD7fVo9Pz6s+t/
qDV6//Zqh496vXaL3p+c/U+5HUM69Na9QAZyS9DfrsvtVb28micz5LsfxOTH
98z9gVpnzg8R82HLZy+vR8+LO5bxzCDD9TFbP6P/iXt//Q/ZZOt/zrw/ph6Z
WYbrY+188vnH7yuf+rH6vnL0/qdlPsxwfM/cH6iVrf85c/5Rj+c7s7/lvQzX
xzn7H8/fO2p/as+Hoz4711B7PRo9v/7s+h9qjd6/3SbbcvY/5dYn1auTreX1
3eMZtD/dC2QgtwT97frcWCplPT2+OZcy5LsfxOTH98z9gVpnzg8l5/+Z8095
PXpe3LGMZwYZro/R8090vvtBTH58z9wfqHXm/FBy/q//11fb+k9p/OzqkWll
uD7WzifLzPBwl3X9i+V3/dh81zNc/9MyH2Y4vmfuD9Q6c34oOf/PnH/U4/nO
7G95L8P1sbber9H/eP7eUftTez4c9dm5htrr0ej59We/6X+oNHr/dtQ6q1ev
vxmWV2N12v7k6X8cr1evdy+QgSxn6cOk1Ov9X9XLKPlssh3f6P2BFtHzQ/R8
WKt8fzwv7ljGM4Ns18ds/Yz+59j31/+QWYb+59ubY/dtufPQ8nnVIzPLdn0s
mU8+n31f+fBblsnh4X7giP1Py3yY7fiab8ksQ//T8v611OP5zuxveS/b9XGe
/ue05++lOr4R+9NyPkDt9Wj0/Pqzr99B/0OJ0fu36PVX347MdqBC9+fh2CXp
fxyvkuPFt26rf9HzGbD4vOr9o+trxPq90vE9YX9gtxPmh9D5cIfC/fG8uGMZ
zyRSXR+z9TP6n8PfX/9DWhn6n5KbY/ftkLlIPTKzVNfHkvlkPT88vR+4vid5
gfu3jfNhquN7wv7Abhn6n8b3r6UeT3Zyf8t7qa6P8/Q/p93/THV8I/an5XyA
2uvR6PmHj3/T/1Bj9P7tqHVWr14vHJz1KIXuz8OxS9L/lKsdz9G37gUykNvP
a9bnz0XFx17Cat8/2/fRGer3Ssc3en+gRfT8ED0f1irfH8+LO5bxzCDb9TFb
P6P/Ofb99T9klqH/qfrLfuP3EeqRmWW7PpbMJ5/F98+388OI/U/LfJjt+Jpv
ySxD/9Py/rXU4/la5nMOPxapro/z9D+nPX8v1fGN2J+W8wHKT57b5udxj5h/
+Oz6H6q0nG8ZVO3/Bbb1Z8/T/5Rb78CD2+8n2PqV+x7Ky8vLy8vLy0+V14/J
y8vLy8vLd7/hpt+Ql0+bV7/y8vLy8vLnXx9dT+Xl5eXl5eXl5a+UX37X1u33
9cbvX5GXl5eXl5eXv3w++v5hts8rLy8vLy8vf34/oN+Qlx83r37l5eXl5eXz
98/ZxkdeXl5eXl5eXl5eXl5eXl5eXl6+PO/+oby8vLy8vHz3Lxz1G/LyafPq
V15eXl5ePn//nG185OXl5eXl5eXl5eXl5eXl5eXl5cvz7h/Ky8vLy8vLd//C
Ub8hL582r37l5eXl5eXz98/ZxkdeXl5eXl5eXl6+Kn/7/afuysvLy8vLy8tP
m+9+/zD5+MjLy8vLy8+Q7/6Fo35DXj5tXv3Ky8vLy8vn75+zjY+8vLy8vLy8
vLx8ef7+/5ft6z/l5eXl5eXl5WfL971/mH985OXl5eXlZ8h3/8JRvyEvnzav
fuXl5eXl5bf57g2w66m8vLy8vLy8vPxl8l//69qtYH2gvLy8vLy8vPzF8n3v
H+YfH3l5eXl5+Rny3b9w1G/Iy6fNq195eXl5efltvnsD7HoqLy8vLy8vLy9/
pfz7V+Tl5eXl5eXlL5/vfv8w+fjIy8vLy8vPkO/+haN+Q14+bV79ysvLy8vL
5++fs42PvLy8vLy8vLy8vLy8vLy8vLy8fHne/UN5eXl5eXn57l846jfk5dPm
1a+8vLy8vHz+/jnb+MjLy8vLy8vLy8vLy8vLy8vLy8uX590/lJeXl5eXl+/+
haN+Q14+bV79ysvLy8vL5++fs42PvLy8vLy8vLy8/PqV+1YSlpeXl5eXl5ef
Mx99/zDb55WXl5eXl5ffvtj9C0f9hrx82rz6lZeXl5eX377YvQF2PZWXl5eX
l5eXlx8o//Xil+3vkpeXl5eXl5eXv78Yff8w2+eVl5eXl5eX3+a7f+Go35CX
T5tXv/Ly8vLy8tt89wbY9VReXl5eXl5eXn6s/Ncv1r/rvm3D8vLy8vLy8vJz
5k+4f5jq88rLy8vLy8tv892/cNRvyMunzatfeXl5eXn5bb57A+x6Ki8vLy8v
Ly8vP1z+7v677r9RXl5eXl5eXl7+xyn3G7N9Xnl5eXl5efltvvsXjvoNefm0
efUrLy8vLy+/zXdvgF1P5eXl5eXl5eXlB82/f/32+yYvLy8vLy8vP1v+zPuH
GT6vvLy8vLy8/Dbf/QtH/Ya8fNq8+pWXl5eXl9/muzfArqfy8vLy8vLy8vID
5ZdfrLcfv6/9e/q6vLy8vLy8vPxs+ej7h9k+r7y8vLy8vPz29e5fOOo35OXT
5tWvvLy8vLz89vXuDbDrqby8vLy8vLy8/Fj5z5+P6Xuw/MaFvLy8vLy8vPyE
+RPuH6b6vPLy8vLy8vLn9wP6DXn5cfPqV15eXl5e/vzro+upvLy8vLy8vLz8
lfLL79q6bZ7at31FXl5eXl5eXv7y+ej7h9k+r7y8vLy8vPz5/YB+Q15+3Lz6
lZeXl5eXz98/ZxsfeXl5eXl5eXl5eXl5eXl5eXl5+fK8+4fy8vLy8vLy3b9w
1G/Iy6fNq195eXl5efn8/XO28ZGXl5eXl5eXl5eXl5eXl5eXl5cvz7t/KC8v
Ly8vL9/9C0f9hrx82rz6lZeXl5eXz98/ZxsfeXl5eXl5eXl5+ar87fefuisv
Ly8vLy8vP22++/3D5OMjLy8vLy8/Q777F476DXn5tHn1Ky8vLy8vn79/zjY+
8vLy8vLy8vLy8uX5+/9ftq//lJeXl5eXl5efLd/3/mH+8ZGXl5eXl58h3/0L
R/2GvHzavPqVl5eXl5ff5rs3wK6n8vLy8vLy8vLyl8l//a9rt4L1gfLy8vLy
8vLyF8v3vX+Yf3zk5eXl5eVnyHf/wlG/IS+fNq9+5eXl5eXlt/nuDbDrqby8
vLy8vLy8/JXy71+Rl5eXl5eXl798vvv9w+TjIy8vLy8vP0O++xeO+g15+bR5
9SsvLy8vL5+/f842PvLy8vLy8vLy8vLy8vLy8vLy8vLlefcP5eXl5eXl5bt/
4ajfkJdPm1e/8vLy8vLy+fvnbOMjLy8vLy8vLy8vLy8vLy8vLy8vX553/1Be
Xl5eXl6++xeO+g15+bR59SsvLy8vL5+/f842PvLy8vLy8vLy8vLrV+5bSVhe
Xl5eXl5efs589P3DbJ9XXl5eXl5efvti9y8c9Rvy8mnz6ldeXl5eXn77YvcG
2PVUXl5eXl5eXl5+oPzXi1+2v0teXl5eXl5eXv7+YvT9w2yfV15eXl5eXn6b
7/6Fo35DXj5tXv3Ky8vLy8tv890bYNdTeXl5eXl5eXn5sfJfv1j/rvu2DcvL
y8vLy8vLz5k/4f5hqs8rLy8vLy8vv813/8JRvyEvnzavfuXl5eXl5bf57g2w
66m8vLy8vLy8vPxw+bv777r/Rnl5eXl5eXl5+R+n3G/M9nnl5eXl5eXlt/nu
XzjqN+Tl0+bVr7y8vLy8/DbfvQF2PZWXl5eXl5eXlx80//712++bvLy8vLy8
vPxs+TPvH2b4vPLy8vLy8vLbfPcvHPUb8vJp8+pXXl5eXl5+m+/eALueysvL
y8vLy8vLD5RffrHefvy+9u/p6/Ly8vLy8vLys+Wj7x9m+7zy8vLy8vLy29e7
f+Go35CXT5tXv/Ly8vLy8tvXuzfArqfy8vLy8vLy8vID5f8f5c6dSg==
    "], {{0, 240.}, {3392., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{3392., 240.},
  PlotRange->{{0, 3392.}, {0, 240.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.8672367089823227`*^9}},
 CellLabel->
  "Out[474]=",ExpressionUUID->"5372431b-6229-452b-be9a-7d4c4fdca1a3"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3T2uJEuaHugAqYxQBLiF0biEElqhSKAEogfUrkJimgSVJtC8ADH7GKGX
QLEXkAvIJXAZs4AjTFZGp9Nv/LqF++ffZ2aP46lCZtw3T1rYv/uxE/l//qf/
9rf/+V9cLpf//n/8+L+//Y//49/+wz/8x//n//rXP37zH/7+v//X//L3f/d/
/7u///3v/svf/cOf/9O//PHi//fjf//+X10uf/31b//vFwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKEuqyu9MDAY
4wugJvMzxDG+AGoyP3/g5kovD2UZXwA1mZ8hjvEFAJDoxx5s/dzSlgwOZHwB
1GR+hjjGF0BN5ufPrI/5OfLHM8YXQE3mZ4hjfAEAZLn+wMXtDyrbksERjC+A
mszPEMf4AqjJ/LzHzRk/R/64YXwB1GR+hjjGFwBAooc7sfV+zK4MPmZ8AdRk
foY4xhdATebnna7Xs98yOeMLoCbzM8QxvgAAcr3Yj123ZF9+EAM+ZXwB1GR+
hjjGF0BN5uedrtez3zI54wugJvMzxDG+AAByPdyP/c23Bxuz9KJCd4wvgJrM
zxDH+AKoyfy80/W6/zX8ZnwBVGV+hjjGFwBAovVm7McebL0Nu9mS2Y9BK+ML
oCbzM8QxvgBqMj/vd3Oll4c6jC+AmszPEMf4AgBIdLMZe33Zj0ET4wugJvMz
xDG+AGoyP0Mc4wugJvMzxDG+AABSXH5db3Zgz7dk9mbwjPEFUJP5GeIYXwA1
mZ8hjvEFUJP5GeIYX9P6trrSCwMA0/pgG3azH7t+BVsyuGd8AdRkfoY4xhdA
TebnIMuVXhISGV8ANZmfIY7xNa1v3779aLjff12O/AFAij2bsWVLtt6bAQvj
C6Am8zPEMb4AajI/x1mu9JKQxfgCqMn8DHGMr2ndHPZz5A8Ashx4LT+Lkf6m
oAjjC6Am8zPEMb4AajI/n1C36SUhi/EFUJP5GeIYX9Ny3g8A0l1+XkduyH79
LIYtGRhfADWZnyGO8QVQk/k5zsMrvVScyfgCqMn8DHGMr8l9+/bt97vLeT8A
OM3hO7GbXVn6G4RExhdATeZniGN8AdRkfo52c6WXhzMZXwA1mZ8hjvGF834A
kMt+DOIYXwA1mZ8hjvEFUJP5+QTLlV4STmZ8AdRkfoY4xhe/3R35c9gPAE4W
tCWzGYPfjC+AqszPEMf4AqjJ/HyCL4f9ZmV8AdRkfoY4xhe//Tzyt1zphYEb
l9UVkYeZGS91LFuyv/n2fqO1JXNCm5qf6YXxBawZL3WYnyGO8QWsGS91mJ8h
jvEFrBkvdZifIY7xxW+/Puc8vRhUUGq8XP54JvltkVrzMDPjpZr7LdnDfdeW
zdgJbWp+pi/GF3BlvFRjfoY4xhdwZbxUY36GOMYXcGW8VGN+hjjG15A+uNLL
TLo64+V64HD79NKah5kZL2Wtt2SL5Xr44tfLHVpEm5qf6ZTxBZMzXsoyP0Mc
4wsmZ7yUZX6GOMYXTM54Kcv8DHGMryE9bZ3/eVlbXk8vMIlKjZeHJVmX56ZU
rXmYmfFS2X3rrPdgy07s/pVn1wklND/TC+MLZma8VGZ+hjjGF8zMeKnM/Axx
jC+YmfFSmfkZ4hhfo3rw9n+d8Vv+fznyl15aslQbLy/Kcy3S1x8PIrbmYWbG
S3GXX9e6XR7+zMXrzdj1i0QUz/xMv4wvmJbxUpz5GeIYXzAt46U48zPEMb5g
WsZLceZniGN8jer2vf863Xf/i/SikqXaeHlYnvtpZylSax5mZrz04mFLvZiu
l/8UtBN7USrzM90xvmA2xksvzM8Qx/iC2RgvvTA/QxzjC2ZjvPTC/AxxjK/x
/OEtrz7Wb/1Bf1/O+02s1HhZF+bmdPFNkS6/PnuwKQ8zM176cvODGMukdzNp
Lxuw0J3Yb+ZnxmJ8wTyMl76YnyGO8QXzMF76Yn6GOMYXzMN46Yv5GeIYX+P5
32/5jyf9/Hu+lBovN4V5fd1MSlvy6bUNiYyXTl1+XQ9fPK2lzM8MyfiC4Rkv
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
jtizde3Z1bo+tn6d9Aop7kWVplzpFUIpy4r2Yslb959q+fQKJFTcTDjGld5A
dM38XJ/P9+tXtfFi/za273/8fLybG/a3n6fXXT69wgHgN88rsq/0DgCcJnu+
ub3SKwQGZjxCnGrPez2v5q2BvyPWut5FX+kVUtyzM5bP6rP1Z4tav056hVDK
el172N9u+li1fHoFEqp1Ppzt9fQGomvm5/qc9+tXtfFi/za276tDcTe1ff3t
i/N1PeZb66fpj+ifAGxU7fnAbK+ndwDgNOYfmIfxCHGqPe/1vJq3Bv6O2LN1
7fLkal0fW79OeoUUp72orNp6av1lrXU+nO319Aaia+ZniFNtvNi/je37o/Ny
D3/74nxdR/nW+mn6I/onABtVez4w2+vpHQA4jfkH5mE8Qpxqz3s9r+Yt5/2W
q3V9bP066RVSnPaismrrqfWXtdb5cLbX0xuIrpmfIU618WL/Nrbvxc7jRefT
KxwAfvO8Ivv19A4AnMb8A/MwHiFOtee9nlfzlvN+y9W6PrZ+nfQKKe5ZfWZd
6RVCKdXWU+sva3Ez4RhXegPRNfNzL5YrvSRsV2282L+N7fvdv3h7+XlAbl35
z87X9ZhvrZ+mP6J/ArDRtrt2V9SV3gGA02TPN7dXeoXAwIxHiFPtea/n1bw1
8PfFWte76Cu9Qop7O4HcXM/yR32d9AqhlGrrqfWXtdb5cLbX0xuIrpmfe+G8
X4+qjRf7t7F9/+N5uZtPxvvnNnp+vq67fGv9NP0R/ROAjao9H5jt9fQOAJzG
/APzMB4hTrXnvZ5X89bA3xd72yFvrtb1sfXrpFdIcdqLyqqtp9Zf1lrnw9le
T28gumZ+7oXzfj2qNl7s38b2/eV5uZvXL+/O19XPp1c4APzmeUX26+kdADiN
+QfmYTxCnGrPez2v5q2Bvy/2tkPeXK3rY+vXSa+Q4rQXlVVbT62/rLXOh7O9
nt5AdM38XN/DK71UbFFtvNi/je37o/Ny638Yd8v5uo7yrfXT9Ef0TwA2qvZ8
YLbX0zsAcBrzD8zDeIQ41Z73el7NWwN/R+xth7y5WtfH1q+TXiHFvajSlCu9
Qiil2npq/WUtbiYc40pvILpmfu6Cw36dqjZe7N/G9v355+M9PETXe761fpr+
iP4JwEY7b+ddO6/0DgCcJnu+ub3SKwQGZjxCnGrPez2v5q2BvynWut5FX+kV
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
O9/l/NhrGyeHYa70Cp9c6367qXG///Hfpt+ST6+Q4vWfXmDgNNXmh+j5vzWf
3kBdcNLvRc1MNb56L39rPr2DAR+rNj/DSIwv9U+/7IfHZn6AOMaX+gfO0bpf
jd7fRpenNZ/eQNy7XunF2KKpvw1wpVf4TiefmbyvwJPPaqZX+OR+tMLyT8y/
dW3H0Hx6hZzM/Q7wTPT8UG3+t75E96KH/6rv23/Sd50ZaSWabXxF1+ds7xeI
4/6ImS1r2SGxe8bX2/qJvtQ/H7MfHlv0/LC983wmvQLhBeuv+p9Z9OY2/Q3S
JHo/We15r+fVvHW90ouxhfNjfTmtvV4fm9Rek/ixymxckq4dIzqfXiEn6/1+
53/9m0uT9AJDR0543ltq/re+RPeiz8773Rz5K7gS7a+ZGcZXdH3O9n6BOL3f
H8Eey0J2XfsOX++MrwPrp/W6fku0KZ9eIZRiPzy26PnB93eYmfVX/c8sen+b
/gZpEr2frPa81/Nq3rpe6cXYwvmxvpzTXq8ba2ky7VXQsT89cV1r3i5JN8+c
4/Lp1Xt+a568f27tP6/zzvsxttyfVjvhPFKp+d/6Et2Lev98v2PH42zjK7p1
6r/fY/c/MLax9z9Q2f2K9vBaYq1f3/h6Wz/3O+Gb68XPyLy+rpPqyfVv/zOS
avv/8Yy9//H9HfrS1/MfqtW//c/Nuwvd36a/QZpE7yerPd+u/7yadNcrvRhX
r9cj58f6sqUmR7rSK7wj948H9+9ClxXnxZK0bq/ofHoln9+mp93vtPafD/rb
emUstUpCq4j59oMyhM4P1eZ/60t0L3r4VOf3Hj7fL2I8zja+otuo8vs9Yf8D
w6jQ/8+8P4Jq1ovas/VurfXrG1/b6+fF90PXgbf75/UuerDnP5ys2v5/JBX6
f/T8cAm+0huRYfT4/Ic69W//87r+I/a36W+QJtH7yWrPtys/r6aI65VejC3r
0TG79n6u9EbZKe5M5vqVjVfoGdGr9ArvxYuN8Z5t1XrdedheNx0mOp9ez3Wa
9diGbu0/n/W3r3/889f6vN8//jm9huEDQfPtgcU4pGDV5n/rS3Qv+uy831f2
5/sFjcfZxld0M5V9v+fsf2AMRfq/78cxs6+7zwp4/V2D1q9vfG2vn53fD324
ix7s+Q8nq7b/H0aR/h89Pzz7vsxRr6e3I2Po9PkPRerf/udttUTsb9PfIE2i
95PVnm+XfV5NHdcrtwwb16Po/fxNd319Hfv3Dnl/ob2493ZX/PHOynpXvGUP
aeXW/vNxf7s54Oe8Hz2Km28PL8nOUlWb/60v0b3os/N+v6f+5GbceJxtfEW3
VM33e9r+BwZQp//7fhwz+3r3L/kuy+Jn67vxtb1+dn4/9Cvv8/3sf0ZVbf8/
hjr933k/6Pf5DxXq3/5nS81E7G/T3yBNej9fV6089ucDuF6JBdi+HkXv52+6
6+vr2L93yPuL6PrZ3lg3Taa9smzcEn+2ubLeddG4e5q4tf/s6W/O+9G70Pk2
qDAfF6na/G99ie5Fn533+8r7yc3Q8Tjb+IpurILv98z9D/SuVP/3/Thm5rxf
rgO/H/pwFz3Y8x9OVm3/P4BS/d95PybX9fMf0uvf/mdj5UTsb9PfIE16P19X
rTz25wO4Xll/e9N6FL2f3/Iwan25v3ittT57v9IrvD7n/QY20v3Ow9N9jvzR
l1L3+7OdR7K+RPeiz877/Z73k5tdP++drf8XfL+e98J2pfq/78cxM+f9ch34
/dCvpM/3s/8ZWLX9/wBK9f/o+WHL4rLnSm9Netf18x/S69/+Z2PlROxv098g
TXo/X1etPPbnA7heWX9703p0zK69nyu9b+z0bEI46vXWK7o86RVen/N+Y4u+
v3DeD7ardr8/1fxvfYnuQp+d9/sa9PP9or/+bP2/4Pv1vBe2q9b/q5UHTnN/
3m+9Aq5f/Hh9N742Vs7O74c+20VX29/qDx2ptv8fQLX+H1qeZx3mqNfTW5Pe
VVsfOVa19p2qP5ywv6UjvZ+vq1Ye+/MBXK+sv71pPYrez7de7i9e017c8P3o
sQ1zv+O8HwOodr8/1fxvfYnuQp+d9/t90M/3i/76s/X/gu/X817Yrlr/r1Ye
OM3Neb+b3y6LnfN+QQ78fujXk88/qba/1R86Um3/P4Bq/d95P2ZWbX3kWNXa
d6r+cML+lo70fr6uWnnszwdwvbL+duf9Br6/0F7c8P3osY1xv/PiXJ8jf3Sk
2v3+VPO/9SW6C3123u/L5/sNMb6iG6vg+/W8F7ar1v+rlQdO8/XoQ/y+Vh/u
d13vnPcLcuD3Q5/toqvtb/WHjlTb/w+gWv933o+ZVVsfOVa19p2qP5ywv6Uj
vZ+vq1Ye+/MBXK+sv915v4HvLz6o0q6v9Arvwtsh//HOynpXQVz7fvb1W/N/
vV6e9/vKWy6hVfR4rFOeavO/9SW6/3x23u/31J/crLY+bjdb/6/5fqP3PzCS
av2/WnngHPfn/W5O+n3ffd7vN+NrW83s/H7o1/PPP6m2v9UfelFt/z+Gav0/
rjyX4Cu9KRlAtfWRY1Vr33n6wzn7W3rR+/m6auWxPx/A9UoswPb16Jhdez9X
et/YaT0JPJsc9rzeWp/R5Umv8C58+3m9GOz7vx/9ug8sv47Op1f1YO372ddv
zb9eEF//V6gmejzWKU+1+d/6EtR/lt7y2Xm/r9Sf3Ky2Pm43W/+v+X6j9z8w
kmr9v1p54Bynnfczvp7VzFIPO78f+mIXXW1/qz/0otr+fwzV+n9ceXx/h/qq
rY8cq1r7ztMfztnf0ovo/WS159s1n1dTyvVKLMD29cj5sb5oLx769uu6H+l7
tlVvF6OlG1x/EZ1Pr+fB2vfjr9+Uf70gpi+X0Cp6PBYpT7X53/oS1HnWT28+
OO/3e/ZPblZbHzearf+Xfb+h+x8YTLX+X608cIL7836XXw/Qll+v18SP/yLj
61m1vN45b9w8//7u80+q7W/1hy5U2/8Po1r/DyqP7+/QhWrrI8eq1r6T9Idv
Z+1v6UL0frLa8+2yz6up43rllmHjeuT8WF+0F898e3Lt+ZpbFqOlJ1xWz5yD
8umVPFj77vn62/N/vfx7vowlejxWKE+1+d/6EtRzXj/VeftI56vAT25WWx+3
mK3/V36/re1bbf6HM1Xr/9XKA9HWnw/wcO1blsWrPX+X8bW9To66zqz/1q8f
XR72q7b/H0m1/h9RHt/foRfV1keOVa19Z+gPz97jUVf6G6RJ9H6y2vPtys+r
KaLCeb/ftq1Hzo/1pbU+e7/SK7wvh++pmhqrdbx/kE+v4cHad+fX355/fd4v
vWLhA9XuYYef/6Pz6T0qq9vsPO9X5Cc3q62Pb0X359Z8dANFl781v7N9q83/
cKZq/b9aeSDU+oP7np33u4ntYXxtr5adV0r9t3796PKw0879MK9V6/+Hl6ep
/3xwpbcgI6m2PnKsau07SX94+DZ3Xulvig80Le4f7Cdbv37v5WnNp3cA7hU5
7/fbhvWoqb8NcKW3yE4RZyA/Ppx54N/77PX0Cu/IZfVz3Ouf+77pP/eZZy6r
fw6mSH79Xn68sv7jb/tMa76aLe175tdvzT881+ewH0Gi54fm/h88/8ww/5+5
vszj2xCf71dhfazWn6v1/8rvN3r/A2f6Krb/iVatPHCar+cfFHDUtwmi73eq
5bc7Z/9cYX97ZnnYr9r+/0zV9j9x889n5YGRVFsfq+1nouef2dp3nvl2jOfD
s9ky3qs9T56tPDPvz3tUub02fn8q9LxW6xVdnvV73zIfVjNze/HazXi//Pq0
2HXmps+/nqyuX6FU/tl72dJnWvPVbGnfM79+a955P84UPT809//g+WeG+f/M
9WUe+5/nVPh8vwrrY7X+XK3/V36/0fsfONNXsf1PtGrlgdMsK9r99T3mvN/h
9zvV8tuds3+usL89szzsV23/n/XeK+x/4uafz8oDI6m2Plbbz0TPP7O17zzz
7RjPh2ezZby37g+j95OzlSe6/ByrcnttWY+OOpf17PXWK7o8z9qul/3PzO3F
a1vG+9Lbt0xWyxesk792jOX1h+N3/Qdb8+mNuLN9z/z6rXnn/Yh25vywpf+f
Of/MMP9H59M7cIoxfn6zwvpYrT9X6/+V32/0/geiVdv/3Pix219smXCa8sYj
c1qvaA+v70cc+dsyvqLnn5rPf1I+3y9lf3tmedhvz364R9X2P9We/8CoKqyP
1fYzvv8V9/XnmW/HeD48g9bx3ro/bM23ln+28kSXn2NVbq/t+5Mbl3HPj/W+
//mgSru+0iu8I5fN349+PWWt679afj2cn43fh2N/Yz69EXe275lf/4Py3Jzu
c9iPY505P2zp/2fOPzPM/9H59A6cYoyf36ywPlbrz9X6f+X329p/ovsbtKq2
/1lbH97bcoSvNW88MqebRe3+OuTJxpbxFT3/1Hz+4/P9zLc1Vdv/R6u2/6n2
/AdGVWF9rLafOXP+maF9zyxPHWM8H55B63hv3R9G7ydnK090+TlW5fbash5d
Jrt63/+83dftfP3j+gwqT3qFd+TS8v3odZ+/b4Llqpa/+bMPx++efHoj7mzf
M7/+B+Vx3o9QZ84PW/r/mfPPlvJUm8+r5dM7cIoxfn5zS/+P/vrV+nO1/l/5
/bb2n+j+Bq1uxkL6/mftembv+mW3n/fbnjcemdDXryfMr9e777sfpm0ZX9Hz
z5nz23Y+3898W1O1/X+0M+eHLf3/nPlne3lgVBXWx+j5Jzqf3ojF2/fM8tQx
xvPhGbSO99b9YfR+crbyzLY/713l9tqyHq0L+azwe16/NF5nlqfH/c9s7ZVe
4R1ZevV6yF/G/X70s/H7rH5a89Vsad8zv/4H5fnrt+2+fv36y3k/AkXPD639
P3r+mWH+dz8VYYyf36ywPlbrz9X6f+X329p/ovsb7FFq/7Mc3ltO7r0+wtea
by0PjOHaz5cB+3AFvBx03q9pfEXPP9H57U77fL/Q+c3+ZzzV9v8nv/c6+58P
vn4r45GZVVsfq+1nouef2dp3nvl2jOfDs9ky3s98vrqxzFOVZ+b9eY8qt9eW
9ejmidDDwu95/dJ4RZfnpu262//M3F68dfl1pnf5xU2g2vq1Z/6c7X5nS/ue
/PVb89fr/tdwuBPmh6b+f8L8M/z8734qwjA/v5m+Plbrz9X6f/H329p/ovsb
fKzU/ueE835N5YEBLL39OlrXy996IF8O/Sd9N46v6PmnzvOf0/bP0fOb/c9g
qu3/T37vdfY/n339VsYjMyu1Plbbz5ww/0zVvieUp4hhng9PZct4r/Y8ebby
zLw/71Hx9nq7Hq0L+azwe16/NF7R5blpu+72P6312fuVXuEdufwa41+/Dvfe
D/lq69ee+XMZv8v/vx6/rflqtrTvmV9/S/5//ZtLk/RKZhjR80PreImef2aY
/91PRRjj5zcrrI/V+nO1/l/5/bb2n+j+BnuU2v+c8/l+xiNT+bo77/d99Uhz
PYovu4/8tY6v6PknOr/daZ/vl76/PbM87Fdt/3/ye6+z//ng67cyHplZtfWx
2n4mev6ZrX3nmW/HeD48my3j/cznqxvLPFV5Zt6f96hye21Zjy6TXTdt193+
51kHO+r11iu6POkV3pHLH5ePZdSvM9XWrz3z55z3O6/b98yvvyXvvB9ZoueH
1vESPf/MMP+7n4owxs9vVlgfq/Xnav2/8vtt7T/R/Q32KLX/Oe28n/HIPL5W
5/2WMbte/q6/WDJ7/q7W8RU9/0Tntztn/1xhf3tmediv2v7/5PdeZ//zwddv
ZTwys2rrY7X9TPT8M1v7zjPfjvF8eDZbxnvr/jB6PzlbeWben/eocnttWY+e
Ffio11uv6PLctF13+5+Z24vXbsb7ZfTPn5n8fudh+5759bfkjXeyRM8PreMl
ev6ZYf53PxVhjJ/frLA+VuvP1fp/5ffb2n+i+xvsUWr/c/55P+OR4X3lnfd7
O76i55/o/HZnfr5f7v72zPKwX7X9/8nvvc7+54Ov38p4ZGbV1sdq+5no+We2
9p1nvh3j+fBstoz31v1h9H5ytvLMvD/vUeX22rIePSvwUa+3XtHluWm77vY/
M7cXr20Z79XWr9b89ZX1H7kfv/dfc3s+vRF3tu+ZX39L3njnTGfOD9v7/znz
zwzzv/upCGP8/GaF9bFaf67W/yu/39b+E93foFW1/c/CeT843Fex837R88+Z
89t2KZ/vl7K/PbM87Fdt/x+t2v7nnPlne3lgVBXWx2r7mTPnnxna98zy1DHG
8+EZtI731v1h9H5ytvJEl59jVW6v7fuT+wIf9XrrFV2e1vkwvYPdt+lUV3qF
d+Qywfej168/G7/Pvs6WfHoj7mzfM7/+lrzxzpnOnB+29P8z558Z5n/3UxHG
+PnNCutjtf5crf9Xfr+t/Se6v0Gr1v3Gnv1JU/933g8O9/XH834PLUve97PO
+8XNP2fOb9v5fD/zbU3V9v/Rqu1/zpl/tpcHRlVhfay2nzlz/pmhfc8sTx1j
PB+eQet4b90fRu8nZyvPbPvz3lVury3r0WWyq/f9z7pTPetse17/uD6DypNe
4R25tHw/+nWbLr+ull9fy8hdT78vvs6WfHoj7mzfM7/+lrzxzpnOnB+29P8z
558t5ak2n1fLp3fgFGP8/OalwPpYrT9X6/+V3+8lYP8DZ1r38wr7n4XzfnC4
ZaW7eaq5/sUyinfeX28ZX9Hzz5nz23Y+3898W1O1/X+0M+eHLf3/nPlne3lg
VBXWx+j5Jzqf3ojF2/fM8tQxxvPhGbSO99b9YfR+crbyzLY/713l9rpsWI9a
z2O0vv6iWp7V1Wnl6XH/M1t7pVd4R5ZefTMprTNvJ6ulWddfrU7+5r08HL/P
6qc1X826xp6175lff0veeCdL9PzQOl6i558t5ak2n1fLp3faFGP8/Oa6xbPW
x2r9uVr/r/x+11/hqP0PZCm3/1kd2Ht7eO+DvPHIbJZOvtxBr/v/zWO9nffX
zeM9eP6p8/zntM/3C53f7H/GU23/f/J7r7X/KfD8B0ZVbX2stp+Jnn9ma995
5tsxng/PZst4P/P56sYyT1WemffnParcXuse9Ww9Oupc1rPX39bMfUWFluem
7brb/8zcXrx1+XWmd/nFTWDLZLW07PqrFcnfvJem8dvjeG9t35O//tu88U6W
E+aHpvFywvzztjzV5vNq+fROm2KYn9+8ZK+P1fpztf5f/P1ejt7/QJZy+5+f
Z/bWrn/wqHxreaB36/Xu4f31+pne/vvrtvFe7PvXcfdfp+2fo+c3+5/BVNv/
n/zea+1/Cjz/gYGVWh+r7Wd8/+vwrz/JfDvM8+GpbBnv1Z4nz1aemffnPSre
Xpd369FR57Kevb6xcta1FFqem7brbv/TWp+9X+kV3pHLrzH+9etw7/2Qb6r8
1vF7Qn79Xma737lsaN8zv/6WfFP7dtQW1Bc9P7SOl+j55/DxWHD+j86nd9oU
Y/z85qXA+hjdP6PzJ7RRaPlb83v6T2sezlRt//PbH4/wXcfgm7fw0WE/45FJ
bH/+fL/etWodX9W+fx13/3Xa5/ul72/PLA/7tWyHR7v/rbb/qfD8B0ZVbX2s
tp+Jnn9ma9955tsxng/PZst4b90fRu8nZytPaz69U02ucntdAs5j9H6t33uP
+591gW9cfnaw9SvXdyQvLy/fRT59gjXfysvLy8tPmLeeysvLj5pPv6Ewf8rL
y8vLn7AeVXu/8vJ78ukbsMFUa195+Znz6RPCyfND7+WXP7Z9ZyuPvLy8/LP8
8qfuXX6e53z9iry8vHzZfPoNzo1q9SMvLy8vLx+Rt57Ky8uPmk+/oTB/ysvL
y8vbb8vLN+XTN2CDqda+8vIz59MnhJPnh97LL39s+85WHnl5eXl5eXn52fLp
Nzj2e/Ly8vLyE+atp/Ly8qPm028ozJ/y8vLy8vbb8vJN+fQN2GCqta+8/Mz5
9Anh5Pmh9/LLH9u+s5VHXl5eXl5eXn62fPoNjv2evLy8vPyEeeupvLz8qPn0
Gwrzp7y8vLy8/ba8fFM+fQM2mGrtKy8/cz59Qjh5fui9/PLHtu9s5ZGXl5f/
OH/5+a8Ay8vLy3eXT7/Bad3vFa9PeXl5eXn5LXnrqby8/Kj59BsK86e8vLy8
/AnrUbX3Ky+/J5++ARtMtfaVl585nz4hnDw/9F5++WPbd7byyMvLy3+Wv/7/
cv34rby8vHwv+fQbnKb9Xv36lJeXl5eX35K3nsrLy4+aT7+hMH/Ky8vLy3+3
35aXrzReZlOtfeXlZ86nTwgnzw+9l1/+2PadrTzy8vLyn+V//Ne1y4bzhPLy
8vJF8uk3OE37vfr1KS8vLy8vvyVvPZWXlx81n35DYf6Ul5eXl7fflpcvNV5m
U6195eVnzqdPCCfPD72XX/7Y9p2tPPLy8vIf51+/Ii8vL182n36D07rfK16f
8vLy8vLyW/LWU3l5+VHz6TcU5k95eXl5efttefmmfPoGbDDV2ldefuZ8+oRw
8vzQe/nlj23f2cojLy8vLy8vLz9bPv0Gx35PXl5eXn7CvPVUXl5+1Hz6DYX5
U15eXl7efltevimfvgEbTLX2lZefOZ8+IZw8P/Refvlj23e28sjLy8vLy8vL
z5ZPv8Gx35OXl5eXnzBvPZWXlx81n35DYf6Ul5eXl7fflpdvyqdvwAZTrX3l
5WfOp08IJ88PvZdf/tj2na088vLy8s/y12tLWF5eXr6vfPoNzo1q9SMvLy8v
Lx+Rt57Ky8uPmk+/oTB/ysvLy8tf7Lfl5SuNl9lUa195+Znz6RPCyfND7+WX
P7Z9ZyuPvLy8/LP8jxd/uP9T8vLy8r3n029wblSrH3l5eXl5+Yi89VReXn7U
fPoNhflTXl5eXv5ivy0vX2m8zKZa+8rLz5xPnxBOnh96L7/8se07W3nk5eXl
X+R//GL9p67XfVheXl6+r3z6Dc79fq9U/cjLy8vLy0fkrafy8vKj5tNvKMyf
8vLy8vIX+215+UrjZTbV2ldefuZ8+oRw8vzQe/nlj23f2cojLy8v/zp/df1T
1z8oLy8v33s+/Qbn4X6vTv3Iy8vLy8tH5K2n8vLyo+bTbyjMn/Ly8vLy9tvy
8k359A3YYKq1r7z8zPn0CeHk+aH38ssf276zlUdeXl5+S/7165efl7y8vHwv
+fQbnBf7vQr1Iy8vLy8vH5G3nsrLy4+aT7+hMH/Ky8vLy1/st+XlW/LpG7DB
VGtfefmZ8+kTwsnzQ+/llz+2fWcrj7y8vPyz/PKL9fX951nBh6/Ly8vL95JP
v8G5Ua1+5OXl5eXlI/LWU3l5+VHz6TcU5k95eXl5+RPWo2rvV15+Tz59AzaY
au0rLz9zPn1COHl+6L388q/z1dqrWnnk5eXlX+S/fn0M4I3lDy7k5eXlO8qn
3+Dc7/dK1Y+8vLy8vHxE3noqLy8/aj79hsL8KS8vLy9/wnpU7f3Ky+/Jp2/A
BlOtfeXlZ86nTwgnzw+9l1/+2PadrTzy8vLyz/LLn7p3uftUwPtX5OXl5cvm
029wblSrH3l5eXl5+Yi89VReXn7UfPoNhflTXl5eXt5+W16+KZ++ARtMtfaV
l585nz4hnDw/9F5++WPbd7byyMvLy8vLy8vPlk+/wbHfk5eXl5efMG89lZeX
HzWffkNh/pSXl5eXt9+Wl2/Kp2/ABlOtfeXlZ86nTwgnzw+9l1/+2PadrTzy
8vLy8vLy8rPl029w7Pfk5eXl5SfMW0/l5eVHzaffUJg/5eXl5eXtt+Xlm/Lp
G7DBVGtfefmZ8+kTwsnzQ+/llz+2fWcrj7y8vPzH+cvPfwVYXl5evrt8+g1O
636veH3Ky8vLy8tvyVtP5eXlR82n31CYP+Xl5eXlT1iPqr1fefk9+fQN2GCq
ta+8/Mz59Anh5Pmh9/LLH9u+s5VHXl5e/rP89f+X68dv5eXl5XvJp9/gNO33
6tenvLy8vLz8lrz1VF5eftR8+g2F+VNeXl5e/rv9trx8pfEym2rtKy8/cz59
Qjh5fui9/PLHtu9s5ZGXl5f/LP/jv65dNpwnlJeXly+ST7/Badrv1a9PeXl5
eXn5LXnrqby8/Kj59BsK86e8vLy8vP22vHyp8TKbau0rLz9zPn1COHl+6L38
8se272zlkZeXl/84//oVeXl5+bL59Buc1v1e8fqUl5eXl5ffkreeysvLj5pP
v6Ewf8rLy8vL22/Lyzfl0zdgg6nWvvLyM+fTJ4ST54feyy9/bPvOVh55eXl5
eXl5+dny6Tc49nvy8vLy8hPmrafy8vKj5tNvKMyf8vLy8vL22/LyTfn0Ddhg
qrWvvPzM+fQJ4eT5offyyx/bvrOVR15eXl5eXl5+tnz6DY79nry8vLz8hHnr
qby8/Kj59BsK86e8vLy8vP22vHxTPn0DNphq7SsvP3M+fUI4eX7ovfzyx7bv
bOWRl5eXf5a/XlvC8vLy8n3l029wblSrH3l5eXl5+Yi89VReXn7UfPoNhflT
Xl5eXv5ivy0vX2m8zKZa+8rLz5xPnxBOnh96L7/8se07W3nk5eXln+V/vPjD
/Z+Sl5eX7z2ffoNzo1r9yMvLy8vLR+Stp/Ly8qPm028ozJ/y8vLy8hf7bXn5
SuNlNtXaV15+5nz6hHDy/NB7+eWPbd/ZyiMvLy//Iv/jF+s/db3uw/Ly8vJ9
5dNvcO73e6XqR15eXl5ePiJvPZWXlx81n35DYf6Ul5eXl7/Yb8vLVxovs6nW
vvLyM+fTJ4ST54feyy9/bPvOVh55eXn51/mr65+6/kF5eXn53vPpNzgP93t1
6kdeXl5eXj4ibz2Vl5cfNZ9+Q2H+lJeXl5e335aXb8qnb8AGU6195eVnzqdP
CCfPD72XX/7Y9p2tPPLy8vJb8q9fv/y85OXl5XvJp9/gvNjvVagfeXl5eXn5
iLz1VF5eftR8+g2F+VNeXl5e/mK/LS/fkk/fgA2mWvvKy8+cT58QTp4fei+/
/LHtO1t55OXl5Z/ll1+sr+8/zwo+fF1eXl6+l3z6Dc6NavUjLy8vLy8fkbee
ysvLj5pPv6Ewf8rLy8vLn7AeVXu/8vJ78ukbsMFUa195+Znz6RPCyfND7+WX
f52v1l7VyiMvLy//LP//A0BcFDg=
    "], {{0, 180.}, {2556., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2556., 180.},
  PlotRange->{{0, 2556.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236709090358*^9}},
 CellLabel->
  "Out[475]=",ExpressionUUID->"0d81f452-5ef2-4dc0-bf16-78cb3954a44d"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Fx9JX+nzlJHvb/Ro7/islk9vQP3VdT69Q1k7uM9v6Uj9z+3RkZjfcv7pDX5W
f93qfZdOj4+nd2gvfjz/Imi3ILR/L75Xtdavd1npJwxbFFkfzK9rG7Z/i8yv
YWn/05vx4Oe5dx/m6ggSBa0P5gsjM/7PMh/HO+LE9Q24gKD1YXlF//DzlOkj
lct8Hj3s/Y1O7R2f1fLpDai/us6ndyhrR/b5jc2D6oP6n2qPbzn/9AY/q79u
Nepnen88vUO78OLiwi0I7d+RZ2Wld4frOzpSZ30wv65tzP6tM7/GpP0jWvLg
57nfY3+fA3XErQ/mCyMz/iuw/wGeiVsfRvs8esz7G/2qVo8x2nwZrb+q5dM7
lLXpSD+NLeZBpf6nC8tF4Nni4PHtj6d3aH1vLy7cgtD+vXB9x8WUWh/Mr2sb
sH9Lza8Baf+gxjz4ee6fY3+fA0WErg/mCyMz/tPZ/wDPhK4Po30ePeD9ja5V
q8cYbb6M1l/V8ukdytp0pJ/GFvOgUv/ThfuNiOPYkd6h9bn/oP0vw/UdF1Nq
fTC/rm3A/i01vwak/YMa8+Dnud++z4ECeqn/MV/ojvF/3Pr4uAtOX9+Arqn/
OdGA9ze6Vq0eY7T5Mlp/VcundyhrH2zyszwceHduj45O8+kNftCzBcHjnz2e
3qHFbby4cAtC+3dh/fbx8J3C9R1dqLY+mF/XNlr/Vptfo9H+ce158PPcP32f
A9mi1wfzhZEZ/8dNx7O/bm//iPUN6Ff0+jDa59Gj3d/oXbV6jNHmy2j9VS2f
3qGs7drh54qur6j2eHqD669Sj6d3aHHuP2j/K7m7vrv769evzZXrO7pQbX0w
v65ttP6tNr9Go/3j2vPg57nfo36fA3V0VP9jvtAd4/+46Xj21+3tH7G+Af1S
/3Ou0e5v9K5aPcZo82W0/qqWT+9Q1nbt8HNF11dUezy9wfVXqcfTO7Q49x+0
/5U8/CGO5Q93TMuC6zu6UG19ML+ubbT+rTa/RqP949rz4Oe5f476fQ7U0VH9
j/lCd4z/49bHZ+3/9hikPYGJ+p9zjXZ/o3fV6jFGmy+j9Ve1fHqHsrZ3k58o
ur6i2uPpDX7QzXHqkd6hxbn/oP2vZH19d3dl9+X6jn5UWx/Mr2sbrX+rza/R
aP+49jz4ee73qN/nQB0d1f+YL3TH+D9uOp79dXv7R6xvQL/U/5xrtPsbvatW
jzHafBmtv6rl0zuUtV07/Fy3wY70Bj8ooiZq5MfTO7Q49x+0/5W4vuNKqq0P
5te1jda/1ebXaLR/XHse/Dz3z1G/z4E6Oqr/MV/ojvF/3HQ8++v29o9Y34B+
Nav/efGZ2vIj6fQGOWi0+xu92zs+q+XTG1B/dZ1P71DWdu3wc1Wrx1Dvob+M
hzrcf9D+V7K+vpsXhPnPyw1Y+gnDC9XWB/Pr2kbr32rzazTaP649D36e+z3q
9zlQR0f1P+YL3TH+j1sfn7V/xPoG9KtN/c+LD6PvPpJOb5CDRru/0bu947Na
Pr0B9VfX+fQOZW3vJj9RtXoM9R76y3iow/0H7X8ly/rqhxutr18/3zFJP2F4
odr6YH5d22j9W21+jUb7n96eoUf6C2Qo0euD+cLIjP/09rf/AR6KXh+2fBi9
vPBPb5CDRru/0bu947NaPr0B9VfX+fQOZW060k9ji2r1GOo9Xtu4ODg2Hukd
Wpz7D9r/SpY/uPHs+u4uBmVVWx/Mr2sbrX+rza/RaP+gVvVJLhfQZn0wXxiZ
8Z/Y8vY/wEPR68OuD1Mu8PnaaPc3erd3fFbLpzeg/uo6n96hrE1H+mlssWu8
XeBIb/CD1tVNd8e5NVS9P//bx9M7tDj3H17b+IMAH/+8gPaP67hn7xG2VaHN
HjpfRlN2fTC/rm2Q/i07vzq1d/3X/hF+vPutLm9/pcsyo+XJ0mZ9MF+YjHn9
Yvy/aJnoo8H6VseY82u76MGW/gLZJXp9+Pr16662uNLnKYPc36hm73jrPZ/e
4Pqr63z6AGBtOtJPY4vo+gr1HkH99WxzsmzVI+3W+/MPMh6ijXb/Ya/v339f
8Os36w/Gm/Zv0HHrxSf99K4qer6Mpuz6YH5d2yD9W3Z+dWrv+q/9I/w4/Hnu
3Ue6Wp4UbdYH84XJmNcvxv+Wljn9mEoyduXTG+SgMefXdtHjLf0Fskv0+vBz
on1t+0j6YvNxkPsb/+Xf3HZp0Oy7xlvv+fQBoL+6zqcPANamI/00toiur1Dv
EdFfrxtzbtKP26335x9nPKyd+9Mco91/2Ovu7fjZMcfqt//e8dPjTw+97a+v
C13ilRI9X9rLHf8112fz69oq96/9T2V713/7nwjHP8/9vuj3ObDXCPsf84VJ
/euXiPlo/L9omfUrXTfOZ8fUiQ3WtyPj59zxVn9+5Yoeb+kvsDvX3v9Ms+zr
3UfS88RM745TVL6/ca6C9T+7xlvv+fQBoL+6zqcPANamI/00toiur1Dvca4t
LenYfqR36InWtwuOX5X4/Ou15Tvy67fsSeX23zt+IsZbs157vSxc5vqumuj5
0lKF8V9zfTa/rq1m/9r/1Ld3/bf/ifDD9zlwWIXx32Z9MF+YVL5+iZuPxv/H
LbOxcZbts2yl0fY/ledXBdHjLf0FdmSE/c880V58JH29z1Nq3t9o8cL/OtZ/
btnyu8Zb7/n0HtdfXefTBwBrKSvnZ26DHekNftDGYqrp+KxWqvfn3/V4eoee
5cWFwJFLEp9/vfa9qt19/a5dtv33jp+g8dayyx6uD/MCdaXFoY7o+dJMkfFf
cH02v66tZv/a/3Rh7/pv/xPh+Oe53xf9Pgc2KjL+e6n/MV+uoez1S+h8NP4/
bpktjfOilUbb/5SdX0VEj7f0F9iLQfY/yxn3+nr/MvOx5v2NRq/9X/7+e1n/
8y9/377xd4233vPpPa6/us6nDwDWpiP9NLZYDqpng+3g47fNx7n/3YePpzf4
8f6Kbs/en3+o8TB5exVwyp3PiOuL3n2/+0mB6She/7N3/MSNt2ZdNq8AD3dc
t4te36WLni9t1Bn/Bddn8+vaCvav/U8v9q7/9j8Rjn+e+6efHB9YnfHfS/2P
+XINNa9fouej8f9xy2xsnGX7LFtptP1PzflVR/R4S3+BXRhn/zPg59EF72+0
e+2/F/yo/1G/ob8q59MHAGvTkX4aW9y9oz0cbAcfv20+zv3vPnw8vcEP2t6Y
d026sX16f/7RxsMfmy8BPrsk8fnXaxeo/9k7fkLHW7P+mqb/cru13HTdLnp9
l+4C9/dKjf9q67P5dW0F+9f+pyMF63+G2v+sX8Jnn+d++8nxUZUa/73U/5gv
11Dw+qXBfDT+P26ZLY3zopVG2/8UnF+lRI+39BdY31D7n9E+jy54f6Ppy1f/
o35Df/WTTx8ArE1H+mlssRxUzwbbkcdvO4/o80lv8IP2tqfj9ZHeocf5/CuR
+p++BsP6+u7r11Xe/Nf5besC7xfVXOD+XqnxX219Nr+urWD/2v90RP1PBcc/
z/3TT46PqtT476X+x3y5hoLXL13U/1x1/J9YjzEnl6002v6n4PwqJXq8pb/A
+oba/4z2eXTB+xvtXvujap/GJUDV6ivUb+ivyvn0AcDadKSfxha3wY70Bm/c
X88WkLcLS6fPv/fx9A49Lvp6pNT1TjXr+xXLd/Dlg9MfCrZ/qfs/zfrra3E1
t9xuTX+YM+knfDEN5ku0auO/1PmYX9dWsH+rvT/ywgfrf7X+vcB4OP557ref
HB9VtfHfRf2D+XINBa9fjP9EJ9ZjPGulofY/BedXKQ3GG9u74PTxX+18Rvs8
uuD9jXavXf2P+g391VU+fQCwNh3pp7HFswF21uN7j+jzSW/wg6Lbs/fnH208
/FHv/sBQ7u5X3P11HvPqf4oY+fquggbzJVq18V/qfMyvayvYv9XeH3nhg/W/
Wv9eYDwc/zz3Tz85Pqpq47+L+gfz5RoKXr8Y/4lOrMeYk3etNNT+p+D8KqXB
eGN7F5w+/qudz2ifRxe8v9Hutav/aZ5P73T91XU+fQCwNh3pp7HFswF21uN7
j+jzSW/wg6Lbs/fnH208/FHv/sBQvh/9UNL34oeVpmGm/qeIka/vKmgwX6JV
G/+lzsf8uraC/Vvt/ZEXPlj/q/XvBcbD8c9zv/3k+Kiqjf8u6h/Ml2soeP1i
/Cc6sR7jWSsNtf8pOL9KaTDe2N4Fp4//aucz2ufRBe9vNHrhz+t8WpYAVauv
UL+hvyrn0wcAa9ORfhpbPBtgZz2+94g+n/QGP+iDJnW8ONI79BRvLwEOXoxE
P3+/1vcr7u5UfJ1xv6Ja//Y7Hu6u7x76uuL1XRFt5ku0auO/zvmYX9dWs3+r
vT/yzGfrf7X+7X08HP88908/OT6wauO/5fpgvoys5vWL8Z/lxHqMOblupXH2
PzXnVx1txhvbeyFiPtY5n9E+j655fyP8VX+/qf/5bvVxdrX6CvUb+qtyPn0A
sDYd6aexxW2wI73BG/fXctF4tpg8W1t6fP69j6d36Cl+/HW82Pwfvz8Q+vz9
alb/U6p/+x0Py96ZzBut5Y5rzqSf8MVc4/5etfFf53zMr2ur2b/V3h955uP6
n1L92/t4+HH489xvPzk+sGrjv8H6YL7wR9XrF+M/y9uW2dI4b1tpnP1PzflV
R5vxxtteGGT/M38YfXt+LD/WSe+ag2re3wh/1X8dn/3T09t/13jrPZ/e9fqr
63z6AGCt5YJ5UHR9xYth/Gxsq/d4Ibo9e3/+0cbD7MevY73zP+ViJPr5O7W+
XzEPsPnPyzf0su2/9/k7HQ8Pr+/WFddzJv2EL6bZfIlWbfwXOR/z69rK9m+1
90ce+nj9r9a/XY+HH4c/z/3TT46Prdr4Dz0f84VJ2esX4z/F25bZ2DjL9nnY
SoPsf8rOryKajTfedsQI+5+3H0bPs/Ia87Hs/Y3YV/3X8dk/Pb39d4233vPp
Xa+/us6nDwDWWi6YB0XXV7wdyeuBrd7jhej27P35RxsPSz+eHL08f4+W9boP
37i/fv280qRy++99/h7Hw7KPHq4PyzXqYutDBS3nS7Rq47/C+Zhf11a5f6u9
P7J2ZP2v1r/9jocfvs+Bw6qN/7jzMV+YVL5+Mf7be9bmZx1t+vez5484n8rz
q4IjY2nLkf4CO1KtDSPOZ8uH0cuJmd4pB1W+vxH4qr8L/f6vXeOt93x61+uv
rvPpA4A19T/qPYLsbU/H6yO9Q88VfT1S6nqnguUPIj27X3EXq9z+e5+/u/Gw
fX91u9D1XR2N50u0auM//XzMr2sr3r/V3h+5c3D9r9a/nY6HH77PgTNUG/9B
52O+MCl+/WL8p3jY7AePlv378fOffj7F51cRpwywuFE0jmotefr5bL/YT7ne
P13x+xuBL/xl/U+z09g73nrPp/e7/uo6nz4AWOuo/mfXeLvAkd7gjftrb61U
78+/9/H0Dj13bCy/rHL+OZqs55++MPPuyzM7yu/y4sLhrLfpav0bfT4RNv7g
2LA/X9ayI6LnS/T6EL0e7lVhPg57/2QQldfPau+P1fYz0evPLh+s/9X6t8J6
+5kfvs9hAPY/Z81H84U7Da5f9up9/Pe7/2nTPkPtfwrOrzq8H21h/3N8Pn79
/guwXuvi2ue1+bWcEuvLwzqfg8U/e8fPaPm7QZW+/6nWPvKv8+mLxuAq99f3
tvkeWl+x94g+n/QBc1B0e/b+/KONh7uxcbfanLvm7H3+5fqzpc2r5Xf5bl7/
k96/0ecTYdlNb9+si7+WrjWYL9HrQ/R6uFeF+fiiW+M6mmYqr5/V3h+r7Wei
159dPlj/q/VvhfX2M8c/P/rz0t/ncA32P2fNR/OFOw2uX/bqffz3u/9p0z5D
7X8Kzq86vB9tYf9zfD4uz7na9X6E78L3N8Jfe0D9z97xM1r+WVtl7X+qtY/8
9vFDe5X763vDfH9WF3HW43uP6PNJHzAHRbdn788/2ni4Gxt3C8538/sDU8PO
mYfrz/JJquU/a5nv5zcr5mF8jf5teT4R7t6Onx0HxwNveyFovrRcHyLWwyOt
WmE+vu3Z01dFWqq8fkaP/4j5Xi3fbBR9sDJU6N+W5xPHz49flf1PxHw0X1j6
7P0rWo/j/xr7n5Tv/7nw/qfm/KrD+9Ez9j/nzse7035mnpjpA+Cg9St6eJzS
X9UE1f/sGj+j5avtf6q1j/zrfPqiMbhq/fXZ+nDnpv6nqg+a1PHiSO/Qc8fG
3ZrznfT517wKPVx/Hs7NIvnPWua7yf2KCv3b8nwi3J3tW+knfElx86Xl+hCx
Hh5p1Qrz8W3Pnr4q0lLl9bPC+2O1/UzL9WfXKPpgZajQvy3PJ46fH78q+5+I
+Wi+sNTmen+vHsf/NfY/vv/n3POpOb/q8H70jP3PufNxfrb5zNeWEzN9ABx0
13pvpZ/wyS//92qfg8U/f+wfP6Plq+1/qrWP/Ot8+ooxuGr9tXe+3wY70gfM
QXtf79v3hdux8VDt+fc+nt6h546Nu2Xnu/n9gWXfPVt/nh0V8h80y7zCP9t3
zf/0Av3b8nwiLN+On71fL9+100/4ekLnS8v1Ycv4b7D+7DqfZp275bjY++8I
Kq+f0eM/Yr5Xy7ccQnvX/wr92/J84vj58atquT5sGf8t15+4+Wi+MGt2vb9X
j+M/er1qs/74/p8Tz6fs/KrD+9EzLdeHLeO/zfqz/Xz2Wj7h6/l4/PwrqHx/
o8XLD6v/2Th+RsvvXR+i89XaR/51Pn3FGFy1/to735ePPzv5I4/fdh7R55M+
YE7s34j27P35RxsP67ERt0fd+/zP1p9e8htN7TA/4cN3hNtJ9T+l+jf6fCIs
r+9eHF28lk41my/R60P0erhXhfm4cX5Nx8Xef0dQef2MHv/R871aPsjH63+1
/q2w3n7Gz4+PwP7nrPlovjBrdv2yV+/jv9/9T7Pv/xlh/1N2ftXh/WgL+5/j
8/Hh7Ft/pDIf6Z1+UOX7Gy1e/r/8/c/V4L/9+Vv9T9P6jQr7n2rtI799/NBe
5f7aMt+Xjz87+SOP33Ye0eeTPmAOim7P3p9/tPGwHh7z1vQ74IeRdz1/hf3M
kfwWc2tMz7Z8O1j+h26n/gqwIv3b4HxON/j1XbqW86XB+hC6Hn4gfT5unF/z
GGh8ehxUfP2MHv+h871aPsLB9b9U/zY4nyB+fnwE9j9nPbn5wqTx9f5eXY//
fvc/zdaHy+9/is+vIrwfbWH/c8p8vJt6Dz9SmY/0Tj/+em8bjqveH56O9Z+P
tOeu8TNa/q6t0vc/1dpHfvv4ob3K/bVlvi8ff3byRx6/7Tyizyd9wBy0tz0d
r4/0Dj13bHz/+trP+Q8nvsa9zz+vP/P/r9efyvkt1vcrlkvu8r9yO3zLolr/
Rp9PhMGv79K1nC/R60P0erhXhfm4cX6d0r+0V3n9jB7/0fO9Wj50/Hyw/lfr
3wrr7Wf8/PgI7H/Omo/mC5OW1y979T7++93/NPv+n8vvfyrPrzq8H21h/3PK
fPyu+vlmhMr3NyL8l39z2+WD9tw1fkbL37VV+v6nWvvIbx8/tFe5v7bM99tg
R/qAOWjv6302IN8O1E6ff+/j6R167thYLkfzVUDW81fYzxzJb7G8XzE/5/Lt
YPrDnLlS/0afT4T19d3dyc8PTn9IP+GLaTlfoteH6PVwrwrzcT2/Xr+5tzw3
jqu8flZ7f6y2n4lef3aNnw/W/2r9W2G9/YyfHx+B/c9Z89F8YdLy+mWv3sd/
v/ufNu0zwv6n8vyqw/vRFvY/p8zH2cPPUL5+/1gnvdMP+i58fyOC+p/c/F1b
pe9/qrWP/PbxQ3uV+2vLfH92wmc9vveIPp/0AXNQdHv2/vyjjYe7sXG3WT2+
/z/y/BX2M0fyW3w3vF9RrX+jzyfC3fXd3V/nnrrM9V01LedL9PoQvR7uVWE+
fq/un7x+c295bhxXef2s9v5YbT8Tvf7sGj8frP/V+rfCevsZPz8+Avufs+aj
+cKk5fXLXr2P/373Py2//+fa+5/K86sO70db2P+cMh9nDz9D+fr9Y530Tj+o
8v2NCM869NnjH7TnrvEzWv6urdL3P9XaR377+KG9yv21Zb4/O+GzHt97RJ9P
+oA5KLo9e3/+0cbD3dhIvz8wNexySVyvP+s1s05+b5t8N7xfUaF/W55PhO/F
Bd385/n8b78u8b6vcn1XTfR8abk+RKyHR9q2wnz8/v2Gyds39/QByS6V188K
74/V9jMt159d4+eD9b9C/7Y8nzh+fvyq7H8i5qP5wuTI+1e0Hsf/NfY/Kd//
c8n9T+X5VYf3o2fsf06fj3dttba8pZM+AA6a15+C9zciPOvQZ49/0J67xs9o
+Wr7n2rtI/86n76ADK5af322PqxP+KzH9x7R55M+YA76oEkdL470Dj13bJy+
/9/7/Mvp9mz9ebZOVsjvbZPv3+9XPNtHzZne+7fl+UT4Xl3fff9+ZTe/RV5v
fagger60XB8i1sMjbVthPi7n19vj4OulvcrrZ4X3x2r7mZbrz67x88H6X6F/
W55PHD8/flX2PxHz0Xxh0vJ6f68ex/819j++/+es86k8v+rwfvSM/c/p83E5
7x5a3tJJHwAHzetPwfsbEW47jw/ac9f4GS0fvV7tzVdrH/nX+fQFZHDV+mvv
fL8NdqQPmIP2vt5lRz8bnEfGQ7Xn3/t4eoeeOzbS7w8s+25eeZbL44u+rpDf
2ybLq4Plqrv8w/xfOTjeKvRvy/OJMNr1XTXR86Xl+rBl/EevP3vPp1n/bjku
9v47gsrrZ/T4j5jv1fLNxs8H63+F/m15PnH8/PhVtVwftoz/lutP3Hw0X5i0
vN7fq8fxH71etVl/fP/PWedTeX7V4f3omZbrw5bx32b92X4+ey2f7dmxfBXp
A+Cg5StdtuGtwP2NCNGfl+0dP6Pll0eF/U+19pF/nU9fQAZXrb+W/90t833v
+r/38RfN8qytQs8nfcCc2L8R7dn78482HtZj4+4S4Hbq/YFdz/9s/eklv8XD
+xV3/4l52B8cb9X6N/p8Iqyv7+a+m//cy2vpUcv5Er0+RK+He1WYj693wnfH
xd5/R1B5/Ywe/9HzvVo+dPx8sP5X698K6+1n/Pz4COx/zpqP5guTltcve/U+
/vvd/zT7/p/L738qz686vB9tYf9zynzccktnnpLpnX5Q5fsbEaI/L9s7fkbL
37VV+v6nWvvIv86nLyCDq9xfW+b73vV/7+NvW2bdUKHnkz5gDopuz96ff7Tx
sB4e83L0HfDDyLuev8J+5kh+i+Xi/3C8Lcf88fFWqn8bnM/plpfGD9+4v379
fMck/YQvpuV8abA+hK6HH0ifj1s2wyeuhzRWfP0s9f5YbT/TYP156+D6X6p/
G5xPED8/PgL7n7Oe3Hxh0vh6f6+ux3+/+59m68Pl9z/F51cR3o+2sP85dz6+
PtpfS0Yofn/jdNGfl+0dP6Pl79oqff9TrX3kX+fTF5DBVe6vLfN97/q/9/GN
jbNspdDzSR8wB+1tT8frI71Dzx0b88Z1uYPNev4K+5kj+S22r/+3M77/p1T/
Rp9PhLm/nvXd1EfLGBHt32C+RK8P0evhXhXmY8v+pb3K62f0+I+e79XyEY6s
D9X6t8J6+xk/Pz4C+5+z5qP5wqTy/rb38d/v/qfZ9/9cfv9TeX7V4f1oC/uf
4/Nx+2S8xnysfH8jwq7+/eD17h0/o+Xvxl76/if69cqfm09fQAZXub9On+8X
ONIHzEHLDr1zW3w54bLH5eXl5eXl5eXl5eXl5RvkXQ/Ky8vLy8vLy8vLy8vL
95h3fSovLy8vL98+P/9ba7e/6r1fPyIvLy8vLy8vLy8vLy8flI+u/6n2euXl
5eXl5eXl5eXl5eWvkXd9Ki8vLy8vLy8vLy8vLy8vLy8vLy8/PaL+R15eXl5e
Xl5eXl5eXr7HvOtTeXl5eXl5eXl5eXl5eXl5eXl5efnpEfU/8vLy8vLy8vLy
8vLy8j3mXZ/Ky8vLy8sXzN/++q1h8vLy8vLy8vLy8vLy8o3z6fU/xdtHXl5e
Xl5eXl5eXl5evmbe9am8vLy8vHy1/PT/8/Hzr/Ly8vLy8vLy8vLy8vJt8rn1
P/XbR15eXl5eXl5eXl5eXr5m3vWpvLy8vLx8tfzPf7p021BfJC8vLy8vLy8v
Ly8vL39KPv37f4q3j7y8vLy8vLy8vLy8vHzNvOtTeXl5eXn5gvnXj8jLy8vL
y8vLy8vLy8sH5dPrf4q3j7y8vLy8vLy8vLy8vHzNvOtTeXl5eXl5eXl5eXl5
eXl5eXl5efnpEfU/8vLy8vLy8vLy8vLy8j3mXZ/Ky8vLy8vLy8vLy8vLy8vL
y8vLy0+PqP+Rl5eXl5eXl5eXl5eX7zHv+lReXl5eXr59fjq2hOXl5eXl5eXl
5eXl5eVb5qPrf6q9Xnl5eXl5eXl5eXl5eflr5F2fysvLy8vLt8//fPCn9b8l
Ly8vLy8vLy8vLy8vn5tv8P0/pV6vvLy8vLy8vLy8vLy8/DXyrk/l5eXl5eVT
8j//sPy3pmMdlpeXl5eXl5eXl5eXl2+Zb1D/U+r1ysvLy8vLy8vLy8vLy18j
7/pUXl5eXl4+Kz+Z/q3pX5SXl5eXl5eXl5eXl5fPzbep/6nzeuXl5eXl5eXl
5eXl5eWvkXd9Ki8vLy8vn5t//fjtr0NeXl5eXl5eXl5eXl6+Tb5l/U+F1ysv
Ly8vLy8vLy8vLy9/jbzrU3l5eXl5+fb5+Q/L4+uv2qGHj8vLy8vLy8vLy8vL
y8u3yUfX/1R7vfLy8vLy8vLy8vLy8vLXyLs+lZeXl5eXT8l///qaoDvzvziT
l5eXl5eXl5eXl5eXb5ZvUP9T6vXKy8vLy8vLy8vLy8vLXyPv+lReXl5eXr59
fv631m6rbw1aPyIvLy8vLy8vLy8vLy8flI+u/6n2euXl5eXl5eXl5eXl5eWv
kXd9Ki8vLy8vLy8vLy8vLy8vLy8vLy8/PaL+R15eXl5eXl5eXl5eXr7HvOtT
eXl5eXl5eXl5eXl5eXl5eXl5efnpEfU/8vLy8vLy8vLy8vLy8j3mXZ/Ky8vL
y8sXzN/++q1h8vLy8vLy8vLy8vLy8o3z6fU/xdtHXl5eXl5eXl5eXl5evmbe
9am8vLy8vHy1/PT/8/Hzr/Ly8vLy8vLy8vLy8vJt8rn1P/XbR15eXl5eXl5e
Xl5eXr5m3vWpvLy8vLx8tfzPf7p021BfJC8vLy8vLy8vLy8vL39KPv37f4q3
j7y8vLy8vLy8vLy8vHzNvOtTeXl5eXn5gvnXj8jLy8vLy8vLy8vLy8sH5dPr
f4q3j7y8vLy8vLy8vLy8vHzNvOtTeXl5eXl5eXl5eXl5eXl5eXl5efnpEfU/
8vLy8vLy8vLy8vLy8j3mXZ/Ky8vLy8vLy8vLy8vLy8vLy8vLy0+PqP+Rl5eX
l5eXl5eXl5eX7zHv+lReXl5eXr59fjq2hOXl5eXl5eXl5eXl5eVb5qPrf6q9
Xnl5eXl5eXl5eXl5eflr5F2fysvLy8vLt8//fPCn9b8lLy8vLy8vLy8vLy8v
n5tv8P0/pV6vvLy8vLy8vLy8vLy8/DXyrk/l5eXl5eVT8j//sPy3pmMdlpeX
l5eXl5eXl5eXl2+Zb1D/U+r1ysvLy8vLy8vLy8vLy18j7/pUXl5eXl4+Kz+Z
/q3pX5SXl5eXl5eXl5eXl5fPzbep/6nzeuXl5eXl5eXl5eXl5eWvkXd9Ki8v
Ly8vn5t//fjtr0NeXl5eXl5eXl5eXl6+Tb5l/U+F1ysvLy8vLy8vLy8vLy9/
jbzrU3l5eXl5+fb5+Q/L4+uv2qGHj8vLy8vLy8vLy8vLy8u3yUfX/1R7vfLy
8vLy8vLy8vLy8vLXyLs+lZeXl5eXb5///wGcNKUr
    "], {{0, 180.}, {2304., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2304., 180.},
  PlotRange->{{0, 2304.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236709195096*^9}},
 CellLabel->
  "Out[477]=",ExpressionUUID->"8da2136f-d337-4b3c-a433-e82354b02243"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3T2u5cp2GGDCThx08EKnnoUCJQ4NdGDIcHYSCZYFJzIgGTCUaRAKNIQb
9gB6AB1qKB7ACdzv8V1e3v3LIrlYq6o+4rPQjyZ4ycVai7W5udf5T3/zv//q
f/67aZr+8T/8/D9/9df/9z//wz/89T/9tz/8/B///e//8X/93d//7f/4L3//
f/727/72H/7ib/79z5X/7+f/+6//cZr++O+Pf/kEAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB46PP7t8XbDW5EbF89IACLabVUPxjo
jPwCyEl9hjjyCyAn9RniyC+AnNRniCO/AHJSnyGO/ALISX2GOPILICf1GeLI
L4Cc1GeII7+u9OPrl9mLfkTLNmtB21cPCMDs5z3oc7W4JcGJ5BdATuozxJFf
ADmpzxBHfgHkpD5DHPkFkJP6DHHkF0BO6jPEkV8AOanPEEd+AeSkPkMc+XUx
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
UX0wv+VKHbzP4P77gn5HQEXqA8SRX+IP5JSqPvTxfKn173daP/5UUuXXgMSf
YWXrX5Tweb76AHHkl/gDOakPXKaP53u7T1l+iX+obP2Iovef8HkCpeYErPVf
L6oPDwfejenR0uj21cfGQc8KgvX71le/oMltLCY9TTlSEX/ymw6/X7Hexkje
F3n1Ac4lv8S/P+7XuyOzJTjdRymPnPVBfvVtnOubM7/actPjqKjlkfgDz5TW
B/NbrtT6+wzuv3Wvr/gDz6gPEEd+iT+QU7b60Mfzpda/32n9+PPIll+jEX9G
lq1/Ubbn+eoDxJFf4g/kpD5wpT6e7+07X/kl/tGy9SOK3n+25wnsMGdflf90
aX3I1n8men31sXFQtni2vr76BU1utPlGNuJPfm8/BW/5CPy7zYzk8sirD3Au
+SX+/XG/3h2ZjcFZx6e/KOWRsz7Ir76Nc31z5ldb9DsCIpTWB/NbrtT6+wzu
v3Wvr/gDz6gPEEd+iT+QU7b60Mfzpda/32n9+PPIll+jEX9Glq1/Ubbn+eoD
xJFf4g/kpD5wpT6e7+07X/kl/tGy9SOK3n+25wnsMGdflf90aX3I1n8men31
sXFQtni2vr76BU1utPlGNuJPfm8/Bb/9CLzexkjeF3n1Ac4lv8S/P+7XuyOz
JTjdRymPnPVBfvVtnOubM7/acr+IP3BcaX0wv+VKrb/P4P5b9/qKP/CM+gBx
5Jf4Azllqw99PF9q/fud1o8/j2z5NRrxZ2TZ+hdle56vPkAc+SX+QE7qA1fq
4/nevvOVX+IfLVs/ouj9Z3uewA5z9lX5T5fWh2z9Z6LXVx8bx6+v5cSl+gVN
bhpsvpGN+JPfdPj9ipsPv0byjsirD3Au+SX+/XG/3h2ZjcFZx6e/KOWRsz7I
r76Nc31z5ldbbnocFbU8En/gmdL6YH7LlVp/n8H9t+71FX/gGfUB4sgv8Qdy
ylYf+ni+1Pr3O60ffx7Z8ms04s/IsvUvyvY8X32AOPJL/IGc1Aeu1MfzvX3n
K7/EP1q2fkTR+8/2PIEd5uyr8p8urQ+jLdXHxkEZekb1tL76BU1uGmy+kY34
k990+P2K9TZG8r7Iqw9wLvkl/v1xv94dmS3B6T5KeeSsD/Krb+Nc35z51Rb9
joAIpfXB/JYrLS8zvPhOdv1KQ/UDvuH+W/f6ij/wjPoAceSX+AM5ZasPfTxf
av37ndaPP49s+TUa8Wdkpc9Xs20fHZ9JfYAw8kv8gZzUB640dfF8b9/5yi/x
jxb9+Trb/rM9T2CHOfuq/KenwvqQrf+M/javZYtn6+urX9DkSutJ9QPujPiT
33T4/YqbD79G8o7Iqw9wLvkl/v1xv94dmY3BWcenvyjlkbM+yK++jXN9c+ZX
W+4X8QeOK60P5rdc6e3LDDevNFQ/4Bvuv3Wvr/gDz6gPEEd+iT+QU7b60Mfz
pda/32n9+PPIll+jEX9GVvp8Ndv20fGZ1AcII7/EH8hJfeBKUxfP9/adr/wS
/2jRn6+z7T/b8wR2mLOvyn960u+o6/422eLZ+vrqFzS50npS/YA7I/7kNx1+
v2K9jZG8L/LqA5xLfol/f9yvX0QmdKl+gp3JWR/kV9/Gub4582sc4g88U1of
zG+50paXGeZl/m6u+gHfmNx/q15f8QeeUR8gjvwSfyCnbPVh+5Oifcv1UW3x
+53Wjz+PbPk1GvFnZKXPV7NtHx2fSX2AMPJL/IGc1AeutHHyv3upfoL35yu/
xP8y0Z+vs+0/2/MEdpizr8p/etLvqOv+NhuLg2XjUv2CJjcNNt/IRvzJbzr8
fkX+Tr85qQ8QR36Jf3/cr9/GxyfNJuSsD/Krb+Nc35z5NQ7xB57ZVx/Mb7lG
0RBK+P3svvwaR/T1FX/gGfUB4sgv8Qdyylkfij4VblxqRbXF73daP/48cubX
OMSfkRXdIuefO6Xa/oL4qA8QRH6JP5CT+sD1ij4FbFyqn9SzM5Vf4n/l+W5f
9r1PlWr/0cfDBebsq/KfnpL9vddsS/WxcdB9N6eb5dyeUa3v/+366hc0uWmw
+UY24k9+0+H3K9bbGMn7Iq8+wLnkl/j3x/1afPqQsz4YP30b5/rmzK88Ch8/
71nEH3hoX30Y5/5FXT++fvn8/m2jhKPI/bfu9RV/4Bn1AeKMll/Z5qujxR/Y
Lmd9aP35kuP3fO8+knnyaxziT09KP1+0vn10PNUHiBOdX9nqSbbjV9+AZ9QH
rjfO8yX59TY+0Uuq+EfP90bbf+vzfz6a6ncU3U9Gf5tzvYjkfVSPxK31/Q8y
HqKV1pPqB9wZ8Se/6fDn35uPwEbyjsirD3Au+SX+/XG/Fp8+5KwPxk/fxrm+
OfMrj6L4lJqfhYo/8NC++jDO/Yu6Pr9/+7HtlYb5Zlf9gG+4/9a9vuIPPKM+
QJzR8ivbfHW0+APb5awPrT9fcvye791HMk9+jUP86Unp54vWt4+Op/oAcaLz
K1s9yXb86hvwjPrA9cZ5viS/ToxPqYTvP0fP90bbf+vzfz70O9LfJsyWYC4h
3R231vc/zni4t47hKXtLNd8YzfXxLx0/5443WjQd/vy73qatSlJ3/KvPsGb+
0xPzn+iojna/Fp/TY2X+8+KojJ/+ZL6+5j8Xj4T7K3s/GHb602L+A2m1OP/J
fP+iJ/O7Cm9faTh3xmL+0831Nf+BzFqc/0CvzH+OuH6+mi3+5j+wnfnP66Nq
8fmS42/3+Z75T0/Mf+hJ6eeL1rePjqf6DGttzX+y1ZNsx2/+A5nVHf/mP1xv
Svx8qa35T+v+GOW+3n9+LXq+N9r+W5//86Hfkf42kdfXcuJS/YKePjZuEvzg
OU7J5hujuTL+peMnYrzRounw59+bj8BNjKIM4199hpn5T3/Mf6KjOs79WnxO
j1L18Z+zPhs/fct5fc1/Eo6EjYNhPR7Wo8L8B3LKMP731Yec9y/6s7yx8OKV
hmm1HPlvmf/0d33NfyCnDONffYaZ+c9xV85Xs8Xf/Ae2yzD+c9bn1p8vOf4W
n++Z//TH/IeelH6+aH376HiqzzBrcf6TrZ5kO37zH8gpw/g3/+F6U8rnSy3O
f1r3diRsHAwZ3n/eInq+N9r+W5//89FUv6PRlupj46CNzaPmZV9vqNb3X7S+
+gU9y/Q88acDw/7Fbs33LnBZ/EvHT9B4o0XT4c+/622aGEJJxr/6DB/mP50y
/4mO6iD3a/GJC5H5z4ujMn76k/D6mv/kHAlbBsOLUWH+AwklGf/76kPC+xdd
Wr+38PD7uJsvBHf/h8x/ury+5j+QUJLxrz7Dh/nPSS6br2aLv/kPbJdk/Oes
z60/X3L8dY//4Cmb/3TD/IeelH6+aH376Hiqz/DR7PwnWz3JdvzmP5BQkvFv
/sP1Ej5fanT+07q3I2HLYMjw/vNG0fO90fbf+vyfj6b6HT3rA3Pi+mnzcu5/
9+H66mPjoAvi2fr+hxoPH9uyftp7p3i758Hne9GuiX/p+Ikbb7RoOvz59+bD
TvLxk2f8q89g/tMr85/oqI5wvxafuPiY/7w+KuOnP9mur/lP2pGwcTCsx8N6
VJj/QDZ5xv+++pDt/kWvrnmfwfyn1+tr/gPZ5Bn/6jOY/5wl2/u35j+QTZ7x
n7M+t/58yfG39XzP/KdX5j/0JFs/otZ/n6g+Q7vzn2z1JNvxm/9ANnnGv/kP
18v2fKnd+U/r3o6EjYOh7vvP22XrF9T6/luf//Oh39Hz4fp6Ofe/+3B99bFx
/PoWLaXxaX3/o42Hj80pP+26WWzc+bDzvWgXxL90/ISON1o0Hf78u94m+eBJ
Nf7VZwZn/tMx85/oqHZ/vxafuOBUH/8567Px07dU19f8J/NI2DIYXowK8x9I
JdX431cfUt2/6NgF7zOY/3R8fc1/IJVU4199ZnDmPyfK9v6t+Q+kkmr856zP
rT9fcvx1j3/3yda6OeaPUqPMf+hJtn5Erf8+UX1mcE3Pf7LVk2zHb/4DqaQa
/+Y/XC/V86Wm5z+tezsStgyGuu8/F8nWL6j1/bc+/+dDv6MnY3XLEn081cfG
8etrOXGpfkFPGRLme726IP6l4yd0vNGi6fDn35sPO5kHT6rxrz4zOPOfjpn/
REe1+/u1+MQFp/r4z1mfjZ++pbq+5j+ZR8LGwbAeD+tRYf4DqaQa//vqQ6r7
Fx3T76hv3vc2GBhKqvGvPjM4858TZXv/1vwHUkk1/nPW59afLzn+hp7vmf90
zPyHnmTrR9T67xPVZwbX9PwnWz3JdvzmP5BKqvFv/sP1Uj1fanr+07q3I2Hj
YKj4/nORbP2CWt9/6/N/PprqdzTaUn1sHL++RcuzAvK2sDS6/9L11S/oKUMi
dDIQvX/qxr90/8YDN6bDn3/X2yQfPNnGf7bjgStluz9yrmzXt4PxMNT9Wnzi
gpNh/Gc7ng/jp3eprm+2++NQ3o6ELYPh9ajIdn2NB0aWbfzvOJ5U9y861nq/
owv237QBr6/xwMiyjf9sxwNXynZ/bFrC92+zXd+hxgPcyDb+sx3PR/vPlxx/
3ePffbIZ7o+cK9v1NR7YLVs/og5+nygfGVm2+2ORhPUk2/Fnu77qLSPLNv6z
HQ/dS/V8Kdv9cShvR8KWwVD3/eci2foFtb7/1uf/fFTtd/RRWB+eDbCz1pcu
0cdTfWwcv7ih8Wx9/6ONhw/zvd5lu77GAzemw59/bz7sZB482cZ/tuOBK2W7
P3KubNe3g/Ew1P1afOKCk2H8ZzueD+Ond6mub7b741DejoSNg2E9Hm5GRbbr
azwwsmzjf8fxpLp/0bEB3wceyoDX13hgZNnGf7bjgStluz82LeH7t9mu71Dj
AW5kG//Zjuej/edLjr+h53vZ7o+cK9v1NR7YLVs/og5+nygfGVm2+2ORhPUk
2/Fnu77/v527zW0lV7I1rIHuwfSQ7gB6ADWo+nE3ymhBsC07KWWQK5JPYqFQ
R/WaDmZ8JuWT6i3trLT4T7OHLq+o86W0/riVfo2Eg8Gw8O+fh5T2vqDu63ef
/+mP9x19F6gHr2p7lsfG+84tvZ/d198tHv6Y966uNP+KB/qk29vPv49MePCk
xX+aPUQzldYf6Vyl+fcC8bBVv3Z/6m5OQvyn2fNH/FxdUf5N649b6ddIOBIM
P0dFmn/FA+2stPh/wZ6o/kUX1oZ/D7yVNvSveKCdlRb/afYQzVRaf2ytwL+/
TfPvVvFA9Elp8Z9mz5/+50vsX2v/y5tN6I90rtL8Kx7oZaW9j+gC//9E+Ug7
K60/DimwnqTZn+Zf9ZZ2Vlr8p9lDl1fU+VJaf9xKv0bCkWBY+/fPQ0p7X1D3
9bvP//TH+46+C9SDV7U9y2Pjfee6TryWO/SsqCgdBqrXp7X3f3R98UCPur39
/PvpYSc8ftLiP80eoplK6490rtL82z0eduvX7k/d/UmI/2R7xM/1lObftP64
j36NhIPB8BgPX6Mizb/igXZWWvy/k78J/Yuuqjl/z5DWH/fRnv4VD7Sz0uI/
zR6imUrrj32V+fe3af7dJx6Iviot/pPt6Xi+xP5e53tp/ZHOVZp/xQO9prT3
EV3j/58oH2lnpfXH48qsJ2n2p/lXvaWdlRb/afbQtZV2vpTWH/fRr5FwMBjW
/v3zcaW9L6j7+t3nf/qz+n1Hf0bqw22za3lsvO/ZoeuxaDwrJs9qS8f1Rz9f
7tATo+KHZL+9Pe+Vrk9r7//o+uKBHnV7+/n3kcl/fkyL/zR7iGYqrT/SuUrz
b/d42K1fuz+n35+o+A+0R/xcWGn+TeuP++jXSDgSDL9GRZp/xQPtrLT4fyF/
o/oXXVX3P2a4Pb8evxZ87bek9cd9tKd/xQPtrLT4T7OHaKbS+mNfzZln0u6/
+YfouNLiP9Ce1udL7F9r/wv7jeqPdK7S/Cse6DWNPl905+fc1Y/fJR9pT1XH
f936mfUkzf40/6q3tLPS4j/NHrq2bmHnS2n9cR/9GglHgmH53z8fV/W8t9v6
3ed/+pPxvqPbsfpQ/T6ZH8L4WWx7v82vnq27n93X3y0evgbG10y/ndEmqten
tfd/dH3xQHfd3n7+/fSwkx9CafGfZg/RTKX1RzpXaf5tHQ8b9mv35/RbFBX/
UfaIn2sr0L9p/XET/RoJB4PhMR6+jYo0/4oH2llp8T9kT2D/okvq1z9m+Lju
3wy+/IvS+uMm2ta/4oF2Vlr8p9lDNFNp/bGpps0zafd/dP1N4oHoW6XFf5Q9
t+bnS+xvd76X1h/pXKX5VzzQCxp9vujOT7ux918tH2lDVcd/0fqx9STN/jT/
VttDlKy0+E+zhy6sW975Ulp/3ES/RsLBYFj+988HVT3v7bZ+9/mf/gS87+jP
4frgfUe9VH0/u6+/WzwciY0u69Pa+z+6vnigD93C3vc7bddR8Z9mD9FMpfVH
Oldp/u0bD7ct+7X7c/pdior/HHvEz7WV6d+0/riDnt2Ts65k/1bbQ5SstPg/
bs8tsn/R9XTkjxk+ro/v5t75XdX5mJbvCdrZv+KBdlZa/KfZQzRTaf2xo2bO
M2n3f3T9HeKB6JnS4j/Hnlvz8yX2dzzfS+uPdK7S/CseaFSjzxfd+Zn39pkl
y51ONEHV8V+xfnI9SbM/zb/V9hAlKy3+0+yhq+oWeb6U1h930LN7ctaVdv+r
573d1u8+/9OfjPcd/TlWH7zvqJdG76fr52u5QyeER6P1ae39H11fPNCfyPf9
Ttt4VPyn2UM0U2n9kc5Vmn+bxsNt137t/px+o6LiP8Qe8XNtxfo3rT9uom9v
y5tXC/9W20OUrLT4P2jPLbV/0cX0a5t7vN7/frY6H9Pyfbk29694oJ2VFv9p
9hDNVFp/bKdvN/jsmv/3hGn+vXw8EP2gtPgPsefW/HyJ/U3P99L6I52rNP+K
BxrStwHz7Br9/08F8gm3d7nTieaoOv5PXz+8nqTZn+bfanuIkpUW/2n20CV1
Sz1fSuuPm+jb2/LmlXn/h7bwwry32/rV9tAE/U/G+47+HKgPQ/F2gWu5Ryoc
+sM1+m6o7uuPfr7coefGxr//+/8+6cQ9jq7/97/+vcl38td7nsanKc2/1fZQ
F90i3/dbXR+q6+ELXpCPtK3S+mPaPGP+OXf9vvU2s1/n6Br3x/yzKh+vET/0
TJn+TeuPafNMXf2ZEw9p/s2pt0RfZf55Zk9m/6Lr6THgf9WbUZTWH9PmmYr6
s7N/zT+ULPOPfKR9lNYf0+aZI/zMeaa7f9VbSpb5Z1U+dj9fYn/H8720/pgw
z7zDpynNvzn1llZp9HlhN/7xXlXXH/lIOyutPx7J95n1pKL++P5LvaVMVdcH
5z+0pzLPl9L6Y3X9SZh/ZsZDQn2rnvd2Wz/5+9buqqgP3c9//il+n8zoVW3P
8iB836el97P7+rvFw6fY+JTp5/aI0fUf69uRe57GpynNv9X2UBfdIt/3W10f
quvhC16Qj7St0vpj2jxj/jl3/b71NrNf5+ga98f8syofrxE/9EyZ/k3rj2nz
TF39mRMPaf7NqbdEX2X+eWZPZv+i6+kx5n/Wx/d97/yutP6YNs9U1J+d/Wv+
oWSZf+Qj7aO0/pg2zxzhZ84z3f2r3lKyzD+r8rH7+RL7O57vpfXHhHnmHT5N
af7Nqbe0SqPPC7vxz+7VtecfovlK649H8n1mPamoP+/Y392/6i0lq7o+OP+h
PZV5vpTWH6vrT8L8MzMeEupb9by32/oz5+fdVFEf3vFXwvxz/72PunnfUaqq
72f39XeLh0+xsXze+7ixd+bb+va4SBq/3Inh/p1pD3XRLeZ9vzPrQ0U9fNML
8pG2VUJ/TJtnzD916/ettzn9OlN974/5JyEf+8YPHVGmfxP6Y9o8M6f+zImH
BP/OtIdoVOafI/mY2b/oevoU9s90/77vnd+V0B/T5pnq+rObf2faQzQq8498
pD2V0B/T5plRfuY809G/M+0hGpX5JyEfu58vsb/j+V5Cf0ybZ2bWnx38O9Me
ytfo88Ju/J7zD9F8JfTH6vOWtPln1P7u/p1pD9GonP/IR6pW5vlSQn9MO8+Z
U3/mxENCfaue93Zbv9qe3VRdH0b9lTb/3H/vo27ed5SqF26p64druUPPjY3S
eeDI+o/p9qy+fZubIfxyJ4b7d6Y91EW3mPf9zqwPFfXwTS/IR9pWCf0xbZ4x
/9St37fe5vTrTPW9P+afhHzsGz90RJn+TeiPafPMnPozJx4S/DvTHqJRmX+O
5GNm/6Lr6R6N98j/qrO+j0voj2nzTHX92c2/M+0hGpX5Rz7Snkroj2nzzCg/
c57p6N+Z9hCNyvyTkI/dz5fY3/F8L6E/ps0zM+vPDv6daQ/la/R5YTd+z/mH
aL4S+mP1eUva/DNqf3f/zrSHaFQz60NFPXxn7/KR5ugWeb6U0B/TznPm1J85
8ZBQ36rnvd3Wnzk/76Dq+jDqr7T557bZtTwg39Tofn+N80+fd19/9PPlDj03
NpbPe4++e1bfnl0J/HInhvt3pj3URbeY9/3OrA9H4n9m/ZGPtLMS+mN1/anm
lzsx3L8z7Sm9kyH9OlN978/M+nAk/mfWn5x87Bs/dESZ/k3oj9X1p5pPjocE
/860h2hUM+vDkfifU3+O23MnA/sXXU+PAfnt93GfUuCd35XQH6vrTzXPv+Yf
6quZ9eFI/FfXn1F7iK6qhP5YXX+q+ZnzTEf/zrSHaFTV9eHT7zL/PLOk9fkS
+zue7yX0x+r6U80vd2K4f2faQ/kafV7YjZ9Zf+Qj7ayE/jia79X1pLr+jNrf
3b8z7SEa1cz6cCT+q+vPqD1E7+sWeb6U0B+r6081nxwPCfWtet7bbf2Z8/MO
qq4P3c9/Hn/vM+Pf+fyH2/vtVW3P8oA8MZ4r7mf39XeLh6+x8Snlb6fOe0Pr
P6tvXfg0pfm32h7qolvk+36r60N1PXzBC/KRtlVaf0ybZ8w/567ft95m9usc
XeP+mH9W5eM14oeeKdO/af0xbZ6pqz9z4iHNvzn1luirzD/P7MnsX3Q9PUbj
t9/HffpO8J3fldYf0+aZivqzs3/NP5Qs8498pH2U1h/T5pkj/Mx5prt/1VtK
lvlnVT7emp8vsb/j+V5af0yYZ97h05Tm35x6S6s0+rywG//pXm0y/xDNV1p/
rD5vSZh/Zp4XpflXvaVkOf+Rj1ShW+T5Ulp/TDvPqas/c+Ihob5Vz3u7rT9z
ft5NFfWh+/nP4+99Zvw7n98Gr2p7lgfhKT6tu5/d198tHr6Gxz3N/y14+eHQ
+mnzW3W93c2/E+yhFrpFvu93Qn0orYevOUI+0raK6o9p84z55/T1m9bbzH6d
o2vcH/PPqrC8RvzQM8X6N6o/ps0zyd/3HYyHKP9OsIfoZZl/figjmf2LLqbJ
f88Q1R/T5pmK+rOzfyfYQ/SyzD/ykbZSVH9Mm2eO8JPnmdb+nWAP0csy/6zK
x1vz8yX2Nz3fi+qPCfPMO3ygovw7wR4K1+jzwm78p3u1yfxDtERR/bH6vCVh
/pl8XhTl3wn2EL0s5z/ykSp0Sz1fiuqPaec5dfVnWjwsr2/V895u60+en7dS
RX3ofv7z+HufGf/O57fBq9qe5UH4vkNdJ17LHXpubHzk+L//93Kzc0eC0fXv
9e3+z4P1NoRPU5p/q+2hLrpFvu+3uj5U18MXvCAfaVul9ce0ecb8c+76fett
Zr/O0TXuj/lnVT5eI37omTL9m9Yf0+aZuvozJx7S/JtTb4m+yvzzzJ7M/kXX
078T/54hrT+mzTMV9Wdn/5p/KFnmH/lI+yitP6bNM0f4mfNMd/+qt5Qs88+q
fOx+vsT+jud7af0xYZ55h09Tmn9z6i2t0ujzwm78p3u1yfxDNF9p/bH6vCVh
/pl5XpTmX/WWkuX8Rz5ShW6R50tp/THtPKeu/syJh4T6Vj3v7bb+zPl5N1XU
h+7nP7fNruVB+L5Ph65nAflroDZdf/Tz5Q49NzYey9E961etnza/Vdfb3fxb
bQ910S3yfb9zzrvq6uELXpCPtK3S+mPaPGP+OXf9vvU2s1/n6Br3x/yzKh+v
ET/0TJn+TeuPafNMXf2ZEw9p/s2pt0RfZf55Zk9m/6Lr6TEUv/0O7p/n34+P
Kq0/ps0zFfVnZ/+afyhZ5h/5SPsorT+mzTNH+JnzTHf/qreULPPPqnzsfr7E
/o7ne2n9MWGeeYdPU5p/c+otrdLo88Ju/Kd7tcn8QzRfaf3xSL7PrCcV9ecd
+7v7V72lZFXXB+c/tKcyz5fS+mN1/UmYf2bGQ0J9q573dlt/5vy8myrqw8zn
tVEdqQ/PDD7r89Gr2p7lQfi+T0vvZ/f1d4uHT7HxKdNL571f10+b36rr7W7+
rbaHuugW+b7fyeddp9fDF7wgH2lbpfXHtHnG/HPu+n3rbWa/ztE17o/5Z1U+
XiN+6Jky/ZvWH9Pmmbr6Myce0vybU2+Jvsr888yezP5F19NjQH77HdynrwXf
+V1p/TFtnqmoPzv71/xDyTL/yEfaR2n9MW2eOcLPnGe6+1e9pWSZf1blY/fz
JfZ3PN9L648J88w7fJrS/JtTb2mVRp8XduM/3atN5h+i+Urrj9XnLQnzzzv2
d/evekvJqq4P1c+Do5KPNEe3yPOltP6Ydp5TV3/mxENCfaue93Zbf+b8vJsq
6kP3859nBp/1+ehVbc/yIHzfp6X3s/v6u8XDp9hYPu993NjHkvi1vn2tmTn8
cieG+3emPdRFt5j3/c6sDxX18E0vyEfaVgn9MW2eMf/Urd+33ub060z1vT/m
n4R87Bs/dESZ/k3oj2nzzJz6MyceEvw70x6iUZl/juRjZv+i6+lrrn3V4/d9
7/yuhP6YNs9U15/d/DvTHqJRmX/kI+2phP6YNs+M8jPnmY7+nWkP0ajMPwn5
2P18if0dz/cS+mPaPDOz/uzg35n2UL5Gnxd24/ecf4jmK6E/Vp+3pM0/o/Z3
9+9Me4hGNbM+VNTDd/YuH2mObpHnSwn9Me08Z079mRMPCfWtet7bbf2Z8/MO
qq4Po/5Km3+eGXzW56NXtT3LA/JNvXBLXT9cyx16bmyEzHv3KvdtfXtWJxP4
5U4M9+9Me6iLbjHv+51ZHyrq4ZtekI+0rRL6Y9o8Y/6pW79vvc3p15nqe3/M
Pwn52Dd+6Igy/ZvQH9PmmTn1Z048JPh3pj1EozL/HMnHzP5F19NjQD7Lu7O+
j0voj2nzTHX92c2/M+0hGpX5Rz7Snkroj2nzzCg/c57p6N+Z9hCNyvyTkI/d
z5fY3/F8L6E/ps0zM+vPDv6daQ/la/R5YTd+z/mHaL4S+uNovlfXk+r6M2p/
d//OtIdoVDPrQ0U9fGfv8pHm6BZ5vpTQH6vrT9r8MzMeEupb9by32/oz5+cd
VF0fup//3Da7lgfkmxrd72MQPgvOZ7Hacf3Rz5c79NzYWD7vPfruXtkey+MP
vk7glzsx3L8z7aEuusW873dmfTgS/zPrj3yknZXQH6vrTzW/3Inh/p1pT+md
DOnXmep7f2bWhyPxP7P+5ORj3/ihI8r0b0J/rK4/1XxyPCT4d6Y9RKOaWR+O
xP+c+nPcnjsZ2L/oenqMxmfXYxa887sS+mN1/anm+df8Q301sz4cif/q+jNq
D9FVldAfq+tPNT9znuno35n2EI2quj58+l3mn2eWtD5fYn/H872E/lhdf6r5
5U4M9+9Meyhfo88Lu/GP1z7zD9F8Vcf/kfVH8726nlTXn1H7u/t3pj1Eo5pZ
H47Ef3X9GbWH6H3dIs+XEvpjdf2p5pPjIaG+Vc97u60/c37eQY/3raI+VD+v
vbn3X+vDP8Xvk/nhtjy7V6X2LA/IE+O54n52X3+3ePgaG59S/nbqvDe0/rP6
1oVPU5p/q+2hLrpFvu+3uj5U18MXvCAfaVul9ce0ecb8c+76fettZr/O0TXu
j/lnVT5eI37omTL9m9Yf0+aZuvozJx7S/JtTb4m+yvzzzJ7M/kXX02Mc/nDd
vxl853el9ce0eaai/uzs32p7iN6R+Uc+0j5K649p88wRfuY8092/6i0ly/yz
Kh9vzc+X2N/xfC+tPybMM+/waUrzb069pVUafV7Yjf90rzaZf4jmqzr+R9ev
Pm9JmH9mnhel+Ve9pWQ5/5GPVKFb5PlSWn9MO8+pqz9z4iGhvlXPe7utP3N+
3k0V9aH7+c8/xe+T+fXOfL1RpfYsD8JTfFp3P7uvv1s8fA2Pe5r/W/Dyw6H1
0+a36nq7m38n2EMtdIt83++E+lBaD19zhHykbRXVH9PmGfPP6es3rbeZ/TpH
17g/5p9VYXmN+KFnivVvVH9Mm2fq6s+0eIjy7wR7iF6W+eeHMpLZv+hiukfj
r9cpuRDVH9PmmYr6s7N/J9hD9LLMP/KRtlJUf0ybZ47wk+eZ1v6dYA/RyzL/
rMrHW/PzJfY3Pd+L6o8J88w7fKCi/DvBHgrX6PPCbvyne7XJ/EO0RNXxP7R+
9XlLwvzj+y/1ljLl/Ec+UoVuqedLUf0x7Tynrv5Mi4fl9a163ttt/fDvW1ur
oj50P//5p/h9MgdvzuNdKrVneRC+71DXiddyh54bGx85/u//vdzs3JFgdP20
+a37931p/q22h7roFvm+3+r6UF0PX/CCfKRtldYf0+YZ88+56/ett5n9OkfX
uD/mn1X5eI34oWfK9G9af0ybZ+rqz5x4SPNvTr0l+irzzzN7MvsXXU+3kevN
72fT+mPaPFNRf3b2r/mHkmX+kY+0j9L6Y9o8c4SfOc909696S8ky/6zKx1vz
8yX2dzzfS+uPCfPMO3ya0vybU29plUafF3bjH+/VPvMP0XxVx//o+tXnLQnz
zzv2d/evekvJcv4jH6lCt8jzpbT+mHaeU1d/5sRDQn2rnvd2W7/anp1VUR/e
8VfC/DNk/wWu5UH4ph4D5pNu/wXY4ycfEYXH4/F4PB5fylfPM2nzEnt62YPH
4/F4PB6Px+PxeDwej8fj8WfxzsPt1/k2Hv8a372eqA94fF9+NH93U5q/8Gvj
P80e9veKNzwej8fj8fP55Q8UF5vH0vaLxyfzyxMwPN+XGzx5v3g8Ho/HV/Bp
/Xq39fF4PP4Zf/+pr7r99z6rnz/B4/F4PB6PP50ffT5KW58917YHj8fj8Xg8
Ho/H4/F4PB6Px+PP4p2H26/zbTz+Nb57PVEf8Pi+/Gj+7qY0f+HXxn+aPezv
FW94PB6Px+Pz573u88zyDZrf8Pj7J8sTMDzflxs8eb94PB6Px1fwaf16t/Xx
eDwej8fj8Xg8vgu/2/MXe3rZg8fj8Xg8Ho/H4/F4PB6Px+PxZ/HOw+3X+TYe
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
fwTDL8c=
    "], {{0, 240.}, {6224., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{6224., 240.},
  PlotRange->{{0, 6224.}, {0, 240.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236709298728*^9}},
 CellLabel->
  "Out[478]=",ExpressionUUID->"e8971c48-af18-4c30-af43-5c88eda5f360"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3T2u5cqaHmhC7bRxjZpCz6KMcmQKKEuN9tKRoGpBTgkoCWi0d4bQRhsa
wjU1gDuANGsoPYBtdJ67bvIwF9cPY5ER3xcRD/FUIQ/zvSvJ+GOQOxb3//Yf
/+u//z//zbIs/+1//fH//v1/+L/+7b/8y3/4v//3v/vxH//HP/+3//Kf//mf
/tO/++f//k//+Z/+5e//4//yY+f/9+P//p8/Lcvvf/72/34BAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAwlWW3hR8SDEP/AsjJ+Az16F8AORmfoR79
CyAn4zPUo38BwMfWq+fXbnNJhZP0L4CcjM9Qj/4FkJPxGerRvwByMj5DPfoX
AJz08DLqkgqX0L8AcjI+Qz36F0BOxmeoR/8CyMn4DPXoXwBw0tuLqespfEz/
AsjJ+Az16F8AORmfoR79CyAn4zPUo38BwHlHrqcuqfAZ/QsgJ+Mz1KN/AeRk
fIZ69C+AnIzPUI/+BQAnbS+md79feP+f4UcLfdG/AHIyPkM9+hdATsZnqEf/
AsjJ+Az16F8AcN7d4ucX/+l6CqX0L4CcjM9Qj/4FkJPxGerRvwByMj5DPfoX
AJx3fP2zSyqU0r8AcjI+Qz36F0BOxmeoR/8CyMn4DPXoXwBwxv5yeWRbNlv4
KUBa+hdATsZnqEf/AsjJ+Az16F8AORmfYe+qFq5/AcBJH1xJH15bw08EEtK/
AHIyPkM9+hdATsZnqEf/AsjJ+Ax7P5r0b//6d8ufl7/5tIXrXwBw3vnrqYsp
PKN/AeRkfIZ69C+AnIzPUI/+BZCT8Rnu3C/WOrFkS/8CgPOuWv/sqgp7+hdA
TsZnqEf/AsjJ+Az16F8AORmf4U6q9Vr6FwBz2v5q4PMX03/4i6sq/EH/AsjJ
+Az16F8AORmfoR79CyAn4zO88Hs7/vPO4batfwHASZdcQ19cUsNPEALpXwA5
GZ+hHv0LICfjM9SjfwHkZHyG186s19K/AOC8etdTF1PQvwByMj5DPfoXQE7G
Z6hH/wLIyfgMb90v2Sp5uZb+BQDn1bik3jaXVNC/AHIyPkM9+hdATsZnqEf/
AsjJ+AxvbX+tYen/UP+itmW3XZuHmekvGawX03/4yx/vmfz6+uXPDy+4z67C
2/1V69T4TH76F7Cnv2RgfIZ69C9gT3/JwPgM9ehfwJ7+koHxGQ767V//7oei
/4n+RVVraT9sKufzMDP9JZVtRdwuqau7qrnb9tW3/q+qXrCMz3RE/wJW+ksq
xmeoR/8CVvpLKsZnqEf/Alb6SyrGZ2ZWun28Xkv/okZlvW6ud1VQmoeZ6S8J
Pbzc7C+pD7e7JdO1f7Ow8Znu6F/AN/0lJeMz1KN/Ad/0l5SMz1CP/gV8019S
Mj4zs6dt48/L1m1n6Xqtb/pXdP2O6m3h35V/aR5mpr9ktl/e/PZ6+vBiWq8S
jc/0S/+CmekvmRmfoR79C2amv2RmfIZ69C+Ymf6SmfGZaT1oGD/XaK3///aH
D9Zr3ehftK+vbRWU5mFm+ksX1mp6+OLK7f7bX91dSetVn/GZAehfMCH9pQvG
Z6hH/4IJ6S9dMD5DPfoXTEh/6YLxmQndt4qfL9S6+8PH67VW+hfXVta6AvDZ
f36Qh5npL73Y1sX2FZTbPfv9Va+k34zPjEL/gtnoL70wPkM9+hfMRn/phfEZ
6tG/YDb6Sy+Mz8xpu21fq7V90daF67X0Ly6pr2072f/nvr6O5GFm+ktH9lec
/WVoOxI2qDLjM8PQv2Aq+ktHjM9Qj/4FU9FfOmJ8hnr0L5iK/tIR4zNz+qNV
/LpS6/zvQ9zSv7iwvvbNaV8dpfnwE4RA+kt3lp/bw52N68j4zGD0L5iE/tId
4zPUo3/BJPSX7hifoR79Cyahv3TH+MyE/tYkfq7R2vq6aL3Wjf7FZzV1V7w1
tqh2CLE+61/6CzfGZ6hH/4J6zH84w/gM9ehfUI/5D2cYn6Ee/QvqMf/hDOMz
jf3RKjYrtW7bheu1ktC/OtKgph7WXfiJQwOX9C/9ZVrGZ6hH/4J6zH84w/gM
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
2NYnHi8eiWzvF2rnzX+YWbb2b3xmZuY/Y/P8p/Qs+rp/d759ydb+c47P2idt
mP/kKf+HPf1gZ9/2922vN/+5VrbnabPlwxvAhf09Q/u/ZHy4xcLL9uD5TrWF
F/hJ20Hg2eBwcv/xwrz23324P7zAk1sSzFczz096V7v8S9tP7fYG7e2bbukt
5zbzW7L1WvojozL/Gdv2XmD/BZz1azgPb0lq5M1/mFm29m98ZmbmP2Pz/Kf0
LPq6f3e+fcnW/nOOz9onbZj/5Cn/k+u1HvZ6859rZXueNls+vAFc2N8ztP9L
xodbJrxsj7D+py813jl2t/94fV377z7cH17gyV0yXgV+Pn3Vr/bAePZTzX17
/qVhv7vZbNby9Udmlu36GF4gg8n2vEV7YGbZ2n+244GWzH/Glq1+c7aHfu/f
nW9fsrX/bMezPyrtk3qyXR/DCySw/E+u11qT216frX57bw/ZnqfNlg9vABf2
9wzt/5LjuWXCy/aI2utt9o+7X2zX/rsP94cXePL6Ol5Zd1WmvkIcGa/+mBRV
mM/8Munq/3qUTe3yL20/tdsbtLecfr60zfyWab2W8ZmBmf+MLdvzFvMfZpat
/RufmZn5z9g8/yk9i77u351vX7K1/5zjs/ZJG+Y/ecr/YU8/0tlf9Hrzn2tl
e542Wz68AVzY3zO0/0vGh1syvGyPqL3eZincah9PeIGfb59TbeEFntzfiund
RGidbHz4Txz7/PDSGFLV8i9tPw3aGzS29Px9QOMz0zL/GVu25y3mP8wsYfs3
PjMt85/hef5z5Cz6vX93vh1J2P4Tjs/aJ22Y/4SX/1XrtdbkXa83/7lQtudp
s+XDG8BJCdv/+fGho/Vay2RbeIGftB0fVst1vzuydKt9POEF3oXaLX+GnpVZ
tvrVHhjJ0vn3AfVHZla7/etfUXI+b9EemFm29p/teKCl2u1f/4qVrX6ztYel
8/t359uXhO0/2/FonzRTu/1n6195vO3px9drvej12eq33/aQ7XnabPnwBnCJ
bO3/5PF0tF7L+p++PBwWluveRfZBfVU9nvAC78Ly/K2AZxafN/t8Ysu/9PO1
B0aydP59QP2RmWW7PnKVnM9btAdmlq39ZzseaMn8Z2zZ6jdbe+j9/t359iVz
+892PNontWW7Ps7jbU8/2Nm3/X3f67PVb7/tIdvztNny4Q3gEtna/8njuSXD
S/UI63/6or6482KwumQIrf35xJZ/6edrDwxmOf18aZv5re3zJf2RmWW7PnKh
hM9btAdmlq39ZzseaMn8Z2zZ6jdhe+j6/t359iVb+892PN+0TxrKdn2cytue
fqSzv+712eq36/aQ7XnabPnwBnBetvZ//nhusfCCPcL6n758UKRdb+EFntzy
brA6OYTW/nz6ql/tgfEsp58vLUHfB9QfmVm262N4gQwm2/MW7YGZZWv/2Y4H
WjL/GVu2+s3ZHvq9f3e+fcnW/rMdz/6otE/qyXZ9DC+QwPI/uV5rTW57fbb6
7b09ZHueNls+vAFc2N8ztP9LjueWCS/bg+c71RZe4Cetg8NS53dHlpZn7eMJ
L/DklmTzmfACGUy2+tUeGM9y+vnSNvOb9VrQRLbrY3iBDObIjcn2kUjtvPbA
zLK1/2zHAy2Z/4wtW/3mbA9Lt/fvzrcv2dp/tuPZH5X2ST3Zro/hBRJY/ifX
az3s9dnqt/f2kO152mz58AZwYX/P0P4vOZ5bJrxsj7D+py813jm23V9aX7WP
J7zAk3s7Xv0yI6ownzn5+fRVv9oD41lOP19agr4PqD8ys2zXx/ACGczBu8j1
zqV2XntgZtnaf7bjgZbMf8aWrX5ztoel2/t359uXbO0/2/Hsj0r7pJ5s18fw
Agks/4c9/WBn3/b3ba/PVr+9t4dsz9Nmy4c3gAv7e4b2f8nx3JLhZXuE9T99
UV/c+b0aXk6ETg6etT+f2PIv/XztgcEsPX8fUH9kZtmuj1zo+Fd+1nuHqnnt
gclla//Zjgdaqt3+9a9Y2eo3YXtYer5/d759ydb+sx3PN+2ThrJdH6dy8OHJ
x1vC+u26PWR7njZbPrwBnPf7yWRq/+ePx3ot638qNs6ZtvAC70LtklRTsbLV
r/bASJbOvw+oPzKz2u1f/4pypOTXrfR+84O89gDZ2n+244GWard//StWtvrN
1h6Wzu/fnW9fErb/bMejfdJM7fafrX9lc6R8SrfM9Vv7eJLUVIPnabPlwxtA
s1bU0fF0tF6rqL0NsIUX+Ek1fkfkx7+88sJ/99n+8ALvyMNivLAMP/j80g6Y
LZ9KtvqtfTxw0sH+vrT6PmDV8Ud/ZGbZro/f8s1nwuc/3//xTw+n+s/m/9ny
Ldsb+Z1pPw1UHR8ajIelJ5uhzCGE+U/++c9I9ZtnvF0me5/PbOd7pqDqjQ8N
xsPSk9UfmVa26+O3fPOZSuNPm/6erX4zjLfZno/Jv863bBvfzH92x5O8vt56
dpxX7S/dah9PeIGfr6/L3zn28cvQLvx3n+0PL/CO3DX75efbGkM+/2F3XttY
/nxCqeq3wfHAx4r6+1L/+4ANxh/9kZmluj5mm88kmf/c/tGHd2f7m7X1viBP
vmV7I78z7aeqBuND1fHws1PWH5mW+U/++c8w9dvgeIqOfKr3+cx2vp8VkfmP
/sg8Ul0fs81nqo4/bfp7qvptcDxHfCV7Pib/Ot+sYZj/PDyetPV10Jf1P11R
XzxzZLxq8/nLbmTeDtH7ms2WzylP/bY5HvjMB+ND1e8HtRl/9Edmluf6mG0+
k2f+s/6jz45nLdv1/iJVvmV7I78z7aeeNuNDvfHwkrPWH5mK+c+141s2eeq3
zfEUHflU7/OZ7Xw/KB/zH/2RqeS5Pmabz9Qef9r09zz12+Z4jlgr8Vn9rseW
83nabPk2rcL859nx5Kyvov5u/U9HPijSrrfwAu/IkmM+szwfnLe9cv0fZsun
laR+mx0PfOCD/r7U/H5Qs/FHf2RmSa6P2eYzqeY/23/32SFt5//Z8i3bG/md
aT+VNBsfKo2HV524/shUzH+uHd+ySVK/zY6n6Minep/PbOdbWjjmP/ojs0ly
fcw2n2kw/rTp70nqt9nxHLGtx2dV3PL5mPzrfIMm0Wx8qDQeVu2/Ceur9Byn
2sIL/KS71viwsZ3ZX1qetY8nvMA7sq/Kh+Nn7c9/VrN3Q/Ry7HrRPp9Wkvpt
djzwgQ/6+1Lz+0HNxh/9kZkluT5mm8+kmv/s/92HX6vZ318kybdsb+R3pv1U
0mx8qDQeXnXi+iNTMf/JP/8ZoH6bHU/RkU/1Pp/Zzre0cMx/9Edmk+T6mG0+
02D8adPfk9Rvs+M5Yl+PfT1Pmy3foEk0Gx8qjYdV+2/C+vqsvz8r1ZP7l8Kt
9vGEF/hJ20b1sMmd3F9aX7WPJ7zAO3LXg9be1/Lzn3XDh+Pk/gPD8+GVmLx+
Wx4PlPqsvy/Vvh/UcvzRH5lZhutjtvlMtvnPw3+30+ctxlvOtJ8aWo4PNcbD
k+euPzIt85/885/e67fl8RQd+VTv85ntfItKxvxHf2RCGa6P2eYzbcafNv09
Q/22PJ4jHtZjR8/TZsvXbg8tx4cj7f/M59fov9nqq9T2IB+ewsn9S+FW+3jC
C1x9TVVfjS0/15Suf2j8+Uuy+WdpPrwGk9dv4+OBIp/196Xa94Majz/6IzML
vz5mm89km/88/Hf3twDrli3fuL2R3Mn2c7nG48Pl4+Elp68/Mifzn+Tzn97r
t/HxHD/sqd7nM9v5FpWM+Y/+yJzCr4/Z5jNtxp9m/T28fhsfz1sP67Gj52mz
5Wu3h8bjw9v232b8OX482eqr1PYgH57Cyf1L4Vb7eMIL/HyDnGoLL/COLD/H
qNtwtFw9hTjy+Uvl60XtfHglJq/flscDpT7r78so79fSH5lWhutjtvlMtvnP
w3+30+ctxlvOtJ8aWo4PNcbD8+euPzIn85/885/e67fl8RQd+VTv85ntfItK
xvxHf2RCGa6P2eYzbcafNv09Q/22PJ4jHtZjR8/TZsvXbg8tx4ca42Ht/put
vj44x6m28AI/6WGDX550ig/2l261jye8wDvysBgvLMMjn/+sKh8Oki+aUFQ+
vBKT12/L44FSn/X3Je79WheOP/ojM8twfcw2n8k2/3n2T/f4vMV4y5n2U0PL
8aHGeHj5ueuPTML8J//8p/f6bXk8RUc+1ft8ZjvfopIx/9EfmVCG62O2+Uyb
8adNf89Qvy2P54hnVdnL87TZ8rXbQ8vxocZ4WLv/ZquvM/19e45X7S/dah9P
eIGfr6+HDeyq/R/UV9XjCS/wjtw1+6XO+vO3n3+88eTMp7XkqN9mxwMf+KC/
LzW/H9Rs/NEfmVmS62Npf8+Wr6r0fjlbvmV7I78z7aeS0v5emt/+QzXGwzMn
rj8yrdrtv1J/z5ZPa8lRv82Op+jIp3qfz2znW1o4bcaHg+3/48//4MT1R6ZV
u/1X6u/Z8p+VTIP+vuSo32bHc0S252Pynv+cPJ6q/TdhfZX294cHfNX+0q32
8YQXuPqaqr5aOjJeNfv8Z3X6rFqz5RNKVb8Njgc+VtTfl/rfD2ow/uiPzCzV
9THbfCbJ/Cfb85Mz9+/GW9I+/2kwPlQdDz8+Zf2ROZn/5J//DFO/DY6n6Min
ep/PbOf7WRGZ/+iPzCPV9THbfKbq+NOmv6eq3wbHc0S252Pyr/PNGkaD8aHq
eFip/6atr4MeHvazsv1gf+lW+3jCC/x8m5xqCy/wjiyZ5jPLzz744w9r7zty
vUiSTyhV/TY4HvhYUX9f6n8/qMH4oz8ys1TXx2zzmSTzn2zPT87cvxtvSfv8
p8H4UHU8/PiU9UfmZP6Tf/4zTP02OJ6iI5/qfT6zne9nRWT+oz8yj1TXx2zz
marjT5v+nqp+GxzPEdmej8m/zjdrGA3Gh6rjYaX+m7a+jp/jVFt4gZ901xr3
Tu4vLc/axxNe4B3ZV2XgfGZ5NCy/vl6kyieUqn4bHA98rKi/L03er1V7/NEf
mVmq62O2+UyS+c+RG43tLXO2fMv2Rn5n2k9VS/3xoaj9f/D5H5yy/si0arf/
qv09Wz6hVPXb4HiKjnyq9/nMdr6fFZH5j/7IPFJdH7PNZ6qOP236e6r6bXA8
R2R7Pib/Ot+sYSzmPy/Xa2Wrr4Puzm7v5P4XxfJwq3084QV+0vfNIsCvCu8i
K62v2scTXuAduetBa+8L+fxt29hXcf58Qqnqt8HxwMeK+vvS5P1atccf/ZGZ
pbo+ZpvPJJn/HLwrXO9EsuVbtjfyO9N+qlrqjw9F7f+Dz//glPVHplW7/Vft
79nyCaWq3wbHU3TkU73PZ7bz/ayIzH/0R+aR6vqYbT5Tdfxp099T1W+D4zki
2/Mx+df5Zg1jMf95dDxp6+ugbaF9Wf+TnvriheXnmtL1D1Gf/6x+X1wvUuVz
ylO/bY4HPlPU35cm79dqMP7oj8wsz/Ux23wmyfznyM3yemexLe0k+cbtjeRO
tp96libjw/H2/9nnf3bW+iNzqt3+6/X3bPmc8tRvm+M5fthTvc9ntvP9rIjM
f/RHppLn+phtPlN1/GnW3/PUb5vjeSvb8zH51/lmDWMx/3l0PGnr66BtoVn/
k19pefa+hRd4R5afY9S6iPTaKUTp5y+PltR2lM8mYf1WPR4443h/X1p9P6jN
ZFV/ZEIJr4+p5jMZ5j9Fk//S+8cG+ZbtjfzOtJ8Gx1Z7PKk6Hn5wvvoj06rd
/mv392z5bBLWb5LxdpnsfT6zne/HpWT+oz8yiYTXx1TzmXrjT5v+nrB+w8fb
Yw8e/rYlfJ42W75x2zD/ufv8zPV18Byn2sIL/KTtEPH187Vv28Z/95/y8vLy
8mPka2/Zzldee8tcPrXz4RNO8095+WHy4QPIYLLVr7y8vLy8vPz5fPgEo/F8
o/fjl5eXP54PH9CMD/Ly8vLy8vKD5dfk3d/e9m8z2/+Ul5eXlx8gf/fVlQut
/1Cq85XX3jKXT9V8+AO0O9nKR15evt/xpHfZ6ldeXl5eXl7+fD58gtF4vtH7
8cvLy+fp78YHeXl5eXl5+QnzXz/XdG3/6uvXtV53nykvLy8vP0B+/xrh/cuH
P7T5p/Ocr3xsXnsLzIc/QNs/T0tVPvLy8v2OJ73LVr/y8vLy8vLy5/PhE4zG
843ej19eXj5Pfzc+yMvLy8vLy8+Zv9u5/5y7P8vLy8vLD5B//ZviD/6y+O3v
i9/+1viE5yuvvWUun6r58AdoD5+n5SkfeXn5fseT3mWrX3l5eXl5efnz+fAJ
RuP5Ru/HLy8vn6e/Gx/k5eXl5eXlJ8zfBfb/87vPkZeXl5cfI3/V+pm7xTPr
+pls5yuvvWUun6r58Ado++dpqcpHXl7+eD58ABlMtvqVl5eXl5eXP58Pn2A0
nm/0fvzy8vLH8+EDmvFBXl5eXl5efrD8jz8sf91u+9c/333UusnLy8vLj5Ff
Kr/vKNv5ysfmF+0tNB/+AO1OtvKRl5c/ng8fQAaTrX7l5eXl5eXlz+fDJxiN
5xu9H7+8vPzxfPiAZnyQl5eXl5eXHy//9WjR1/5Dvn6u/pKXl5eXHyC/VH7f
UbbzldfeMpdP7Xz4A7T987RU5SMvL9/veNK7bPUrLy8vLy8vfz4fPsFoPN/o
/fjl5eXz9Hfjg7y8vLy8vPxs+VtgzW//J/sPWcPy8vLy8r3nl8rvO8p2vvLa
W+byqZ0Pf4B2J1v5yMvLH8+HDyCDyVa/8vLy8vLy8ufz4ROMxvON3o9fXl7+
eD58QDM+yMvLy8vLyw+WXzbbs/x2p7y8vLz8MPmq7ztKeL7y2lvm8qmaD3+A
didb+cjLyx/Phw8gg8lWv/Ly8vLy8vLn8+ETjMbzjd6PX15e/ng+fEAzPsjL
y8vLy8sPlt//5/ajbn9723n3n/Ly8vLyXeeXyu87yna+8tpb5vKpnQ9/gHYn
W/nIy8v3O570Llv9ysvLy8vLy5/Ph08wGs83ej9+eXn5PP3d+CAvLy8vLy8/
Z/4utvx1cdc2Iy8vLy8/WH6p/L6jbOcrr71lLp/a+fAHaA+fp+UpH3l5+X7H
k95lq195eXl5eXn58/nwCUbj+Ubvxy8vL5+nvxsf5OXl5eXl5eX3e/Z/JS8v
Ly/fe35p8r6jPOcrr71lLp/a+fAHaG+fp/VVnvLyM+fDB5DBZKtfeXl5eXl5
+fP58AlG4/lG78cvLy9/PB8+oBkf5OXl5eXl5efJb3eum7y8vLz8GPml+fuO
+iofee1tpHz4A7Tjz9O6KE95+Znz4QPIYLLVr7y8vLy8vPz5fPgEo/F8o/fj
l5eXP54PH9CMD/Ly8vLy8vJD5m/7t3+13bP/NHl5eXn53vNLk/cd5Tlfee0t
c/nUzoc/QHv4PC1P+cjLyx/Phw8gg8lWv/Ly8vLy8vLn8+ETjMbzjd6PX15e
/ng+fEAzPsjLy8vLy8sPln/9V7dt+5ny8vLy8sPka2/Zzldee8tcPlXz4Q/Q
7mQrH3l5+eP58AFkMNnqV15eXl5eXv58PnyC0Xi+0fvxy8vLH8+HD2jGB3l5
eXl5efnB8tu/uu2/+7S7PfLy8vLyY+TXu9rLt9snZztfee0tc/m0Kf88spWP
vLz88Xz4ADKYbPUrLy8vLy8vfz4fPsFoPN/o/fjl5eWP58MHNOODvLy8vLy8
/Az57V/d/ae8vLy8/Bj5213t8u631L39FXXbzO030724X+6ofOS1t5Hy4Q/Q
jjxP66g85eVnzocPIIPJVr/y8vLy8vLy5/PhE4zG843ej19eXv54PnxAMz7I
y8vLy8vLD5Zfk3d/e9u/zWz/U15eXl6+9/ztrnY5vX7mbgnNslmZk+p85bW3
zOXTpvzzyFY+8vLy/Y4nvctWv/Ly8vLy8vLn8+ETjMbzjd6PX15ePk9/Nz7I
y8vLy8vLT5j/+rmma/tXX7+u9br7THl5eXn53vPrXW2l9x1lO1/52Lz2lqH8
88hWPvLy8v2OJ73LVr/y8vLy8vLy5/PhE4zG843ej19eXj5Pfzc+yMvLy8vL
y8+Zv9u5/5y7P8vLy8vL955f72rrve8o1fnKa2+Zy6dN+eeRrXzk5eX7HU96
l61+5eXl5eXl5c/nwycYjecbvR+/vLx8nv5ufJCXl5eXl5efMH8X2P/P7z5H
Xl5eXn6A/HpXW+99R6nOV157y1w+bco/j2zlIy8vfzwfPoAMJlv9ysvLy8vL
y5/Ph08wGs83ej9+eXn54/nwAc34IC8vLy8vLz9Y/scflr9ut/3rn+8+at3k
5eXl5cfIr3e1ld53lO185WPz2ltsPvwB2p1s5SMvL388Hz6ADCZb/crLy8vL
y8ufz4dPMBrPN3o/fnl5+eP58AHN+CAvLy8vLy8/Xv7r0aKv/Yd8/Vz9JS8v
Ly8/QP52V7tUe99RtvOV194yl0+b8s8jW/nIy8v3O570Llv9ysvLy8vLy5/P
h08wGs83ej9+eXn5PP3d+CAvLy8vLy8/W/4WWPPb/8n+Q9awvLy8vHzv+dtd
7VLtfUfZzldee8tcPm3KP49s5SMvL388Hz6ADCZb/crLy8vLy8ufz4dPMBrP
N3o/fnl5+eP58AHN+CAvLy8vLy8/WH7ZbM/y253y8vLy8mPkb3e1S7X3HWU7
X3ntLXP5tCn/PLKVj7y8/PF8+AAymGz1Ky8vLy8vL38+Hz7BaDzf6P345eXl
j+fDBzTjg7y8vLy8vPxg+f1/bj/q9re3nXf/KS8vLy/fdX69q630vqNs5yuv
vWUunzbln0e28pGXl+93POldtvqVl5eXl5eXP58Pn2A0nm/0fvzy8vJ5+rvx
QV5eXl5eXn7O/F1s+evirm1GXl5eXn6w/O2udqn2vqNs5yuvvWUunzbln0e2
8pGXl+93POldtvqVl5eXl5eXP58Pn2A0nm/0fvzy8vJ5+rvxQV5eXl5eXl5+
v2f/V/Ly8vLyvedvd7VL5fcd5Tlfee0tc/m0Kf88spWPvLz88Xz4ADKYbPUr
Ly8vLy8vfz4fPsFoPN/o/fjl5eWP58MHNOODvLy8vLy8/Dz57c51k5eXl5cf
I3+7q10avu+or/KR195Gyoc/QDv+PK2L8pSXnzkfPoAMJlv9ysvLy8vLy5/P
h08wGs83ej9+eXn54/nwAc34IC8vLy8vLz9k/rZ/+1fbPftPk5eXl5fvPX+7
q10qv+8oz/nKa2+Zy6dN+eeRrXzk5eWP58MHkMFkq195eXl5eXn58/nwCUbj
+Ubvxy8vL388Hz6gGR/k5eXl5eXlB8u//qvbtv1MeXl5efkx8re72qXa+46y
na+89pa5fNqUfx7ZykdeXv54PnwAGUy2+pWXl5eXl5c/nw+fYDSeb/R+/PLy
8sfz4QOa8UFeXl5eXl5+sPz2r2777z7tbo+8vLy8/Bj59a620vuOsp2vvPaW
uXzalH8e2cpHXl7+eD58ABlMtvqVl5eXl5eXP58Pn2A0nm/0fvzy8vLH8+ED
mvFBXl5eXl5efrD8/w9ofN+N
    "], {{0, 180.}, {2412., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2412., 180.},
  PlotRange->{{0, 2412.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236709526545*^9}},
 CellLabel->
  "Out[479]=",ExpressionUUID->"e779e081-c3aa-4ce1-83a9-0c88711dc65e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
LXy3M4ihxheczPqHPczP0I7xBe1Y/7CH+ZmPPVp4NzIzvqAd6x/2MD/D0n3D
Q8Wn4u3bT12xePGfxbfO57JX0x+mIv+y2r/8cXu8+n8I8Ww9NluSrbbZVz6n
9Vj4m+I0h+SPfINVxhe0k2H9c//nv022XNC1jme7cebnqYXvc8YxzviC82VY
/9Av8zO0Y3xBO9Y/7GF+5jOPFt6N5IwvaMf6hz3MzzDzqM1+W8I9lUCLF78n
vnU+l126FW3qyVTefy9q/qvit9fPP15qVp8/a1HxG/sfPkFBaZ7ei69kblyM
WY+NaWf+yDd4wfiCdgLXP2Vx/pYS/dbxfMD8DO0YX9CO+z/sYX6GdowvaMf6
hz3Mz9R6tPBudMH4gnasf9jD/AyTss75bfH27fe6aPHia+Nb5/Pt92f4z/58
X6v5r43fU/+/KiR+Y//DJyhYdfv5LudjibVclU3bH7+arcTk9uA+zh/5Bm8Z
X9DO+eufR03+3y8fNtfzt4tnD/MztGN8QTvu/7CH+RnaMb6gHesf9jA/s9Gj
hXejL8YXtGP9wx7mZ1itE55ZrfcWL/6D+Nb5fPupby/7Vm75XtT5V8VPttTP
L/+TjRtPiN/Y//AJClbdin/LaVpr3RaLutn2c2Yh8vssf+QbbGF8QTsnr3+m
4vypMv91iX7reHa68PxctvD9zJguPL4gnPs/7GF+hnaML2jH+oc9zM9s9Gjh
3eiL8QXtWP+wh/kZstWHi792/An5/PiLyr936sZq/6via+vnS+r/4UB/H8I/
7fHn2cb7z7+7dM78Q0c+yB/5BhsZX9DOmeNF/f/1XHJ+frTln+FklxxfkITx
wh7mZ2jH+IJ2jBf2MD+zxaOFd6M7xhe0Y7ywh/mZwWWrDxd/7fhz8vl78ZD/
Ryv/POv5xvjV/3zm9qSlit/Y//AJCl5bzVU5zEa1+SPfYDvjC9o5Z7yo/7+q
K83PPqkkmyuNL8jGeGEP8zO0Y3xBO8YLe5ifec1dtT2ML2jHeGEP8zPDylYf
Lv7a8a3zufxLy17dfor5Z1tq458VzF91e/gEBQAAnE/9P/n5pBIAAAAAarmr
BgBwGdnqw8VfO751Pi/7tqznvy+e8789fvVtXnh7+AQFAACcT/0/+fmkEgAA
AABquasGAHAZ2erDxV87/px8Xpa1z3r7XdT218avvsGrbg+foAAAgPOp/6cL
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
Ww/3Hh9+QBnK7edzojJXyy3fizr/qvgyyVeHwGz7s/X/s5bt9VtvD08YeCHb
eLE9dnt4Qp6f/8t6jNUfX9RvBMaH78Cd80l4h4HTeH5jLPMzZ6paoty6qv83
/8DFuL6DWp7/34ve1z+99x/gqrLV52SLDz9ALD1aeDdaeHZf9/ak1d4frn2d
8B0CAAPKth7uPT78gDKU+89Xbss8nNJyNZ+r4o9a/z9r2V6/9fbwhIEXso0X
22O3hyfk+fmfqt6jNj58B+6cT8I7DJzG8xtjmZ/JrKP6f/MPXIzrO6jl+f+9
6H3903v/Aa4qW31OtvjwA8TSo4V3o4Vn93VvT1rt/eHa1wnfIQAwoGzr4d7j
ww8oQ5kys1xXl6vuZ5m8Mf7Zel77rIUnDLwQPT60XC08IU/2XdRjPCoubn8V
YPx2/+pJ/UaG+PAduHM+Ce8wcBrPb4xlfuZMVSl08/x/II7rO6jl+f9LUwvv
SdWRSr7+6b3/AFeVrT4nW3z4AWIp4TrtKFvv857VwncIAAwo23q49/jwA8pQ
fvucqMjS208x/2xLbXyZ/5PZuCi317Zsr996e3jCwAvZxovtsdvDE/Jks3qM
2ZMY/35OeV6/ER4fvgN3zifhHQZO4/mNsczPnKkqhWZ52OL+m/kHeMb1HdTy
/P+lqYX3pOpIJV//9N5/gKuqvX4fLT78ALGUcJ122Ft7cl/3Wau9P1z7OuE7
BAAGlG093Ht8+AFlKMtcnXLye63IvzZ+Ne1fbK9t2V6/9fbwhIEXso0X22O3
hyfkyb5f1mPMtt/e1W+cHx++A3fOJ+EdBk7j+Y2xzM9k1lH9v/kHLsb1HdTy
/P+lqYX3pOpIJV//9N5/gKvKVp+TLT78ALGUcJ122FurrKs5qj7H/WQAyCPb
erj3+PADylCelevPsnf67Qfxh6z/n7Vsr6+elpFlGy+2x24PT8iTfa/VYzxK
L26b6zcC48N34M75JLzDwGk8vzGW+ZkzVaXQzfP/gTiu76CW5/+XVlt4rzYe
qeTrn977D3BV2epzssWHHyCWUq3QDn5r6v8BYHjZ1sO9x4cfUIayLOl/tHKh
vqz/3x7/YkmvfdDCEwZeiB4fWq4WnpAn+37+PMbVIo1s8eE7cOd8Et5h4DSe
3xjL/MyZqlLo1lX9v/kHLsb1HdTy/P+ZWQvvz/YjlXz903v/Aa4qW31Otvjw
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
P9j/QBTzA7Qz5vjK8/zGMfc/V7Lawnv14XvppP7/qPkHRub8a//vof4/g3HO
pwd+/jVFnv+uez9evfcfyKD39U9r2epteo8PP6AsPdrqr7LND6uJN/PiIihP
/Mb+h+cGTWUbX6Ox/+ndsoV36bz3nmx9O1p8eAKc7Br3P/OoPf+WSVhm6e2n
mH+2pTb+2YLc9s+2hydYfl+bW3hXL8n+B54xP0A7A46vr0zPbxxw/3MlV7rn
ec79t1TzD4zM+df+/9h9UV4yuwE7bRzz85pzjHM+fftOt7zZ8Hfd+/Hqvf9A
El2vf1rLVm/Te3z4AWXp0Z79NtX8kK2+Rf0MO6UaXwOy/+na7PT9+mx+MdnW
t6PFhyfAyb4ucf8zlarz7zJXp5z8Xivyr41fTXvbP94enl1d+Hr+r2A8Joox
Zwb7HwhnfoB2Rhtfb68it1xClmE7989o+58rebTwbhzzXjqp/z92/oGROf/a
/5+5/17/P/txOlnc1f+3NM759MDPv6bI899178er9/4DefS7/mktW71N7/Hh
B5SlR3sRkGd+yFbfon6G/fKMrzHZ//Rrdvp+eza/kmzr29HiwxPgZNe4/5nN
9vPvs3L9WfZOv/0gPtX6v/ft4amV34vktwS1/4FA5gdoZ8Dxtb9+o4y5737+
/2j7nytZtvAuff5eOqn/P3D+gZE5/9r/H7uvPeT//vP0yFvxlJsxP685xzjn
0wM//wp8170fr977DyTR9fqntWz1Nr3Hhx9Qlh7t2W9TzQ/Z6lvUz7BTqvE1
IPufri1beJfOe+/J1rejxYcnwMmucf8zlarz77Kk/9HKhfSy/n97/E07tIVn
V3Jvk7+cRsacH+x/IIT5AdoZc3zleX7jmPufK3m08G4c8146qf8/av6BkTn/
2v97LOv/Z5X/szvb4R2+pHHOp9d4/lXvx6v3/gMZ9L7+aS1bvU3v8eEHlKVH
W/1VtvnhXb3J1Vp4btBUtvE1Gvuf3s1O3y/O5teTbX07Wnx4ApzsGvc/86g9
/y7r+Zdblr/6IH72o+2fbQ9PsOS25P80BAacH+x/IIr5AdoZc3zleX7jmPuf
K3m08G4c816K6+hnrbwF99nfkmf+gZE5/9r/e9zV/ycwzvn0Gs+/6v149d5/
IIPe1z+t1V6Pi38dH35AWXq01V9lmx+y1beon2GPbONrNPY/vZudvl+cza8n
2/p2tPjwBDjZNe5/5lF7/p3y83WR/zKfN8aXX3K5r30Fxvaq7eEJlpz1p/0P
5GR+gHbGHF95nt845v7nSlZbeK8+fC/vbr7NbsF99rfkmX9gZM6/9v8e90X9
/614oM3jz+U5JbzDlzTO+fQaz7/q/Xj13n8gg97XP63VXo+Lfx0ffkBZerTV
X2WbH7LVt6ifYY9s42s09j+9W7bwLp333pOtb0eLD0+Ak13j/mcen9X/l6vl
KSGX6+cpn7fHZ1v/9749PMGSe5v/5Ywx4Pxg/wNRzA/QzpjjK8/zG8fc/5DT
lptv5S24z/6WPPMPjMz51/7fY/bcyGenCc+TbGqc8+lX4+Z4jdB/IIPe1z+t
1V6Pi38dH35AWXq01V9lmx+y1beon2GPbONrNPY/9Cvb+na0+PAEONk17n/m
UXv+vT0v3Z/a7Nn+tfHagS08wfL7M6uf3aW3+LT/gUDmB2hnwPG1v37jj+O+
OT7g/oecqi6uP/58MNX8AyNz/rX/P1Y+2P9Z/f8sjMONdj7t/ZOv3o9X7/0H
kuh6/dNa7fW4+Nfx4QeUpUd79ttU80NVvl2ghecGraUaXwOy/6FTVSfThOvh
3uPDEyBE7/c/U6k6/5YpOj3UaPnA/9Vn/m+JL2NWP0+Z/XYWX7u999d/uz08
u45N1BYj1xQR67T9X/uy0oCRJcn/0+YHyKxR2g84vr4yPb/xtP1f+7KXTwPe
2p6cn7XwNzizvAXxwsfX11+Z5h/owpY5ZBqbr1+qDOt3srqG0/Z/7ctWxb94
cNOwH9Oc5muw82nv71f/+8o3oJFrrH82qr2+Fn9sfHi2s/Roz3572vywqatP
8qrRdvUzTE4+LYaMrwGdtv9rX1YasD05P2vhb3Am23pV/Ov48IQJ8TXk/bdG
c0jVZLVaz//sH8+6/f6Vli3x923/EMD+f9ur99ffuD08aQ/M/Pta++Ovb6bs
HAXPXnyaQLqYH/rVev/X5k/rfIPMsuW/+ZmRWf8cvj9nb3D5rsvfvr2ETL7/
rX/4zIvM3N8SZtHjOnrjzbePr6+zzT+Q2fbz0b2oGdg+fkdb/2RzgfXPXf1/
nNHOp72/X/3vK9/gHLf/eqsS3uFDXGD9s1Ht9bX4Y+PDU52lR3sRkOf69N64
XuWufoYFn39d2zjrH/ri86++1rejxYcnTIjR7r/lWf+UWbpcrs/W7dOP2+On
yLdtzzq/99cf6vpllpzTj9Mfdi4R357iXQI01Xr/1+ZP63yDzLLlv/mZkVn/
NN2ln10/ljH33c//b7r/rX/42NfiHwd8lp8ftIQp9Li39vYW3HQV//FezTP/
QGZV56PlCF1tU9jy9Z/Nb4bYOcf38P1/wvrnbb59+wpAS6OdT3t/v/rfV77B
OQas/7/A+me72utr8cfGh2c7S4/27Leprk9b16uon2HG51/XNtT6h774/Kuv
9e1o8eEJE2Ko+2+p1j9lipar8Skzlyv52njtwBaevccm/2r+7xkCb5O/nEMy
zxKdar3/a/Ondb5BZtny3/zMyKx/Wu/Vz64fZ5eQ7S6+du5/6x/2eDtSNg6W
crzsHzXtlPcl3t58+/j6Os/8A5nVno/KQfr6FvrDmOufPK6x/rmr/w812vm0
9/er/33lG4R4tOWfL+Ma65+KA1p5fS3+2PjwhGfpxcyW7fr09WXO9Vp4bgzO
51/XNtr6h774/Kuv9e1o8eEJE2Kc+2/Z1j+335/hP/vzfa3mvyr+/u6TlNXB
cn/+ed9ye++vX7U9PIEvkP97Xp/Y/W/9D9tly3/zMyOz/mm9Vz+7fixj7o3r
/489vtY/bHfg/c8DR0075bXz8oFg072LqTXaq6fNP5BZ7fmovP/27P55eZtu
zPVPHhdY/0y59Pp84SsA7Yx2Pu39/ep/X/kGIe7//Ld7Wf//z38L79KxLrD+
qTugldfX4o+ND094lh5t9VfZrk9b16uon6Hk869rG239Q198/tXX+na0+PCE
CTHO/bds65/bz8ccZa6WW74Xdf5V8bP0ft1mg2J1yCy39/76VdvDE/jw/H+d
n9len76Or3xgZNnyP1t/4EzZzo/hO+TwvfrZ9ePsEvLjPZPt+I6ZDzxz4P3P
KXL/qGnnnPtveeYfyKz2fLSxfuCu/j+HC6x/Hrk0nR1WzyA39f8tjXY+7f39
6n9f+QYhZgX/6v9bv37r/mSrnxktPjzhWXq01V9luz5tXa/yrX6GQrbzY/gO
uZhsx1c+UPL5V1/r29HiwxMmxDj337KdH+/Fw45m6/DyD2U+V8XXttr1fO+v
X7s9PIFPyP9pRLfI/3LGSDtL9Kv1/q/Nn9b5Bplly3/zMyOz/mm9Vz+7fixj
7i3r/61/CHTg/c8DR007vdT/59+TsF/t+ejw+v+d5192Ht/k65/77w//L08f
s2fdXOBmbFqjnU97f7/631e+QQj1/+WkkXD9U31Ak9XPjBYfnvAsPdrqr7Jd
n7auV9ly8V429TPX5vOvaxtt/UNffP7V1/p2tPjwhAkxzv23bOufKTPLdXK5
Gn+WyRvjb9qhLTyB9+f/n+3tiXVavH32V2x8/fC9cUlN939t/pyQb5BWwvw3
PzMs659Ge3Xn9eMfx31/3PqHtA68/zlF/nHEqGmkl/r//HsS9qs9H9XW//8a
cv2TStfrn2X9//fPtwCmH6dThnqSRkY7n/b+fvW/r3yD861W+1/yKwAvZomp
5Vz/VB/TZPUzo8WHZztLj/bst6muT7dcXF+phefG4Hz+dXlDrX/oi8+/+lrf
jhYfnjAhxrn/lm39UyZhmaW3n2L+2Zba+Hfr8Xkrx8vkxfbeX792e3gCHzgK
XrfMr0/s/q99ffnAyLLlf7b+wJla5/9o4+sr2ffHsx3f0fKBZ96OlO33Pw8f
NS2cc/8t2/wDmW0/Hy3vwq3eoLsX9f9Vr0/s8T3n9bfH34v6/+mUUZ4+7j9P
v7mp/2/ma7Dzae/vV//7yjc43yD1/796Xv9UH9Nk9TOjxYenOkuP9iKg9fxQ
0dXG9Sq1Tf3MCFrnf57xNaZsx1c+8PDl86+u1rejxYcnTIi3o/Ji99/ynB+X
uTrl5Pdakf+e+C1tdZi82N7769duD0/do/J/edotB/j+/G/6+sTu/9rXlw+M
LFv+Z+sPnCnb+bF3+68fZ5eQyfe/9Q+fOfD+5xR51Khp4Zz7b9nmH8hs+/lo
VkUw+3EavPdF/b/zXRfH95zX/yDfvtX/xxntfNr7+9X/vvINzjdU/f/9SZut
N855/Xb9yVY/M1p8eKqz9GgvAvJcn7auV6lt6mdGkO38yLGyHV/5wIPPv/pa
344WH54wIUa7/5bn/Dgr15+V7pepO/txY/yzdf6zlu36ovXrD3j98iI5DxkC
rV+f2P1f+/rygZFly/9s/YEzZTs/XsD+68cy5r7v+jHb8R0wH3jmwPufx46a
Rnqp/8+/J+EQVeej+9pD/u/F0wVndxprX5/Y43vC63+Wb9/q/+OMdj7t/f3q
f1/5Bid7Ued/sa8AdL3+qT6syepnRosPz3aWHu3Zb1Ndn6r/52TZzo8cK9vx
lQ9MfP7V1/p2tPjwhAkx1P23VOfHZUn/o5UL6WX9//b45Qpf29PCs7d18u8c
Aq1fn76Or3xgZNnyP1t/4EzZzo/hO+TwvfrZ9ePsErLdxdfJx3fMfOCZA+9/
TpH7R007vdT/59+TsF/t+WhZ/z+r/J/daXS+6+v4tn79j/Pt+6fsf2k6ZXyr
/2+fRSOcT3t/v/rfV77Bmf6lvaz/v798XHZHel//VB/ZZPUzo8WHJzxLj7b6
q2zXp7fBWnhuDC7b+TF8h1xMtuMrHyj5/Kuv9e1o8eEJE2Kc+2/Zzo/Lev7l
luWvtse/X5H/3qZXm/11z7b3/vq128MT+GL5H75DLibb8ZUPjCxb/mfrD5wp
2/kxfIccvlc/u34sY+7q/7moA+9/Hjhq2tlyIV/egmu0V0+bfyAz9f/X1vv6
p8yuh+nOdvkJzhQTvsMvabTzae/vV//7yjc406N99tu+9L7+qT6yldfX4o+N
D094ll5MaNmuT1vXq7xI49Wmfubasp0fw3fIxWQ7vvKBks+/jl1/ij82Pjxh
Qoxz/y3b+XHKz9dF/st83hhf28pPWO5rX5mZbe/99Wu3hydw6/wvB3WL/N/5
+vR1fOUDI8uW/9n6A2fKdn4M3yGH79XPrh//OOv5/9Y/BDrw/ucUuX/UtLPx
U8jpSr/RXj1t/oHMas9H90X9/614wMiteE7740fnu76Ob+vX/zjfyvr/2f1t
9f+tjXY+7f396n9f+QZnerTPftuX3tc/1Ue28vpa/LHx4QnP0osJLdv1aet6
lbeZvExs9TMXlu38GL5DLibb8ZUPlHz+dez6U/yx8eEJE2Kc+2/Zzo+rn2vc
nqzDp3zeHl/bsl1ftH79Aa9f/sy61yfWnYux1q9P7P6vfX35wMiy5X+2/sCZ
sp0fL2D/9WMZs/P6MdvxHTAfeOarcQt/gzNbbr5NV+43z/+HxqrOR7Pn+D0b
tuXz/ZzvOjq+J7x+bb4t7+Uub8lOAeF7+5JGO5/2/n71v698gzP9S/vnvz39
7T//7X6V+v9fna9/qo9s5fW1+GPjw7OdpUd79ttU16et61U2JnOZ1epnri3b
+ZFjZTu+8oHJAR9xvWzhb3Am23pV/Ov48IQJMdT9t1Tnx9uG0v3Zs/1r47UD
W3j2HjUEmp5JezxTX0m24ysfGFm2/M/WHzhT6/wfbXx9Jfv+eLbjO1o+8NqW
fKht4W9qVdXF9cefD34lm38gs+3zyXT//NeTzzIeY7YMq3p9Yo/vOa+/PX77
5zV7zhe8Pb5DnU97f7/631e+wcle1/+Hd+9Y/a5/atVeX4s/Nj481Vl6tBcB
reeH7ary7QItPDf4le/8yLGyHV/5QGlLPtS28De1qurkmHB9O1p8eMKE+Brs
/lvr+WT765cpuvyXjsuNy6/0bomvyv/Za86e/bW6vffXr90enroHWn2bB77H
D15/eUDf/hWp4lPJdnxb9wd2ajo/nDAf1r5Z45FhZTs//sq3ntkYv//68d7g
++PZjq/5loec4+VXg/nh+1//q9VL6Y3X113PP5BZ1fnoxe24Z7fNPzjfNVqf
nBafygf7v+nrb4mftr/+qzeG8ZnRzqe9v1/97yvfYFXT9clqnf/1iv/LndPd
+qf2ell8bHx4kh8+ZPq63tlzvFrPD1s86+dR22tb6/6EJwyTbOfHX/nu53Q3
H2Y+vq37Qy/SXu+/He/Z1p/ij40PHxrG42kynB9X6/lf/GNetfG17V75b3v1
/vq128OTtl3+337+tZSQ158OX2nKgfzxCaU6vif0Bz52wvzQdD787C0bjwwr
1fkx23qmKj7n98dTHd8T+kMvEo6XRvPDY+MsbNXsP7zA/AOZVZ2PphG6bBvr
/y+8/smpx/VPmWZV5wsONNr5tPf3q/995RvMnLA+Gbz+v5f1T9X1svjY+PAk
PzCZe7ze2XO8Ws8P2/vfrl6ltrXuT3jCMEl1fqydf7LFJ5Tq+J7QH3qR8Hp/
43jPtv4Uf2x8+NAwHk+T4fxYZmm5bH5sn63hpx9r47e3e7Lri9avX7s9PGkv
lv+rkaXVPZ8tPqc8x/ec/sBnzpkf2s2Hh7xr45Gh5Dk/ZlvP1Mbn/P54nuN7
Tn/oRbbx0m5+mDY+i5/GwqN91p9s+xPy234+Kkfoavte+wrAOOufnHpc/yzP
CKttCgvfyZc02vm09/er/33lG5TOWZ+o/+9l/bP9ell8bHx4krfI5FLy6509
x6v1/LCx/03rVWpb6/6EJwyT1vm//fVr559s8TnlOb7n9IdeZLve3z7eW68n
xcfGhw8N4/E0Gc6PZYrO1uHT9nJF/UG8dmALT9qL5f8ybGZ58ZgtPq0kx/e0
/sAHTpsfGs2HR71x45GhJDk/ZlvPfDD/5Pz+eJLje1p/6EWq8dJ0fii3P/tP
ZtfXl5l/ILPt56PZIF227x31/9nWM+7/NHr9LfGz374VvpMvabTzae/vV//7
yjeYnLk+mVX7X7j4f7mj+lr/bLxeFh8bH57kh6dx1XwSbs/xaj0/bNz5Q7Xw
hGFyy3F+vDVe/7SOTyvJ8T2tP/Qi1fV+1XjPtv4Uf2x8+NAwHk+T4fx4+ynU
L4v2l3X+sz9XxVe1WW9XB8uzsdPj69duD0/ai+X/Mmypan1+fnxaSY7vaf2B
D5w2PzSaD49648YjQ0lyfsy2nvlg/sn5/fEkx/e0/tCLVOOl6fyw3L5UXr9/
0J9s+xO6sPF8dP+5C/d6/C6/AjDO+ienHtc/U7K9PQrT+YLDjXY+7f396n9f
+QaTM9cn6v/zr3+qrpfFx8aHJ/nhadzX9c6e49V6fqjq/7OjsHP7rbK17k94
wjBpnf8bX792/skWn1aS43taf+hFquv9qvG+3N7XelX85dfzvY/H02Q4P95+
PlYrg8st5R8ef66Nr2rloFgdMrPtvb9+7fbwpD02/29rV4tnvv7t3cl3mQyp
4sMPYvLje2Z/oNaZ80OL+XDnezceGVaG82O29cxn80/O749nOL5n9ode5Bkv
reeH1e0v7r9daf6BzDaejx7bp0H3bCQub46Ns/7Jqcf1z7TxdbN2amq082nv
71f/+8o3eDh5fXL/57/9OTr+/uf79ev/e1z/VF0vi4+ND0/y/Tnc9fXOnuPV
en7YYnavbLXze7bfKlvr/oQnDJPW+b/l9Wvnn2zx4Qcx+fE9sz/0Is/1fu14
z7b+FH9sfPjQGHw8ninD+XHaWObhlJar+VwVX9tq1/O9v37t9vCkPXwITBl1
b/BlzLevf0u2nq+NDz+CyY/vyf2BKifPD4fPh4e8feORMYWfH7OtZz6bf9J+
fzz8+J7cH7qQZ7y0nh9Wt7+4/3ax+Qcye3s+uhf3G7/X/gnd8t7jB6+fbT1z
8vVX+PE9+fW359vrNoWF7+FLGu182vv71f++8g0eTl6fPNryz1fV4/qn6npZ
fGx8eIYfksD9Xu/sPF6t54e3ZvfKVju/Z/utsrXuT3jCUGqd/29fv3b+yRYf
fgSTH9+T+0MX8lzv1473bOtP8cfGhw+NwcfjycLPj1Nm3op18pSN5Z9nmbwx
/qYd2sIztkVyTqly7BDY8vq3yvNvtvjwg5j8+J7ZH6h15vzQYj7c/96NR8aU
4fyYbT3z2fyT8/vjGY7vmf2hF3nGS+v5YXX7i/tvV5p/ILMt56P7ov7/++db
ANOP0xD+/v3z/XHWPzn1uP6Z8u11m8LCd/IljXY+7f396n9f+QYPzdcz/7VO
+A45fN92t/6pul4WHxsfnuSH5HC/1zt7jlfr+WHj/h+qhScMk1uC8+Ot9frH
/Z+u1j+MIM/1fu14z7b+FG89f6XxeKYM58fl3DL9OG0st9TG3yrb6gT4Ynvv
r1+7PTxpD8//du9xy+s/29Wrk/aLQxwVH34Qkx/fM/sDtc6cH1rMh4e/d+OR
QWQ4P2Zbz3w2/+T8/niG43tmf+hFnvHSen549qtn99+uNP9AZlvOR/ei/n8a
feVIvP88jeT2pP5/hPVPTj2uf+6Lu76z4Gnj4w/hO/mSRjuf9v5+9b+vfIOH
5uuZ4ev/u1v/rB7KZ9fL4mPjw5O8RQ53dL2z53i1nh9q+1/24ajtta11f8IT
hknr/N/y+rXzT7b48IOY/Pie2R96ked6v3a8P/tVL+tV8ddez/c+Hs+U4fy4
zNUpJ8sJZ5moH8RvaavD5MX23l+/dnt40rbL/1ub77+8ff3tBzdnfFq3HMf3
tP7AB06bHzbm/8ev/8EbNx4ZVuv8bzTes8X/yvr98VuO43taf+hFqvHSdH74
4P5bbX+y7U/owm3D+eh+XP3/6uv/yreeqY1P69bh+mfKt0eb/fhdfEbfxSHo
1Gjn097fr/73lW8wabo+8flmd+ufqutl8bHx4Ul+SBpvbOFdXdpzvG4J7sfW
zs+122tb6/6EJwyT1vm/8fVr559s8Wndchzf0/pDL1Jd71eN92zrT/HHxocP
DePxNLcE58cyM2/FsnmWvdNva+NvlS3b9UXr1x/5+uWWIP9nwc/m5/zxCaU6
vif0Bz52wvzQdD78+C0bj4wp1fkx23qmKj7n98dTHd8T+kMvEo6XRvPDx/ff
LjD/QGZbzkfTLcTvZvX/ZXCS9cwH8Qn1uP4pb1lPf57ib8VTbmbnCw402vm0
9/er/33lG8y0u/5aDfD55vmvv3H9U3W9LD42PjzJj03m7q539hyv1vPDxv5X
zc+122tb6/6EJwyT1vlf9fq180+2+IRSHd8T+kMvEl7vbxzv2daf4o+NDx8a
xuNpMpwfZ8k55WG5kL4v6v+3x9+0Q1t40l4s/2fB3z//ksXsD/njE0p1fE/o
D3zshPmh6Xz48Vs2HhlTqvNjtvVMVXzO74+nOr4n9IdeJBwvjeaHj++/XWD+
gcy2nI+mW4jfP2X/S9MQ/j6i/j/DeuaD+IR6XP+Ut6zLmNtP5f/sznb4Tr6k
0c6nvb9f/e8r32Cm0frkVtnC98Phu7S79U/V9bL42PjwJD82mbu73tlzvFrP
Dxt3+1AtPGGY3DKdH2/J7ufUxieU6vie0B96kfB6f+N4z7b+FG89f8nxeIIM
58dZcpb/yXIWWibz2/hbZZv1dmn5prp+/drt4Ul7sfwvg5cJ/Hp9nio+oVTH
94T+wMdOmB+azoefvWXjkWGlOj9mW89Uxef8/niq43tCf+hFwvHSaH7YciFf
3oL7rD8J9yckt+V8NI3c6W75dKfxXtxRn2JqX78MzrOe+SA+oR7XP+WZooyZ
ThOzO9vhO/mSRjuf9v5+9b+vfIOZE66/fL7Zxfqn6npZfGx8eJIfmMw9Xu/s
OV63BPdja+fn2u0vdstqa92f8IRh0jr/q16/dv7JFp9QquN7Qn/oRcLr/Y3j
Pdv6U/yx8eFDw3g8zS3B+XH67TTVlP9J+eHaLJ83xte28hO9+9pXZmbbe3/9
2u3hSXts/t/WrhZDXr88dstDkD8+oVTH94T+wMdOmB+azoefvWXjkWGlOj9m
W89Uxef8/niq43tCf+hFwvHSaH54e/Pt0b5/rvQ/60/C/QnJbTkfTRun0be8
3zgN3u9F/f8g65+celz/lCeLWe5Nf7Z2am2082nv71f/+8o3mGm0Pik3+nyz
i/VP1fWy+Nj48CQ/MJl7vN7Zc7zKIx51TVE7P9duf7tnljuqaX/CE4ZJ6/yv
ev3a+SdbfEKpju8J/aEXCa/3N473bOtP8cfGhw8N4/E0ZYZEnR9XP0e7PVmH
T6+2Pb62Zbu+aP36g1+/3IpP2e4Nvoy5/fWf7f8X6/NU8TnlOb7n9Ac+c878
0G4+3POujUfGlOf8mG09UxWf9vvjeY7vOf2hCwnHS6P5YcvNt0eb/YfXmH8g
s7fno3L8rg7G799vQta+/iwyyXrmg/iculv/lLfKV88d378/9CZ8D1/SaOfT
3t+v/veVbzDTaH1SbvT5Zhfrn7dXyrOFkPjA+PAMPzaTu7ve2Xm8bo3nh7dq
5+fa7Rt3TrmXmvYnPGEotc7/7a9fO/9ki88pz/E9pz90IeH1/sbxnm39Kf7Y
+PChYTye6RZ9frxtKN2///5s/9p47cAWnrEtknP2iVvU69/WPmLuKD6bhMe3
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
/PCaNg88P9nHA6surWnzxvNNPh5weed5nj/08YV8835e/fl5frKPL5Cy/MYb
UtZPnm/y8YDLO8/zPM/zPH+i9/7JN/lfm5//8tuLPM/zfIePH9B9WdP6ya/l
4wP88Jo2Dzw/2ccDqy6tafPG800+HnB553meP/TxhXzzfl79+Xl+so8vkLL8
xhtS1k+eb/LxgMs7z/M8z/M8f6L3/sk3+c8/t7d6ffq6uPuT53meX9rHD+i+
rGn95Nfy8QF+eE2bB56f7OOBVZfWtHnj+SYfD7i88zzPH/r4Qr55P6/+/Dw/
2ccXSFl+4w0p6yfPN/l4wOWd53me53meP9F7/+T7/I79+vNlga3heZ7ny3z8
gO6U8705/eTX8vEBfnhNmween+zjgVWX1rR54/kmHw+4vPM8zx/6+EK+eT+v
/vw8P9nHF0hZfuMNKesnzzf5eMDlned5nud5nj/Re//ku/3nlc+PeJ7n+dV9
/IDu9PO9tfrPm/8n17R54PnJPh5YdWlNmzeeb/LxgMs7z/P8oY8v5Jv38+rP
z/OTfXyBlOU33pCyfvJ8k48HXN55nud5nuf5E733T/4hfnvx/cPzPM93+PgB
3XXne0v0nzf/T65p88Dzk308sOrSmjZvPN/k4wGXd57n+UMfX8g37+fVn5/n
J/v4AinLb7whZf3k+SYfD7i88zzP8zzP8yd67598n39d3360vfJ5N57neX51
Hz+gO+V8b04/+bV8fIAfXtPmgecn+3hg1aU1bd54vsnHAy7vPM/zhz6+kG/e
z6s/P89P9vEFUpbfeEPK+snzTT4ecHnneZ7neZ7nT/TeP/km//8fvX629+R5
nuc7fPyA7sua1k9+LR8f4IfXtHng+ck+Hlh1aU2bN55v8vGAyzvP8/yhjy/k
m/fz6s/P85N9fIGU5TfekLJ+8nyTjwdc3nme53me5/kTvfdPvslvP3pd391t
d4XneZ7v8PEDui9rWj/5tXx8gB9e0+aB5yf7eGDVpTVt3ni+yccDLu88z/OH
Pr6Qb97Pqz8/z0/28QVSlt94Q8r6yfNNPh5weed5nud5nudP9N4/+Sb/D2mF
1m8=
    "], {{0, 180.}, {3072., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{3072., 180.},
  PlotRange->{{0, 3072.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236709633041*^9}},
 CellLabel->
  "Out[480]=",ExpressionUUID->"693f1f67-39cf-4505-984b-84f152b47437"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
vt/pd4TfzoolU6KZEMay6u7T7Ae0kr/+qa1vr5YPv4SAFfdrkF/++gcye/tM
5/2aDGfhZPXG1fa3n2z3s6Pnw09oFfXPQyfu95sutoQf8J1W08vrZTUpPZus
XkxfIz5+1frwEwrMpnb3j5NP8fRnvk1y/D8efcBh/pjDvIRvcCqfR6TqHufh
/c6PW57f13Q4yG9nxbdTopkQhqPfD+gkf/1TW99eLR9+CQEr7tcgv/z1D2T2
9pnO+zUZzsLJ6o2r7W8/2e5nR8+Hn9Aq6p+HTtzv17ufSn9XW1/Lvizxtqwm
pYdT1v360R+/an34CQVmk8+LDcV8G+vc9yNdfR6Owpud1f3OL9ODf3f64w89
NtXnGeFqPv7prz8+fvz5Q78f0MYQ9U+21/Oz5cOvImDF/RokN0T9A5l5vyaD
q9UbV9vffrLdz46eDz+h5dQ/z5y436/2/foN66fipe1/9+H68AO+U/nBXB3S
wuMz+uNf7XqAM5l8Xmwo5ttYJ74f6e3zcGy+33kXbr6pPs8IV3Nb7v8MsMcQ
9U+21/Oz5cOvImDF/RokN0T9A5l5vyaDq9UbV9vffrLdz46eDz+h5dQ/z+j3
27x+qlx6b0/4Ad+p9nhaXi/hJxSYTT4vNhTzbawT34909Xksym92auXr9zMT
Qn7/96+mKuEbDAxnlPon2+v52fLhFxKw4n4NMhul/oHM3j7Teb8mw1k4Wb1x
tf3tJ9v97Oj58BNaSP3zwon7/aaLLeEH/ODztZyvZi/Wj/74tevDTygwm3xe
bCjm2zzH/0z3I119Hoh+Nzsdbnnezopvp0QzIeSn3w/oaqD6J9vr+dny4dcS
sOJ+DdIaqP6BzLxfk8HV6o2r7W8/2e5nR8+Hn9AS6p/XTtzv17ufqnbR3/Xa
huP5cIJ6tn70x69dH35Cgdnk82JDMd+GH//z3Y/09nkghrrfeTsrlkyJZkJI
zvMp0NVA9U+21/Oz5cOvJWDF/RqkNVD9A5l5vyaDq9UbV9vffrLdz46eDz+h
JdQ/r52736/q/QX9XbF6H8/RH/9q1wMbOO9pTT4vNhTzbfjxP9/9SA/z7n/+
v943O61ved7Oim+nRDMhM2c/Lc+nQHOD1j/ZXs/Plg+/rkbkuNGV+zVIZdD6
B5o78pVJ79ccc0IvVW9cbX/7yXY/O3o+/IQ+o/4pp99v8/raJaS/a6Arc8Mh
tbxYwk8oB/s86z+ejFwA2Uw+LzYU822s09yPdPX7nP992j/oZmdxv7P/yL+d
FUumRDMhX9Q/uXk+Bdoat/7J9np+tnz4pTUc9Q+9Te7XII1x6x9oq2398/aZ
zvs1x5zTS9UbV9vffrLdz46eDz+hD6l/qpy432+62PL4CIzz+k/t/s6T1fTz
3PVs/eiPX7s+/IRymGnV3z6NNPAvYvJ5saGYb/Mc/2fL8pYkfIND/DHnH2z5
jLPj4L+dFd9OiWZC1D/5eT4F2hq3/qmtb6+WD7+0BjKpfzjE5H4N0vhjzh+t
/oFWetQ/b5/pvF9zzJm9VL1xtf3tJ9v97Oj58BP60OeWqX+Knbjfr3c/1Yth
8nA5sr9rGvD1n9rjuWxC/ij4LsTRH792ffgJpbfp5yedh89KU9bxfjWTz4sN
xXwbq7DKmp95wzf4eI/n/ANveZb3Ppt3wecZ2Ub9MxDPp0BDQ9c/tfXt1fLh
V1d+k/qHY03u1yCHx3P+IPUP7NS1/nn7TOf9mmNO8aXqjavtbz/Z7mdHz4ef
0Hufm6X+qXHifr/e/VRvR8r9wOnd3zWN/PpP7+M5+uN7v4ylz2vo2TC/G/Xh
W0vt/FC7hO/gyZhvY5V/pOJ2LsI3+HifOx94v9PiKWbyeUY2+f3iLxkCLokE
PJ8CDQ1d/9TWt1fLh19dyX0eKfUPx5rcr0EORZN/1voH9uhd/xQWq5uX8AM4
hKvVG1fb336y3c+Ong8/ofc+Ny688hmq/tHvt3l94WBZjpru29Oz/umt9nha
Xi/hJ5SuPs/x6Z6PTs9IH4WzMNDxv2B/yOduh9/m7H5+mXyekU3qrn9XRTTP
p0Aro9c/tfXt1fLhF1hyn4dJ/cOxJvdrkEDd/J+v/oE9jql/qqrWwiX80A3k
avXG1fa365EsXxLe/2bLh5/QB+c3vOwZrf45cb9f1fV8kmXk67N2X2t/+3j0
x69dH35Cw90f89h841076VNSHj3O7+TzO4N4OK++EL7Bw3k9vr7dYpQf/KuN
gi3zf8pbHvNh34tE/aP+2XOQ253fPfP5t+XhY1p/nfXnqwcGmm+zSVj/1F6f
8r3Hr/pH/bP3ID8/v+d7Pio8Ju7XaGKg+TabhPXPlU9HTuqf/dfnlZ/vMsy3
Vzv+V9vfctnuT6+WD78AVsMkvuDJXf8MfX43eLZfrdbXLt23Z/Drc8PxrPou
xNEfv3Z9+AkNv5BWldKz4qd3vtc+Fg/znOM9ra7nd/L5nUGYbzspHF+341xY
rF7t+G+Z/3ffzvSoJ82HXa4N9Y/6Z8+x7XB+N8/n35Y//fagJcz6S60/TT0w
4nybTcL6p/b6lO80ftU/6p+9x7bg/J7m+aj24LhfY48R59tsEtY/lz0X2ah/
GtY/F3y+y3B+L3v8r7a/5bLdn14tH34BrIaJ+qfteAnf4Cb726+fqnbpvj2H
1D/99D6eoz9+7frwExp1Fd2XqS9K1t755gPkS+2T3W1JOeQT6n1+J5/fGYT5
tofy8XWrRd+WrPMMF75rBxy6vfP/npudksfZ9Kt25sO2F4n6R/2z5yB3Or/b
5vNb09d9P5j1V1t/jnpgoPk2m+T1T+31Kd9j/Kp/1D87D7L708Lj436NWgPN
t9kkr388v2Sg/mlb/1zt+S7bfHvl43+F/S2X7f70avnwC0D903W8hG/w/v3V
79e8/ulnwyG1vFjCT2jIJfS6WF3VP73zjUfHPIQ3P0/92LbLXiFtr5+d/4lt
9fx00s/vZGO+7XFIy8fXXJG+KFmvc/zbzP9H3e+UnxHzYduLRP2j/jns+qlS
O59/fPzR9PVT35f111w/fj0w0HybTf76p3p+k289fnuPr8Dx2Ob6V/+0u35O
8Hy08xC5X6PKQPNtNm3m/571j+eXcOqf5vXPpZ7vEs63lzr+F9zfctnuT6+W
Dx8X6p+u4yV2a9tcIZdaDql/8pyv5UX77GJ+dm2P+Pi168MHYMgl9LZeXZZA
vfONR0fVc9Oz56llh3z0kM/mgPM7+fzOIMy3zVWNr+Wxvf+Aw/3HLsL3rveh
azP/197j1D5O5fOL+bDtRaL+Uf8cdv1UqZ3P546vZevXshPM+kutP0E9MNB8
m03++qf2+pRvPn57j6/A8djs+lf/NLp+TvB8tPMQuV+jykDzbTbN5v9u9Y/n
l3Dqn+b1z6We7xLOt5c6/hfc33LZ7k+vlg8fF+qfruMlfIC32t+pTz/VVLl0
355D6p9+ao/n8qJ9eEmv1o/++LXrwwfg8dfPssh5/dcD8o2HxrbnqV+mB//u
9NPYZ9v10+C/sqmen076+Z1szLdt1Y6vq9Wrrw9dy/m/9+PUPL+YDxteJOof
9c9h10+t2vn81uh13/1l/TXXj14PDDTfZjNE/ZPt9fnR89nGV+B4bHz9T3/8
IXxo51F7fkd/PmpwlNyvUWyg+TabxvN/78fx/BJ0kah/mtc/13m+yznfXuf4
X3N/y2W7P71aPnZQqH96j5fwAb7Tcqd69FNNlUv37Tmk/umn9/Ec/fFr14cP
wOOvn5/qoud/ne7uX3rkGw+Nzc9T78LhJy6JY87vtLueX2bOVM9nY75tq3Z8
Xa1efX3oes3/vR/n3XkxHza8SNQ/6p/Drp9a1a9HfTxo/Zq/As76y60fvB4Y
aL7NZoj6J9vr86Pns42vwPHY8fo/+9TR7/oZ/flo/1Fyv0a5gebbbDrO/70f
5+ynJg/1T4/65zrPdznn2+sc/2vub7ls96dXy8cOCvVP7/ESPsB3Wu6Ufr/8
12ft8bS8XsIH4PHXz7LIefHXt4Em+ZbjYv+TV77xns0x53faXc9PJ/38Tjbm
2+bHs2p8Xa1efXHcOs7/vfV/Pc18+OBIqn/UP52vn9rHr53PV1/1NneCWX/N
9aPXA6PMt9mMUv9ke31+9Hy28RU1Hvte/+edN3pfP6M/HzU4Su7XKDbKfJtN
3/m/t/Oel2zUPz2uz+s83+Wcb69z/K+5v+Wy3Z9eLR84IuLLmAHrn1HOb8vr
5FLL4Ndn7e4ur+fZi/WjP37t+vABePCVs6qLwi3P9a5dO+9TUhLbrp9t53fa
Xc8vM2eq57Mx37aybXzV1qtN5ttsjpj/Q59fzIdtLhL1j/rn2Oun9vzWzufL
r3eDcV+/OmZ+zrnvDQ5deAFTJtvr86Pns40v9c9Zbbt+xn0+2nms/rjC3a9R
QP2z69BFFzaeX5JT//S7Pq/wfLft+jlmvr3C8b/y/pbLdn96tXzUcIgvYMas
f4Y4v80ukv79VLVL9+0Z/PrccDwfXsDP1o/++LXrw4fhYZdN+K1NSW28fVCc
9PkoiSbXT/kxnHx+ZxDm2yY2j6/aerXJfJvNEfN/6POL+XD/FRJe3qh/xnVY
/VM7n4c3mJHKoK9fhczPeXZ//9GLL2DKZHt9fvR85vGl/jmNw+5Pw/e0+eGa
b75+utTdr7Gg/tl59MILG88vmal/ul6fp3++a3L99Nup0x//i+9vuWz3p1fL
Rw2H+AJmzPpniPPb5Aq5TXS9+6lql+7bM/j12ft4jv74+k9ej/e0as/F7fL4
cuST3WWulh7XT9XRm3x+ZxDm2yY2j6/N/X6jn4uA+T/u+cV8uP9qCa9w1D/j
Oqz+0e/HHoO+fnX8/Jxn3zcfsRHrn2yvz4+eTzu+1D9nsvn6GfT5qOHhmu+/
frra3a+xoP7ZcMRGrH88v0RdLeEVzonrn9M/3+2/frru0emP/8X3t1y2+9Or
5Y8cAuqf48dL+ADffLXcJjr9fmNdnxsOqeXFEj4SDx7vmZWfkc/cjzF4/PPR
pa6chtdP1fndWc9PJ/38Tjbm21aHcduY2tzvVzUes4mZ/+OeX8yH+y+Y8PJG
/TOuw+of/X7sMejrVyHzc6ojUHu4Bq1/sr0+P3o+8/hS/5zG5utn0Oejhofr
dvGsL3X3ayyof2oP16D1j+eXqAsmvLw5cf1z+ue7JtdPv3F9+uN/8f0tl+3+
9Gr5w67/gPk/7vklz3gJH+CbL5jlc9CFlsGvz9rdnS/m6ee569n60R+/dn34
SDzmUgm/l3lfDP/y04z0ftfinpJ+/68PO/mHXD+153dnPb/MnKmez8Z8u1mT
8VXyxLosWbeNx2zC5v+g5xfz4caLRP2j/slx/RSe39r5PLzBjFRqr5/TjK+u
820249Y/tden/Ot82vGl/hldk+tnoOejtodueWFP7te4Ezs/q38yutLzyxEX
ifrnkOvzlM93ba+frvPtKY+//d0g2/3p1fKHXf/xtcqBzy95xkv4AK+7SH4s
80TXu5/qxWF8uHTfnsGvz9rjuWxS/Sj4LsTRH792ffio7HedhN/C7CmJ3wyB
0Kek5dg/qx7XT+H5/dKinp9O+vmdbMy327QaX4VV1vzMu208phI8/0c8v5gP
N1wkscVMv+dH9c+g10/J+a2dz8MbzEil9vo50/jqNN9mM3T9U3t9yr/OZx5f
ncbj526rf/pPMk3O6SjPR/2O3u1qeXqpP7/Sxn2G4q0M8/OgV1fw/O/5ZQQZ
xlen8Ziw/jnf812P66ff3p3v+NvfbbLdn14tf8zFH1yiHP78kme8hA/w8ovk
4XNQ736qt0fy/sD23Z7Br8/ex3P0x9d/8nq8Z/Z7DZb2w02Pxn74iR7o+ik8
v19a1PPLzJnq+WzMt9u0Gl/lH6m4nYtt4zGVRPP/Uc8v5sMNF0l4PdPp+THR
9X/eqyiq/qmdz8MbzEil9vo50/jqNN9mk2j+r1d7fcq/zmceX53G4+fOR1/G
6p9Cozwf9Tt6t0vl4aX+Z/drV5Vhflb/ZDfaqckjw/jqNB4TXf/nfX2yx/VT
eH53bu05jr/93Sbb/enV8sdc/PEz/7HPL3nGS/gAL79IHj4H6fcb6/qsPZ6W
10v4wDx+yOf34rx8nrPwp6EDx/spr5+3x23y+Z1BmG/3HLomQ6l8+Vb/bBuP
eeSa/496fjEfbrtUwiuZ5s+Pua7/U19FIfVP7Xwe3mBGKrXXzynHV8PxmE2u
+X/TU0bV9Sn/Oj/E+Gr8/Bh+Dat/ak5lq+t5IJP7Nd7JMz8PdHXlmv89vySW
Z3w1HI+5rv9Tvz7Z7/ppvnenPP72d9uRqaq35dvmjzi/4dP+4c8vecZL+ACv
2rWHTz3XWga/PpdT0PwjxS+aLeXl5eXlc+Z7L9n2V15eXl5eXn5/PrzBjFSy
XZ/y8vLy8vLy8vLy8v3y3n+Uv3J+9Os52/abT859fuXlz5Q3vuTPlJ+Tq396
W7/MLP8qLy8vL58w3/Vzggn3V15eXl5eXn5nPrzBjFSyXZ/y8vLy8vLy8vLy
8v3yvftzsu2vvPwyP/r1nG37zSfnPr/y8mfKG1/yJ8t//OgJXP6jj597BVeP
KS8vLy+fMH//NeP3X06++ftmE+6vvLy8vLy8/M58eIMZqWS7PuXl5eXl5eXl
5eXl++UP6M9Jtb/y8nuuf9vfdnuybX+2vOMjL298ycuX51cr7x9n9Wd5eXl5
+YT5VV/fw36/ksa/OflH/vuSbX/l5eXl5eXld+bDG8xIJdv1KS8vLy8vLy8v
Ly/fL39Mf06e/ZWX33P9237zyZXPr7z8mfLGl/zJ8qvA/b++ehx5eXl5+Zz5
Vv1+q2a/ud8v2/7Ky8vLy8vL78yHN5iRSrbrU15eXl5eXl5eXl6+X/6A/pxU
+ysvv+f6t/3mkyufX3n5M+WNL/kz5b/9Yfq+3NbPf1491LzIy8vLy+fMT52/
3y/b/srLy8vLy8vvz4c3mJFKtutTXl5eXl5eXl5eXr5fvnd/Trb9lZdf5ke/
nrNtv/kk9nhm2355+cx540v+ZPmPR02D9w/y8aN7UF5eXl4+YX7q/P1+2fZX
Xl5eXl5efn8+vMGMVLJdn/Ly8vLy8vLy8vLy/fIH9Oek2l95+WV+9Os52/ab
T859fuXlz5Q3vuTPlL8F5vzyX7l/kDksLy8vL58tP3X+fr9s+ysvLy8vLy+/
Px/eYEYq2a5PeXl5eXl5eXl5efl++d79Odn2V15+z/Vv+9tuT7btz5Z3fOTl
++WNL/kz5afF8iy/XCkvLy8vnzbf9fv9Eu6vvLy8vLy8/M58eIMZqWS7PuXl
5eXl5eXl5eXl++V79+dk2195+T3Xv+03n1z5/MrLnylvfMmfKX//1+VD3f7p
beXqr/Ly8vLyqfJT5+/3y7a/8vLy8vLy8vvz4Q1mpJLt+pSXl5eXl5eXl5eX
75fv3Z+TbX/l5fdc/7bffHLl8ysvf6a88SV/vvwqNn1vDlxm5OXl5eWT56fO
3++XbX/l5eXl5eXl9+fDG8xIJdv1KS8vLy8vLy8vLy/fL39Mf06e/ZWX33P9
2/6225Nt+7PlHR95eeNLXn5b/n7N/T+Sl5eXl8+Wnw75fr88+ysvLy8vLy+/
Px/eYEYq2a5PeXl5eXl5eXl5efl++eP7c8Y6PvLnzo9+PWfbfvPJuc+vvPyZ
8saX/EXyy5XzIi8vLy+fMz8d/v1+Yx0feXl5eXl5+ft8eIMZqWS7PuXl5eXl
5eXl5eXl++UD+3OGOD7y586Pfj1n237zybnPr7z8mfLGl/z58rf1y3+0XHP/
aPLy8vLy2fLTId/vl2d/5eXl5eXl5ffnwxvMSCXb9SkvLy8vLy8vLy8v3y9/
TH9Onv2Vl99z/dv+ttuTbfuz5R0fefl+eeNL/kz51//otiwfU15eXl4+bb73
km1/5eXl5eXl5XfmwxvMSCXb9SkvLy8vLy8vLy8v3y/fuz8n2/7Ky++5/m1/
2+3Jtv3Z8o6PvLzxJS9fkl/+o9v61aOt1sjLy8vL58zPVUfz5fbI2fZXXl5e
Xl5efn8+vMGMVLJdn/Ly8vLy8vLy8vLy/fK9+3Oy7a+8/J7r3/a33Z5s258t
7/jIy/fLG1/yp88v/9Hqr/Ly8vLyOfNffvT7vf5V37c/6bvM3H7J90U9M9Dx
kZeXl5eXl7/PhzeYkUq261NeXl5eXl5eXl5evl8+pD9noOMjf+786Ndztu03
n5z7/MrLnylvfMmfKT8nV//0tn6ZWf5VXl5eXj5b/kujfr9Vy9+06CRMtb/y
8vLy8vLy+/PhDWakku36lJeXl5eXl5eXl5fvl+/dn5Ntf+Xll/nRr+ds228+
Off5lZc/U974kj9Z/uNHT+DyH3383Cu4ekx5eXl5+Wz5uero9P1+2fZXXl5e
Xl5efn8+vMGMVLJdn/Ly8vLy8vLy8vLy/fIH9Oek2l95+T3Xv+1vuz3Ztj9b
3vGRlze+5OXL86uV94+z+rO8vLy8fLb8XHX0+36/VPsrLy8vLy8vvz8f3mBG
KtmuT3l5eXl5eXl5eXn5fvlj+nPy7K+8/J7r3/abT658fuXlz5Q3vuRPll8F
7v/11ePIy8vLyyfMz1VHv+/3S7W/8vLy8vLy8vvz4Q1mpJLt+pSXl5eXl5eX
l5eX75c/oD8n1f7Ky++5/m2/+eTK51de/kx540v+TPlvf5i+L7f1859XDzUv
8vLy8vI583PV0en7/bLtr7y8vLy8vPz+fHiDGalkuz7l5eXl5eXl5eXl5fvl
e/fnZNtfefllfvTrOdv2m09ij2e27ZeXz5w3vuRPlv941DR4/yAfP7oH5eXl
5eUT5r806vd79v1+2fZXXl5eXl5efn8+vMGMVLJdn/Ly8vLy8vLy8vLy/fIH
9Oek2l95+WV+9Os52/abT859fuXlz5Q3vuTPlL8F5vzyX7l/kDksLy8vL58t
/6VRv9+z7/fLtr/y8vLy8vLy+/PhDWakku36lJeXl5eXl5eXl5fvl+/dn5Nt
f+Xl91z/tr/t9mTb/mx5x0devl/e+JI/U35aLM/yy5Xy8vLy8jnzXxr1+z37
fr9s+ysvLy8vLy+/Px/eYEYq2a5PeXl5eXl5eXl5efl++d79Odn2V15+z/Vv
+80nVz6/8vJnyhtf8mfK3/91+VC3f3pbufqrvLy8vHyq/Fx1dPp+v2z7Ky8v
Ly8vL78/H95gRirZrk95eXl5eXl5eXl5+X753v052fZXXn7P9W/7zSdXPr/y
8mfKG1/y58uvYtP35sBlRl5eXl4+ef5Lo36/Z9/vl21/5eXl5eXl5ffnwxvM
SCXb9SkvLy8vLy8vLy8v3y9/TH9Onv2Vl99z/dv+ttuTbfuz5R0feXnjS15+
W/5+zf0/kpeXl5fPlv/SqN/v9ff75dlfeXl5eXl5+f358AYzUsl2fcrLy8vL
y8vLy8vL98sf358z1vGRP3d+9Os52/abT859fuXlz5Q3vuQvkl+unBd5eXl5
+Zz5L436/cq/32+s4yMvLy8vLy9/nw9vMCOVbNenvLy8vLy8vLy8vHy/fGB/
zhDHR/7c+dGv52zbbz459/mVlz9T3viSP1/+tn75j5Zr7h9NXl5eXj5b/kuj
fr/X3++XZ3/l5eXl5eXl9+fDG8xIJdv1KS8vLy8vLy8vLy/fL39Mf06e/ZWX
33P92/6225Nt+7PlHR95+X5540v+TPnX/+i2LB9TXl5eXj5n/kujfr9n3++X
bX/l5eXl5eXl9+fDG8xIJdv1KS8vLy8vLy8vLy/fL9+7Pyfb/srL77n+bX/b
7cm2/dnyjo+8vPElL1+SX/6j2/rVo63WyMvLy8vnzM9VR6fv98u2v/Ly8vLy
8vL78+ENZqSS7fqUl5eXl5eXl5eXl++X792fk21/5eX3XP+2v+32ZNv+bHnH
R16+X974kj9T/v8DufCh1g==
    "], {{0, 180.}, {2556., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2556., 180.},
  PlotRange->{{0, 2556.}, {0, 180.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8672366652129593`*^9, 3.86723667259016*^9}, {
  3.867236704845842*^9, 3.867236709754962*^9}},
 CellLabel->
  "Out[481]=",ExpressionUUID->"b4e1d3da-fd15-408e-9f8b-de83aa9fbbd1"],

Cell[BoxData[""], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.867060186544805*^9, 3.867060198883251*^9}, {
  3.867061581026554*^9, 
  3.867061646010727*^9}},ExpressionUUID->"179f804a-97f0-4351-8a26-\
cc49ddd86b9a"],

Cell["Here I map the types of blocks to a value", "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.866898497335031*^9, 
  3.8668985437598133`*^9}},ExpressionUUID->"b4bf4493-d9ca-4ffb-8826-\
767a27ab4fc9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ground", " ", "=", " ", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"mapl11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"passthrough", " ", "=", " ", 
   RowBox[{"ImageData", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ImagePartition", "[", 
       RowBox[{"map31", ",", "16"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"-", "6"}], "]"}], "]"}], "[", 
     RowBox[{"[", "85", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hard", " ", "=", "  ", 
   RowBox[{"ImageData", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ImagePartition", "[", 
       RowBox[{"map11", ",", "16"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"-", "3"}], "]"}], "]"}], "[", 
     RowBox[{"[", "199", "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lucky", " ", "=", "  ", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "6"}], "]"}], "]"}], "[", 
      RowBox[{"[", "17", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map31", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "6"}], "]"}], "]"}], "[", 
      RowBox[{"[", "17", "]"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"brick", " ", "=", "  ", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "6"}], "]"}], "]"}], "[", 
      RowBox[{"[", "21", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"mapl11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", "6", "]"}], "]"}], "[", 
      RowBox[{"[", "20", "]"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tpipe", " ", "=", "  ", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "6"}], "]"}], "]"}], "[", 
      RowBox[{"[", "47", "]"}], "]"}], "]"}], " ", "|", " ", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "6"}], "]"}], "]"}], "[", 
      RowBox[{"[", "48", "]"}], "]"}], "]"}], " ", "|", " ", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map51", ",", "16"}], "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"-", "5"}], "\[RightDoubleBracket]"}], "[", 
      RowBox[{"[", "46", "]"}], "]"}], "]"}], " ", "|", " ", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map51", ",", "16"}], "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"-", "5"}], "\[RightDoubleBracket]"}], "[", 
      RowBox[{"[", "45", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map31", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "4"}], "]"}], "]"}], "[", 
      RowBox[{"[", "69", "]"}], "]"}], "]"}], " ", "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map31", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "4"}], "]"}], "]"}], "[", 
      RowBox[{"[", "68", "]"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pipe", " ", "=", "  ", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "5"}], "]"}], "]"}], "[", 
      RowBox[{"[", "47", "]"}], "]"}], "]"}], " ", "|", " ", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map11", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "5"}], "]"}], "]"}], "[", 
      RowBox[{"[", "48", "]"}], "]"}], "]"}], " ", "|", " ", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map51", ",", "16"}], "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"-", "4"}], "\[RightDoubleBracket]"}], "[", 
      RowBox[{"[", "46", "]"}], "]"}], "]"}], " ", "|", " ", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map51", ",", "16"}], "]"}], "\[LeftDoubleBracket]", 
       RowBox[{"-", "4"}], "\[RightDoubleBracket]"}], "[", 
      RowBox[{"[", "45", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map31", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "3"}], "]"}], "]"}], "[", 
      RowBox[{"[", "69", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map31", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "3"}], "]"}], "]"}], "[", 
      RowBox[{"[", "68", "]"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bullet", " ", "=", " ", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map71", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "3"}], "]"}], "]"}], "[", 
      RowBox[{"[", "20", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map71", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "3"}], "]"}], "]"}], "[", 
      RowBox[{"[", "29", "]"}], "]"}], "]"}], "|", 
    RowBox[{"ImageData", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ImagePartition", "[", 
        RowBox[{"map71", ",", "16"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "3"}], "]"}], "]"}], "[", 
      RowBox[{"[", "47", "]"}], "]"}], "]"}]}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.866442043895686*^9, 3.866442047115233*^9}, {
   3.866442144518009*^9, 3.8664421479765987`*^9}, {3.866443771881783*^9, 
   3.8664437756969557`*^9}, {3.86644427670303*^9, 3.866444277060445*^9}, 
   3.8664443635802107`*^9, {3.86644492028829*^9, 3.866444965258263*^9}, {
   3.866447160836014*^9, 3.866447206645866*^9}, {3.866454035338621*^9, 
   3.866454067488076*^9}, {3.8664541165416727`*^9, 3.866454183731052*^9}, {
   3.8664542141480207`*^9, 3.866454251460374*^9}, {3.86645458930674*^9, 
   3.866454609380459*^9}, {3.866454978229541*^9, 3.8664549875164347`*^9}, {
   3.8664550513870573`*^9, 3.866455057839446*^9}, {3.866455092933338*^9, 
   3.866455098349461*^9}, 3.866460476047888*^9, {3.8664614805158367`*^9, 
   3.8664615277620296`*^9}, {3.866462189510086*^9, 3.866462195040433*^9}, {
   3.866462364016844*^9, 3.866462397724656*^9}, {3.866462445790228*^9, 
   3.866462461458806*^9}, {3.866462578665102*^9, 3.866462581417774*^9}, {
   3.8664627441766167`*^9, 3.8664627493303337`*^9}, {3.8664635367443733`*^9, 
   3.866463560163537*^9}, {3.866466674259494*^9, 3.866466691026105*^9}, {
   3.866466808613819*^9, 3.866466825857572*^9}, {3.866466900896068*^9, 
   3.866466908699685*^9}, {3.8664669760692873`*^9, 3.866467017112599*^9}, {
   3.867060211234672*^9, 3.867060211715623*^9}, {3.8670616485832853`*^9, 
   3.8670616566082907`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"e6b0581c-1c02-4fcd-9f44-90558531da00"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConvertBlocks", "[", "image_", "]"}], ":=", 
  RowBox[{"Switch", "[", 
   RowBox[{
    RowBox[{"ImageData", "[", "image", "]"}], ",", "ground", ",", "1", ",", 
    "hard", ",", "1", ",", "lucky", ",", "1", ",", "brick", ",", "1", ",", 
    RowBox[{"pipe", "|", "tpipe"}], ",", "1", ",", "bullet", ",", "1", ",", 
    "passthrough", ",", "1", ",", 
    RowBox[{"Except", "[", "\"\<else\>\"", "]"}], ",", "0"}], 
   "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.86644359421413*^9, 3.8664436281666117`*^9}, {
   3.8664437680269938`*^9, 3.866443791678689*^9}, {3.866443882331752*^9, 
   3.8664438963577633`*^9}, {3.866444034586838*^9, 3.866444034945443*^9}, {
   3.866444070542897*^9, 3.866444075610776*^9}, {3.866444180496591*^9, 
   3.866444186137086*^9}, {3.866444285098456*^9, 3.8664442947734747`*^9}, {
   3.8664450044402523`*^9, 3.866445018272843*^9}, {3.866447214734819*^9, 
   3.866447240073374*^9}, {3.866453988971285*^9, 3.8664539959804487`*^9}, {
   3.8664540309429073`*^9, 3.866454032695067*^9}, {3.8664546705528708`*^9, 
   3.866454671661604*^9}, {3.8664549979386997`*^9, 3.866454999377533*^9}, {
   3.866455106068915*^9, 3.8664551066133547`*^9}, {3.866462455262866*^9, 
   3.86646245731481*^9}, {3.8664670279381857`*^9, 3.86646703146237*^9}, {
   3.866537624531891*^9, 3.86653762658774*^9}, {3.866636245412056*^9, 
   3.866636266554006*^9}, {3.8666363715373*^9, 3.866636398328617*^9}, {
   3.866636429037243*^9, 3.8666364297483273`*^9}, {3.866636469118788*^9, 
   3.866636475971346*^9}, {3.8667256913185873`*^9, 3.866725694586091*^9}, {
   3.8667308136980247`*^9, 3.866730813780259*^9}, 3.8668908708399343`*^9, {
   3.866961258361162*^9, 3.866961262287448*^9}, {3.866981109560707*^9, 
   3.8669811121345367`*^9}, {3.866981569947383*^9, 3.866981574955517*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"10828b27-8969-4f58-8817-fb0680278dcb"],

Cell["\<\
I then split the maps into arrays of 16px x 16px since the maps are a grid  \
of 16px x 16px blocks and then associate each block a value.\
\>", "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.866898549087078*^9, 3.866898597075076*^9}, {
  3.866898634239841*^9, 
  3.8668986537160387`*^9}},ExpressionUUID->"0b22f77c-f25d-4236-bf16-\
a3c272165f00"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"array11", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map11", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array21", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map21", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array31", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map31", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array41", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map41", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array51", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map51", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array61", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map61", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array71", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map71", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"array81", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"map81", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arrayl11", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", " ", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"mapl11", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arrayl31", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", " ", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"mapl31", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arrayl41", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", " ", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"mapl41", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arrayl42", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", " ", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"mapl42", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arrayl61", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", " ", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"mapl61", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arrayl71", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"ConvertBlocks", ",", " ", 
     RowBox[{"ImagePartition", "[", 
      RowBox[{"mapl71", ",", "16"}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.866444308032143*^9, 3.866444543319644*^9, {3.866445026298893*^9, 
   3.866445033348374*^9}, 3.86645384143749*^9, {3.866453916020413*^9, 
   3.866453916443377*^9}, {3.866455353310915*^9, 3.866455364846499*^9}, {
   3.866455424042651*^9, 3.8664554274663467`*^9}, 3.866458303739181*^9, {
   3.866461539002289*^9, 3.866461544828541*^9}, {3.866462472958852*^9, 
   3.866462475055472*^9}, {3.8664627517767677`*^9, 3.866462752011709*^9}, {
   3.866462792211843*^9, 3.8664627941730843`*^9}, {3.866466700014205*^9, 
   3.8664667036973886`*^9}, {3.866467226044792*^9, 3.8664672305486937`*^9}, {
   3.866515376585737*^9, 3.866515469428219*^9}, {3.866515517730956*^9, 
   3.866515519400476*^9}, {3.866522564008738*^9, 3.86652258575394*^9}, 
   3.8668908708426123`*^9, {3.8670617231585073`*^9, 3.8670617234703417`*^9}, {
   3.867071636944614*^9, 3.8670716569708977`*^9}, {3.86707170331289*^9, 
   3.867071706535568*^9}, {3.8670724451013813`*^9, 3.867072451930882*^9}, {
   3.867132334025567*^9, 3.867132350745116*^9}},
 NumberMarks->False,
 CellLabel->
  "In[260]:=",ExpressionUUID->"4c9c30e0-c59a-4e6f-8871-663d2df6d813"],

Cell[BoxData[" "], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8664613923073597`*^9, 3.866461406143194*^9}, {
   3.866461618597587*^9, 3.866461792752008*^9}, {3.866461837011785*^9, 
   3.8664619075523577`*^9}, {3.8664622504634037`*^9, 3.866462267996934*^9}, {
   3.866462353878096*^9, 3.866462441152309*^9}, {3.866463473787966*^9, 
   3.866463523700062*^9}, {3.866466720604056*^9, 3.8664667252289553`*^9}, {
   3.866466877373402*^9, 3.866466892135051*^9}, {3.8664669393915577`*^9, 
   3.8664669626835947`*^9}, {3.866522562011146*^9, 3.866522597645767*^9}, 
   3.8668908708433523`*^9, {3.867061725117526*^9, 3.867061726789237*^9}, {
   3.8670716297881308`*^9, 3.867071632145986*^9}, {3.867071663448168*^9, 
   3.867071665155122*^9}, {3.867071810277301*^9, 3.8670718109732723`*^9}, {
   3.86707245497176*^9, 3.867072456655635*^9}, {3.86713235296277*^9, 
   3.8671323593432207`*^9}, 
   3.867143226917281*^9},ExpressionUUID->"490dfe87-d4b0-466a-bcba-\
4de758c8240c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[RasterBox[CompressedData["
1:eJztVAsOgCAIhS7QGbpSR/ACHbYL1dZQEDM/zbnyraYQ8nhiLmZbzQQA8/nu
8BIQlcP31Odsi74kYQTuK81YfHxpJpwGsoSpg73qk2tpJwlJg7WYqSVhSkMe
GeUYIKrEpcFZEGfIkWR/g1tiPeVEOhuFAj0oDordLeUVufySqrvUIT4oSfXt
C8iTVC6f3UV6G0EGYjAoh6t05cDAwD9xAFDZDKo=
     "], {{0, 0}, {211, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztVdsNgDAIpC7gDK7kCC7gtO5j46NCAgWjrTbhkn7AcZQzJQ7TPE4dAPTx
LFAWIYJEajkOysz0GJ+ZCgwogWv4ep3jmuyDyzo+TauvKHf5WducKQOIKWMT
symUqmMK0GdkmieWPFwkSeuQnYWklMGkB3Zcl9WKvYrj5mCvaX8LN5U00rZS
BoeIk34ZrE4p2zaIYQzy1uCmHI4qWAHdgAzc
     "], {{0, 0}, {213, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztk90NgCAMhHsu4Ayu5Ags4LTuozGalN+2kJBg+BIfCMW7o2Vzx+4WIlrv
7yQjAKT9BxLqgiN81ezBzCihIPDJZjZ4SRAqU53V0bsBy8Uk9ahDoS0UbKGg
bUrhN8VQCcXo5hTqtlCwhPJOSZ4i5+xtpN2UBp+8PoTr93ZDNSkPs1rX1Soo
muNitX+ycvy6YgulGtjx6B8qqRg/qVyZyvIfOzWZTPpwAYCSDM0=
     "], {{0, 0}, {213, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGDgB+J3DIQBIyMRipBUk6aeVEshxiOkqWIbMRbjcs2g9i0j
NoBDmAKAYiC68QSswy2NRQLDY4S9MoR9y4g3Gkk0n1xAiW+JNBVhGom+xWkS
NmW4FOK2Er9vSY8cLBZDsjjZRgwlQFlgDTkwsnzLSP98Sz6gQtSMqLgdBaNg
FAwfAAARZg52
     "], {{0, 0}, {238, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGDgB+IrDGQARkYSlGJTTJwBWLXSCgwBPzGSAKCqidOEXRED
bimsOhmQrEVxCZrTSfIHisZB4ydGUqMDt2WU+4mQFBHSMLcwEOsS6gGSUzZC
J1GBNxB+ogLA7+Th6CdiFAxBQHc/UatkwmsFrW0YBaNgFAxDAAA+0w0a
     "], {{0, 0}, {212, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztU4ENgCAM23zAG3zJE3jAO/1KTZQMtsEQI5rQxERqt7UIk1tmNwDAuD8r
yEAkrwcCiou8lGsYxRXnAM4KbbL9VI//CYIqct9jacxYi4JifagP4gmTNc1g
QkhXliAoNifxRLlxa43TRBld4XUMCoqyA8uCyJukTVXrrPFFUvNb9Uduwn4k
uTW9tEGQqoGpXXg9iPVylbdtVfwwvuSlo6OjBTYgFAxq
     "], {{0, 0}, {201, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztkt0NgDAIhA8XcAZXcgQXcEVH0wdtLFA1CFFjL/EnyB1fDd0w9kMDoF2u
CY4i8kyDb9qVgc/wkxT4C+Qn2htTH08D68fuvroggrB5VzyBqjG/j58S88Gv
PpZ06PwKrl44Y8j4KTFb+bPJ+qopdcs03ZFq9/nLk0NCkT8L53MZFZIq0sP4
w8R4DfzGI/vtP2uxwFT9U3VZPqIZDr0Lng==
     "], {{0, 0}, {192, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztlQEOgCAIRaELdIau1BG6QKfo3rWsaYYBWa4cr9wcIh/7m3XD2A8NALTL
mBCU4PL4tyibNKmMbuEcXwnzALehEHZbTntcbSRWqCLJHvWYCVHxZ0xAHlGS
TwzT/TyIJusdFoCYybq4WgM/LpLSHwak/cTn3U2QdMnUkyT+3gQsYYKWp02Q
Cd02gVPgTUDhFcEpRZGSJtARtfwrJuydcN3km0DUzDLhkyj+aeTu3IRbqrWZ
8DZmQrX8zoS8C+eb1HUawzAMw6iTGXfFFbM=
     "], {{0, 0}, {389, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztVMENgDAILC7gDK7kCF3AOd1KP5oWC3JIojG9pH1AueMawpSXOQ8ppXE/
a3KCiIQwCSmFp1kA0fjxRSNkg/qQ8UCcNXFT5gheerYK3SoUWTcnYITAz5dF
3WmlyGCkTANG6hlVFKr55HnL5wlGtDLIyHkFwMWjdYoaeRXIYtFehjTzBEGL
xTiGzbVPPBijxYvAgo6Ojl9hA0nlDCU=
     "], {{0, 0}, {201, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztVdsNgDAIBBdwBldyBBdw/z9NrKZQ0FJ86yXGlJbzjkrbdH3bVQBQjw8g
bAJH8DGPkQlhCsQgnU1XBKoSxjUY897uH91IOCZ1aRxBGkT+Ba6YlSnOlk6L
SzQ/yD8W7xj9W4jmQ/xP0S1us38s9U+ys/zz/pg7Tlkc3jSq1YWHIS7Eujtf
x0rl22P/la9lLzRI8J1Y9/RvY3Wd2M/3n7aPNTvLv3I/8lC4TRfanS9WRZov
+6z9vynYFn3OP8Pv/2oFP67FAMpxDgI=
     "], {{0, 0}, {256, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztlIsNgCAMRIsLOIMrOYILOK37aPwAhYItJRETLiGo4PUeiNOyzssAAOPR
Nqgq46S3Cu6vdj+O7dUFM0lagTJJ2bGw94bQ/MS1DUhMz9WPqp09gOfoJWL4
oIJMqKxVYv1Koeh1KhEBxfVWQaHJjlAHFb8qdyMSPMdElgGvpzQGYaiRZKfc
j+LFsUoyjYQJGJ9XA1DCDeecmQagtCII/g/V1dX1mXZihAzx
     "], {{0, 0}, {213, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztk4ENgCAMBPsu4Ayu5Agu4MAuo1GqxkJDi9GEcIkEQr/tAw7TPE4dEfXb
t5AR4JpAjTTkTC6ikcAVA16AKWij0FqsOO7TV63hCYVB7sTIixIqLuLKwU2f
ups1XRiG76xZ0wlr2WX3x3YIY7fq6EWqMs9NfV4ua1ahUj4lsMtkrO9YfUKj
tRcgS9VG7Wj/+MeN/NxAo9GokxVEgg2G
     "], {{0, 0}, {219, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztVlEKgDAI1S7QGbpSR+gC3f+vCCpx6ZyzwagHIyh9z5fNNS3rvAwAMO4L
EHRgLkDNRUc6y8AEqlwS4qqBptfkduE/VajDyXj5d3Fk/NtKENnCTYvizver
9SbA/5tg/t0scr0OI1b/ZAuyVLPmY6DGQfciky2RyFVl838sQNI4YNe8kvWm
Hhf9vZa0ECtGRJR/y6ArQXf+vbNT5m4y/wRt+Yl8HofUS0dKBF9v+KbrGx/3
3+q350en2AAuVA4y
     "], {{0, 0}, {256, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->{637.1446533203125, Automatic},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}], ",", 
   GraphicsBox[RasterBox[CompressedData["
1:eJztlM0NgCAMhcEFnMFtPDuCC7j/zZ+DgdpXQEQx9EuMQkv7WkOHeZnmzhjT
b89ojYT1uZjJB+crnZdSxvhShby4YsTL1D6GciMph+l0oCbHbpmDZLF70L17
+O2FEUEpbwD7SBUz9nDsLGl8JKSqsIJwJpiqoj6Wj5qL9HvBvT+toZoiKxZG
DO8PFx+SdE2cU/7bDXcZxY1wZzjDPjaM9vEZkvuYdndZN2cjfwxU8jO/UVFJ
8b9H+6goyg9YAbE+Enk=
     "], {{0, 0}, {328, 15}}, {0, 1}],
    Frame->Automatic,
    FrameLabel->{None, None},
    FrameTicks->{{None, None}, {None, None}},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageSize->{819.9007568359374, Automatic},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}]}], "}"}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.866522598472601*^9, 3.866522608591447*^9}, 
   3.8665376317209253`*^9, 3.866637458677353*^9, 3.8666376115130377`*^9, {
   3.866725646710738*^9, 3.8667257003417797`*^9}, 3.866729421991881*^9, 
   3.866890870844104*^9, 3.867071665802586*^9, 3.867071812143393*^9, 
   3.8670724572042007`*^9, 3.867132363564045*^9},
 CellLabel->
  "Out[274]=",ExpressionUUID->"9e5c302d-8efd-4689-a9ee-2c46eef8a940"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImagePartition", "[", 
    RowBox[{"map51", ",", "16"}], "]"}], "\[LeftDoubleBracket]", 
   RowBox[{"-", "5"}], "\[RightDoubleBracket]"}], "[", 
  RowBox[{"[", "46", "]"}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.86706166629976*^9, 3.867061689276164*^9}, {
  3.867061720741785*^9, 3.867061721489134*^9}, {3.8671340008496437`*^9, 
  3.867134003029882*^9}},
 CellLabel->
  "In[275]:=",ExpressionUUID->"1d3cb908-4371-444f-85d7-a84704fda7d2"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAAikHsPSSCP6QAoPoSUgB+9UADkUlizEdWTFD9qPmD0HzagZgpf4AIADbN
+X4=
    "], {{0, 16.}, {16., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{16., 16.},
  PlotRange->{{0, 16.}, {0, 16.}}]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.8671340032945642`*^9},
 CellLabel->
  "Out[275]=",ExpressionUUID->"bd8de73a-bcb9-4829-9ca3-d54029d7b332"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.867061717675067*^9, 
  3.867061717684664*^9}},ExpressionUUID->"5c69446e-04c7-4e97-bc9d-\
ae094326f5ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", 
   RowBox[{"ConvertBlocks", ",", 
    RowBox[{"ImagePartition", "[", 
     RowBox[{
      RowBox[{"ImageRotate", "[", 
       RowBox[{"map11", ",", 
        RowBox[{
         RowBox[{"-", "90"}], "Degree"}]}], "]"}], ",", "16"}], "]"}], ",", 
    RowBox[{"{", "2", "}"}]}], "]"}], " ", 
  RowBox[{"(*", " ", "consider", " ", "*)"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.8664623904951143`*^9, 3.866462391514516*^9}, {
   3.8665226317612333`*^9, 3.866522678754135*^9}, {3.8665227309287367`*^9, 
   3.866522760775755*^9}, {3.866523710425476*^9, 3.866523714375918*^9}, {
   3.86652375353406*^9, 3.866523765122875*^9}, {3.866630498685732*^9, 
   3.866630503679413*^9}, {3.866636155330029*^9, 3.8666363158304157`*^9}, {
   3.866636405742876*^9, 3.866636466380619*^9}, {3.86663652130783*^9, 
   3.866636522816751*^9}, {3.866637233431696*^9, 3.866637236614758*^9}, 
   3.866637269447825*^9, {3.866637413080248*^9, 3.866637452355112*^9}, {
   3.8666375835004187`*^9, 3.8666376510637836`*^9}, {3.866637687243597*^9, 
   3.866637696243861*^9}, {3.8666377488740387`*^9, 3.866637758967497*^9}, {
   3.866637950847665*^9, 3.866637979056466*^9}, {3.8667254182000113`*^9, 
   3.866725439572522*^9}, 
   3.866890870844743*^9},ExpressionUUID->"d1a9d3a4-7425-4e77-9934-\
095ba8d92f38"],

Cell[CellGroupData[{

Cell["Sequence Predict", "Chapter",
 CellChangeTimes->{{3.8668725305862513`*^9, 3.8668725366618223`*^9}, 
   3.8669803044249372`*^9},ExpressionUUID->"0733f795-cd7d-4547-a93c-\
996b96b5d093"],

Cell["\<\
My lazy first attempt for the project was to just try and using sequence \
predict for every row of the level, I was also considering doing it for \
column but decided against it and moved on to doing a GAN.\
\>", "Text",
 CellChangeTimes->{{3.866897330154834*^9, 3.8668973457029533`*^9}, {
  3.866898179913065*^9, 
  3.8668982217872133`*^9}},ExpressionUUID->"f9e17c73-e37e-47e1-a62e-\
049f6fb4d679"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sp1", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp2", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp3", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "3", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp4", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "4", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp5", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "5", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp6", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "6", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp7", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "7", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp8", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "8", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp9", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "9", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp10", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "10", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp11", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "11", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp12", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "12", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp13", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "13", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp14", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "14", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sp15", "=", 
   RowBox[{"SequencePredict", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"array21", "[", 
       RowBox[{"[", "15", "]"}], "]"}], ",", "1"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.866522696913725*^9, 3.8665227071460533`*^9}, {
  3.8666381403833113`*^9, 3.866638229112288*^9}, {3.8666383455287943`*^9, 
  3.866638467454504*^9}, {3.86663877910723*^9, 3.866638826800046*^9}, {
  3.8667259631678534`*^9, 3.8667259665244713`*^9}},
 CellLabel->
  "In[1157]:=",ExpressionUUID->"16441144-4ba6-4e09-9b57-cfe9ae44401a"],

Cell["It found the pattern for the ground which was pretty good.", "Text",
 CellChangeTimes->{
  3.866898226981263*^9, {3.86689825999746*^9, 
   3.866898291200144*^9}},ExpressionUUID->"84fe5298-348d-4509-82c3-\
22bccbe7c4ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"sp1", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp2", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp3", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp4", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp5", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp6", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp7", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp8", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp9", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp10", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp11", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp12", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp13", "[", 
      RowBox[{
       RowBox[{"{", "0", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp14", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}], ",", 
     RowBox[{"sp15", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"\"\<RandomNextElement\>\"", "->", "239"}]}], "]"}]}], "}"}], 
   "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8666381857587357`*^9, 3.8666381859601583`*^9}, {
  3.866638521274323*^9, 3.866638672430231*^9}, {3.866638703559183*^9, 
  3.8666387145032043`*^9}, {3.866639367641917*^9, 3.866639389057807*^9}},
 CellLabel->
  "In[1220]:=",ExpressionUUID->"48b77066-157a-4370-a70d-4d5e702d6cd9"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJztVFsSgjAMTDcH8AxeySNwAY/uFURabB5NqXwozrAzQJM02e0jXKf7bQIR
XebnMT/QYHTQC9oYK1+QyS4WG2PUDJvGn5TapIjrcI9jjN4uZCdYDnnG8mI9
soby4R2EDq0Vg2rQPkXuReQta6sx2uDEolXQr8h5lBw0lmnmokHeN5uEKGzm
PNjtGUtdqDnWCnWhEqgdKse3JdckRm53zK1EKDVSb3xiwV3NSExmcqFIcgqE
uQ7V/huQ50ovL1EmpDIphC+ackpWklYRqXyJqjLIHKHbFx44t33odXR39mjV
f0b3B/EN5mPC/8e2QW5QHVQjQaeR6P5GR9ZMKv1FtfAybNQl8ZZI1qXtxL5V
mc0yjoVDX6YTJ078CE+SWinQ
   "], {{0, 0}, {239, 15}}, {0, 3}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{1454.2186584472656`, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.8666386597611113`*^9, 3.866638681303173*^9}, 
   3.8666387116728573`*^9, 3.8666388518881493`*^9, 3.866639143357772*^9, {
   3.86663939201617*^9, 3.8666394512445107`*^9}, {3.866639709310924*^9, 
   3.866639717943246*^9}},
 CellLabel->
  "Out[1220]=",ExpressionUUID->"54bae1e7-0234-4474-8138-b9090f49df4b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learn Distribution", "Chapter",
 CellChangeTimes->{{3.866980641098597*^9, 
  3.866980645689611*^9}},ExpressionUUID->"53db4947-c6c6-41c3-a06a-\
11f1bec9a0a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ld", " ", "=", " ", 
  RowBox[{"LearnDistribution", "[", "dataset", "]"}]}]], "Input",
 CellChangeTimes->{{3.866982001467561*^9, 3.866982005781434*^9}, {
  3.866984692751808*^9, 3.866984694359185*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"0ed3c8a5-d912-4a59-8011-b277e3dfa040"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LearnedDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {11., {0., 11.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   GrayLevel[0.9], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   GrayLevel[0.78], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   GrayLevel[0.65], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   GrayLevel[0.5], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    GrayLevel[0.3], 
                    Thickness[0.03], 
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    GrayLevel[0.3], 
                    Thickness[0.03], 
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    GrayLevel[0.3], 
                    Thickness[0.03], 
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {
                RGBColor[0, 0, 
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], 
                PointSize[0.08], 
                AbsoluteThickness[1.6], 
                
                PointBox[{{4.905308194867242, 2.630836391598927}, {
                 0.20100883034436162`, 0.02382136569576569}, {
                 1.0719666600928879`, -1.2506326268721977`}, {
                 3.0527398070698992`, 
                 0.3872158300237583}, {-1.8438997564108928`, \
-1.5026726898055591`}, {-2.913246104009823, -1.3391199692975575`}, {
                 0.3149621009629985, 
                 1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                 2.9757868411226935`, 1.1755085189629118`}}]}, {{}, {}}}}, 
             AspectRatio -> 1, Axes -> False, AxesLabel -> {None, None}, 
             AxesOrigin -> {0., 0.}, DisplayFunction -> Identity, Frame -> 
             True, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> None, GridLines -> {None, None},
              GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "DefaultBoundaryStyle" -> Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
             PlotRangeClipping -> True, PlotRangePadding -> {{
                Scaled[0.02], 
                Scaled[0.02]}, {
                Scaled[0.02], 
                Scaled[0.02]}}, Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    TemplateBox[{"\"BooleanTensor\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "15", "15"}, 
                    "RowWithSeparators"], "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Multinormal\"", "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {11., {0., 11.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   GrayLevel[0.9], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   GrayLevel[0.78], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   GrayLevel[0.65], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   GrayLevel[0.5], 
                   EdgeForm[None], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    GrayLevel[0.3], 
                    Thickness[0.03], 
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    GrayLevel[0.3], 
                    Thickness[0.03], 
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    GrayLevel[0.3], 
                    Thickness[0.03], 
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {
                RGBColor[0, 0, 
                 NCache[
                  Rational[2, 3], 0.6666666666666666]], 
                PointSize[0.08], 
                AbsoluteThickness[1.6], 
                
                PointBox[{{4.905308194867242, 2.630836391598927}, {
                 0.20100883034436162`, 0.02382136569576569}, {
                 1.0719666600928879`, -1.2506326268721977`}, {
                 3.0527398070698992`, 
                 0.3872158300237583}, {-1.8438997564108928`, \
-1.5026726898055591`}, {-2.913246104009823, -1.3391199692975575`}, {
                 0.3149621009629985, 
                 1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                 2.9757868411226935`, 1.1755085189629118`}}]}, {{}, {}}}}, 
             AspectRatio -> 1, Axes -> False, AxesLabel -> {None, None}, 
             AxesOrigin -> {0., 0.}, DisplayFunction -> Identity, Frame -> 
             True, FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> None, GridLines -> {None, None},
              GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "DefaultBoundaryStyle" -> Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
             PlotRangeClipping -> True, PlotRangePadding -> {{
                Scaled[0.02], 
                Scaled[0.02]}, {
                Scaled[0.02], 
                Scaled[0.02]}}, Ticks -> {Automatic, Automatic}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    TemplateBox[{"\"BooleanTensor\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "15", "15"}, 
                    "RowWithSeparators"], "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Multinormal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1956", "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LearnedDistribution[<|
   "ExampleNumber" -> 1956, "Preprocessor" -> 
    MachineLearning`MLProcessor[
     "ToMLDataset", <|
      "Input" -> <|
        "f1" -> <|"Type" -> "BooleanTensor", "Dimensions" -> {15, 15}|>|>, 
       "Output" -> <|"f1" -> <|"Type" -> "BooleanTensor", "Weight" -> 1|>|>, 
       "Preprocessor" -> 
       MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
            MachineLearning`MLProcessor[
            "Transpose", <|"FeatureNumber" -> 1|>], 
            MachineLearning`MLProcessor[
            "WrapMLDataset", <|
             "FeatureTypes" -> {"BooleanTensor"}, "FeatureKeys" -> {"f1"}, 
              "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
              "RawExample" -> Missing["KeyAbsent", "RawExample"], 
              "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> False,
        "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
       "Missing" -> "Allowed"|>], "Processor" -> 
    MachineLearning`MLProcessor[
     "Sequence", <|
      "Input" -> <|"f1" -> <|"Type" -> "BooleanTensor", "Weight" -> 1|>|>, 
       "Output" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
        "Processors" -> {
         MachineLearning`MLProcessor[
         "TensorToVector", <|
          "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "f1" -> <|"Type" -> "BooleanTensor", "Weight" -> 1|>|>, 
           "Dimensions" -> {15, 15}, 
           "Output" -> <|
            "f1" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
           "Version" -> {13.1, 0}, "ID" -> 4633928599258831813|>], 
         MachineLearning`MLProcessor[
         "ConformBooleanVector", <|
          "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "f1" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
           "Version" -> {13.1, 0}, "ID" -> 5260773886373475006, 
           "Output" -> <|
            "f1" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
         MachineLearning`MLProcessor[
         "BooleanVectorToNominalVector", <|
          "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "f1" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
           "Version" -> {13.1, 0}, "ID" -> 2460801533096886547, 
           "Output" -> <|
            "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
         MachineLearning`MLProcessor[
         "IntegerEncodeNominalVector", <|
          "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
           "Index" -> {<|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|
             0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|
             0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|
             0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|
             0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|
             0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|0 -> 1|>, <|
             0 -> 1|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>}, "MissingCode" -> Indeterminate, 
           "Version" -> {13.1, 0}, "ID" -> 5505695324917518029, 
           "Output" -> <|
            "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
         MachineLearning`MLProcessor[
         "NumericalizeNominalVector", <|
          "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "f1" -> <|
              "Type" -> "NominalVector", "Weight" -> 1, 
               "SetSize" -> {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2}|>|>, 
           "Boundaries" -> {{-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 
             0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 
             0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 
             0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 
             0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 
             0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 0.5}, {-0.5, 
             0.5}, {-0.5, 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 
             0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
             0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 0.5}}, 
           "Version" -> {13.1, 0}, "ID" -> 2154049471634528787, 
           "Output" -> <|
            "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
       "Invertibility" -> "Approximate", "StructurePreserving" -> True, 
       "Missing" -> "Allowed"|>], "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, 
    "Model" -> <|"RotationMatrix" -> CompressedData["
1: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
ReGTOKHOI+lE1Gs8HPbpPREN+SS0neMtIEXhDm/kj1jYTy71pmEiAvS+/6Go
s3cEf960S5KcURC+7HTk3CtfMLOt26opKYKdZ6N0uQpFyB3KVvvV2AOC7sy4
ZstWYNnTl+WG0ckgR85e/nWvPxj/i/mjR58MkglihUsN+Sh+zTzsekAxSLxf
PJXuWgb73tvGXVStx4NqpsHMGnnw5XN69tMQEhw2GRaeOELAY21/ajQEQtHD
/XiCPHsabjuZUxg9TkMZB04xtu1s7DSSIS6PpqJiYUJJ2qYXDmn/IfvumAUB
N4Q/rWQlwca5F6WHkzOQGMfwAw0S4Uh8eEoWTx4OqxEUI82qwLcq+MeWZgAS
DasmtdcJsKbeP1HYJIMCTxVtf/LFozr7iPv2ZgDKUk8V06Snw6jp0pj2lifW
5rdKipzb7bd1ycMfYggQt07/xjqoDmkdJxkFY6uAo9b4urN4MdhEukrORIfA
lKWJLxV9ODoNsAqqPg/Ex1dLiMLTRPS5FOQw63cZMj/JHU1eTYCIrYz423cS
MOLM8moz+W43c3dKKwW7YJ8tjyroZoJUpuJ//SlJsJ3Opn3lfiaGr79u9sp0
gQ/kk6M+bIHA0j+aIDzgCCQXsUHOHnXMMXn46GSABbRuTuT3XgrA5nCy4TXL
FDh+RqrcozkRFpaonzXRZaP2i9qMu2LZIOJCfvWiZCMWyC/U7RQ0wBHCC81u
hVy4NnKzdt49CQIf8es7Oyri4OgEtVx4LozXnhH/cMEK365dv2pyOB9omQK/
zsuToHHzwLnTH6PhhdT6xf/u+yNFKM25ercqTKEJYq5bSYSfAhsyG9KpaN0w
pSvHZ4+/cwtobSej0K31hNbwzxTM0S2oXcsqxtvuUZIXskPAlJ26iCLEEb9l
igsudqYgf9LIhtcDCzifOcXwMSkWOsuNCbwG+ZA2GTVUzO8Edse6KK7cbAIN
9R/PakjtQKmuEdw+sLvvpbJvOzr3IrOWu8vTu3dQSkpAxbyhDlJLH788r9IA
dZRicnHlBNwrZap9c2MAf1U+tlgUH0AundbLCzupcOOZDpmLShkIchJkXssY
IVmjne/lXc/WniS6vuKPh6jZ8QvfbyfCl3Nfg0QzC2Hn7F+923bROBNXziJy
LB8vWucn9vEEw0t5oSJdcxd4xe2uy5dUD8JBAZ8yzhbh7FvmB3rCRfiiUnD/
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
OTwyg0cnBEwNZYt/uqTh/wDpPlmt
       "], 
      "Precisions" -> {3.470631323720704, 3.9054883060264656`, 
       5.210158742052495, 6.19183602807477, 6.663106488568588, 
       7.105444269656922, 7.416305353954914, 7.915013507089593, 
       8.348313386363445, 8.697808293869153, 8.984851157721591, 
       9.2678909738956, 9.667794614180252, 9.799534672470001, 
       9.805148189562273, 9.92243035418222, 10.171813649294966`, 
       10.320456725723671`, 10.428297655612347`, 10.54375412914484, 
       10.640417241990937`, 10.69618103779704, 10.942331446147307`, 
       11.143308509544488`, 11.183977791796314`}, "NoisePrecision" -> 
      31.840680864546457`, "Processor" -> 
      MachineLearning`MLProcessor[
       "Center", <|
        "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
         "StructurePreserving" -> True, 
         "Input" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Mean" -> CompressedData["
1:eJwNkXs4V/kaxV0qpJpIj5NLooboMEhu5XxrGqfixCCNpvq5RST8cGIUybjn
2kWkaGhSOMrlhHFbIXvbm9/eO5pmphRJKqTE4TCp+f3x/vE+z1rrXc/n1fUJ
dfWTlZGReS6dOv992j+/ScA5v8YrSf1v/1GY6dZIT+5GbVxUydB3nrClJQuy
pZGIjoicfGGYRFZlFJpEhOuRvkbTgwO5gWCzNi8+vykCw2VLA/+4ICYb6PMO
uJdFGmYdm+I+i4hdZrbwauOPsHXwWK2bkU3kh53f7dBLI5zBbI9f+zlYRJ+J
ynWJI4PBO+vKFU6RfXn69v2lbmRhRjnbMkNMjDJtEwzLXcjp3xwUbhmfImP3
VdNnaiPhrv/wpWNZHF6YPdB5rXaSDGqVbpy9egzHMy7S1z1jsaHu9qW3XQnE
126F2cxPXuTKsQdBP9eEYezu09qBDh7p5c63K0/zaLTS0d6yWMBtzmdNiLMA
RQ9JgdFOATrVkokODx4/uNd9H2MlYGHVo/AKgYf8B6Xq8WQene8NE7WneEyp
5f8ZuZcH4+1SnrpGQGfJtsfPVgpQH9a2tmzioZm6IvbqLh7uhY1GAToC+r5b
75ArzalPtVCfNxOwcs+F4iQ5AWKXuoWPf/C4eu/X2M8fePy9P+hAoPSu+RMT
X3UvASPeNn9WR/NoKpPUzE7yEKtNTwc945FZoK+yVkaAQcPOgDQrHnV7Vu9W
lJf2L4pM0GznsaCmLvrFVIBtxWHnyhAeJS2K+ZVOPL697nB3JcXhgHPiw5gM
Hl52OjbvL/FI0G1ZYhDDY/1FwwpTaQ/xY5exIZ4HueFfFyorYHnVnfJyJwHE
2HtAa7kAhwcr8qZ2C4jK0VFK0eSx5TAx8g/m8ckpOuBUF4tj5qRLp57FDZGz
e/I8i5BN6/X0V3XDrsVFcUcDC48kZzvPMRYx71t/yTjeDfe9PrM9nSxEAUet
E6V7VF3A/s67LPIjamKqQ7oxEf5q62utboRGOzZPSP32y4do8TsWt6KzV1y4
2A3ZGJF5kxaPJ8+Sfa4scPhywY6yPsRDpD+uuehXDsvs/uPuqcAjZ6xgIPQO
h86aqMH+Ph635jM63LfzUB+qz6mVchw+sHLIYkDKc83LgAumPAr3N39V9JhD
1NPu5dpePJqLUp6YF/KoLSuLcJXqHZnW4KYZDl6P2mqOJXPoMrOzbjvFIbBz
XGXuDQcbBRvVViUOfhtubaNecyjL6lul+YjDoWAx+WqUg4+JZYu7BwdTyym3
Iy4cHF/FdqQ4cmh1lVjIMxxG/dXXXhU4LP6X23jgNanPtyw5p41DdSJbEK0m
gcn0xt/5NAmeBVgrp72WoP7Esv3rtkjQtV8jy6dYAqeWr4343B40ti7VKg2T
YM0Gj73hmySYKJ8v1vLswT/vN4uq7SWInai3ej7cg2xDo4GwMxIYXJ47PD3T
g+NzZ6zFX0jAT+kU0/ckmDXQ8KxMoCD3jbniT6tpXKwYy6WDKVQ3j+ytWUXD
6frHUe9vaXwQolN+mO/Eg1GzEXMlCiO9b+RDL1CIvHY+zKqBhrh/pVL8NhrN
3+wK2l5JIS7aVD5EnUb+5apg9SkKO411I+y9aSzMi8boTxQUGhK1AwoY9Poy
Ox65sjALEp2IH2eQ36SbMt3LYHGctUlTB4OHWWuPhs8wqGn74Nt4hsW1+Yuq
m5cyUKk/cvPNVgYGbLG28SIWvQ4ixcQSBkWKp586uTE4sqeo790NBuFFI4l+
TiyenuHU9JIZyE7QckeP00g7N56ob0JjXVClflQZjUXnTUwO/a0L9bYx8Z5h
NPh/x6v815/GqbPe+5yNurC94jkHVRpfC74O43k0Jv1X1+VodkFDsD/Z2kYj
/WUZdTOZRtiDs60RUi6v/JRDzX+kED94UlgjzbGV034e3knB8M78stPtFO6k
Rl+vpim03bQ70XeUwm8yxepPezpx3+WjjriBgvIdyL4+SyFCaSZ07iCFwV0q
JccVKSyprAjzL6DQ7OqYWWlBYVvlJ837pRTMD5c6JUr/J0+fTP9US0G1ypYZ
bKJg5+d2m4tnyZbYKjlbX5akT4+H57WwxCYVRVFaLOHGdCas7Fmy2LHEPC6X
JQlVu5xfbGTJnHJg1v80WLJsNGRz1xfdZL2F85XJPpYk1Y5qVQawJEU0vN5D
qtfdJKsRvIIlhVM1R5ceYIneOvkRGUOW7OktKr28nyVhzb9LIk+wZHXmpOX/
1Vniu6Pdo/ARS85dXT56O50lhsoTwa6tDJGhDe9++Zkh2XtvHtgUyRLPrEV8
tjFLJJe4h6450tz+PGPHIYYsSagaqRtmiNYVUxuvZd1kq7j9bUOVtFfe7oPf
lzPkL4X61uw=
          "], 
         "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Version" -> {13.1, 0}, "ID" -> 7279484160255041391|>], 
      "PostProcessor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, "Key" -> 
         "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Method" -> "Multinormal", 
      "Options" -> <|
       "CovarianceType" -> <|"Value" -> "Full", "Options" -> <||>|>, 
        "IntrinsicDimension" -> <|"Value" -> 25, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> LearnDistribution, 
      "EMIterations" -> 1, "ProcessorEntropyShift" -> 135.16370020918984`, 
      "PreprocessingTime" -> 10.211931`7.460652865196094, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.35638921089839004`, 0.009956077727960212], "EvaluationTime" -> 
         0.0003784249428298048, "SamplingTime" -> 0.000445, "TestSize" -> 200,
          "ModelMemory" -> 58664, "ModelUtility" -> -3.583828169268179, 
         "TrainingSize" -> 1565, "TrainingTime" -> 1.2589254117941673`, 
         "TrainingMemory" -> 14319920, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.35638921089839004`, 0.009956077727960212]}, 
         "Configuration" -> {
          "Multinormal", "CovarianceType" -> "Full", "IntrinsicDimension" -> 
           25}, "FinalTrainingSize" -> 1956|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "EvaluationTime", "SamplingTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "Configuration", "FinalTrainingSize"}, {TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "KernelDensityEstimation", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Gaussian"|>, 
             Method -> <|"Value" -> "Fixed"|>, 
             "NeighborsNumber" -> <|"Value" -> Automatic|>, 
             "KernelSize" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6879719866966281, 0.0036103283974777663`], 
              "EvaluationTime" -> 0.00007937149747528342, "SamplingTime" -> 
              0.000219, "TestSize" -> 1946, "ModelMemory" -> 36392, 
              "ModelUtility" -> -6.886961310734101, "TrainingSize" -> 10, 
              "TrainingTime" -> 7.943282347242816, "TrainingMemory" -> 
              23352984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6879719866966281, 0.0025528876921668896`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.621454504322349, 0.01086138869934708], 
              "EvaluationTime" -> 0.00046529321795359135`, "SamplingTime" -> 
              0.000236, "TestSize" -> 500, "ModelMemory" -> 125624, 
              "ModelUtility" -> -6.236299398488767, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
              673824, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.621454504322349, 0.007680161602411255]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5934646315181015, 0.008847540188185158], 
              "EvaluationTime" -> 0.0005050000975957216, "SamplingTime" -> 
              0.00027, "TestSize" -> 700, "ModelMemory" -> 557624, 
              "ModelUtility" -> -5.952423338549877, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              8723024, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5934646315181015, 0.0062561556638862275`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5688357607809462, 0.009242680422883271], 
              "EvaluationTime" -> 0.004324671915780889, "SamplingTime" -> 
              0.000313, "TestSize" -> 300, "ModelMemory" -> 2834624, 
              "ModelUtility" -> -5.963938703907614, "TrainingSize" -> 1565, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
              150111664, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5688357607809462, 0.009242680422883271]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.004324671915780889, "MeanCrossEntropy" -> 
             Around[0.5688357607809462, 0.009242680422883271], "ModelMemory" -> 
             2834624, "TrainingMemory" -> 150111664, "TrainingTime" -> 
             15.829241234164595`|>, "Index" -> 1|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 225|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[21325.966519481037`, 186.45376613919038`], 
              "EvaluationTime" -> 0.000028616836184193066`, "SamplingTime" -> 
              0.000234, "TestSize" -> 1946, "ModelMemory" -> 26792, 
              "ModelUtility" -> -213632.57274672235`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              4930752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[21325.966519481037`, 131.84272241479218`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[13261.863648043389`, 232.7297336643831], 
              "EvaluationTime" -> 0.00002331990207316919, "SamplingTime" -> 
              0.000467, "TestSize" -> 500, "ModelMemory" -> 116328, 
              "ModelUtility" -> -133084.09597804735`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              733688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[13261.863648043389`, 164.5647728578244]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5688675931203506`, 0.03481314697168147], 
              "EvaluationTime" -> 0.00005416378805583008, "SamplingTime" -> 
              0.000415, "TestSize" -> 500, "ModelMemory" -> 416568, 
              "ModelUtility" -> -15.758367441223417`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              7330088, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5688675931203506`, 0.024616612298119886`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00005416378805583008, "MeanCrossEntropy" -> 
             Around[1.5688675931203506`, 0.03481314697168147], "ModelMemory" -> 
             416568, "TrainingMemory" -> 7330088, "TrainingTime" -> 
             5.809977434882509|>, "Index" -> 2|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 1|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5267780494038262, 0.006116768688484788], 
              "EvaluationTime" -> 9.301950669091007*^-6, "SamplingTime" -> 
              0.000232, "TestSize" -> 1946, "ModelMemory" -> 11496, 
              "ModelUtility" -> -5.280031863042699, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              193760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5267780494038262, 0.004325208618577138]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4223867714911981, 0.01241001336725337], 
              "EvaluationTime" -> 0.00003622808041499218, "SamplingTime" -> 
              0.000241, "TestSize" -> 400, "ModelMemory" -> 11496, 
              "ModelUtility" -> -4.248705609200083, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              647456, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4223867714911981, 0.008775204606600558]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4024897434568993, 0.012868580786105135`], 
              "EvaluationTime" -> 0.00003849856854043689, "SamplingTime" -> 
              0.000312, "TestSize" -> 300, "ModelMemory" -> 11496, 
              "ModelUtility" -> -4.050652536965288, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              7328744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4024897434568993, 0.009099460738101852]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4075901276945888, 0.01025177375660146], 
              "EvaluationTime" -> 0.000026614713730876277`, "SamplingTime" -> 
              0.000364, "TestSize" -> 391, "ModelMemory" -> 11496, 
              "ModelUtility" -> -4.09642280539932, "TrainingSize" -> 1565, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
              14308680, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4075901276945888, 0.007249098742483179]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000026614713730876277`, "MeanCrossEntropy" -> 
             Around[0.4075901276945888, 0.01025177375660146], "ModelMemory" -> 
             11496, "TrainingMemory" -> 14308680, "TrainingTime" -> 
             3.390645422724593|>, "Index" -> 3|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 80|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[13198.353196293014`, 256.29816230036374`], 
              "EvaluationTime" -> 0.00006905512389083907, "SamplingTime" -> 
              0.000561, "TestSize" -> 400, "ModelMemory" -> 116328, 
              "ModelUtility" -> -132496.12831795527`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              733736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[13198.353196293014`, 181.23016856823753`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.49970108793154955`, 0.012224930355916588`], 
              "EvaluationTime" -> 0.0001401620253949687, "SamplingTime" -> 
              0.000515, "TestSize" -> 500, "ModelMemory" -> 154256, 
              "ModelUtility" -> -5.021495604966212, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              3010952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.49970108793154955`, 0.008644331154201892]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0001401620253949687, "MeanCrossEntropy" -> 
             Around[0.49970108793154955`, 0.012224930355916588`], 
             "ModelMemory" -> 154256, "TrainingMemory" -> 3010952, 
             "TrainingTime" -> 5.680207324029587|>, "Index" -> 4|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 3|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6883107263295922, 0.00890216079736124], 
              "EvaluationTime" -> 0.00001556682534252178, "SamplingTime" -> 
              0.000217, "TestSize" -> 1946, "ModelMemory" -> 15208, 
              "ModelUtility" -> -6.9009298399166585`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
              195928, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6883107263295922, 0.0062947782670271756`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.433432479987188, 0.013384213360525327`], 
              "EvaluationTime" -> 0.00017543536598078934`, "SamplingTime" -> 
              0.00038, "TestSize" -> 300, "ModelMemory" -> 15208, 
              "ModelUtility" -> -4.361111804487487, "TrainingSize" -> 60, 
              "TrainingTime" -> 1., "TrainingMemory" -> 645936, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.433432479987188, 0.009464068028075048]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3929516528577383, 0.015209084456055557`], 
              "EvaluationTime" -> 0.000016270938633815226`, "SamplingTime" -> 
              0.000363, "TestSize" -> 200, "ModelMemory" -> 15208, 
              "ModelUtility" -> -3.959953099219623, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              2826784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3929516528577383, 0.010754446754515798`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38734339051069966`, 0.010464097895469624`], 
              "EvaluationTime" -> 0.00002253574373239229, "SamplingTime" -> 
              0.000409, "TestSize" -> 200, "ModelMemory" -> 15208, 
              "ModelUtility" -> -3.8943805548928694`, "TrainingSize" -> 1565, 
              "TrainingTime" -> 1., "TrainingMemory" -> 14320200, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38734339051069966`, 0.010464097895469624`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00002253574373239229, "MeanCrossEntropy" -> 
             Around[0.38734339051069966`, 0.010464097895469624`], 
             "ModelMemory" -> 15208, "TrainingMemory" -> 14320200, 
             "TrainingTime" -> 1.5660680216078924`|>, "Index" -> 5|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 9|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[21325.966519481037`, 186.45376613919038`], 
              "EvaluationTime" -> 0.000017761932969542068`, "SamplingTime" -> 
              0.000239, "TestSize" -> 1946, "ModelMemory" -> 26792, 
              "ModelUtility" -> -213632.5727467165, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              227728, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[21325.966519481037`, 131.84272241479218`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000017761932969542068`, "MeanCrossEntropy" -> 
             Around[21325.966519481037`, 186.45376613919038`], "ModelMemory" -> 
             26792, "TrainingMemory" -> 227728, "TrainingTime" -> 
             12.972483002512774`|>, "Index" -> 6|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 25|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7569600893723945, 0.025737830761357734`], 
              "EvaluationTime" -> 0.00005416039369004541, "SamplingTime" -> 
              0.000422, "TestSize" -> 300, "ModelMemory" -> 58664, 
              "ModelUtility" -> -7.621100112810469, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              673008, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7569600893723945, 0.018199394664387775`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3978340001603394, 0.011074707654931858`], 
              "EvaluationTime" -> 0.000038761273900519436`, "SamplingTime" -> 
              0.000469, "TestSize" -> 400, "ModelMemory" -> 58664, 
              "ModelUtility" -> -4.000513006077947, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              2992944, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3978340001603394, 0.007831000882460883]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35638921089839004`, 0.009956077727960212], 
              "EvaluationTime" -> 0.0003784249428298048, "SamplingTime" -> 
              0.000445, "TestSize" -> 200, "ModelMemory" -> 58664, 
              "ModelUtility" -> -3.583828169268179, "TrainingSize" -> 1565, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              14319920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35638921089839004`, 0.009956077727960212]}|>, <|
             "MeanCrossEntropy" -> 
              Around[21315.145027246555`, 245.54882651938036`], 
              "EvaluationTime" -> 0.00009043623672451302, "SamplingTime" -> 
              0.00032, "TestSize" -> 1100, "ModelMemory" -> 26792, 
              "ModelUtility" -> -213642.54794528577`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1., "TrainingMemory" -> 212472, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[21315.145027246555`, 173.629240344253]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00009043623672451302, "MeanCrossEntropy" -> 
             Around[21315.145027246555`, 245.54882651938036`], "ModelMemory" -> 
             26792, "TrainingMemory" -> 212472, "TrainingTime" -> 
             20.061187233627273`|>, "Index" -> 7|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["KernelDensityEstimation", "Multinormal"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "EvaluationTime", "SamplingTime", "TestSize",
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory"}, {TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 7], <||>], "MaxTrainingSize" -> 1956, 
      "PreprocessorEvaluationTime" -> 0.0000190625, "PreprocessorMemory" -> 
      139440, "BaselineLogProbability" -> 0.21606870324768043`, 
      "VariableBudget" -> True, 
      "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.867020893867982`16.339951507772213*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 3.9742127931442974`, 
          "ElapsedTimes" -> 17.994880000000002`, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 6.623687988573833, 
          "ElapsedTimes" -> 8.296042, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 300, "TimeBudgets" -> 11.03947998095638, 
          "ElapsedTimes" -> 10.525761, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 1565, "TimeBudgets" -> 18.399133301593942`, 
          "ElapsedTimes" -> 16.780203, "ExperimentCounts" -> 4|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "NaiveImputer" -> 
    MachineLearning`MLProcessor[
     "ImputeMissing", <|
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
       "StructurePreserving" -> True, 
       "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
       "Mean" -> CompressedData["
1:eJwNkns4V/kWxomKlC70OLn0GypFD4OMW5lvjXoSg8Ewmsq1XHJncIhkXCtJ
JCXMUKNwlMtJcntD9rY3v713NM7UkDLILV1Ik6mc3x/rj/U871rrfT7r1fQO
dTomLSUl9VxS93y/17g+kQzNiMarqQMvv04859xIv7FGXGJM6fAPHviGFn+S
LotGVGT0m790UklHZpF+ZIQWGW40ODSUFwA2a8fSnO2RGC9fEfA4N4xsonNs
cD+LNL63bUpcdCcW584LL7b9DDMbt/WameeJ1IjDqz1apwm39X3PsfYLMI89
FZPnmEgmgq3qK5afIK752vsGypzJ3/MK500yw8jqcxbJOhWOJOF/Nstv6p0g
Lx+sOztfFw1P7UejtuWJmDR8KBpXjiOD6mXb3hceh1/mRfqaRwK21t+69LIr
mRy0VDSc/9WTZB9/GHi9NhyTdwbrhjp4nKlwuFV1kkejqUjjq6UCbnHeG0Ic
BCx3ExfoWglQrxHPdLjxiHGp/zHeVMCiUn9EpcBj2Vv5muk0Hg9e66RozPKY
U778T7QdD9bLsSJjg4CO0l1Pnq4RoDSiYWbSxEOUoZhQuJ+HS1Gjrr9IQO8P
m2zyJHvuZhirLBgKWH0gtyR1iYAIx/pPHx/zuHL/94TFtzx0BwIPBkjuGv2p
76PiKWDUy/yfmlgeKBfXvn/DI1R5bi7wKY+sAu21G6UEbG6w8j9tyqPuwHpr
ORkBouLoZLV2HovKKu73DASYVx5xqArhUdwid7nKnofjNZs7aygOng4pj+Iz
eXhaisxfX+KRqtmybGs8j40XdSoNJD7CnzhODfM8vv7Ntz5UWoBi9e2KCnsB
RM9rSH2VAOuHivmz1gIis0Xy6Wo8zI4QXd9gyV37WP8TXSyCjEiX6C6L6+4O
LmkLLMK2b9LSVuqGRYuj3J4GFq6pDpYeUyxOvG69lxnUDWc77/c9nSyO+PuZ
pUj6mHp/1847LC5H1sbXhHRjOuLFznH1boTH2jbPSOatVg3TYa9Y3Iw9r5h7
sRtS8e5GTeo8Bp6meV/9xEH3kyVldpjHYe1pNdnfOay2/I+Lx3IeOVMFQ6G3
OTyojXk20MejciGzw2U3jw3Dd7PrJBxHD64ZNh7i0bRh1D/XgEepa/OXxU84
xAx2r9LwlOSmOP1PoyIeteXlkU4SvS3TGtw0L+HZ31Z7PI0DY2hp1naCg2/n
9NoPExxMlpuva5Xn4Lf55i5qnMPNrD4ltX4Oh4LDyJeTkjl9kxYXNw4GJrPO
Rx052L5I6Ei35dDqJDaWYThM+qpsLBQ4rPzWeTrgFw6uPuVp2W0calLYglhl
MYzmtv3BnxZjyN9M4fS4GPeiVrp+8ZUYna6qWd4lYnzX8o0un9eD5tYV6mXh
YqhudrOL2C7GbMVCibpHD6weNLvX7BMjfuau6fORHlzQ0R0KPyXGlisfjszN
9yDowymzsNViPJwVldD3xZjfqupRlUxBeq+R3K/raeRUTuXRwRRuN4/Z1SrR
sLv2cdLrOxqzQmz6vxc6wU0ajhnJUxjtnZAJzaXw0y854aYNNMIG1sgn7aLR
vHd/4O4qCkmxBjIhKjTyrlQHq8xS2KunGbnPi8bHBfcp+jOFZQ0pGv4FDPp8
mD39TiwMA92jkqYZFDRpps/1MpBNNNNv6mDQm7XRL2KeQXXbW5/GUywKFy6u
27GCwbq7R29M7GSwhS3R0JNl8cjGXS6llEGR3MlBe2cG3geK+179xiCyeCzl
mD2LJ6c4Za00BtIz9BK/IBoZF6ZTtPVpaAZWaceU05DJ0dc//K8u1FvEJ3mE
0+B/Slr7X18acWe8vnfQ7cLuyucc1tHYLfjYTOfTeOe7vj5brQtqwr641jYa
maPl1I00CYeHZ1ojJVwmjimEGv1MIfFZnLBBssdiicbziE4KOrcXVp5sp1Cb
EXuthqbQfsMyqs+PwmOpEpXBnk5Qjh9FYQ0U5G5DevyMhK/8fOiHQxSe7l9b
GiRHQbaqMty3gJLkyfZclTGFXVWf1R6UUTA+UmafIvmfDB139nMdBaVqC+ZZ
E4Wdx5xvcUksMUyoXmLhw5KsuemI/BaWmGWgOEadJd1TohnTfSxZaltqlJjH
kpTq/Q5/bWPJO4WArHeqLFGYDNnRtbqbbDV2uPqmjyWpdZPqVf4sSXcf2eQm
0W/aLq0arMiSwtlavxUHWaL1hcyYlA5LrHuLy664siS0+Q9xdBRLlM+9Mflb
hSVH97S7FfWz5ELhqslbZ1miozAT7NTKkEVK586WRYZk2t04uD2aJZ5Zsvx5
PZaIL3GPnLJZsnkgX892mCHLkqvH6kcYsvGqgbnnym6yK6z9ZUO1xFe+9aEf
KxjyfzWu184=
        "], "StandardDeviation" -> CompressedData["
1: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
        "], "Method" -> "NaiveSampler", "VectorLength" -> 225, 
       "Output" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
        "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
       286800826763443772|>], "InputDimension" -> 0, "OutputDimension" -> 225,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "BooleanTensor", "Weight" -> 1, 
           "Values" -> {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
            0}, {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0}, {0, 0, 0, 0, 0,
             1, 0, 0, 0, 0, 0, 1, 1, 0, 0}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}}, 
           "ID" -> 3791095496786132862|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 66.99548, 
      "MaxTrainingMemory" -> 279813024, "DataMemory" -> 12158720, 
      "FunctionMemory" -> 307352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 7, 17, 4, 28, 16.120733`7.959959769821913}, "Instant",
         "Gregorian", 8.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>, "LogPDFDistribution" -> 
    MachineLearning`TailedQuantileDistribution[<|
      "Quantiles" -> CompressedData["
1:eJwBpQFa/iFib1JlAQAAADMAAADK/BZialPmv+C+4zyLheK/SwmGrBIC4b/f
/E2TpmHgvwx63+NZJuC/Z0xPppWQ37+ibB/rw/Hev+13BLgbK96/6kN3z4CY
3b8Q0KJxtvTcv788ORCfYdy/th72BnsX3L/hXPZqL2jbv0zxZx9CLtu/Hx2a
QJkD27971MA1l+javwlbOo+Iw9q/5brTKX382b8dbDNR8F/Zv9aY8IQeMNm/
DKffr7qx2L93MjKbDpfYv6myer3nWti/Or8dtncJ2L+sx/rHooTXv88zBc2E
Yde/sRBgo84l17+l7pBsBdrWv8o3iU4Aj9a/5UtwL94v1r+d2gzAaQjWv5yH
QVMKvNW/CcU8Ydp41b9l2EPh8SfVv2SBipRMl9S/Qlk11TV81L+ZaweF4QvU
v/OzYv+FztO/86HHW+qR07+5MG+XzGDTv4DVwV/uJNO/udcPDLve0r/C2upu
R4zSvyqx9TpACdK/FaWVvwFm0b+55SyinNPQv0fa7ePolNC/LNO2Ja1O0L9k
sZRI1iDPvxT4++VWPM6/c4ZYgRXCzL+4uu4r
        "], "LeftBoundary" -> -0.5760396587412393, "LeftScale" -> 
       0.04591491279902661, "LeftTailNorm" -> 0.025|>], "Entropy" -> 
    Around[84.04619790753615, 1.3754132786748832`], "EntropySampleSize" -> 
    200|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.866981535333741*^9, 3.8669849095422783`*^9, 
  3.866992096392008*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"6c2c0a53-cdd6-4c44-bb2c-9e7c78be509b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"RandomVariate", "[", "ld", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.866980855384101*^9, 3.866980855907359*^9}, {
  3.866992113474128*^9, 3.86699211848137*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"a3d8e4c5-6ad3-4efc-99c9-79c9dee9b317"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0}, {0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 
   1}, {0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1,
    0, 1, 1, 0, 0, 1, 0}, {1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1}, {1, 
   1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1}, {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 0, 1}, {1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1}, {1, 0, 1, 1,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1}, {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1}, {1, 1, 1, 1, 1, 1, 1,
    0, 0, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, {{0, 0}, {15, 15}}, {0, 1}],
  
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.866980852881852*^9, 3.866980857633793*^9}, {
   3.8669808883210783`*^9, 3.866980894250206*^9}, 3.866981102493677*^9, {
   3.866981537144577*^9, 3.8669815593511744`*^9}, {3.8669876263432083`*^9, 
   3.866987631680387*^9}, {3.8669921018423967`*^9, 3.8669921364487143`*^9}},
 CellLabel->"Out[36]=",ExpressionUUID->"e91b9cfb-3e13-4251-973a-ddd686957ddd"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GAN Setup", "Title",
 CellChangeTimes->{{3.866872549087653*^9, 
  3.8668725551670837`*^9}},ExpressionUUID->"565de1e4-5222-4ddf-a9d3-\
d3538bc9a736"],

Cell["\<\
This was used to figure out how boring a level is but probably won\
\[CloseCurlyQuote]t use it\
\>", "Text",
 CellChangeTimes->{{3.866948970400546*^9, 
  3.866948985652763*^9}},ExpressionUUID->"e8593761-379c-4038-bca5-\
0478f8c15c8e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"boringmap", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{"0", ",", "15"}], "]"}], ",", "13"}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{"1", ",", "15"}], "]"}], ",", "2"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CalculateBoring", "[", "image_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Total", "[", 
      RowBox[{"Abs", "/@", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Subtract", "[", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"ConvertBlocks", ",", 
            RowBox[{"ImagePartition", "[", 
             RowBox[{"image", ",", "16"}], "]"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], ",", "boringmap"}], "]"}], 
        "]"}]}], "]"}], " ", ">", " ", "10"}], ",", "image", ",", "Nothing"}],
    "]"}]}]}], "Input",
 CellChangeTimes->{
  3.866867503219544*^9, {3.866882950263864*^9, 3.86688295040867*^9}, 
   3.866885775105794*^9},
 CellLabel->
  "In[404]:=",ExpressionUUID->"c531896b-37b1-4f3b-a3ef-ed446a5fd4d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maps", " ", "=", 
   RowBox[{"{", 
    RowBox[{
    "map11", ",", "map21", ",", "map31", ",", "map41", ",", "map51", ",", 
     "map52", ",", "map61", ",", "map71", ",", "map81"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8669707893834467`*^9, 3.8669707907959003`*^9}, {
  3.86698034730297*^9, 3.8669803508735943`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"325fabbf-a57b-4bff-992d-b8edffd0781b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"imagedataset", "=", 
   RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"ImageTake", "[", 
         RowBox[{"map", ",", "240", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"i", "+", "240", "-", "1"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageDimensions", "[", "map", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", "240", "+", "16"}], ",", 
          "16"}], "}"}]}], " ", 
       RowBox[{"(*", " ", 
        RowBox[{"thx", " ", "isabel"}], "*)"}], "\[IndentingNewLine]", "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"map", ",", "maps"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.866800953816489*^9, 3.866800990535758*^9, {3.866948963778493*^9, 
   3.866948993550475*^9}, 3.866986694479286*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"e5809f1f-f64a-426b-90df-3f69658d639f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "not", " ", "in", " ", "use", " ", "right", " ", "now", " ", "because", 
    " ", 
    RowBox[{"can", "'"}], "t", " ", "figure", " ", "out", " ", "input", " ", 
    "control"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"OneHotConvertBlocks", "[", "image_", "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"ImageData", "[", "image", "]"}], ",", "ground", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "hard", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "lucky", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", "brick", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"pipe", "|", "tpipe"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "bullet", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "passthrough", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"Except", "[", "\"\<else\>\"", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8668014173669357`*^9, 3.866801463929298*^9}, {
  3.866872623346426*^9, 3.866872634934359*^9}},
 CellLabel->
  "In[961]:=",ExpressionUUID->"9382f085-56c0-4767-92cf-c5e14dbd8426"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataset", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"ArrayReshape", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{"ConvertBlocks", ",", 
         RowBox[{"ImagePartition", "[", 
          RowBox[{"#", ",", "16"}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "15", ",", "15"}], "}"}]}], "]"}], "&"}], "/@", 
    "imagedataset"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8668019563893833`*^9, 3.866801957491201*^9}, {
  3.866814083659667*^9, 3.866814084302375*^9}, {3.866814272421522*^9, 
  3.866814289523377*^9}, {3.866814492962919*^9, 3.866814500554624*^9}, {
  3.866949014840151*^9, 3.866949034221043*^9}, {3.866980317545616*^9, 
  3.866980323168037*^9}, {3.866985425848342*^9, 3.866985439689309*^9}, {
  3.866985530251216*^9, 3.866985531902029*^9}, {3.866985632922215*^9, 
  3.866985639849636*^9}, {3.866986004105154*^9, 3.8669860265346527`*^9}, {
  3.86698668963868*^9, 3.866986690754068*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"5398aea2-4229-4fd4-a042-84d983a00f65"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "dataset", "]"}]], "Input",
 CellChangeTimes->{{3.86694906414904*^9, 3.866949067407524*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"8872cdf6-c85e-4106-8d6a-54123002e6af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1956", ",", "1", ",", "15", ",", "15"}], "}"}]], "Output",
 CellChangeTimes->{
  3.8669490681702747`*^9, 3.866961727278565*^9, {3.866970825262454*^9, 
   3.8669708534341097`*^9}, 3.866985525437179*^9, 3.8669862050694237`*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"8713ff13-454b-414d-8572-a48f4cddbc43"]
}, Open  ]],

Cell["This is just for testing the discriminator", "Text",
 CellChangeTimes->{{3.866949051617591*^9, 
  3.866949059989216*^9}},ExpressionUUID->"b66e573a-1716-48d2-b92c-\
b8b9d650baa9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasetrules", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"entry", "->", "1"}], ",", 
     RowBox[{"{", 
      RowBox[{"entry", ",", "dataset"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[272]:=",ExpressionUUID->"4cecfb69-c143-46dc-be3b-c29e884e0943"],

Cell[BoxData[
 RowBox[{"bad", " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"RandomInteger", "[", "3", "]"}], ",", "15"}], "]"}], ",", 
     "15"}], "]"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.866892527591092*^9, 3.866892528071341*^9}, {
   3.8668925608124447`*^9, 3.866892561718927*^9}, 3.866893860065057*^9},
 CellLabel->
  "In[490]:=",ExpressionUUID->"e3fcf359-bf9f-4052-83fc-46ff4220a7a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"baddata", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"RandomInteger", "[", "]"}], ",", "15"}], "]"}], ",", 
         "15"}], "]"}], "}"}], "->", "0"}], ",", "600"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.866874831694909*^9, 3.866874834888793*^9}, {
   3.8668935149231043`*^9, 3.86689351533745*^9}, {3.86689368107016*^9, 
   3.8668936814248447`*^9}, 3.866986342892798*^9},
 CellLabel->
  "In[273]:=",ExpressionUUID->"008054af-a887-48bb-865c-b6f60dcd3591"],

Cell[CellGroupData[{

Cell["Discriminator", "Subtitle",
 CellChangeTimes->{{3.866872568743433*^9, 
  3.866872576536022*^9}},ExpressionUUID->"81f63e6f-70c2-40bf-a4d2-\
10bc4c262037"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"maybe", " ", "change", " ", "to", " ", "leaky", " ", "relu"}], 
   ",", " ", 
   RowBox[{
   "check", " ", "wolfram", " ", "gan", " ", "blog", " ", "post", " ", "for", 
    " ", "that"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.8668870045857973`*^9, 
  3.8668870168888807`*^9}},ExpressionUUID->"5e4ed616-ec06-4251-a781-\
32f31295d426"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"convolutionBlock", "[", "args___", "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", "args", "]"}], ",", 
      RowBox[{"NormalizationLayer", "[", "]"}], ",", 
      RowBox[{"ElementwiseLayer", "[", "\"\<SELU\>\"", "]"}], ",", 
      RowBox[{"DropoutLayer", "[", "0.4", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"discriminator", "=", 
  RowBox[{"NetFlatten", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"convolutionBlock", "[", 
        RowBox[{"64", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"convolutionBlock", "[", 
        RowBox[{"64", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       "LogisticSigmoid"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"1", ",", "15", ",", "15"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.866802223261149*^9, 3.8668022301843567`*^9}, {
   3.866802333085367*^9, 3.866802371819895*^9}, {3.8668025811527243`*^9, 
   3.8668025820961514`*^9}, {3.8668030056102467`*^9, 
   3.8668030067033873`*^9}, {3.86681053877987*^9, 3.86681054409105*^9}, 
   3.866867705402875*^9, {3.8668790297736063`*^9, 3.866879030807186*^9}, {
   3.866890460310192*^9, 3.8668904645029707`*^9}, {3.866891451270995*^9, 
   3.86689145206826*^9}, {3.8668923706175747`*^9, 3.8668923727379913`*^9}, {
   3.866892613696673*^9, 3.866892613843371*^9}, {3.8668936591971807`*^9, 
   3.866893659494349*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"011f4876-867d-4bbe-abf5-f5dff45bca1b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 13, 13}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {11, 11}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 11, 11}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 7744}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 7744, 
                    "$InputDimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8668789755731773`*^9, 3.8668790322844057`*^9, 
  3.866890465460602*^9, 3.866891452921837*^9, 3.866892373201644*^9, 
  3.866892618358719*^9, 3.8668936258126163`*^9, 3.866893662161249*^9, 
  3.86698524833626*^9, 3.8669862645812883`*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"4fcffc51-4b77-43b7-bbf1-a1179dc0d752"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"datagen", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"datasetrules", ",", "baddata"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866986280829706*^9, 3.8669862973299513`*^9}},
 CellLabel->
  "In[274]:=",ExpressionUUID->"7775ba2b-3c67-4810-9234-cfdf486b64f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"For", " ", "testing"}], " ", "*)"}], " ", 
  RowBox[{"distrained", " ", "=", " ", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"discriminator", ",", "datagen", ",", 
     RowBox[{"ValidationSet", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"MaxTrainingRounds", "->", "15"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.866872592491304*^9, 3.8668726008663816`*^9}, {
   3.866874868352098*^9, 3.866874870388269*^9}, {3.866878982316635*^9, 
   3.866878983128148*^9}, {3.866890485429757*^9, 3.866890496965228*^9}, {
   3.866891449069223*^9, 3.866891449209297*^9}, {3.86689239916385*^9, 
   3.866892402070798*^9}, {3.866893523821916*^9, 3.8668935368910093`*^9}, {
   3.86689362163832*^9, 3.866893621915306*^9}, {3.866893729397152*^9, 
   3.866893745070568*^9}, {3.866986287715564*^9, 3.866986291266926*^9}, 
   3.866990380338254*^9, 3.8669904186188107`*^9},
 CellLabel->
  "In[275]:=",ExpressionUUID->"5399283c-cef7-40e4-a3b5-672f5bc3f867"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "interr2", 
   "\"An unknown internal error occurred. Consult \
Internal`$LastInternalFailure for potential information.\"", 2, 275, 165, 
   18672920699614138504, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.8669904132053013`*^9, 3.8669904223501472`*^9}},
 CellLabel->
  "During evaluation of \
In[275]:=",ExpressionUUID->"85b43c87-9b81-444a-be64-c9716e4c736c"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.866990422780508*^9},
 CellLabel->
  "Out[275]=",ExpressionUUID->"97e5b360-b447-419e-b0bb-b610e7124162"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"distrained", "[", 
   RowBox[{"notdataset", "[", 
    RowBox[{"[", "18", "]"}], "]"}], "]"}], "\[IndentingNewLine]"}]], "Input",\

 CellChangeTimes->{{3.866879063236565*^9, 3.8668791350969667`*^9}, {
   3.866879450833708*^9, 3.866879453698113*^9}, {3.866882993424986*^9, 
   3.8668829948258266`*^9}, {3.8668834445110197`*^9, 3.8668834471997957`*^9}, 
   3.866885973889797*^9, {3.866891461422974*^9, 3.866891464368412*^9}, {
   3.866892531808144*^9, 3.866892539591734*^9}, {3.8668938767784643`*^9, 
   3.866893900134788*^9}, {3.8668941504235067`*^9, 
   3.866894157022284*^9}},ExpressionUUID->"90a5c0d5-7620-463e-9c53-\
8b2d28d510bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generator", "Subtitle",
 CellChangeTimes->{{3.866879593894032*^9, 
  3.866879595536663*^9}},ExpressionUUID->"e11db3c0-2514-4cb5-a9f2-\
337b3502a1a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"deconvolutionBlock", "[", "args__", "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DeconvolutionLayer", "[", "args", "]"}], ",", 
      RowBox[{"NormalizationLayer", "[", "]"}], ",", 
      RowBox[{"ElementwiseLayer", "[", "\"\<SELU\>\"", "]"}], ",", 
      RowBox[{"DropoutLayer", "[", "0.4", "]"}]}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.866885529655448*^9, 3.86688554527866*^9}, {
  3.8668856819857273`*^9, 3.86688569133418*^9}, {3.866886971726851*^9, 
  3.866887002073794*^9}, {3.866888626179056*^9, 3.86688864528343*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"e57ca6ba-5db1-4725-9e2e-a9fa564616ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"generator", "=", 
   RowBox[{"NetFlatten", "@", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", "\n", "\t", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"128", ",", "3", ",", "3"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"NormalizationLayer", "[", "]"}], ",", 
        RowBox[{"ElementwiseLayer", "[", "\"\<SELU\>\"", "]"}], ",", 
        RowBox[{"DropoutLayer", "[", "0.4", "]"}], ",", "\n", "\t", 
        RowBox[{"deconvolutionBlock", "[", 
         RowBox[{"64", ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\n", "\t", 
        RowBox[{"deconvolutionBlock", "[", 
         RowBox[{"32", ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"deconvolutionBlock", "[", 
         RowBox[{"1", ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}]}], "\n", "}"}], ",", 
      " ", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", "32"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"\"\<Output\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"1", ",", "15", ",", "15"}], "}"}]}]}], "\[IndentingNewLine]",
      "]"}]}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.86689035883757*^9, 3.866890385693059*^9}, {
  3.866890432266012*^9, 3.866890439841951*^9}, {3.866891439705055*^9, 
  3.86689144364215*^9}, {3.866894928248505*^9, 3.866894971580118*^9}, {
  3.8668971669917*^9, 3.866897219381741*^9}, {3.866897399712455*^9, 
  3.8668974110924*^9}, {3.866897448977536*^9, 3.8668974885747957`*^9}, {
  3.866897621790711*^9, 3.866897652916428*^9}, {3.8668976993904047`*^9, 
  3.866897731680026*^9}, {3.866898001141922*^9, 3.866898004757554*^9}, {
  3.8668980715518417`*^9, 3.866898117885198*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"cca276fe-f65f-4fc7-bb00-222e78d174e6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1152, 32}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {128, 3, 3}, "$OutputSize" -> 1152, 
                    "$InputSize" -> 32, "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {128, 3, 3}, 
                    "$StatsDimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {128, 3, 3}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {3, 3}, 
                    "$OutputSize" -> {7, 7}, "$WeightsOutputChannels" -> 64|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 7, 7}, "$StatsDimensions" -> {64}|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 32, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {11, 11}, "$WeightsOutputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {32, 11, 11}, 
                    "$StatsDimensions" -> {32}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {32, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 1, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 32, "$InputSize" -> {11, 11}, 
                    "$OutputSize" -> {15, 15}, "$WeightsOutputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {1, 15, 15}, "$StatsDimensions" -> {1}|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {1, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {1, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]3\[Times]3\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]3\[Times]3\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]3\[Times]3\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]3\[Times]3\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866894919266198*^9, 3.866894972389015*^9}, 
   3.866897223658704*^9, {3.866897395381304*^9, 3.866897411875222*^9}, {
   3.866897457543067*^9, 3.866897489896987*^9}, 3.866897593879451*^9, 
   3.866897637357074*^9, 3.866897712886335*^9, {3.866898083826703*^9, 
   3.866898118361573*^9}, {3.8669770571455097`*^9, 3.866977070159382*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"e05a31e4-d003-441a-a402-fae0887726df"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Putting it all together", "Subtitle",
 CellChangeTimes->{{3.866899412268614*^9, 
  3.8668994212803297`*^9}},ExpressionUUID->"e2e7a837-ae22-44e2-a4a8-\
7250bd44204c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gan", " ", "=", 
  RowBox[{"NetGANOperator", "[", 
   RowBox[{"{", 
    RowBox[{"generator", ",", "discriminator"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866899429363366*^9, 3.866899437791607*^9}, {
   3.866899630286894*^9, 3.8668996320530157`*^9}, 3.866950755563138*^9, 
   3.866950793079668*^9},ExpressionUUID->"fbe60a2e-6803-45c5-b5bb-\
2137369333cd"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGANOperator", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    GrayLevel[0.6], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    GrayLevel[0.6], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Generator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Generator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Generator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Generator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Generator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "17", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Generator"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Discriminator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Discriminator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Discriminator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Discriminator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Discriminator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Discriminator"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"JensenShannon\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    
                    Lookup[<|{"Parameters", "Generator"} -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{1152, 32}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {128, 3, 3}, "$OutputSize" -> 1152, 
                    "$InputSize" -> 32, "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {128, 3, 3}, 
                    "$StatsDimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {128, 3, 3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {3, 3}, 
                    "$OutputSize" -> {7, 7}, "$WeightsOutputChannels" -> 64|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 7, 7}, "$StatsDimensions" -> {64}|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 32, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {11, 11}, "$WeightsOutputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {32, 11, 11}, 
                    "$StatsDimensions" -> {32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {32, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{32, 1, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 32, "$InputSize" -> {11, 11}, 
                    "$OutputSize" -> {15, 15}, "$WeightsOutputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {1, 15, 15}, "$StatsDimensions" -> {1}|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {1, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {1, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, {
                    "Parameters", "Discriminator"} -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 13, 13}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {11, 11}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 11, 11}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{1, 7744}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 7744, 
                    "$InputDimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, \
<||>, {}]}, GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGANOperator[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.866899438540511*^9, 3.866899632851715*^9},
 CellLabel->
  "Out[566]=",ExpressionUUID->"ed11cf66-5726-418a-b8e1-fa24b6ce7b70"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"getRandomLatent", "[", "batchSize_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"NumericArray", "[", 
      RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], ",", 
    RowBox[{"RandomVariate", "[", 
     RowBox[{
      RowBox[{"NormalDistribution", "[", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"batchSize", ",", "32"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"4582b163-1a91-4202-809e-64723d4b9be9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datagen", "=", 
   RowBox[{"Function", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Sample\>\"", "\[Rule]", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"dataset", ",", "#BatchSize"}], "]"}]}], ",", 
      RowBox[{"\"\<Latent\>\"", "\[Rule]", 
       RowBox[{"getRandomLatent", "[", "#BatchSize", "]"}]}]}], "|>"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866969521149557*^9, 3.866969522169546*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"b7e66b47-2735-4b18-9f4d-b41b32f9e9ec"],

Cell["A monitor", "Text",
 CellChangeTimes->{{3.866899681469598*^9, 
  3.866899682379171*^9}},ExpressionUUID->"ef15349f-5aea-4ae6-8608-\
b3273ecee771"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowGeneratedLevels", "[", "net_", "]"}], ":=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{
      RowBox[{"net", "[", 
       RowBox[{"[", "\"\<Generator\>\"", "]"}], "]"}], "[", 
      RowBox[{
       RowBox[{"getRandomLatent", "[", "1", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866900019791521*^9, 3.866900024066293*^9}, {
  3.866900347061696*^9, 3.8669003558296833`*^9}, {3.866901040953027*^9, 
  3.8669011144489*^9}, {3.866901392515848*^9, 3.866901423188161*^9}, {
  3.866901461419044*^9, 3.866901464970364*^9}, {3.866901497555944*^9, 
  3.8669014997700243`*^9}, {3.866901536417585*^9, 3.866901546248437*^9}, {
  3.866901624922544*^9, 3.866901723720458*^9}, {3.8669018287240477`*^9, 
  3.866901831633967*^9}, {3.866903130236937*^9, 3.866903132086651*^9}, {
  3.86696515835843*^9, 3.866965168692202*^9}, {3.866966196036728*^9, 
  3.866966213859537*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"2dbae7e0-eb28-4308-b56c-4617097a74ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowGeneratedLevels", "[", 
   RowBox[{"NetInitialize", "[", "gan", "]"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"monitor", " ", "works", " ", "nice"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.866900373423435*^9, 3.866900538857193*^9}, {
  3.866900595396006*^9, 3.866900613368981*^9}, {3.866901096202754*^9, 
  3.866901292417728*^9}, {3.8669013405078373`*^9, 3.866901486710751*^9}, {
  3.866901878907157*^9, 3.866901882158897*^9}},
 CellLabel->
  "In[924]:=",ExpressionUUID->"5bd2c45c-0d66-40c6-b23b-d6c58081bd45"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJw1lH9QVFUUxy8FapTDQ0gxDcWQdMpxB2ZSNOAphYTaLFSO7UQBsoqVCCoS
TeoFJ12KaSxDmYFqHTR2kh/LAMKMlE+EdUHBx7omP3NBhHXjx64Z+YdZ3u+p
ndn5zH33vPPje855IWm7k/RPMMb8/vs//lmfXf57zGPKjfpxQcPVIZyTVq+d
FGTpS2+D/psHYDc8ZRd8bTh2SjArNWFYUPlcf0vwk4etd2E/tGdIMN42wyUY
+EIV/DeNfTgh6N66TsRR1HYn/PCU8DFB882EOzgfirqJeBFNxKCdiM/VXW2C
ixO8KI5nfFBQ28BG4P/+CPJXuAvPpbUe+NPk9YLNngbkweM8nXi/cq8FDE6+
JuhYUQA745IwcFbhB8jX/OY/qHMgvQZn7shvB5ML+sDnTv4K7qjshr/Rbpyl
6hLhR6kOs6NO5dYo/CoHgpEfX2mBbuzrNSrO66uu4j67CH6k384grkb/N8i3
WFrACh/UKy9yw07RvIu+aE+OoX77wULUqTa/jf4pYXeRJ3NHKODGgg7BjJaj
6LN79VPoV8rpt9AHFueE3uzKQCtYUVYH6n44BdbvL6e+N/UKHvvmuAN9CXje
ifspHfLjLW7oHL3EC/VL55bBTi7JR/0sSoe6laXvIf+UwTzcswW56Auf4wed
1VdqUZcxQIv8+EePcK9suk3zmVYs6lN+6WhFHFY6jefGufnQTZtTfod0NtSD
bSvOgX/dg54sq/kz8CsX7nndOivOXk/Cjt/LQJ3plh+hKzucivekjaU0r94n
SK+eSOrfvAWoSyoqpXr2rIFuSoh3H+2bP81v1usHwE+5nXQ3Yw752e3QnZsi
oR/PnHcd9y+pPWBMWz/mVbcX8Z22ZfCn2RRBujf2XUKcF23Ig/kYL4LGnt2C
QTMfQE/mnVoLftd/Aaypxn5pIuuQt2bLIegod5aDbl9G+9O9AXMrh8WB2p9i
qc7B9su4b3JS3PH3zbAr1NN+TG+l+qZmkr7//5LKanA+VtUs2JF7A3PJfQ/a
0Mf28FHUqbcivrzZgPzd9+toL0IjaR8v0HeH5Uachx3/E98PFr6vAZzwo/7P
MZtAz0PsgRz1sZ3eV+CHbTMiD7mvEX3NqH0Zc82tR5C/bA2FziUPVtG8n51P
e2J45jDo+BJ1M/MJ+GHawhxB68T8CXp+5DT0DY1F/+KTV7mo/kTshbxNhzq1
O4OhuyQ1Io4U76J4OYldsPPaAHulaBe+A/tCA6CbnFBB+z4dTd8VX2/03xSy
ELpxS9cV+DPE0vfljVN4HvhFHt6Pu/wq7WtUMfR0TxrQX1Uqgr36h5O+s+Wd
6AvLewfzyXc4MD+q/C3sWFn2z4KL64Owt7Itk/pzPhHzy/zMmFtTyyC4f9Fy
xDf6VMC/M3uuIK8+Oox8rIGBqP9MzUWcTf690E1Jm40+mY4Xw8+s2fGg0joD
efSE9EPPysynBfn3ti68Hz2yfjLmXyspIyc=
   "], {{0, 0}, {15, 15}}, {0, 0.9997646808624268}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{407.5563049316406, 408.},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.866900602728698*^9, 3.866900614446828*^9}, {
   3.866901131216031*^9, 3.8669011667286577`*^9}, {3.866901234293594*^9, 
   3.866901279835273*^9}, {3.866901350772141*^9, 3.866901366336413*^9}, {
   3.866901434917822*^9, 3.866901444235346*^9}, {3.866901474347683*^9, 
   3.866901504478455*^9}, 3.866901549288666*^9, 3.866901646965485*^9, {
   3.866901685925478*^9, 3.866901715468034*^9}, {3.866901822734242*^9, 
   3.866901856432485*^9}, 3.8669031351063557`*^9, {3.866966210041059*^9, 
   3.866966215786956*^9}},
 CellLabel->
  "Out[924]=",ExpressionUUID->"b0243e91-94f8-4f98-8bb7-9a3229c7f8d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"monitoring", "=", "\"\<\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", "monitoring", "]"}], "\[IndentingNewLine]", 
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"NetGANOperator", "[", 
     RowBox[{"{", 
      RowBox[{"generator", ",", "discriminator"}], "}"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"datagen", ",", 
      RowBox[{"\"\<RoundLength\>\"", "\[Rule]", 
       RowBox[{"Length", "[", "dataset", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TrainingUpdateSchedule", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Generator\>\"", ",", "\"\<Discriminator\>\""}], "}"}]}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"TrainingProgressFunction", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"monitoring", "=", 
         RowBox[{"ShowGeneratedLevels", "[", "#Net", "]"}]}], "]"}], ",", 
       RowBox[{"\"\<Interval\>\"", "\[Rule]", 
        RowBox[{"Quantity", " ", "[", 
         RowBox[{"1", ",", "\"\<Round\>\""}], "]"}]}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "40"}]}], " ", 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8669019147180967`*^9, 3.866901915748715*^9}, {
   3.866901996233015*^9, 3.866902048420722*^9}, {3.866903389869753*^9, 
   3.866903389904365*^9}, {3.866949160567996*^9, 3.866949160972803*^9}, {
   3.866949414045122*^9, 3.86694941451457*^9}, 3.866950802358005*^9, {
   3.866951032055917*^9, 3.866951034006071*^9}, {3.8669573362155333`*^9, 
   3.8669573372926817`*^9}, {3.866961221510346*^9, 3.866961229036434*^9}, {
   3.866961749919383*^9, 3.8669617500731163`*^9}, 3.866969260998*^9, {
   3.8669703175565567`*^9, 3.8669703237518873`*^9}, {3.86697051606923*^9, 
   3.866970516536256*^9}, 3.8669853753102837`*^9},
 CellLabel->
  "In[157]:=",ExpressionUUID->"54e9ed7b-7d26-4b3e-aef9-ac72735c0f1f"],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`monitoring, StandardForm],
  ImageSizeCache->{78., {3., 10.}}]], "Output",
 CellChangeTimes->{
  3.866902049857226*^9, 3.866903141599559*^9, 3.86690339043692*^9, 
   3.8669491617912607`*^9, 3.866949415124342*^9, 3.866951034911085*^9, 
   3.866957337930633*^9, {3.8669617451070423`*^9, 3.866961750652363*^9}, 
   3.866966220143116*^9, 3.866970325623351*^9, {3.866985270854087*^9, 
   3.866985297959607*^9}},
 CellLabel->
  "Out[158]=",ExpressionUUID->"c494721b-6216-4174-8395-c19caf2e6976"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGANOperator", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Generator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Generator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Generator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Generator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Generator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "17", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Generator"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Discriminator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Discriminator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Discriminator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Discriminator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Discriminator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Discriminator"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"JensenShannon\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    
                    Lookup[<|{"Parameters", "Generator"} -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 
                    32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {128, 3, 3}, "$OutputSize" -> 1152, 
                    "$InputSize" -> 32, "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {128, 3, 3}, 
                    "$StatsDimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {128, 3, 3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 64, 
                    5, 5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {3, 3}, 
                    "$OutputSize" -> {7, 7}, "$WeightsOutputChannels" -> 64|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 7, 7}, "$StatsDimensions" -> {64}|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 32, 5,
                     5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 64, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {11, 11}, "$WeightsOutputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {32, 11, 11}, 
                    "$StatsDimensions" -> {32}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {32, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|"Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 1, 5, 
                    5}], "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>,
                     "Parameters" -> <|
                    "OutputChannels" -> 1, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 32, "$InputSize" -> {11, 11}, 
                    "$OutputSize" -> {15, 15}, "$WeightsOutputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {1, 15, 15}, "$StatsDimensions" -> {1}|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {1, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {1, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, {
                    "Parameters", "Discriminator"} -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 1, 3, 
                    3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 13, 13}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {11, 11}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 11, 11}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 7744}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 7744, 
                    "$InputDimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, \
<||>, {}]}, GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGANOperator[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.866902049857226*^9, 3.866903141599559*^9, 3.86690339043692*^9, 
   3.8669491617912607`*^9, 3.866949415124342*^9, 3.866951034911085*^9, 
   3.866957337930633*^9, {3.8669617451070423`*^9, 3.866961750652363*^9}, 
   3.866966220143116*^9, 3.866970325623351*^9, 3.866985270854087*^9, 
   3.866985385502215*^9},
 CellLabel->
  "Out[159]=",ExpressionUUID->"d0917988-df7b-4850-a344-123f46475f9b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"trained", "[", 
   RowBox[{"[", "\"\<Discriminator\>\"", "]"}], "]"}], "[", 
  RowBox[{
   RowBox[{"trained", "[", 
    RowBox[{"[", "\"\<Generator\>\"", "]"}], "]"}], "[", 
   RowBox[{"getRandomLatent", "[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.866950613306204*^9, 3.866950649219108*^9}, {
  3.866950679425714*^9, 3.866950687377193*^9}},
 CellLabel->
  "In[933]:=",ExpressionUUID->"9b627813-0b2e-41f2-a0a9-76760ec50e80"],

Cell[BoxData[
 RowBox[{"{", "0.0020420204382389784`", "}"}]], "Output",
 CellChangeTimes->{{3.866950672987174*^9, 3.866950702563776*^9}, 
   3.8669700482473373`*^9},
 CellLabel->
  "Out[933]=",ExpressionUUID->"1ed581d0-e339-4e1a-a665-57d4f47dcb4a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Normal", "[", 
     RowBox[{
      RowBox[{"trained", "[", 
       RowBox[{"[", "\"\<Generator\>\"", "]"}], "]"}], "[", 
      RowBox[{"getRandomLatent", "[", "1", "]"}], "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8669699315000067`*^9, 3.866969969425214*^9}},
 CellLabel->
  "In[932]:=",ExpressionUUID->"ebf2dbbf-422c-4442-841c-48d8d6ba9815"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trained", "[", 
   RowBox[{"[", "\"\<Generator\>\"", "]"}], "]"}], "[", 
  RowBox[{"getRandomLatent", "[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.866970044765593*^9, 
  3.8669700461635103`*^9}},ExpressionUUID->"1cc05b98-2385-4725-99e0-\
fd21ce240c8f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.866986628470743*^9, 
  3.866986631080332*^9}},ExpressionUUID->"47076a7b-303a-486c-a9c9-\
4336a6fe38bc"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Using Learn Distribution and a Discriminator", "Title",
 CellChangeTimes->{{3.866986358935281*^9, 
  3.866986372927032*^9}},ExpressionUUID->"1ba7cdf3-ddb3-4479-a197-\
fdec74167f83"],

Cell["\<\
First train on original, discriminate, any goes to discriminator bad, but \
above 0.999  go into dataset \
\>", "Text",
 CellChangeTimes->{{3.8669868851312037`*^9, 3.8669869272720947`*^9}, {
  3.8669878062098713`*^9, 
  3.866987821574943*^9}},ExpressionUUID->"2cbe9e94-49e4-420e-ae36-\
21eea59241ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"baddata", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"RandomInteger", "[", "]"}], ",", "15"}], "]"}], ",", 
         "15"}], "]"}], "}"}], "->", "0"}], ",", "600"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8669897148675413`*^9, 3.866989715048482*^9}, {
  3.866990785845546*^9, 3.866990794597299*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"1f221009-c453-4cc0-ac40-58bbff65bcd1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"maps", " ", "=", 
   RowBox[{"{", 
    RowBox[{
    "map11", ",", "map21", ",", "map31", ",", "map41", ",", "map51", ",", 
     "map52", ",", "map61", ",", "map71", ",", "map81"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"imagedataset", "=", 
   RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"ImageTake", "[", 
         RowBox[{"map", ",", "240", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"i", "+", "240", "-", "1"}]}], "}"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"ImageDimensions", "[", "map", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", "240", "+", "16"}], ",", 
          "16"}], "}"}]}], " ", 
       RowBox[{"(*", " ", 
        RowBox[{"thx", " ", "isabel"}], "*)"}], "\[IndentingNewLine]", "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"map", ",", "maps"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"discdataset", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"ArrayReshape", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{"ConvertBlocks", ",", 
         RowBox[{"ImagePartition", "[", 
          RowBox[{"#", ",", "16"}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "15", ",", "15"}], "}"}]}], "]"}], "&"}], "/@", 
    "imagedataset"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lddataset", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{"ConvertBlocks", ",", 
       RowBox[{"ImagePartition", "[", 
        RowBox[{"#", ",", "16"}], "]"}], ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", "imagedataset"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.866986978317952*^9, 3.8669870219206333`*^9}, {
  3.866987751225741*^9, 3.8669877646434927`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"68dff247-9103-4696-a490-e70d5f256841"],

Cell[BoxData[
 RowBox[{
  RowBox[{"datasetrules", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"entry", "->", "1"}], ",", 
     RowBox[{"{", 
      RowBox[{"entry", ",", "discdataset"}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.8669908960576353`*^9, 3.866990898322694*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"e1a5b630-af41-40f4-a68e-bc5cdcabc569"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"goodld", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ldlist", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ldsetrules", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"datagen", "=", 
   RowBox[{"{", "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8669877696414003`*^9, 3.866987791105402*^9}, {
  3.8669878417821703`*^9, 3.866987857795109*^9}, {3.866990059627379*^9, 
  3.866990062819668*^9}, {3.866990108959692*^9, 3.866990111356368*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"274ddfef-e260-4ea1-9ed7-d754e391b7a7"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.866987867468835*^9, 
  3.866987893595834*^9}},ExpressionUUID->"59053a84-b4a9-4424-94d0-\
e78fd0a94d02"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"convolutionBlock", "[", "args___", "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", "args", "]"}], ",", 
      RowBox[{"NormalizationLayer", "[", "]"}], ",", 
      RowBox[{"ElementwiseLayer", "[", "\"\<SELU\>\"", "]"}], ",", 
      RowBox[{"DropoutLayer", "[", "0.4", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"discriminator", "=", 
  RowBox[{"NetFlatten", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"convolutionBlock", "[", 
        RowBox[{"64", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"convolutionBlock", "[", 
        RowBox[{"64", ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       "LogisticSigmoid"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"1", ",", "15", ",", "15"}], "}"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]}], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"5eea67f2-d075-4551-bd1f-b51ef0405afb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 1, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 13, 13}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {11, 11}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 11, 11}, 
                    "$StatsDimensions" -> {64}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 7744}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 7744, 
                    "$InputDimensions" -> {64, 11, 11}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 11, 11}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]13\[Times]13\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]11\[Times]11\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.866990219196301*^9, 3.866990839059391*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"5ecca018-d31a-4c4d-a9d2-525c93e57993"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Table", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"ldsetrules", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"entry", "->", "0"}], ",", 
       RowBox[{"{", 
        RowBox[{"entry", ",", "ldlist"}], "}"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"datagen", " ", "=", " ", 
     RowBox[{"Join", "[", 
      RowBox[{"datasetrules", ",", "baddata", ",", "ldsetrules"}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"distrained", " ", "=", " ", 
     RowBox[{"NetTrain", "[", 
      RowBox[{"discriminator", ",", "datagen", ",", 
       RowBox[{"ValidationSet", "->", 
        RowBox[{"Scaled", "[", "0.2", "]"}]}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"ld", " ", "=", " ", 
     RowBox[{"LearnDistribution", "[", 
      RowBox[{"Join", "[", 
       RowBox[{"lddataset", ",", "goodld"}], "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"randomld", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"RandomVariate", "[", "ld", "]"}], "}"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"distrained", "[", "randomld", "]"}], ">", "0.999"}], ",", 
         RowBox[{"goodld", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"goodld", ",", 
            RowBox[{"randomld", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ldlist", "=", 
        RowBox[{"Append", "[", 
         RowBox[{"ldlist", ",", "randomld"}], "]"}]}], ";"}], 
      "\[IndentingNewLine]", ",", "20"}], "]"}]}], "\[IndentingNewLine]", ",",
    "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.866989695867778*^9, 3.86698971201184*^9}, {
   3.8669899647518997`*^9, 3.866989998444415*^9}, {3.866990076121275*^9, 
   3.866990078104957*^9}, {3.866990154986771*^9, 3.866990158055209*^9}, 
   3.8669908416856203`*^9, {3.866991127502673*^9, 3.866991130009448*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"7e2421ad-fd60-41a7-924a-e9f365500b36"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"RandomVariate", "[", "ld", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.866991294440405*^9, 3.866991324985615*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"44b0b3e9-fe1d-4144-860c-69ca935f6ce0"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGDgh+LBAT7YD4w+cmlqmUOuebRWTyt/oQN62TtQ/h2pNAxQ
2zxC5lLb3qFOwwDp+s+8nfF279/39lqFz3zX/3pvL9I0//Wmf+/tX5lsexv6
/739te9NnT5/3tvHntXjqfv53p532qLm20D1Uz+s+VoJFG/bVevwFsjff2qm
9iSg+n2/frX+AuqPZJD2+vX1vf2ysg0hhUDxB/tffzkNFP93vle3B2iP+Xzf
u4+B/P9Xu++8AcqrZAl47QaaL1ezdVv1l/f2rncXxAcA5UVnb/NtB8qfLGpi
XACk2S1lK3g+vbdfJ5Jgeh1oTv5pV919QHWc7gYaXUA+v+oc59tAutuL4yAz
kN6t9db+MlDfKW2GQE6gOgBPykXB
   "], {{0, 0}, {15, 15}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{438.1125793457031, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.866991302984524*^9, 3.8669913353851*^9}},
 CellLabel->"Out[63]=",ExpressionUUID->"c3eacd3d-06ca-473c-a207-7530aab09403"]
}, Open  ]],

Cell["\<\
Tip from stephen: find the features of a standard mario level\
\>", "Text",
 CellChangeTimes->{{3.866993621866376*^9, 3.8669936246427927`*^9}, {
  3.866996105600774*^9, 
  3.866996111653284*^9}},ExpressionUUID->"eb3c9e01-91d5-4d9a-89ac-\
d9a6adb4e2cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Under construction ", "Title",
 CellChangeTimes->{{3.866799896833158*^9, 
  3.8667999001480017`*^9}},ExpressionUUID->"5b1c3baa-5563-4a29-a461-\
7669d995f1c2"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.866900362495739*^9, 3.8669003640154667`*^9}, 
   3.866961269944273*^9},ExpressionUUID->"307f54b7-184c-455b-b420-\
271fac866f4e"],

Cell[BoxData["NetGANOperator"], "Input",
 CellChangeTimes->{{3.8668972912872543`*^9, 3.8668973131808968`*^9}, {
   3.866897378698051*^9, 3.866897386215783*^9}, {3.866897820082037*^9, 
   3.8668978311368*^9}, {3.8668979865662413`*^9, 3.866897991612711*^9}, {
   3.8668991230878887`*^9, 3.866899174681231*^9}, 3.866899269575816*^9, {
   3.866899322627931*^9, 
   3.866899326581121*^9}},ExpressionUUID->"819bbb57-386e-4f77-9056-\
c2b9e8b8d036"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getRandomLatent", "[", "32", "]"}]], "Input",
 CellChangeTimes->{{3.8668991444123783`*^9, 3.866899177689983*^9}, {
  3.8668992592456017`*^9, 
  3.866899264874651*^9}},ExpressionUUID->"2e2aefad-2cae-4920-9892-\
044d23284195"],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{{3.866899147407851*^9, 3.86689917820035*^9}, 
   3.866899260923771*^9},
 CellLabel->
  "Out[557]=",ExpressionUUID->"b9327bc6-de99-48fe-b08e-8fa49834c988"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8668993541573477`*^9, 3.866899355265458*^9}, 
   3.8668993905931473`*^9},ExpressionUUID->"56681829-4029-4987-9e06-\
e3b5e925243f"],

Cell[BoxData[
 RowBox[{"notimages", "=", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"CalculateBoring", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"ImagePartition", "[", 
           RowBox[{"map", ",", "240"}], "]"}], "]"}], "[", 
         RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"ImagePartition", "[", 
            RowBox[{"map", ",", "240"}], "]"}], "]"}], "]"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"map", ",", "maps"}], "}"}]}], "\[IndentingNewLine]", "]"}], "//",
    "Flatten", " "}]}]], "Input",
 CellLabel->
  "In[397]:=",ExpressionUUID->"5d96b633-589a-43d7-9c1c-0218699a931d"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.866904006160654*^9, 3.866904041732074*^9}, {
   3.866904076416073*^9, 3.866904083807989*^9}, {3.8669042623973513`*^9, 
   3.866904281031109*^9}, {3.86690437100739*^9, 3.86690437312824*^9}, 
   3.866905083036686*^9, {3.866905180870984*^9, 3.866905184120764*^9}, {
   3.866905219625537*^9, 3.866905296320418*^9}, {3.8669053318682404`*^9, 
   3.866905364031786*^9}, {3.866905925225329*^9, 3.866905999819108*^9}, {
   3.866907025150833*^9, 3.866907026471146*^9}, {3.866907564063079*^9, 
   3.866907596411907*^9}, {3.866946054190336*^9, 3.866946120607729*^9}, 
   3.866948953511591*^9},ExpressionUUID->"ef5f8009-f7ed-4264-8826-\
fa967d6c17ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"ConvertBlocks", ",", 
   RowBox[{"ImagePartition", "[", 
    RowBox[{
     RowBox[{"imagedataset", "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", "16"}], "]"}], ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.86690596643925*^9, 3.866905985536038*^9}, {
  3.866907704706258*^9, 3.866907728845798*^9}},
 CellLabel->
  "In[712]:=",ExpressionUUID->"0b17174b-6cb1-4bc3-bd19-0847736a1289"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.866905338531557*^9, 3.866905369757909*^9, {3.8669059715021343`*^9, 
   3.8669059745543957`*^9}, {3.8669077081099663`*^9, 3.8669077295487013`*^9}},
 
 CellLabel->
  "Out[712]=",ExpressionUUID->"ba02f2a4-69dc-4ba3-9061-6ed5630634e0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"notdataset", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"ArrayReshape", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{"ConvertBlocks", ",", 
         RowBox[{"ImagePartition", "[", 
          RowBox[{"#", ",", "16"}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "15", ",", "15"}], "}"}]}], "]"}], "&"}], "/@", 
    "notimages"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866867535858508*^9, 3.866867542455565*^9}},
 CellLabel->
  "In[398]:=",ExpressionUUID->"7f7da584-88ba-4b9e-b194-ce3c8add0b12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"notimages", "[", 
  RowBox[{"[", "18", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.866867616781375*^9, 3.866867643324822*^9}},
 CellLabel->
  "In[356]:=",ExpressionUUID->"8f4defe8-8ede-4bf0-8be6-d53d6e8caa31"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3D2OHEUYBuARJAQEvgK3ICAhRCICkZHYwlgkRrKREBmH4BAOOYAPMCFH
4QATMPZAUa6e6ama/qnqrqf02Fq3v92t+vqd2u7etT979vM3P350OBxef3L+
7Zunv3756tXT3759cv7Ddy9f//Ti5fMfvnr5y/MXz199/uzj88G///317u3v
/zgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu3eIRvXJwBTn
DJ+iIdJs1GVDPg2GSLM5V5Mc51mq2ZCRPF8ibaNmQ67m+Yu3rj3YnjjM5wzH
MU4iLc80Lgnz+JBn2hSeMN9J8O1IyzaNeCDGSZ7dIdKIKWEOkU72aqhlxuHR
NBU9dsF8N9InGzWrmz3JSaqrL5CuyDM7s1CkhZlaQqTvfusks0aYqWsY6au5
zQmzSNOCONJBnOThwfGEizQVDS+k4wyHJA+P3BrVV0Tnrv78xtU9eTzM/pkh
Tbn1b6xGAizJtCzZqMN3sYf/Njb+q+rThhFX/48C/3cBAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAO3Ye1ecAswij+kxgomRUnw887OqoPisuDtGoPpkNmSvJ+j+XSw9//+tJ
oKv5pudZ/2eUdDLpavXptW9invV/RiPN1FL935a7zdRS/d8Q/Zxo4pMN/Z9R
ZjO1dEQc49JI6/+89HO6JMNFkdb/eenndPLcDv2cTp7boZ/TuX5uh35ON+X5
hv7PSz/1f0/0U//3RD/v9mfpof/zni/9nKs/peS57vnqsJ/vAvfmA1fa8iat
yVUjz/GXhurtXeJ8yXNmf0bynBPsUPl//bp5Hn66/aVanvP7MzHPSZhXzvPI
J9rTaZXn/P5sd3+++1l2c2blOb8/G92fMz/FPk6uPOf3Z6P7c1d57nC9Dzdn
if15hf73dn57W+/DzVlif16h/72d397W+3Bz7M9b0c/975TOLLQ/r9D/3s7v
+I3J/p66F3Vm6f15hf53eH7D90CHK93fYovassL+vEL/Ozy/hxuj+sQa7Mlc
Y83+L/3xG9Tbeqe0ZeKo0v+uzu95aae3fyZG1nv+2+PXn4bK89tnG6ov6sz4
VcfdS45bV85T+r/0+d26ZL2XP2bm5xKe/Ly1UF/UmYl5Hrlyfrj/S5/frctZ
7yUk8R44zE/8QVqrr5XnB/ZneV4tzyFFV/MT17RWXyvP9uc28xzfR9zKz63R
Qn2tPNufq+R5uOSR9bZ2PVxaX9SZdfbnov4vfX53ILxmc168reWz5Tzn7M+l
/V/6/G5dWGPm16OQn/B7Zt4aqS/qzGrXz/n9X/r8bl3yxSis+lZ9a/lsOc+e
P6+v9H6htXy2nGfPN9aXs97wZCxcpg7zE3+Q1upr5dnzjZbzHFJ0NT9xTWv1
tfJsf24zz4dohOTEW+Xh9mihvlae7c9V8jxc8sh6b+VnK/VFnfH8eYvCazbn
xdtaPlvOs+fP6wtrzPx61Fo+W87zVp4/xw1MHN7ficRHHr4fWU7p/NXvuz68
11C4Q4mPVA9wonT+6tXHR6oHWJ7Vz1hfPcDyrH5K/SF6nr/FPCfzV99z/fHD
5/nH9u4HS+evvuf64R1l9QCX7s/J/NV3Xp8cqR7g0jyPH1HfeX31AMuz+hnr
qwdYntWP1IcL6bvFxybzXDp/9fuuDxfSyXttJc+l81e/+/rjf98EP0Tj6j7f
Zp6L5q++h/qL073nHs3mOX/+6vupHz9+eV1UD/BInnPmr37f9eGNeBzfvxau
Hq8e4ETp/NXvvj5s44nwjkGbeS6av/p915+u7ee3dvXDRq43RuavXn18pHqA
5Vn9jPXVAyzP6qfUh8vs4zbznMxffc/1xw/vLo/t3Q+Wzl99z/XDO8rqAS7d
n5P5q++8PjlSPcCleR4/or7z+uoBlmf1M9ZXD7A8qx+pDxfSd4uPTea5dP7q
910fLqST99pKnkvnr3739Uc//6x+X/UXp3vPPZrNc/781fdTP3788rqoHuCR
POfMX/2+68Mb8Tj6+Wf126z/B/AEi54=
    "], {{0, 240.}, {240., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{262.1740417480469, Automatic},
  ImageSizeRaw->{240., 240.},
  PlotRange->{{0, 240.}, {0, 240.}}]], "Output",
 CellChangeTimes->{{3.866867619610083*^9, 3.866867643572732*^9}},
 CellLabel->
  "Out[356]=",ExpressionUUID->"718390c0-ea0b-4694-b633-e2a35da31372"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageDimensions", "[", "map11", "]"}]], "Input",
 CellChangeTimes->{{3.866907860702495*^9, 3.866907863223741*^9}},
 CellLabel->
  "In[718]:=",ExpressionUUID->"5d0a194c-4d74-4d4f-b42c-4aa439acbae2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3376", ",", "240"}], "}"}]], "Output",
 CellChangeTimes->{3.866907863676613*^9},
 CellLabel->
  "Out[718]=",ExpressionUUID->"f764d8ea-1a14-4444-b062-4f35f0116e48"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"ImageTake", "[", 
    RowBox[{"map81", ",", "240", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"i", "+", "240", "-", "1"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"ImageDimensions", "[", "map81", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "-", "240", "+", "16"}], ",", "16"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.866907806529442*^9, 3.866907904648616*^9}, {
  3.866907946879848*^9, 3.8669079625070763`*^9}, {3.866908006990361*^9, 
  3.8669080181447487`*^9}, {3.8669082176705017`*^9, 3.86690822358261*^9}, {
  3.8669082536652613`*^9, 3.866908265737597*^9}, {3.866908311982081*^9, 
  3.866908328090027*^9}, {3.8669083772372837`*^9, 3.866908397829245*^9}, {
  3.866908476070952*^9, 3.8669084991625757`*^9}, {3.866908536586524*^9, 
  3.866908576402445*^9}, {3.866908658976663*^9, 3.866908659520657*^9}, {
  3.866908778889267*^9, 3.8669087916648903`*^9}, {3.8669090318428288`*^9, 
  3.866909059075239*^9}, {3.866945748541657*^9, 3.86694575185478*^9}, {
  3.866945784733069*^9, 3.866945837350337*^9}, {3.866945883126045*^9, 
  3.866946023518848*^9}, {3.8669489397130337`*^9, 3.8669489424552507`*^9}},
 CellLabel->
  "In[880]:=",ExpressionUUID->"04f84abf-77c8-4ec6-be29-9913585e7622"],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8669705241065617`*^9, 
  3.8669705415506897`*^9}},ExpressionUUID->"452f95c3-13f0-4194-80ad-\
4e454c89afa7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
      "1"}], "}"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.866970526715621*^9, 3.8669705384782953`*^9}},
 CellLabel->
  "Out[940]=",ExpressionUUID->"edb2f06c-6935-443f-9019-8d9a6c950d97"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "imagedataset", "]"}]], "Input",
 CellChangeTimes->{{3.866970676054062*^9, 3.866970679405761*^9}},
 CellLabel->
  "In[941]:=",ExpressionUUID->"ee7dcd91-97db-4a38-8b09-a3763d3dae94"],

Cell[BoxData["1757"], "Output",
 CellChangeTimes->{3.866970680078761*^9},
 CellLabel->
  "Out[941]=",ExpressionUUID->"de5977b0-8160-4569-9a55-57f962c879d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"convolutionBlock", "[", "args___", "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", "args", "]"}], ",", 
      RowBox[{"NormalizationLayer", "[", "]"}], ",", 
      RowBox[{"ElementwiseLayer", "[", "\"\<SELU\>\"", "]"}], ",", 
      RowBox[{"DropoutLayer", "[", "0.4", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"discriminator", "=", 
  RowBox[{"NetFlatten", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"convolutionBlock", "[", 
        RowBox[{"64", ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4"}], "}"}], ",", 
         RowBox[{"\"\<Stride\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"convolutionBlock", "[", 
        RowBox[{"64", ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4"}], "}"}], ",", 
         RowBox[{"\"\<Stride\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "}"}], "]"}], ",", "LogisticSigmoid"}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "15", ",", "15"}], "}"}]}]}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.866970960842639*^9, 3.866970964147002*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"aca08f6b-09f8-4ed8-a90d-6d609f72d5b0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 1, 4, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {4, 4}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {6, 6}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 6, 6}, "$StatsDimensions" -> {64}|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 4, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {4, 4}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {2, 2}, "$WeightsInputChannels" -> 64|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {64, 2, 2}, "$StatsDimensions" -> {64}|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {64, 2, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 256, "$InputDimensions" -> {64, 2, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 2, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]6\[Times]6\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]6\[Times]6\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]6\[Times]6\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]6\[Times]6\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]2\[Times]2\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]2\[Times]2\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]2\[Times]2\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]2\[Times]2\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.866970973500717*^9, 3.8669722941967573`*^9, 
  3.866973125015532*^9, 3.866973514591304*^9, 3.866974578226798*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"54d5eedc-34c9-4ea9-89b6-af34cd655f46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deconvolutionBlock", "[", "args___", "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DeconvolutionLayer", "[", "args", "]"}], ",", 
      RowBox[{"NormalizationLayer", "[", "]"}], ",", 
      RowBox[{"ElementwiseLayer", "[", "\"\<SELU\>\"", "]"}], ",", 
      RowBox[{"DropoutLayer", "[", "0.4", "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"generator", "=", 
  RowBox[{"NetFlatten", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"128", ",", "5", ",", "5"}], "}"}], ",", 
       RowBox[{"NormalizationLayer", "[", "]"}], ",", 
       RowBox[{"ElementwiseLayer", "[", "\"\<SELU\>\"", "]"}], ",", 
       RowBox[{"DropoutLayer", "[", "0.4", "]"}], ",", "\n", "\t", 
       RowBox[{"deconvolutionBlock", "[", 
        RowBox[{"128", ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4"}], "}"}], ",", 
         RowBox[{"\"\<Stride\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"deconvolutionBlock", "[", 
        RowBox[{"128", ",", 
         RowBox[{"{", 
          RowBox[{"4", ",", "4"}], "}"}], ",", 
         RowBox[{"\"\<Stride\>\"", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"1", ",", 
         RowBox[{"{", 
          RowBox[{"12", ",", "12"}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}]}], "\n", "}"}], ",", 
     " ", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "100"}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"1", ",", "15", ",", "15"}], "}"}]}]}], "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.866971000899118*^9, 3.8669710213278008`*^9}, {
  3.866971109453573*^9, 3.86697111863874*^9}, {3.866971156479031*^9, 
  3.8669711582403316`*^9}, {3.8669713390464487`*^9, 3.866971340419901*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"548f7711-430b-40d7-aa9b-b59d787cda49"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3200, 100}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3200}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {128, 5, 5}, "$OutputSize" -> 3200, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {128, 5, 5}, 
                    "$StatsDimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {128, 5, 5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 4, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {4, 4}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {5, 5}, 
                    "$OutputSize" -> {12, 12}, "$WeightsOutputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 5, 5}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {128, 12, 12}, 
                    "$StatsDimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {128, 12, 12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Deconvolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 4, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {4, 4}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "ChannelGroups" -> 1, "Dilation" -> {1, 1}, 
                    "$InputChannels" -> 128, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {26, 26}, "$WeightsOutputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Complement"], 
                    "Epsilon" -> 0.001, "Unbiased" -> False, 
                    "$Dimensions" -> {128, 26, 26}, 
                    "$StatsDimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], 
                    "$Dimensions" -> {128, 26, 26}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.4, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 128, 12, 12}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1, "KernelSize" -> {12, 12}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {26, 26}, 
                    "$OutputSize" -> {15, 15}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 26, 26}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {1, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]5\[Times]5\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]5\[Times]5\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]5\[Times]5\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]5\[Times]5\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]12\[Times]12\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]12\[Times]12\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]12\[Times]12\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]12\[Times]12\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]26\[Times]26\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]26\[Times]26\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]26\[Times]26\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]26\[Times]26\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.866972305673197*^9, 3.866973511446726*^9, 
  3.866974580883299*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"2644b411-ea54-4607-a882-53df98553973"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"getRandomLatent", "[", "batchSize_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"NumericArray", "[", 
      RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], ",", 
    RowBox[{"RandomVariate", "[", 
     RowBox[{
      RowBox[{"NormalDistribution", "[", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"batchSize", ",", "100"}], "}"}]}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"datagen", "=", 
   RowBox[{"Function", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Sample\>\"", "\[Rule]", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"dataset", ",", "#BatchSize"}], "]"}]}], ",", 
      RowBox[{"\"\<Latent\>\"", "\[Rule]", 
       RowBox[{"getRandomLatent", "[", "#BatchSize", "]"}]}]}], "|>"}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.866971420029491*^9, 3.866971421353051*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"ba7e5d1c-6afa-4760-b072-e528bfe85cb9"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.866972550026548*^9, 
  3.866972550876729*^9}},ExpressionUUID->"99f2299c-4c2d-4854-9a9e-\
340ce4d6282a"],

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
    RowBox[{"NetGANOperator", "[", 
     RowBox[{"{", 
      RowBox[{"generator", ",", "discriminator"}], "}"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"datagen", ",", 
      RowBox[{"\"\<RoundLength\>\"", "\[Rule]", 
       RowBox[{"Length", "[", "dataset", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TrainingUpdateSchedule", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Discriminator\>\"", ",", "\"\<Generator\>\""}], "}"}]}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "10"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.866971447938696*^9, 3.866971465255131*^9}, {
   3.8669715963871183`*^9, 3.866971640994725*^9}, {3.8669723588745527`*^9, 
   3.866972361148314*^9}, 3.866972521629677*^9, {3.8669725521232033`*^9, 
   3.8669725627271137`*^9}, {3.866973112449342*^9, 3.866973118100265*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"56897ab4-5a13-40f8-89ca-c91dfcb799dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConvertBack", "[", "array_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Switch", "[", "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{"Round", "[", 
        RowBox[{"Normal", "[", "array", "]"}], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866977150083675*^9, 3.866977152959085*^9}, {
  3.866977184032461*^9, 3.8669772269400263`*^9}, {3.866977274827889*^9, 
  3.866977277697186*^9}},ExpressionUUID->"933c5349-d088-49ee-a13b-\
2ca534188c2b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Abs", "[", 
    RowBox[{"Round", "[", 
     RowBox[{"Normal", "[", 
      RowBox[{
       RowBox[{"NetInitialize", "[", "generator", "]"}], "[", 
       RowBox[{"getRandomLatent", "[", "1", "]"}], "]"}], "]"}], "]"}], "]"}],
    "[", 
   RowBox[{"[", "1", "]"}], "]"}], "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8669770737148647`*^9, 3.866977126199279*^9}, {
  3.866977158658094*^9, 3.866977178545827*^9}, {3.8671475996931353`*^9, 
  3.867147600347589*^9}},ExpressionUUID->"1f3601c7-98da-49bb-a6ef-\
70c848cdd3ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0",
      ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0",
      ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0",
      ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1",
      ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8669771628988123`*^9, 3.8669771791581707`*^9}},
 CellLabel->"Out[13]=",ExpressionUUID->"6df4b00c-c062-444b-9cdc-a12f0e87b0b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8669804544192038`*^9, 3.866980499638179*^9}, 
   3.866980635924971*^9},ExpressionUUID->"10556794-5ae2-489c-8210-\
b47486888a2d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LearnedDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
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
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                 
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.2506326268721977`}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.5026726898055591`}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 
                   1.1755085189629118`}}]}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "15", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    Row[{"NumericalVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"NumericalVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}]}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Multinormal\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GraphicsComplexBox[CompressedData["
1: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
rS7+VeI9p5znc0yfcfllPjpo50WP+k75SmexrXr1l/E7dnal2FleWtNzzQLk
uxdlKmHdn7DoSOPFg06u8eIEzS9q0PyiB60vW9L6YleYi15h0Cv+fGvGLI/3
/xFd258tX/u7RBEfterQ8Jv54j/3SzZqGXpXNCT+5TniX7xO8pHvkXzEWJKf
uEbyE21KROzduztHHn0W2K1bj+fiPUPu9Qw9bJ/sf7ycV4rMDCw9Yu5P+SKf
9Cc3kv7EXdKv3E761SJJ/1oc6V+9/3ZPqdrFs6z597rR5H9ysaN1glxRzPb+
dHqu/5jF53PlUf/Wpf3W3VHn4Jize5c8/N7b9n5bJua+nbrkmdyycsSbsYXP
1f7vXuLq7MSzhWJlgzcrepVLV3nGBYo/8simX4N6/5Sg8tEWVbeXPeCXLooP
WX0gPDRZzvyk7a1WU4tpA+JqH55dKUU+jY15WDbc/j7zinvSqxtuXpB3P+n+
86vVcoSjRlqBb8srcizFa/5+Uls7ftjCAW9dkQ6K97Z3PsN/uDitZccz4j7N
J9Oru+YTI2l/sZ3rqxVzrS/q1Eva1TvXjGuziX69N9EvWhN/0ov4E1fCz7RP
8Dhne284j/xFxdtetL+JZ8S/yhc9Sb4yjOSr9oue5K+i8HWfDi32Jag8oebc
wU2HlXHa6stNxr959+GSZyI/t3RCSskc890l6VudT4dRvqDiMORp2It5bqT8
QMSQ/ai8KDdsfPGPWxTY6s/fhrdtc8/XoYWQParfe9D+ofIS5EPnq8YENSvv
0B/QfmWrw1yoV33qquov5Niarv3Pdu82K+rbV5ctfSYb0P6p8tlxaROOBZd9
Yjs/n6P9Vpas51a2zX/d1Pu7u7R/q/d3yLNDRhwJOrrxgfkOgPZvuZD0rc5X
/ShfsL07jW+2L8/LP17t62Movkh97R6fNUMy1PcZu1IuTayeZTsXDI4f2fLe
zOuqftGU8g1Z6vdGG+a9br7vAx/ryN5lwJrAH4bMNu+11//WN2Zodg5/z6dv
JP8R9yt5h33slmu7Zw2g9ZUcp1C8Fr1oftt7vmvEr3iN6LO955tP8hTHiH8l
p1dJH7b3e81PbD4Ydzld1WEcW7r/9eNS873eN5SPil8oXtneJUwvPym3RG3z
XrXg8umByyo4tEiK//Ijiv8yaOA7k/9TM03umjO4wqejEuSjlIx2PWo7xfSM
o/4LFz8Txv6qRdH+KipucV/zdZmX8fB5SNBrrziwj+toq1K/DKd+PYPyAKla
ml9OpfnlZ7S+mEnrCyM/EUZ+ItIonxENKJ8RRr6jLaJ8Rxj5kzDyJ61V3Xk/
NQq5IX9s/8WldoMc+qNti47P2blFRnxepn7qeTd9a07retfanZETyF/1r50D
J23o/kTUDhy+039gnly0P/Gd5VqG6OR36LZblVzZZnKjd5ofd4qUC5/nl76Q
Kz+aOjSj8OQNuWjlitv7XzyTG97zrXfgwCa5RtbuPyUvQw71Pnny+KdnpRGP
5O+F47v9feXleXvZqrAxWc9kXVe+/lg0olZ+0/hSdNUjDm2pqLLzccITWbDw
33h+R3i44vod+XqNHM9NJVJFX1f8vCq/7f1bpfahKaL5ugbOo8GxskRedO6g
+EzRtm3JyiU635GtZvXXS1bw1HYs/fNAzPIE+fB+386Z0lsPnz2n9i73jbK9
59gwv+svZIfVy6eP6b9GXPPdkZX39cv88np8YsPqkWLYoOgj428+kr+/9n67
Y/tPiyvUL5KpX35B/eI49ct2NJ/osMY1H9bTetJ6og3Ro68lekQpole2JHpF
ZeJPfkz8iYnEn2xE/AkvQw5u1IoJJC99PslLvG/IsZ4h1z9I3vIFyVu8QvoR
q0k/4gvSj/jA2C8akz7FQtKnCCH9yw6kf9GS9C8fkP7Ff8le5DtkL8Kf7EsY
9qVtIftS+0FNskexgexR3b/v8jt1ZvrLc9qXwQHFPtxl/j1Va2eFun/W9NbG
hN1o3jPUfI8XfrvO0m6bzDpt77Z5K9emm/X/IMLyXcrPpZGfy+ydfuWn5MTI
Ny428R7RLVWGJhfPzNX3y+db3p85clSKimMraX65dXXVpnu/iBDH23n0Gdol
WW6n8SKHxqt49wvRLzbQ+UFWpPODaJpxICJmV4p8MChscNsFT8VgOj/oO/bS
+bEN8af3If5ELcqf5TLKn0WrNa715VFaXyQR/aIy0S8a0PziMc2vzplRxnlm
Q0T/c8WmPZIpraeXC99k1smQv3/Wd1Loo0mPRLa27s/5G8x3jsuNfHxEYK+c
9IqpZn34zke1vBdnyW3N138T89MNMUF6Z6e+laX2RdQtBlYfOe7U8dviRv/h
O/qUfCbnjmlRf+ScJBWvvzTy6113k76sPShT1aEjvn071tMvTa6eOixj/egH
qs55alGJMN+Ah2o/CvykY2hvab5/iy/7drPZj8z3bv3dYurc/N28JwoVNVMu
NjXfv5V/2njvlJaZap9YvipucY1xWXJTv+J+V3bnq3E36Twgg439+nKdCUvG
pefLqYfdp272TZDy0jdjPcaYdZ24H6u0WZOcJyvcfryw6cdSDvrjzYDGDc13
5sZ5R2D/BH3Tsh582KOdab8LXq0evCrZvE9aGRfVbtst8+964hofv7wjwLzf
OfZx1LTHEYXCp0bJvUP35coPPus1oOUPDn3t4TJBXdxzZLjz12/2b3HoqWe/
C55RJ0M+6LH758zrDn3HvaV9AkLS5aSW8ZfGxjv0ASNX3fV3e2DELYd+s9v9
sUPPJcumPZtXqbTXoe5Xj9B6cubiXaW2Oh16ud+zNp5pYb4nu0H06SPpvCuM
864eUuFqQVRrXfTO7rc29OuX498KWTQpME4cjAktfuinQpkcNSDvwqCHclOn
yq8fqpgpv4r7vEXr+PvyzGuTGrRvkqnq5+EkD5keXnfK6E7PZfk7h3/8I858
H7aQ5CclnceFcR6XTVvvjN+Yr4uMG5OGduqQITfVXHn8je/ixMom8aVy7jjl
kP4TO5WqnC8vBffx9CmXKvtF7/ZqXC1fVg8sP6V9Toqyi+9IX/LvF5+4D2n7
SNb22JW/7vA9Gfi8YqtffRNl7toSr94vkypLzi3TIqFx4svz4JO0bq+lynDX
Ovmyn5HPGfah7Ofi8sshvbd52d7z+u/sU/DPqShh2Juyp0lUnxAXqD4hrpH9
iaRbLvsTxnqij5G/dSX6RA7RJ0oQfeII0ScM+1d2adi7GEn2LkaSfEQ0yUcY
8hHVSD5iJ8nT4NMp0kg/wtCP8t8Q8jcxdnv40KjIHBnifHe+x0fm+zDDP8Uq
qteIFVSvEV/fnFgQFpQkXhRu+HNTg0xxg+xFGPYixpK9CMNeVHwOIf8Xw+vH
H1wyPlVO3rFsa9+B+eI82Z807E8Y9qwZ9qz2JyOeaBep3iS8qd6k3bmx/M3l
R++KivXvnfl+lUPrQf4jDP/RbpH/CMN/1L2uEa+0QKpniW1Uz9JKPvy0S8WZ
/4gHb2/qX+6aQ7tL/ioMf9V2kr8Kw1/VOc6Ih5pRLxNGvUzruXlivx5nnov1
Wuobo172Oyg+iMYUH7Q1FB+EER/U+wrU0z6j76XxvapDo/5WnuiVD4ledV+H
ep16T2bU217fvH5ibL9cOX1aYPIe3zQ5e2Wt+I2+5vsx3Nft2PPf0i/Wpal7
sLdzvR5WuJQojfqtqmPfGv205a1Sebb/twb1uPnGuRvtafJX0ZD8Vayn/VEk
0/5ovh+j9USb7A4l9ok8834wOmbi2CN/y5Cy0/ZMn+RU9w/bwn6aHXw7TZ3D
uxr1vxmOjoff1cz3k9s9fBrFV3OKmXReVestWHynct3bz0Rxqs8Joz6nztWo
F1ZddtJ332nzfVj0vGZXDxwuEOfo/Kzu8WN7tyvzUWcH6omaUU8Uj8leZSWy
V/XeC/XWBu2L/+VR55ycc3rBqEMVHfo2qleJZ1SvkgPJf8QU8h+VLxjnD5lc
6ZuWHT9/oN5N/LI7KePrZ2mi7dW6c8Jbv5DTyH9lLvmvqucb5xk5LPSvqjun
n5X7P/aOfvjyPN+O6mniMNXT5CiKFyKU4oWqa2/OPf5p8UaZsso72roPosz3
XhHjFzQaHZcv3ghou7Hz0gxVtygzodxPvvvT5ZmY+DXzdpjvu7ZR/iHWU/6h
6g9+Rvzf1KpXwNWq5vuua5TfiEWU38gIymds77v6Lqy+Zuao+3Iv5U9iH+VP
suacVyo/2pJt3q/OTGg9eVmuCK+S9/TywuOKvwKj/lz/VDGH+xv291uRl//T
O6XiBfkuzafubQdTfifvUH4ngimfs72L7kX0mX9Pa8TzrcSvetfRh/ZPmU77
p/I71LcP0v4ue9H+ru5ZUN8+RPaq6j0lBtUYElbj5X5n1HeKOcPqtC93S3T4
7v6ZHh0L5TbyF2n4i2zYoPuUit9nitLJUb0vPs6W6VEufxTLyB9lh2GHF5y4
kSZPu8cmzm0XL0uXaHPdc0Sa3JhyqdWS37bJOr27ZQy86qmvaT83af7J6yKU
5C3HkbxFvaGHan7S6p5MfHzs1okj8eJpXptqt7p76B0rdqywelaS6P5Zeq/q
m931Bl+fDpq/6KEY9a3P8cddr8vh2xMqDp1+V4QMnH4v+LqbHuP/9/ddF6SJ
X8n+ZCWyP9GG7Fv8QfYtjHgoZlA8FHvIX6RG/iKaufaNl+efreOaNRqeJXzI
P8Us8k/tYAttdWFTD+1ej6Yb42sViCjCehJh6U/8aluIX/kqyUNUIXkIQ17i
L5KXKEn60Ix6m+hG/GofEL+yJslHpJJ85GOSj9aN5KPspLJXcNO2n5nvBmc2
qd92SmCqKEf6le1Iv2IJyUu7RvKSQSRPMZLkKRuTvmVJ0rf4P/LWkQQ=
                "], {{{
                   EdgeForm[], 
                   GrayLevel[0.9], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmGmMV+UVxu/933tZyiJiZUehFGQbVGSEGQZhbJqmNjEpDSYdPyE0qSRt
00JNKUstSVMWAVNIBo2gFotgl4TKUqB8UCgIdBhGB2ZAZBGwAlqs1bYOI+3z
y3n+HT6cnPd977uc9yzPOe8d+tgPpn+/lCRJU5okmfi7Ivq3ivZqoJPGV+dJ
0svfGL8quijqKZqgyXWat0ftb4rPFe1Tu08W44eT2Pc2UW/v3dv7FKLbRV8U
5ebMOyc6hkyiD0Xvi94UXbAMyNJZ1JdzRBO16bd0yP3ifcUfzeL8X0j28eJ/
ToLf53ZlKdrI3mS52Z+1E32XOu9Dm32nZzEXzlmvq/0l8VmiXWrPy+Ib48PE
Z2fxfVEac15Jgs92u5tooGiAqJPvgS6+4LH+1vFg65k7DxHdKerh8UGiVtEb
okOi7h5j35MeQ/9jRTWiyaIx5tWmh0RfF523rbH5YfE1olrRCd19kr6PEo32
mirRKe99RPS2+V9Fp80bRGdER0WNonc8Rv+sx7BxF1E/27Kr793PNtlnu78n
+ouoOQndT7etW9Q/6PufEB1w/7jn06/QHV7zWT/VmqfUH5uGvfBVzkEf37Au
sN1XbSO+z7NN0UOLdTE8DV/ZbZ3wDf0c0fhWtdemocM/lEKPtxQx3rMIn+pr
v2I/1la53er9h9l3tiRhkxbPwZ59HFN97ePI0L2Is7oVob/GUujwWCnaI9Gd
AuxHah8XP6l1BP2xPGLrnGPtBfWrNf6i+C7NeUDtjWoPLyJudmisVfQ99tX4
n0SPqL0rj7OaRHdp3m7NeVDtlzVeSuMbMpxU/wm1T+Uh1zHP76r+05r3oPgB
8Zc0vlp8kvgC0bg04maY7ULcEs/43NA0xtFVrvW/VP86sjk+ic3P8vCBneqP
U/tVzfmOeIVoq9qP5eFT8+wPgNHPNT5N9/6u2tfUflz8lL7drfYIjb+jdqXa
d6l9Rd/maNnDeWDR+lL4zEp936D25/i/vs1X+7T4ijTa+GGV+CLRPWnQQrWv
E495tLfonOUa/7HaY8TvFS1Wu11zLuTRfkVzbuRx1m/VzovQYSbeWeOrtGaq
+H7x50shF3b+WSn2G5WGryPzTLWXis9Pwrbt6FPULFovmiE6L/qdaI5oXRLz
l4leFtUnMXZJ3xawr2izx54BK+incU6V5HtS/EYWsXrCsVtnbMbPy2csuwlr
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
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtMz3EYxn+H798cUtxyYW0isdnQig7SVuPCjYtuzIUchg1jk1OJblBN
ttpqyKGjiC1n4cJhTDYtQnRQiQ0XNlekg8+zt4vnv+d53+/v/Z7e5/uPzd29
blfged4O4MB2fn75nncAfiP0vC3om+iH6M3wXNCCvoLeCL8Pcijwj9h++AWw
HD1CvgS+EpwiNw+dDq8F6eRj0QXUz0SfJp+MXgUfBlrQY/Rf+CWwAj2KLoU3
gkz0fHQh31ejkzU/uhi+0NnassitiXheO3on+QfEfHhRaHN1EUuIWA3V6kDH
o0cZUw1PAmfh9c7WnoFugA+CgsD2eB7exPf5gcWU6wAJ7GcP+i18CBQGtoeL
ztaoteqbAfh7rZnx+9Bdzs5MZ3cE/QX+DuwNrKZqH2a+xfBb4DI8h1g3vBaU
odeiO+E54Ac6RB+HPwUj8H7VCOzMzjnbs/YekO9j/HpiA/AmUIH+Dfo1F4jT
etFx8CLwWmcd2lq1R+31bmh3pzmXou+h08ilghr0BvCV3DVQRW4q85fDr5OP
goegDv6cWAZjA3SZbzEHnxaxsW3EsslPR1fAW4jFwHuIHYSXEGsI7c5190nw
bPLRERv7ivwgsWXOelFnmqizBIt8q9EL/+DsboqJ1TN+E/q7bx6oRm9F//TN
IzXoP2AI3gziyV1Fn+f7C2Ac/RI97JvHtjmLKfcMneasx9Xr+mYM3sb4Ed88
dg99JzQvJqLnRsxz8p78mwevI3/StzVpbY3oUvghxvepl53dre5UdzvHWe9o
Ds21wNndaA/ai3pMvaaeUe/oDnWX8vB9cnXOvCFPtqIrQ9u7eki9JA/JS/L0
R3KdIFb1wAtyY+ij8FawBD2FPU3yrSfUGxFiJ3zzpLwpT2dN1Fjk7E6TJnoy
QJ9xdjbyfBfxHt2xbz2oXpxJvgrdDr6hf4bmFd2J7uYzSIE/0pun/omYN9SD
6kX1gHpBnuykVnlo3pAH5cVm9G3f5uxWPWdnr55Sb50Lbe/ygLyQj0707Rt9
qzdJb5POYAA9Do7Bn4AUxkeDSnkPrHbW4+r1PJ2v3svQvKkeVa9+cpbTG6O3
JtXZW6CeUG+opmrrjGtDq6naOqMZzjwir2jOGGdnorPRmnvhs/Re+vbm6O3R
mepsFZvtzKPyqjwa5eyOddfak/5w5HF5Xf8Bk515QF7Qf8Yk+Btnb6l6Wr39
H65O6iM=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.78], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNmX3Y1uMZx+/7d113rKeimfQUentU2o6DktpRVKiEimMdh2qrpPQiHbNE
Ty/GRuUY5m0JlaaXR1JJWN6lbYaUTWGKSEzJFmbzWmvfT+fXsf1x3df5u37X
73o5r/P8nt/zuluNuvRHPy1KpdJT+kmqN6quknCi5J3lUmmFyo2Sj1L7e37e
nkulqXp+U/UslfvVNlv1GaofVTlE5QONcY7qxmqfrfpJlXYqffXcT+NVVUql
3pJ7S56lvqPLMQ5zzdHz9ap/ovf9VQ9DVnlf7VXqs171YpWn1TZWfe6T3Fry
DNV3qsyTPFzt3SV3U1mttTbQd8PVPlDlLcl1KldK/lzvLlZZIXlAKfow3216
/4JKD5VJKheoT3PVy1Q/r7qbyhbN8TM9v6L6C5X1tKs+WeUpyZ1VL9b75ySf
pHJ1Ofq0Uemudw9rngMp9MW6eqqcqvbjaFc9Vu/GpFjX5iJ0capKl3KMX1I5
RWWtSlaZrvKsSkuVXvq+q7ok6flCjTFSpU5jnJTjLB7V806V0yU3Up8WeteH
sVX6qc8Q1Y1Uz9X7jSr9VN7Q8+Xq97rqwdiI5JXqN1/vNqmcjx2pPUl+h/cq
tZJXqX2l5BNUX5livNs9Zjs9N9c4nfTuFclHq22yxl+gerPKIJXROc5nkd5f
zr6L6HdFDvnyHOPVK8I+5uu5ver92Fcl2h/Ut1eprbXKA/psseptKiNZt/pN
V9tv1GdpOewD2xig9vGqm+WwhVttD0dpzC2qP1T/IapfUxmsslDldZUf+zxO
K8W+ehdxThXsSGWrygiVa3PY4TWqN6hPtUrHUujnkCL29AnnU8R6T6jE+m7R
vN+rhH7669tF5VjPWH3bpohzOFPl7hR6Q39X6v2D6EbPL6rPCyoP6fmsSrR/
X31mlqON8+qEztA5st7VqP0/KXwPHY9T20Ol8Ok1qkeofbjKPfrueNXHYGtq
38Ba1adFDl/FZ5em8AX8YDXr0fMRkj9KcSb/UBlvvf5dZShzF3GmzNlVdVnl
ZMlnF4EhyPjDBuvwao31Q/w1h+3jA/jsVPtCN9vfBSl0xbpZf2fJc1Vmq1yn
8onaL1O/GzwH83bxGq5I4df3FjE+/jXFeqCdeoTlRUXIzHOu6stUBqrcDv55
PvAFeY7KJPdZXIp+PC+RPD0FLvQoxT5Yf99SzD3SMngBboApw1Ksk7VTT/F6
tlnH2H9bte0BB8sx9nTjzjTLPUr/ewajbpROj1X/RaqvV2km+W7VN6gcLfm3
OfY+zPoc5zWDYcQI8K6X2nuprvVZgFmTvF/2VOtzYU9Tvc89tk/sdHs54gVx
48Mi/JUzGu49Mjc6naJSq7JDz6eq7/GViHHTvK8OWutq7EB1k3L05wxqPS9r
uwXdskfj8Fhj8jvoTPJEyeNz2DC2/IMcPoVvNdJzwxQ4Uqv2Qt88rrq+2nYU
4RuFnq9V3bcSYzLeDPBI7Y3V/qcUuLLU2PKK485rObAYTN6WIx4Tl99R3TJH
fzDjOn3fX/JtansvxRl8IHl+ipjRVX2e0/OF+vbfqn+eIsYskfy2/ai9+ryb
4sw6VAK/xlm/4BSYgO3NS6HPLpXwL84QPEqOw+DTGNvRQMfbAZYbOt4cXgm9
TlC5BN2meEamHm+dcw7jfI5bipA5n+H+ZphjeX/Pgb4ZEx03dYxpUokYM7gU
+An3OVAK/sMYjMVch+WIlcTMb/T9pUVgWU89N1NpShzLwXngPsQD5mbNZZ/v
n3OMC06BUfVz8IxDtYav9c2tGvMzfKgSMWhviviw3XZO7LramNnM8QLeU0/9
75P8gPqfpfrMImIPtjLD629kjMUXiMlXOQ6iE/RB/FtQijgx3+dVUwRX61OE
zFnW+AzPdGzra7xlzr6e9wzVLYvAyVtzcK9bcthOH3/b1+vsZftgTM6gnOLb
rh6zn/vgQ9gaNkfcmFaO2EQsXeR4emcR3Aa+iQ2yz4WlsEWe8fVV3j97bwrx
LYJTfKx6r7F+YjnaFjhWcc6b9e2SFJytu/nFbMejg9hVDtzu4pgE3qLHiR7n
10VwSPq1LYc9wJ3weWRshDXNdPy9owjfBA8/z7Hfb1Jw8KZe8xTHDfBqhdcN
f37CWLYxBb7PNgbCKeqZV0D2wXC4ZocUuF0j+V59e5rkOtUdPe8+vX/MfvFW
Co45yZhNHKQ/cfFx91ms725W203maWBnR+Nn60rId6rPPTnmfD+HLuCT7J33
J7o/tlVtfsga4YptJLdP4QPIj+XAUbjGX1LE0Wd91m2t5yPhISl4DHGGtS+x
DTc3V+mYYm5sZmGOsXcaF08qwt7OddyG8wxQ2znmzdhsC9s8umluezjbfeAo
azTWQHhVjraz/S3ncIz1v9XjgKW9y9Ef/wGDz/D4rJX+xNYnUuh+qcb8qoj9
LS0FfoMz4M3+IuyU/Z6XYi/YFfwOnsdeSuZ4nWyHrY0z6+1r+BzfdbIeFuTA
nh05+vGe8a7LgVeDc+D/7Y4LhzunILcgTo+2rdYZ24jfYD/fgAfw3ZHGq2vM
k1uRG+XgKf90fKcPPI14ChcHb8FeOCM54+wiMALevdDxEzxs4jZ8CF6EHX/L
79A1eibmIcMlZ6bAti45uEg/7+tpPY+T/CkxNsX47OUCY9K3mIVMfJlVBK9l
rWtzxGXiM9g3yHvnvGkfbpzsZT/Ax9+zn7N/9NDW+fdO63NTEfyGmDgihy23
qUQ+TF68QN99mQLnjjf32WWsxFaYi9h8wDZEG3k4+fgd+u7mFLHifMfPQd5X
K3wqRfxjb4N9FsRX+lXnOGfOHv0M8zlxRuQ38FHOfI+5ErkXnBRux9zodal1
28B3CNwltM+xF/aEXsBc9HCvnteBV3q/vIj4SP7W2Of/LUe4xGt5zTbDmnaX
g78RC+s5HycvJ8azV84qa19LNGahehmYqLZTcuSHzINvNtC7VepTX/URlciT
m+TIlef6rMnh5luPdRrnGbX9NYe9LLJuj7Bu8AXyvAVuH+RvGaex7Zu9Herc
nzuAZj4TbHC31rLLPB+/GW/fmWq+jV3/ooj7BPLVw8gN9dywEjGGXAVMm+Kc
Ao79Zoq8fqW5JLgKtuCbc/0NsYo4QByEO8IDrkmRW40qwi576Lk6Bcci5sNR
sUXm6GF9wt3h8L80xuN3rItcm3b8Ey4Fp6rKkW+zD/CSOyYweFWOvbIGeAh9
GZ935CUHMVfyVzn4xNeq/5Ajdv9e9eQicG6d8bmB+5P/kQeSL1Avs0xs4Y6D
WAKu1xnbq93eybFjiTkPeeI9jsucVVv7+R7L8LltRcSJKs9V52+xO+ycfTMO
d0/keuSdiywXttuy6nbGDu7wwI/nisCYA7b5FSmwAwx5JMX6tzpm9bK+enqd
cEjWBp98t4h4TN9t7j/BHJ5+3KUstz+SzxGjidXwavgP8edRnwVzoKf21iH6
5H6BM4XvbzHWwfHh/vB82pC5K+MuaovlKvPtPvbBR4rww6Ny+BE+CseADzU3
B+EOa5XHPM65xkGsTKEX6o6W16juoH5zuI9KcWf6qxycgj6MN8U5ILngkBT3
aNw/PpuCT6xWe3PnFEOM5zUpMH2d+f0K8jjn2jc45wB78fF3nY+Tl5OjEJvB
FHTGvuAY2Dt+RbxrVYlzb6n6u5XQSWPVXXP4FHnzsTmwqKnam6k8oz7VlZiH
c6l2jKWdfpusK3R/jM+LeckdwEOwm3sFcnByQTAAzAa76xszv1OJ+1vwB0wg
PyB/BHsfMH9ameP9ao/Z1HpDD1W2P3wNe8QuiVvoekIR92LwU57BJfKhcUXw
nrdz4Pky87xa+/wE94dPbsjR/0Xn+mOKWP/zer5I8qv6dnQRMvjG+9Huw3jk
6WDIKLfTB9tZ6Bh1o98d5ErGSb4lv1lQxL0bfIw8Abz9Vw5e9rsU7+e5z12W
2Q/1fMvfvmN/YPNN1gPcnlwFDjs0hY3ybqL1xt735Rgn5bifJDYRo3aYE3If
D//n3uRu7/cuzzvU72gnr4Bbkt90TuEXcAfyYPqwLua8xOf1cg759RQ500Sv
B/+oso9gey8XEZO4dyWeneKYcm0RcWWa+4Jd2OkmY0iNZb7FbsFh4g53ii8V
sbeaStydrlXf3TnG3JVjf7XWJ5hGH3CNHBFdw7+/LIKbExO5y+Ielr74zwaP
D78jXsJl9jvPrKh+NYcfwxG475ls+xlaBNeEz/a37cBttuZ4Dw9633nW/Sm+
43vGGufvZhmf8RH40FTvhfPiTGb5XMAT7p3Ih6kv9Tj4xmRjDYV2MPyNFDqY
l2Ods73WrSn2xT09vJl1rM9xl1Jt3Jtnm0F35C/c/6JDap4P/nfi9ofdzjPj
cm7kt8Qw9E1/ch/+6/miCF6HH39umyd+7TY+DDCPh3d+VETchX9yN/Ch/fEL
f4tNEnu5syD+Ep8Za4Zj2b4i4tlcnz3nzv56eI89cvw31NM8rafbqy2DZ/B/
OALc5knr8akc/K+psY58lP2hH3JA5qrznF/Z5r62XOfz+cZnRBvvyP32uZ3z
JU7v+j+d7PG+9lgvcBJwl3sisBf/JQcj7jewP55g3ZN3c0a08Y7cgvuow1Lg
BnUj837WQf+ljheM38ZjHOlxkPd7X/hnxRxvrXlgdjxsaP009PgH+XOKfJ77
zs0p7ib+mMO/8UFyZmJaO8c1cPcTnzv1p0XkG5+6HdzGLvbaTtA5511nm/nY
7cfaJsGVlzTfeNUbc/gcesPvpnitrLOl7QrONcd2zBkz916v57MUvK1FJXI4
Ylit+SyxHU5Lvn6u4xjjYa+MyX9X5BLNK/E/A30Wl6I+z/Ia2xZ2xX+ecGY4
LWuZYxzj7hjev9/Y8owxAP+C24DPxCnGZC1wvor5PLY0wL72nxw64r8F7o+w
kcccf4gZxIsZOe6v+E+PPGOOdYIuuRcldmNjNbY9dNnSdoV/wavgSt2MM3AJ
/I/cH27MHcYi49l51glrZoxWHofYQoyA21TbRxnnoRSx8OIc2ADGgC2cOXjE
uR/kgOaB9+WIT8t9VzbUcfa0HLo+XfXfUvDUI/2fBbl4T8fTdV4n8WuL17Pd
nIv/YPHNbl4bGN7ZvkkbvOp0r7+bZc4A3CO/JtdGxt8H+z5nZo44mu1r3F1x
RwK3vzBHzjzKfKy756cf/cEvbJw1EEdOtG1wpoN9xsjsHxnbgavCG+HhF+WI
l2Ny5B3ogfuQnb6jW27MHuA1Y8/c8WG7/wXWWLS1
                    "]], 
                    PolygonBox[CompressedData["
1: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
UT1HvUc9Qb1BPUO94+PoWqBv3hL0/yPOcsY=
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.65], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNWFmMVUUQvbe7HzsBRkBAWaOCmQWMAdGgJAOyRALDJoiDmgngh8KgAnGP
MBN0EJBdwUT5U0EBUVDZt+Aag4rRPxMU0AjDMiCgETyHc0j86HTdun2ru6pO
ner3uldVj5kRsiybn2dZxLwCDysx1kIel7JsNuaOhSxrhNED+sXQRcwJ4zW8
m4zvfsaoxBibJI/BPBrjJ8gVmN/OJT+IUYVNdgbZ3Yt5H8aLkIdB3xRyy1xz
E4zR0DfNJVdA7o81d2IMhO552B0P3SY87w+yRfvj8DweoxPPFPRck0lHeRnk
UuhLgvQcxZBrMb+K+X6sqQtaf7/tjMJe0/F+CZ6LvBfPPDTq3DzztW9o/0bE
ag+eu+O7RtDtCNpjXZAPY7BmFN8HyU9g3UXYOIB3qzFfoh/QX8ilHwu5Gdb+
ZZnzOcu0R5l2aO8wRjnPBl2D7TTLZYvre2N9E4yzuWJ72HG+nEvHnPbw2Wjn
kr+lHeb8stcUw0bCqMfzvxhnMBZn2rPe69fBryaQd2FdiLI7CPqemG/BeAjy
I8QH5rfwvhClH5XpXD/6DGXQN47aowTzzdA/nGn93KDn6T4Hz9A6KP5VuX2F
PCfXurnGUnfkqD3kV7D/dUF5fQxrpuayRTvb8G4i9Dswfw87naF/A/KaqDPz
7PSJvjFetxf07So8l2MMIubw/FmQ/KkxwPWMA3FR7jVLk+KyDHM/6OYFxW53
1MxYEovTcmF2YEHyKbzvgne7sf6GgnA20Xjug+d3sOampJm+Ebft7Cvlo0kx
/iAqT9zrOHRXvH6xc0N/v4T+aei65MI59xkcVcvPmBeeTooxc8M8fgT5bsib
MQ+IkofnynPBuWQcWCezsP7DqFpb6G+IMdZ5U8zL8VyG0dy2hpsrWIPkiPVB
/MAYz4yqT9bmDp+z2HXfyDIxscF47lIQF/VIOtOQKIzRBuUK4zCa98hn+805
nzqPPD/PMdTrr/k8JdM+xDC/LcV8q/E/G/o8KM6sG/o72vXd31zH8xD3XN8D
5zyI54/pnzmQXHg99Nug7wj5HObzGF1z4XKdeYYYJBaJt6OOX5uC+LjKPDUX
37fE/FLS2m1eT17fHsTz1NPnqZmeKdP3NZAP5Tr/eu87yPXYCuOFTBzcyRjm
mveDfCTHNDNvTA7ibmL4dBTOiXfmtr/zey95xRx2R5LcL2mf1q79a7h/IAk/
vaFfam7pbt5bDf0izLOS8sM8sc6ZN+KMuduCeav9Jf7IJ0sgty1I3x7f/mLe
YM0Q48Q940v/vszlIzFY5XohBksct0FJcWoMey2C4j/FtUMMMceMQal7FnsC
+wH5nHFivlmPDT4ba5W5auF8cc/Bzi+fm9sX7sd9N9jXFt633Gt5tueScPko
5k+CYjHcNrbYDvdscD2d93mWm1PILXPZt5N0Z5LuEOTN9zCvdPwrk2qCtdEr
KBdlrhfWXJn5v5drgbXJudR1wbiTs2iL9XTF3MX3JbZJ/iAOiAH2BfZC5rG3
9cwtubev+wo5dafxz/MtMl4aovizG+J3DPPnQbg5ErTPjEz47Gs+pa2+5gTO
/ayf5/34/oz5obP7MM83x3xQbA5knJv4zMT1L8Yb9yYn8Nve5kiuGYnnanPg
yzh/W+jnY27jGmE9DnHdEUvksiLrKbeyL+wX7d0zyP+fuQfQ31+D+Hqj+b4m
qk7Xu64ZjyNeU+VvaPO2JDtbHEvuy370e1JcjiXFkPXNuNGPmfaFHEs96/dA
UP+mDfJ0tbFBXVv7UmOfa5Pi1c57TXOs1mbirM3GP33lGub79aSY7k7i9Znu
B0Xel/aZ/4PGAM/OfDIWXR0v1uZYY4Nn432Y8WUcJgTdoVlre6Jy8T72+jiJ
sxeQSyBXYN2+KC4ZYj7hHbLCPHZPQXZORt1PeT7usSsJCyeSei57CeuFayu9
L++9debGbkl5qo/ig+bmjNm+EzyVxPfUsfaD+Zh8Sj6bYN445zMSV8RKnTnq
h6i4rE7CzhFzNe/aPAd7A2tuh+vuevNOu4L2GGV/66FfAPmk87PA52dsRgTF
cUOS/IG5ZYx9/zuq756F/l3ff3gP2u7fO39iLi0oTzdCHheUP+auk/tlB8y1
URhdjzUv03ZQz2qX1AvvS+IH4oK1/HtUTZYUVMtl5uoOSbEckWRjsu2QRyvN
pcN8nyH2f4u63xfDzhdJOP4G81eWqSPf837Ge84Kcx/zsDkphlt4T4jqWby3
Xpf022MY5PFBvhOfte4xNT5PV+OZZ5/m87dyDrl+vs+2MSmn/E1UZ1+Xu9Zm
JOHjccyXnIsDSftMtr+3ul7IG/wdcNg1X+cY9kmqxWrX40LfG/lb7UQUvlkT
p3x/6M/fGVH735WEP/pyManWp7p3HIrKwV72K+NmRVJPH/C/OylnckaJY8z4
PJvE3Y8l+cx4E5PfRfWkBnKwsVFe0N21NojTiEXG4ZL9YZ2S976N+s31ZFKP
6Oy+9qHreUmSbrb1fyTZPE4u8b2C9wv+ziGv1SXd0Zjr0c435SLoJwXhmDnf
6edvfO9e4dydMJ98BP2bUblib3/IWH84yS5tXv0Nm/R/wj9Yuz8pv3swL43q
YfyN0td1RH9Xea8u7jOrLO+P+t1bjW+XBb0jt7b0HZh3Yd4tK80zrLGRxktR
QXep1taNcy3zPsy7Dvms2rii/pz3OJ9UY8TzfHPzUPtFPhjvXnbRWPo36k5E
zuQd6eukmBF3f5pb+J9KjXvlpiTflpu7eib1s67Yc3AS19/rOy25nL3mV3/L
fnsa7xbi3YWoPsF+Md0YJN+85vsWc7QP89YkDjxorl1ovu1lfqMv9cYFfRzo
XkMOJ5dMMjYWRfEDOXKN11+9N/qZ/PcfaqYDtQ==
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtlVtsVlUQhc85e34C1SZAKzep0JJIvKX6IsZHpRrUCBQISkJNiGIiFFCp
QY0XarEgkhQEL/iAb2pABMslgFCgXERAQEP0TRPklkhF21JFUb+V5cNq19oz
+/x7Zs/Mrp41v35ekWVZMwhwhT+rWXgX/J2ybDt6CnwqOIxeg74dfod84M1g
IHwQeAN+DZ9ReZb1oseVsqwlbHuFb0+Ht4Gb0WPBSvjToAv/brCPvVvBDvgq
7D3YBoMP0CfBBPj7oAp+CHsN3+9A18Lb+P6e8G/qt99Bf8i3tiT7HgZjsE3C
53v2rwMrsNWjf4DPBL+gh+CzA9+n2D8MW3/0evT96DL0r2C5zq5c4f85+kH2
loG96N7w2RehD8K7QY5uQl/Ffjd6D7wOtKAXg/v41ml8buG3asEZ+Czso/G9
Ab0dPQF9NjkGxXIO3YD9GfAb/Bo4ru9j78a+jm+uRT+MfS22J9EPwZeBIdhX
oNdg/wkMyH2mcdjWh8/WH3RgGxnO1TT2fJV8B7oLfbMSvoS1B+BHwHj0reCF
3GfQWc5jb4EPUA1gu4iein0neij2KtZ2Fb6DKfDhrDVxtt2sjYAvDJ/1X+xN
ipX9rdhmgN3oV0EZ/A/sz4ZzoFw0gp7kO9JdvYVPF/ZLYa6aeQ/eh/3twneq
u70ObCh857p79YB6QTV5F7Z7wUfKHWt98Md0BvR+9E34/5VsUw+pl0axdgA+
RznBdgKMyP2bl1W7oDx3ji7Cz4dz34y+AO/FP+AJvBjuOfXebHwuY1sUtqkG
VAsbwrX4CGsb4Uvxmcz5JqHb0fuT+UTwBfpLxVA457vgY0Bn4R6ZHO5J9aZq
/Gd4TTjWfaCK2KrRewvPAM2CruTa1dpI7PeEz6qYFftn4bOpZlQ7G5N7q4a1
fspV8l32gQX4HkT/mXsGVKDPhXMzkT1nkmtatV3O2mJ4I6hH9+A/LzxzNHsq
sbfCN4X3agZtho8u+W7UE9XwN8O+FWAJ/JBmhHpTM0Wxh2fLTHSnYgnPim3o
Sva/hr6+cE2rtpUj5Uo5VW4Vk2JTTIqtTj3P/9/RL2EbVnLtd6ie0M+Bf3LX
gGphPvpK7ppX7euMOqtqbKzqI7n2fwQzdH+goXDPqHc0YzRr1PPq/UvJs286
a0fhm8A04rmN/+PxfT7ce5php1g7EJ5lmsHfoleFZ3kDe1rR7cmzuPb/2OrC
s0E9pd7STNRs1BvxHT5zw3elmDrRN5Ycu2aEZsWccG6Ug2/QFdi3Fp6JQ7G9
Hr575Vy514zRrFHNq/Y1szS79IbpLVOMilVvmN6yI+FZORv9dfiN01v3KL93
AT48PKv0JuhtUIyKVTWxTbM0fPc6k852LHk2qad2Ylsdrp1G9mzW+xbuPdXo
Fr2NJc/2dtYGw9uSffUG6C14HJ+Pc88YzRrdie5Gb+bL6E/DvaM35BP4neGz
a6ZothwLx6aZdVS9Gq5d1cRJvvNE+C3RzNbsVs2odvSbK7EPLPlsqolybP8B
nBENLg==
                    "]]}]}, {
                   EdgeForm[], 
                   GrayLevel[0.5], 
                   GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxNVD1PVFEQfbv3bovLopFNeBDlB2BpKYXF7oawrg1Ko0gl+wmNmihiRWOM
hdha+QNEo5UkKsHEoKFWqFg/ElYpXG09J+eQWMze2Xkzc2fOnLmn5lq1ZjZJ
kgeQAKng5zMMbegrMUl2MklSxvkQ9mXYLkMfhq0JuYv/8zifQlrQ05z00/Ap
wX8A+lXYn0Xpb2ArQ74g/xXYV3HmIK2M7p13np/wb0P/A1sesgLbIuRm1L19
2DYy8rkH+3PYLyDPC5zf8a0A+xbOYka5Gb+Mb09YM85aRvoS7IdRuT7BfwHS
zaqOHfvQl7b9rPq/H1RjFXFVfMtD5vB/KErfxPdJyChkBPID9lewT7DGKHzG
o/J1EmFIjI45D+sdds2D7p91su+Txpx9F937UJDfCcd0jNWjKNuHoJmx9jXX
NRbU15j/X0s0c86MtbyMwvA9/s9mNSfWxbnRj/2zN97Fmifc45koHInnWegp
9HPOP+7eyZFbUXM/n1OOFeOwZy4R/9Q48p6ZqG+XouqddM56EE9ZM+9hDGdA
rrEXcmw6I2zpM+q+iQ97KZvrTeTtw97AeWC8a1G18X76bzp3Oypn33nfBp11
2A89h7WouFHHpu6DWE26TtZf9n5VouqomFsXzdU0ipMV98k5c96ce8m7xB5f
R81pwxxMfRd3Ytp4sN9d7x3jSke942wE8ZF9VM3D30F82/b+DZt7x6NqLxEr
7wXt3JGv3p073o0Wzo9BsQvQf3mv/8K2l1VN7LeXVS7e13Esc2x5l8nHpneT
OLCfac+UcT3vJuMPXM+sOXv0BpBvrIOco74eVG/XsY+jfHtRvOe9I9DXIVPQ
V4N2ifPtBfGdduLJeRS9f/vuZdnzKvy3m3nPju8X93mRfM6J2zN+Exreq23j
fz3qHSRuxK/rmdG37jnTn3FN82TNu883oOD3YcmcJ+7sbdf4F9zHgHtpm0Pv
gu5mDTei4vPmc8VvJWd92/h881s16B6J15S/s+YF10bOcW5tvx11vzl187Dt
96vm97lkvhWivteNT+od4bv+D5pLwgc=
                    "]], 
                    PolygonBox[CompressedData["
1:eJwtkj0vw1EUxm/9T1ek1SARQgwGkiYWE2KSiGhrEotgQ+tlweJlQmKwsJp8
ACUxaYJZ4gPo6CVp1UCsfk/Of3hyn+ece889b72LpUKxKYQwAAwMJkN4xZBK
hPARcWJcwj4On8S3iS7i6wDP2DLoArwHPoF/Df2LngEn2G7ReeI1o6/hQ9yp
okvEPMXfAIfwNOcYvmFQx9/O/Z/4T/3dik7zvgRy8BbwiH0OXYUvg374CKgk
PGYjjqnYGWzfnHX8nfB18AXfNv9LNe3As+AOvsD7Y+7nzHO9wpY3r0m1qaYb
1Q628F9im4X/RR5bOXyj9819L+AA/hTXoho20O/o6YT/+YleNa9NPSzCa+CI
v+bBvXmNqvUNnaW2FfNZJNG75jPQLDSzNvQoOhV5jjXOcuR3FVOx63FvdEd3
zzn3gs9As1AP1AvthHZjyrwWzVyz7zPvjWbQnfSclJtinPG2Yp67en4B7zLf
Le2AduEh8t1QD8r4/gHuzksf
                    "]]}]}}, {{}, 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0DsvQ2EYwPFH1Bdw2ZC4jBUSi4lEInFZOJYyGIwuLSYkig2JwaC+hxIb
iUtIBB9DJa12cFn9GsMv/+d5+56c5nQt5pJsQ0Qs8NQY0Z6K6GuKODZPm2fo
ocNZt3ZqRufoZcB+4u68uaCD9i99YcnZJlt82zf0VZd1mzF3i/ay+Zobzqjw
yY/fqvqrNX3TIa3qiGdrWrCf8myuMOy8rImz2fr/Zpc99plkijZG3W3VCZoZ
t7fog+fX9F7XNU+OO/uKZlnlyH6hl5xzay/qge7ou35of/07cWhPe0dJH7lK
/X/zP/EwNII=
                    "]]}, "0.09`"], Annotation[#, 0.09, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwl0stLVVEUx/EdXUsUoaevorw1iGoQTrrU1KJJIETQJFKaNKtBOcpJ7wIR
SwMrUGiUli+oBr3U0khrkPYPBKYVQZA3MyvBz6LBl+9vrb3O3oezT/b4qUMn
l6WU7qIrk1IzVhSk1Ls8pZVcoy5CoVzM+7EPl6z3cC8eYEjdx5d5p9lPPIwT
emfjGb1+daN8ACVYpbcGqzFtbT2X6a/lUl7HB7kcpXIFl/FXsxt4U6xxZazh
sPobnuIZnuCd2ef8I96H3/MQv8LL6GMP7ujn7LHIv9W38EEe5Tn8xCN1Nf/j
X/yX53kvOuW3cR7eYBxj6NCv59u82/475Docw1b1Q/0t3K6elEd4gWf5D+d5
gk9zA87Eu6mP8k2+xleRtUcV8nqbeVvcUdwHruAILuICzsc8Npr7br5K3iW3
yLVyEw+gTW7Fa/lx7MM3+DpaMID+2DPuHlOYUX/BZ7xQd/Mg34/z4xtwDh/l
7c48F/8RpvXuZf7/g0vqMlnN
                    "]]}, "0.05`"], Annotation[#, 0.05, "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[{
                    Directive[
                    Opacity[0.5], 
                    CapForm["Butt"], 
                    Thickness[0.03], 
                    GrayLevel[0.3]], 
                    LineBox[CompressedData["
1:eJwVzLkyg2EUgOEvKyGElkqDUdOJdYY0GjO5AVU0XIB1lNYZtS2WWCuV9QLc
gj1hFNwDnhTPvOec/5u/bWJ6fCoSQiiwGAvhjTte6EiEMKsXPNFrf9Yr9uMh
XOuBzmm39vBobvduRk94d9tim2XKnLpXdIddVvjgzP1T9yiyyi/n7n+aJUnw
/xrtp49534+0xCE39mNd0E5vX/WWNbeIPUqcGANutSTMKR1ikCXvu9zKes+G
W8peR5p6RtzSNJgzNFLxNuM2Wt01R1P1n/Zm/fK9VYftLTrGt1vW/qMPFNwm
uTSvkzdv6j9y3DKZ
                    "]], 
                    LineBox[CompressedData["
1:eJwV0LkuhFEAhuEzZuY6RGKEWBKDBKNQSaZRKDSiMJZEQ8dFKBQkxJLY3cHg
Bkgk9mXseqXKOjynePN+33f+/P+ZqSpM9k0kQgjjmEmG0JsK4Q1TmMYB9nHs
rJKb0iHMyv3yHDfrGfldruGsPi8PyAvcqtfKH3Idt+mL8qC8wkd8zYd8ww2c
90w9D6GARrTbVp0Py+t8yrd8wiWu4B7PJPgMd7YlrrYV5QyP6KPxN6BT37CP
yVt8yVe4iPeId8K2vRTfFb+FB9xjx/7Ez3jEK16wa+/iHyTxjRRasOfsk79w
Ht+jL/Mv0si5z6YtJ/9xtx7i/4my3qGv8T9DIzxw
                    "]]}, "0.01`"], 
                   Annotation[#, 0.01, "Tooltip"]& ], {}, {}}}], {}}, {{}, {{{
                 
                  Directive[
                   AbsoluteThickness[1.6], 
                   RGBColor[0, 0, 
                    NCache[
                    Rational[2, 3], 0.6666666666666666]], 
                   PointSize[0.08]], 
                  
                  PointBox[{{4.905308194867242, 2.630836391598927}, {
                   0.20100883034436162`, 0.02382136569576569}, {
                   1.0719666600928879`, -1.2506326268721977`}, {
                   3.0527398070698992`, 
                   0.3872158300237583}, {-1.8438997564108928`, \
-1.5026726898055591`}, {-2.913246104009823, -1.3391199692975575`}, {
                   0.3149621009629985, 
                   1.9477027131642348`}, {-0.9556834229157016, \
-0.4484871006542206}, {3.2651237363484125`, 0.27047000138291255`}, {
                   2.9757868411226935`, 
                   1.1755085189629118`}}]}}}, {{}, {}}}}, {
             FrameStyle -> Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], Frame -> True, FrameTicks -> None, 
              FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]], DisplayFunction -> 
              Identity, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic}, AxesOrigin -> {0., 0.}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLines -> {None, None}, AxesLabel -> {None, None}, 
              FrameLabel -> {{None, None}, {None, None}}, DisplayFunction -> 
              Identity, AspectRatio -> 1, AxesLabel -> {None, None}, 
              DisplayFunction :> Identity, Frame -> True, 
              FrameLabel -> {{None, None}, {None, None}}, 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Directive[
                GrayLevel[0.5, 0.4]], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "GridLinesInFront" -> True}, PlotRange -> {{-3, 3}, {-3, 3}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "15", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    ",", 
                    TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "15", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}], 
                    "}"}], Short[#, 10]& ]], Annotation[#, 
                    Short[{
                    Row[{"NumericalVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"NumericalVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}], 
                    Row[{"BooleanVector", 
                    Style[
                    Row[{" (", 15, ")"}], 
                    GrayLevel[0.5]]}]}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Multinormal\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1956", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LearnedDistribution[<|
   "ExampleNumber" -> 1956, "Preprocessor" -> 
    MachineLearning`MLProcessor[
     "ToMLDataset", <|
      "Input" -> <|
        "f1" -> <|"Type" -> "NumericalVector", "Length" -> 15|>, 
         "f2" -> <|"Type" -> "NumericalVector", "Length" -> 15|>, 
         "f3" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f4" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f5" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f6" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f7" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f8" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f9" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f10" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f11" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f12" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f13" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f14" -> <|"Type" -> "BooleanVector", "Length" -> 15|>, 
         "f15" -> <|"Type" -> "BooleanVector", "Length" -> 15|>|>, 
       "Output" -> <|
        "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
         "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
         "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
       "Preprocessor" -> 
       MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
            MachineLearning`MLProcessor[
            "Transpose", <|"FeatureNumber" -> 15|>], 
            MachineLearning`MLProcessor[
            "WrapMLDataset", <|
             "FeatureTypes" -> {
               "NumericalVector", "NumericalVector", "BooleanVector", 
                "BooleanVector", "BooleanVector", "BooleanVector", 
                "BooleanVector", "BooleanVector", "BooleanVector", 
                "BooleanVector", "BooleanVector", "BooleanVector", 
                "BooleanVector", "BooleanVector", "BooleanVector"}, 
              "FeatureKeys" -> {
               "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                "f11", "f12", "f13", "f14", "f15"}, "FeatureWeights" -> 
              Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
              Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
              False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
       "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
    "Processor" -> 
    MachineLearning`MLProcessor[
     "Sequence", <|
      "Input" -> <|
        "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
         "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
         "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
       "Output" -> <|
        "((f1f2)(f3f4f5f6f7f8f9f10f11f12f13f14f15))" -> <|
          "Weight" -> CompressedData["
1:eJxTTMoPSmVkYGB4CMQCgiCw0X6k0IKj9Cg9So/So/QojUQDAN/OLxM=
            "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
         MachineLearning`MLProcessor[
         "Threads", <|
          "Input" -> <|
            "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
           "Output" -> <|
            "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
           "Processors" -> {
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 8707335111260960179, 
               "Output" -> <|
                "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 452255733051800101, 
               "Output" -> <|
                "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 7504501278986079992, 
               "Output" -> <|
                "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 6105099665496464989, 
               "Output" -> <|
                "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 8532053153852105318, 
               "Output" -> <|
                "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 4905821188383048923, 
               "Output" -> <|
                "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 6967255224828309653, 
               "Output" -> <|
                "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 2828127371472972966, 
               "Output" -> <|
                "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 1723715354940582461, 
               "Output" -> <|
                "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 4061446175685652568, 
               "Output" -> <|
                "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 7746917241739833566, 
               "Output" -> <|
                "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 6319178115144909063, 
               "Output" -> <|
                "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "ConformBooleanVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 8244589109493395642, 
               "Output" -> <|
                "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>]}, 
           "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
           "Missing" -> "Allowed"|>], 
         MachineLearning`MLProcessor[
         "Threads", <|
          "Input" -> <|
            "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>, 
             "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
           "Output" -> <|
            "f3" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f4" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f5" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f6" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f7" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f8" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f9" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f10" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f11" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f12" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f13" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f14" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f15" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
           "Processors" -> {
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f3" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 4521175420427603186, 
               "Output" -> <|
                "f3" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 2258836281577526576, 
               "Output" -> <|
                "f4" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f5" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 3957060144388268563, 
               "Output" -> <|
                "f5" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f6" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 914904899659239702, 
               "Output" -> <|
                "f6" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f7" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 8615584590579677194, 
               "Output" -> <|
                "f7" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f8" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 1466197023295484102, 
               "Output" -> <|
                "f8" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f9" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 5367174078690946790, 
               "Output" -> <|
                "f9" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f10" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 2171667498799319865, 
               "Output" -> <|
                "f10" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f11" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 894705666660208845, 
               "Output" -> <|
                "f11" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f12" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 604644764173936880, 
               "Output" -> <|
                "f12" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f13" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 3233812749865867057, 
               "Output" -> <|
                "f13" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f14" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 5434103089093087551, 
               "Output" -> <|
                "f14" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
             MachineLearning`MLProcessor[
             "BooleanVectorToNominalVector", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f15" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
               "Version" -> {13.1, 0}, "ID" -> 2535464133454862115, 
               "Output" -> <|
                "f15" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>]}, 
           "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
           "Missing" -> "Allowed"|>], 
         MachineLearning`MLProcessor[
         "Threads", <|
          "Input" -> <|
            "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
             "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
             "f3" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f4" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f5" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f6" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f7" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f8" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f9" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f10" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f11" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f12" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f13" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f14" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
             "f15" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
           "Output" -> <|
            "(f1f2)" -> <|
              "Weight" -> {0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667}, "Type" -> "NumericalVector"|>, 
             "(f3f4f5f6f7f8f9f10f11f12f13f14f15)" -> <|
              "Weight" -> CompressedData["
1:eJxTTMoPSmVkYGA4DMSCYLDRfpQepUfpUXqUHqVBNACliwb/
                "], "Type" -> "NominalVector"|>|>, "Processors" -> {
             MachineLearning`MLProcessor[
             "MergeVectors", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
               "Spans" -> {
                 Span[1, 15], 
                 Span[16, 30]}, "Wrappers" -> {Identity, Identity}, 
               "Output" -> <|
                "(f1f2)" -> <|
                  "Weight" -> {0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667, 
                    0.06666666666666667, 0.06666666666666667}, "Type" -> 
                   "NumericalVector"|>|>, "Version" -> {13.1, 0}, "ID" -> 
               2351323622174316742|>], 
             MachineLearning`MLProcessor[
             "MergeVectors", <|
              "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
               "StructurePreserving" -> True, 
               "Input" -> <|
                "f3" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f4" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f5" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f6" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f7" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f8" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f9" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f10" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f11" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f12" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f13" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f14" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                 "f15" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
               "Spans" -> {
                 Span[1, 15], 
                 Span[16, 30], 
                 Span[31, 45], 
                 Span[46, 60], 
                 Span[61, 75], 
                 Span[76, 90], 
                 Span[91, 105], 
                 Span[106, 120], 
                 Span[121, 135], 
                 Span[136, 150], 
                 Span[151, 165], 
                 Span[166, 180], 
                 Span[181, 195]}, 
               "Wrappers" -> {
                Identity, Identity, Identity, Identity, Identity, Identity, 
                 Identity, Identity, Identity, Identity, Identity, Identity, 
                 Identity}, 
               "Output" -> <|
                "(f3f4f5f6f7f8f9f10f11f12f13f14f15)" -> <|
                  "Weight" -> CompressedData["
1:eJxTTMoPSmVkYGA4DMSCYLDRfpQepUfpUXqUHqVBNACliwb/
                    "], "Type" -> "NominalVector"|>|>, "Version" -> {13.1, 0},
                "ID" -> 2373110040914665905|>]}, "Invertibility" -> "Perfect",
            "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
         MachineLearning`MLProcessor[
         "IntegerEncodeNominalVector", <|
          "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "(f3f4f5f6f7f8f9f10f11f12f13f14f15)" -> <|
              "Weight" -> CompressedData["
1:eJxTTMoPSmVkYGA4DMSCYLDRfpQepUfpUXqUHqVBNACliwb/
                "], "Type" -> "NominalVector"|>|>, 
           "Index" -> {<|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|0 -> 1, 1 -> 2|>, <|
             0 -> 1, 1 -> 2|>}, "MissingCode" -> Indeterminate, 
           "Version" -> {13.1, 0}, "ID" -> 5118202742791616144, 
           "Output" -> <|
            "(f3f4f5f6f7f8f9f10f11f12f13f14f15)" -> <|
              "Type" -> "NominalVector", "Weight" -> 13.|>|>|>], 
         MachineLearning`MLProcessor[
         "Standardize", <|
          "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "(f1f2)" -> <|
              "Weight" -> {0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 0.06666666666666667,
                 0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667, 0.06666666666666667, 
                0.06666666666666667}, "Type" -> "NumericalVector"|>|>, 
           "Mean" -> {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
            0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}, 
           "StandardDeviation" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
             1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
            1., 1., 1.}, 
           "Output" -> <|
            "(f1f2)" -> <|
              "Type" -> "NumericalVector", "Weight" -> 
               1.9999999999999998`|>|>, "Version" -> {13.1, 0}, "ID" -> 
           1746010633830646947|>], 
         MachineLearning`MLProcessor[
         "NumericalizeNominalVector", <|
          "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "(f3f4f5f6f7f8f9f10f11f12f13f14f15)" -> <|
              "Type" -> "NominalVector", "Weight" -> 13., 
               "SetSize" -> {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}|>|>, 
           "Boundaries" -> CompressedData["
1:eJztyDENwCAARcGfVglK6qESmjAjkQEjSGkXkuLhXvKWK0+765FkfJ9ZzZ6t
eXHOOeecc84555xz/vcXzPMZSg==
            "], "Version" -> {13.1, 0}, "ID" -> 894921123184280626, 
           "Output" -> <|
            "(f3f4f5f6f7f8f9f10f11f12f13f14f15)" -> <|
              "Type" -> "NumericalVector", "Weight" -> 13.|>|>|>], 
         MachineLearning`MLProcessor[
         "MergeVectors", <|
          "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
           "StructurePreserving" -> True, 
           "Input" -> <|
            "(f1f2)" -> <|
              "Type" -> "NumericalVector", "Weight" -> 1.9999999999999998`|>, 
             "(f3f4f5f6f7f8f9f10f11f12f13f14f15)" -> <|
              "Type" -> "NumericalVector", "Weight" -> 13.|>|>, "Spans" -> {
             Span[1, 30], 
             Span[31, 225]}, "Wrappers" -> {Identity, Identity}, 
           "Output" -> <|
            "((f1f2)(f3f4f5f6f7f8f9f10f11f12f13f14f15))" -> <|
              "Weight" -> CompressedData["
1:eJxTTMoPSmVkYGB4CMQCgiCw0X6k0IKj9Cg9So/So/QojUQDAN/OLxM=
                "], "Type" -> "NumericalVector"|>|>, "Version" -> {13.1, 0}, 
           "ID" -> 2549619328595559405|>]}, "Invertibility" -> "Approximate", 
       "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|"RotationMatrix" -> CompressedData["
1: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
RxbJj15Rhxc1rQV6MreLHWMIJtGN2TU6Fpgmeoy1ct4Viu9r8FS/JXtvTsxi
tYwRpk3brn0TQHrg9N4N2ntdMb3TsuHoZQP8WLdLyeqFG36QhLKsm0HoW+jW
edqa7HH25O4bJ8nznnW7sTDcGrqPfy8x6zMHu10zSsmrndHOVmROWJSOfMpO
ej5MX5zc8ptHbViHvC58++48tgfi9I9Hlzyaa9hbtF46U62Ao7S0uttJGWdl
8yUXq/kC/c5cq90NByw/0mx08o8lCt2Qoi1s1Qeiv97hQvBfWrve6hL2GjIH
FaI8NkzKA9NXxtx2fjNw7r/NVzioCSz+W3X7pLWQZaJ04rK3Agod6BFrvuUF
R6/tzPAtoSNr7+KHrkZGSJTR2S8G5FFoe7BrWCUd0rMrlp51ZUDHztP7Iw3p
cOyjo9vrAgZSKn+cCIy1RPb5KrkpNQvkUJ/9fHh6DRLXjj9vWb8aTM+UpyUX
b0bG0tlIMBUCrkJO6HpJKtLdNitRC1chx+eUmeQFLRxum34Wb0cFdYmred+v
BKPCsP4tpyPmJNfrUjaXfqMRZw1YQ7F0qLFKeO3TRHpd8T7FN3FOyO6gSvde
NYI78r+PP1y3Can686/exJM95fnpxdb5DcjrWOe1v8gNOY6fHJXfWZD57ffs
A53ksUUfzLnv5XE2kP9agaEDMhY/Sm2VcwNO2ffjdiG2OLlHqXtaRR4C2z/8
2itmgcNr+xXX2jLQ9/fyMDcFBrCNQv96GVgD69BbEx9CEjnbmGuWxWrgvNKQ
TUyXB7wZ3bmfO0j2Ya/UgzlHN2T+y7OaXuQAvDZ3Dac6GFCw1PzQr/fmaPi9
PWsFyc3F3q/cH6wj57r8oKl1mBAMLNlzWWqCjhJvhPhSPKxwVmHv6ZXB6lDw
+6aEj4Ad0Pe+mMsNpYMd7TGdR8QFmB1HSxfpu0JrRf12i+RNSNS3j3idWoPd
OfIaIgY+2E04Lnep9EDq6/aZOVU6RAsdLb/z0Qd5jReKHQW8kdU1PpP4ThmI
SPPG3mdyEG3Zly6IASR3lStrnxFGSo2iOCT6IFHdPPL4x2BNfM7xoI4ZVxju
ok793Uj2t7Pzg6tl2ph9c4eLzV0m0hdt3OoeHwTtptXvnsh4QcSKtOmJk16o
cszpzmiLN8aGXzEt0goGIm2Tu5EC6dtSWUFRS+xRcHp2tE8tkOSqrL49v4Lg
+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
g9WpsIV8YZltHfic9s+tN1KVKLqko/OWuB9lKK7akpytxZ83vxdb0KZCXvvU
/jfRfBx0jU6V5a9EbWvif5QCdfBYhnGR7nU+eo3Jr2Zo1mH+S8oHP4oz8YlO
SfuNM52Yp1X7/oxGPogWkcbLmaTCtV/9DHHiufjZ5CidZFYT/LopH8gEPbAn
Rk/quliBdpHT43zxVUBJz1grIhuLGrrWntecO0GgK5p1n9cNvH4qkgn8h3iJ
elZzbboZqHNXLG7adeN5tw2Z5ZoqHA8r1vRYHIS9NK+71qJteNtFKv1JfiwM
6lp4tpRH4+q5pXdq/N3AkPbdp468HGy6nove3M/C5VcGQgmLivCVfzX5d2sJ
Lo0F1UoKJQNHrsMNetFcjBnwTrYi9IF1FrWeiK4cmF5W9RH6mYosjymP1o65
4MmPiYPK57vBLKftJeeiOzh5tf4a2myCfSW56riXzWheQdCQS16JN9bJGssI
EC7SHTrl3WsFY2bjb40uNICS+PObap51mLfKFWq00YPfWDe1GOcr4NApK/kN
xj6ULlxeyOMthxtPPnts0IfA6F+R+Ws57WC1zihu1VeBRwdbV0i7c1FIkOf+
dnI1RpPkX3Ptyof7QjPH3wyVI3XmNMfyhi2Y37/szeoVAsfIJQ2172Viu73j
G7WNYpRaMZXafRWAy0TT1f3VhWDAb+FJpKwItmLv7t0mYURWMi23Y3VSeJmH
8/pmhBTe8pe7nsklDxEtfH1p+qqo0PTxn/22EF6QL3j4W+Ih/hVk0P6Xcw1o
pHdSaeklQMEt8zyV5F3YtWabrFhavd29XZW4ynkHxJLs5slzxLDChmny/TYJ
el3IMNI/o4hqvePDZ8mUgPLzqzMdX0Qgw3urvnpEGh/e/oGbhaLwJtFe/0Lu
FVSdEozu7FeDj9NyHH2FyjB9TXTNLZAfLH9pn5Xt1YDLob65x/QU4TR1rVza
6RuwRrsUQOnFDzvH5WPsC0RgJubXwxxmXiRp+1t15/4D+BxN3F0f7IxqdrcO
ry17Y0bQpslZ0mDYNaPpS7mWAmeYnizHC4SCy1spxufn3IAotbvZy8wbptk3
LEXeBmFRrgBL0OxztNl9LvWAMRqvMdIXPTrrBNQGl2kzm2Jx+Sj1WsdZU2Rr
DFN+XeiAPlPnK55FxuDoR0WSFo1IrJY/5EjlFgtBXcI0KhrekDQb2/fgTToI
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
dcx+2DqmdbL8uS12a9VNbNLFo1sOzThvYhjmhVp9HlnPQB61FZbA7/F4cnXc
r6omHL6UcIpvRSVCpTpN5+H2OPB3iy8tO1yNFz6N/ZLXLsBzP2R8blAR4UMs
b55VTj44S1/JipCpwoqHsQeTLxHg85NF/zsPUyD1wtY601M/rIw5aFTgXoSD
Ic/s4phT4eJ7kcePZ9PRiqhys6qyGXVuPvibap+FeQqlFIqvc+HylpF0/OV6
IFofLW48UI9DganKngHVkD8v97r0QT6yBTjv4xyoBcUcNavsG5W4h5DrO9RS
hGJ86+7rHOkYvLnfNfhYBbZzN/9sVNcC6QVWo2MbmUhvNzes1V4C48mMF32X
72MDwcVRxD8OE4Yko/aqFCC9f4PDP75WPP69jnV2eNcDaD4xqnv2gI9JXVDN
A3Gke9GYHyjWhpmpDLXniUSIxvGFJbM6oAWtY8y8VXDX/sBmnlkPUJrTdt9Y
LIMlYarC37klYDVqceLhEgEZ2vXV5FKroc7R8CpnCwEsl3T0+yRad/lE487f
l4kw3XWwzZSiCH5txFUZCpTi8ftNv59+K8dIvun6Qt8+/O9DzNMLRjWo+PCs
8pulRtz28tyYdCHiiQ75xOF+b/DP6uQNOEjE29T1KWa7efLqDH1C/tcwcE09
pyN51B2cTmtdD5RpxfyqjFtvzf1QMW5P96lpf2w5ee9vzWYqDEs8Szx6pQdd
w2zCFT71oepdZn9l7QqwOMKuOT9ZiIRLIr3cm12oPPpGzbY0Aalmw7c64grw
WLqtJOd/ifD7QsDH8yU12BZdstFYmoNXI3j+m6toxrMEwbX+6RAYSpJwZY3J
xnG9TrFjrmH4ZfNVs9jlFiR8WSPSXozG9djQOhbmQFA6Y+76NiAZEmvCBKMa
qnF97wD3TYd6qHx8WE3EJRZu+cy+/OZNREf2l6x21AR4fIN28MGhbHS8kHOq
/lkUPnrVWD6B6Zj82ezYjLk9ngmmO3CQJRO1u+v2J60hRAfNfTxUEo+ML1xW
hYYcULshJJBXKha5NqTTnoo0AauektWhQyTM69kuv9mSj7LXE+aXQ6NxROiT
zUOVROih5JC80lMEPPWvnA51Z0LH7IPgw4eL0Iz5FtMbtUYwsyoTIHvfATzr
gk98BHtgOjLBqrIoE60/f+czWU4Dwfu9E0S1RjSSPhglZpcNns6apL/1JOAV
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
dEKzGMWt1D27HGd8YDaprQg4yxKOnjctweHn9p8N+REnbk1945esBu9N6oPl
Avl4i7P/BU1PHaSWfd0pUCKBcWuD+t/MLvST7bz0528a6B3I57/MXgAnLIN+
f/jsiX9oWNMYOsoAwigszhsGgep4qMefO127nmNU/UWiFzrlOAUWSyowbSEx
jz9YALV8JrK6izQw4+dF/5+ZOvDW5/jCV2cFXNqOri/31IOv103P3n6sCUbN
YTO3xEQw0HPp6eyAGrQUBqwsdx+FGSVyObu7qvBF6xj9xwO38E1/ARXVhAZo
Kvy7nVQrhnclYhmieK/CTV1Rx+V0dSR9rLv4gUsUP4iE9j1c5INZMt857v28
sH3F7u3DY9rQ3+Oq26X0p01ZIl3SXfEeNrDrF92zUcBVVoeOa/uk8EmBja+e
ijYqv6NSMplSArXyvdJ3WK4h2SknXlYZUeBzpVbUvXITRV33MX6LvATRMZGb
ybSGoF1pp6jnVI4sbpycixuVkF9dZP2Q7y5y6d7xZ5TNxqXDT/ocNeJxx+Fb
ONNhL9B+lVSueD4ZrmUoPyCZuSHX/yg6z3isHjcOSzKKfoqSkZAkFCqicNt7
b5mlpFJGssneO3s/PPZ6bB7jtiOSSkrDSCWJKElG/f1fnvPmnPP53uf+Xtd5
c0Q7KT7SZuIFmZSXdMs7ucSUKjy5FwGv//VXhpMT0S+lvYWCXIDiYst36IMJ
qMVztXQ2LAHPKM5mvBp1Q54Aj2ov5RwY/Rzk5zrRhBwS3j8/fooFrq4Wy8Ld
Vvj55TEVc7cqlJ+ZeRiwJw1F9FpPVum4A5tX3O4D64X4T+H4Zx/5UvRh9STp
3U1CTiPW/75lVYBnNnv5f8oElNrv+g7qr+FG2PBulcYs0BRLqv5vtBYPLBcx
eXBlgkaUxDojOR1q9T9l+U+R4RJNcc8JySAwolrRPZ2Qhym51qdvi1cBn83u
tR7Oeszo64mbe0NGQe5dSk3zJBQoeHWTXzwNp19qZOAJG5CxVGbRsqvHXTne
d5P9CFCv5zPLIJILHDb2D55Y1kNs5OYumvQ8+Diol/qipghafsVyPTmbhYni
lo4TqUT4on/0+zTRD3//+c+xbawFRr7EFqzV5kIPv9buRzblqJj3LUCStRxd
xaVWW4USseiHFZtsQTfGxwRHPzuXB24DjJsZMQ24kCZmrvc9H45OjmGxaC00
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
1gEV3HpC9HAUCFcTvZ7q30TUnu6K8vSF+6yKm2MJIUj+KybpwJ80rCh6E5LF
3A3TLlHnbunW45lTbm9O7PNw73et92w6EVjyb9pa1q0UVwku4l3nEmCjivWf
x9NGKBMNimdS2veLVpaFUyV+QE1QgqvifWgzNmlFdK0GJqJkksCnHnvuMN/8
65wE0Sfib13KGsDLrII8n40LYUmqzStwsxZimogfPWodRIGzfSfDHjbBl9hf
cY1bNaDwUvhoR2UhXJDSaCc9WAycfq+Zz8+2Aqlo6Oyx5ibIpT/O2323DZo7
G8srW/Px6RFvvcxDbVjOXPVr4kwV8nve2xztbsLUXVPhjeUaePvz3Jd7z/b7
8NHDklXWB/CO4bdNlU8ypv/+8/3UsRCs6XG5953LA+ZZP8mafnTFvNoPKcy1
Nail57t4L6kchyRyWRnWw/A8/4Nco+tZeH71j/AMbSOKVf6rEA4sAS7gIlzt
SME00ufUmyq1GMZ5WldrIQXKJ7QOOsvu95hwajrFfm8mpdW0xPdVgL5K6QES
mUqwsasOFjhSg9ynW1YrmWuwSvB60GB7EWpVc9PGVdfC+IQ8D8tmMsYUtW+2
hxIg44PgXn1RNVwYaXerk8rAXn0l8s3LLSjoqa3yOb4V25Uu5bKdtQLJJ3Qk
1nfv45m7VLom2am4tx3paBPTC+y336jv3c6AWMsX1Aukxdj5Z6PrR2AnEB2M
VObx5cV3xN89OLzTwW1oOsknORsXKWNJ5QLF8KeCn2tc0DXY4bS+mKWiiK71
LrJu5AqQoV2fnfxXFV8eVUr4Sge4ebLvMCHQAD9kul0zTFMHqlUxdc4meXwQ
qlLx4s5peJm28/DifRNYpud8/W1JCrUdqJ8dWJTEi6d8vd1zxYCsmp9ljOIS
CE41HNb0kERmM1LBJc8z+EV6+k35gDzKalDHO8Ypw8/UgzrVCVJYpuFxx8FO
B8WpjyS8lZOGpwvB2pNxxtAo6uhx79tNlIimres7p4xJWYON8dFauNrnstXF
q4cVRhbv24eVsPJIjKj1cS2wGLXusX/5TtaRVrba62kLXvhzQm8kogJ5NNXZ
I13L0eglv/OFWzFw5tShf3fflUF7wfQ1Nts8pCr3eGnrEAtqwd8OcbhU4x2T
rAP5JGEoNLF4KWZDBzmGlzf4asIwVDLq2anSu1AVIxFSv1OEG0Wascvfq+FZ
1+1XmSS54M61PG+kXYB2Dfr8x34kIId0Jft9elMwu7D0LomxDuvzDDYMPcuA
Yar1nf18I5pVlU2yJUSj1Pqw++0b1aCyztlGrJQDgtUpAgmtBLh7pURY+14t
PL9+wMvOyxM+WlxTfpVVguoXO7vpUprgbDTfj0PsfbD8hPlViHoviv89EXNf
cQTLXmXcFCovQgenlsuvyB9hJ22s2smMHjQznvFVJ2/BgK5WhTydYrQLpifE
v30AFROlVGRsXcCct+Pb0psG269aZXbc3ZFhd2a0Uq4Y4585JoT8acQ8b/4X
LF61wLdptuDrGQ8ql3z0TUnbwcZnQ4F7uQPBe6tVI7sLHS+KTIeGlcD65OGd
L2YlUBwcmM8S645mDWRsjfxlmLXGt7RuWgAOu3uhPoxN6CE+SKxHkwlqcc8E
yajvYM3u9sW7eyUYoheRKaowgiMc8Z9uBIYDlV2Cl3tnLo6oX154nDcEMfkk
2nycjdhTa2P21q4TdGZ5j9OJWGJDLyGcyx/xXib9d9bNJDSpUBaxHqyEvOFA
elvVKvAOGPpD7vwQS/rts+O2S+DUmsWNpr4M7HGotFeMrAKdB2PczAbNMGZD
mjP8qRnjOImExa83ofBiVnYy7vs691M/T854yK0lj7rnWI6sY9d/2pr24VLQ
dueN9Cqs8ri2oKDeATuuLDy+vwgonir8XMGyBYLsLC5rOpfD0s/bZ0+/sgYX
04tJ6mbBwFx79Sy+rMMHpLEOdvcLwPXg76QT1pWoA5wmb6RzMX30N71FSiVW
UO0RhPyr0MC+bSJCNwPrpoXU7/dHguztq7XZtU1I1bKYdebOOHi+07jUGxCH
L29LPiidrQP/94bVLZoVGHeTYXzIsQl8a3Wy7U9Gg5BzNSffciSOG/VbkN1q
A727SrfytwnYpKNz6nFrEsrKcXWPTA3CZJB3iJFRFtxm9/6hr9OElAv/Dhkd
r0W55ZX6W+kj+PzW3RKyW7HYaZ23PD/bh53OIdsyl4JAd0L2G7vMfg9XB25a
OvtDUcC3x56mycBvosR8gqMf38k9r3E9PQAFGXyGlk4dSGSv7SJUaQ4WeQPy
2S5eSMn5FAMK9t9fIXXsnK9CYT1NKn6pRkxcf5On8qUAhXJaXtxxTIbTKxsO
G24jsD7upVby1Bkn5aOzKDpDQL5llWq7rASKmHcdTWJrcEiDMUKhYd+rKnJ8
bFna8cJtd2H/Ilug6xV0/5hNgJH05tuelmUQU0Y/FPisAVqZTDqqjGqRkJh1
23s6BhTtW78EsabDD2IuGdLWR6DZQa+X3zGIOU3smtzC+xz6RsmSJdgXxBqc
VCavNAHv1nQ/f0MuUlGefTRmnIYOcDPmr0IaFDmZPQmy74QNh+MKPFcaUI5O
1+pFfiOqyzH3Rm70QeFXPbqn+5yr1bweF2kUA8bXV/yPb2SgLA0D48SvNojr
SuItp/QBe+kH5aIXO3BoXfT1iy/dqOvKAq/1ayBhOqRIO+86Nv5WV+/8XQen
Ntpyk9sKkDQ0nzGeNBE6XsvICB0tAcvXCvzstvHgNHuL992XKqTo6D/0lbIR
35Lf+Ju+Wg4F1+bNV2aLYYPvPp3gZil4mKjPadyogRvP9lyTPLrR7iExJRWj
G5h4nomYZQiDS0UdN9vM6mFOmJdNcq8Fhtz+daZphsKpxhDVu0ulOPJjJoTG
qxl6EziuNFT640+Hu/95BtUC/y9Karn6FMhqvcV+uDAIOPinSzPH76Dj2/mT
Wvv7q0S+/KZmuwKe+GpTZ+SV41JP41y1XgueyKeztVKOR8I7xYzPd31BiC/x
gZBkMuwSFILf345GyhX/ksc6Ffimd4n3d0QX2NaXr9Lw6SFd5KQg1zkemPuY
GbSyKgfHf+ePVVw1g+Q5yqit1Gsg9Lux3iZRDL6HF0ouP1ZGk4IEE+2X2sDd
0ybjbSgOrMwvjxcUWSBtYcyra0vyOKa7qEi8cgrWxF6Np4lpQVKjX9eIsiyI
PC0/ReJ3CZOa2iPSPeVQr00lLOi1EFZ9d/lzsEMeWmytgih+KOKVf3fvPtu8
hF+L/4U0k+iCNM/Mq82vHPCRPrWXWEsLZXNZeB3DeGH15Op481E90H1hPm0m
o4wVqsxE4UvC8GG+YeKP1gXkcQo+7bBmjl84KHoKtE3Q9DJDS0sHAVtKa+86
KhDwT+ox65PO1/DUQaln7fa5oBeqORjYWAkM972qavayMMtHg+3sHQ8EPZbT
u/I1uIDfzr0+WorU0ePMbJkF+Gx5+Nl1zmLYPtszeYvEDuT+v0/fL8NERXjm
rWMVIErY6qi7HAyVhu9t5USi0NnOIIaCpBx8y28meBOK4Xh04imSpSrkKGe9
y2TnC++75ygbrhUjt7ylSYCgD3zLoSq+7OIFUQbO9ELKESBYTjIxJNoGMlnr
ZSPaIVjik/vmdFoCBA2FbdEzGSG7e/94UW8bpC248i5XV8CdXmJN66FhdGa8
NuIr04t7AWWFD3VrsI8u4/qPrE68Jns09jZvL36ZO+T1RCEVd/NfxlFgEm7b
XBCXIXfHDxGuVwuWBoHS1lor4HUXNBJe8r8iRZCukWDdsXPHOn2xFIJuM5KX
i81buSWBpqjyi5IkArLmXtvIH29D606Xq/SMDcgkNc25mzkK5Px5JjcxE7Zk
SBzi7HogmqT9cFlMI54Kv2E6sVoLLpdcjQJoWnE7Ib89sPAhXNUb6mQ8mg/n
997Gc5xpQCqR+oeuztmwfc8upUCmEykinCJmo5pw7njxcYpzQ7Cr8Cv1mtcA
8pkOBJx4kgjCSlf3HnsOY3fU6m31snZoJe0neL7ORJUXb3OaLKvw6TKX/dJG
MpQHzIzKV6ailLz1FL1SA3y6dvr8v4oq+PaP7bOURy58GWJ5XHPyLo71ULmZ
OlbhuqdxkB9jAby79nV+niMLr34UuHU+7gFcdgpYvWxRBvl8a8qq8o2wdDpQ
LM6uH15xsLN6H81C/p+Llro5PXCx7s1GeeUwHo7INV65te/9/qyE8951cJi+
9Tx5ejMa3vPjXwl6DEKHjvhEjDRCRlxmvEJCGkpI2gbQf+vCndNP+lNOVuAN
65yhn8zdWPVI47WIQz8YrWxKaJUmwvwpDmLvyAH8yrjpzR4UDCpnVaNC1IpQ
U3Juy3kjBX0lEpRoyNNgmr4wfcwlCYMvl0SMsxXB1h7v5H+8Hih8ostT/t0A
uFU9SmvWz0HPiD1OSv4anOY6HjuSlYp6Bg1GDp+7IfFKn/52RCScn4/ol/pU
DYt3ehteDTuh0JtK7Zvj5fjBW9PVcSIZ2q7PJxPnJKDusaq2NH8EvoJoH+7y
Vrw39bVsPKgKVre/OaydyQXn+8uacjUV4J4lE2CbGwoqzoea681zYdKZTvCR
5nWMPDxFlVhPQLUKD9GbB5Px2ygTyz+zCuQbc1MbO62HZpO3tp/Kd8CE4+fa
p+fyce6UYwRZfyhU6f/5LSvcCOJZK7lLA2XgKpgaZblYgFLEg1yNVkH4lcHc
ZuFlA57npjjTv0eAl9d5AyPnc/GJYhIdG3UhqhjF9m8wFcPTaD7uwUACqKlq
LltRNIIsQ9ZlFYMGjMvc/cJ/sRhtpqItDZJ6MWvoCeeORgGK+yeo+W53oIWg
UlV1eQns6U7T0//oQpL7tCoSLq3owXGstjm4HC1+1t8HETvo/KY7y0vWCpQ5
58qEDiLQPqoStkh1B9nym36yZN143qfscadhIZw7lNSikFSL2Z9uWe8M9ACt
PFSGUt8DUu57tmaNySDDUyDe8YoABblLd6QHSsHwzPrIFmUhsqUoMhWpduA2
c6ur4FwSsHIf2BM72gCn99q8zxh2A0n0NoSzlqENxRg3uDsg06Z30TJ1Pkhy
+V/nyi8Gj90qoYf3fDE0fLzF7E0ahv+YHC8N9kaR2ofewwwIHzaOLt0gq4Rj
ZB8/WMc14eMBFfnYb7fxuWHzavXnQYw1nfDrO1yINVKGwqe0LICnx06X9kU1
2rSFm8XQ9CND6FVjV71GZD7yh2k5NBKuCNFmP6Wqwojcpq/zjzLQJmOU5d/N
dGQ73J988jcBxholrDbMc4B3gWrSd5QA/UN014296iFGJ/ywbFEYvMpqtT/B
2gEkZ5eqS+JKYGH68aun2mHIJ2K2con5DkgZfpSQaiOgpATnk1vbYkDoW3pK
SlDFcwt5ee/8NODTx1QUOnAW25lozMe55EEl9nMBi7MRjHvU6beznEbB+Mle
T1N5YBIvbzpy0AyuvI6lSfCXxeWTghRPrdTxSJQPq4uVHn5YYWRuJL8GbyuG
B/7wXN7Pjcv+ucHycP6dkcCTJ8rIQRuRHVzDg9/+5WkGGGvAUqW7rnSyJH7w
YHhL6m8ErVo9rLE5ilD/jrn0v69SkGEk/riOWQMMWnZNUmw+97bTEhd1Bx1G
8tdKIQe4NeF4i7rlubgbsBPNc+V3+lXkUNz5s7AqBY/P/mHvU2SF6g8+/Tw1
9cj9XkCJ7kwjJph048CH/R7hZzEieeIPW8yTf6wpo+DC0SuODnMZ+KVXTHc8
LANN2LoPXKm+iwsFJ4+LcVci87EXAiF8aXjj29Rutl4DiDcVnUH9O9B/4DuD
RHcJ5CQHqKoWVoOwZXN2+fdkTGdtC3r4IhPO+oE15cMy6BShYLifkYQd5nwS
EvW1GPLVuDVntwj+Xjp8P5+kDhn1bFbjuRqgvfqkr/Z6GcjaPP7JpNKAGsaH
bO+EJ4NXcVCjCGM5eK9qfan/UQmUspeFCBb3MMNHsj6DKR3/UFf+pE7Kxam5
twvjY6MYV8BExfr6/94rln3jtQeO66WSWtLXoXFMXt6ZnQFcpmKm2Am2AbLj
dwK5AofhyrPkd+dvdMKQMIcRzWQpFHzpu9Z+3wVIHO9OsMpkAH3gVf/f+TXQ
3eyQ+CapHF3992gUbLrA8LFysNelUJR975d6W4+AW2/vZM1LlyL7tJqyiFcL
5IQwNU/3VYBaJ0/5l95OkLNh5azISYYYOp1sw7NeKJNGe2OwzA1FDnedfb+m
A6dUon/9oypDFZNUvrXccpSiU8Sb6x3gqTMV+qplGAgkbzR4X1XgZUqmX9TH
aqCW3JedLbgIPojcjrfYKMW/Zgc+cLM0o8Z/O0b+jxvRpbfEtSBlEAuXr8kz
SFbjYqffGzsPFagaW3He4qkHsiK7XB+GHlQVKxq6o9eP1NvGL1JyE2HsvUzD
enMjyMFsZ/30ELpLRLMze/Xhzfai1GfP6yGLzCL9WFwwBg05xTL2qcJA3ulL
LjmZQHn31lBs7zhmBdQ0MZuHQ/yLf9av70WAkMatjM+XG+B3maugnGwZGORw
EV/hiYXgvGQetrVOuBkS6V2qXoQrC3OjU6mPIKrt4ExHehkyHH9ewKXbh34m
lIJiT5tQh5TNj5piAAhDP5aynzXiD7kTr623mpAvYd7kvkIIfK9U9aYPbYCz
Q2HXaMgGMCJiXj3tzxAwfBCbmc8pBldSxwvepx7guBAJu/elLIg6FH7EOroc
s4taT/lfTkaLUUPugkstwK/p5JNY/ADVZv4lBkbdhHZTb5n5l6E4vVOkvPi7
CSssRLQTqspQ7q7Gv7t0CJ+IzjO+P+8BRMdMdoOdE7Hjofv9Y7+a4GedU+5P
Vz/gMKD6ajtvBubjV3+t/GhA+bCbFmJnC4CVqD1b1SwMFzbrO91sveDsH5eW
p6Y5KMFudyonKRa3ab4T+VvkAgmnle4OZxnwdUpSf2lug2PzvNz5BjV46vTa
ER33BrBdpD6SLxsFJcn+e3VMBBSwGfkrdrMahY3zUgNO9QPXDKluzE8CPgLM
X3vbikNPBWQ+2DTDa7t5cVubPGTzj6a3H2mHzhkns+LvpRA5vLDpcqkQcxb7
4lJ883CBo1JGJKsQ1QO8z/TT9MDH/zxmx/Y9Jycv1b7sWD5qse82tV8tBI0s
c1X1rjygXRo7u3apCW8azEyUpvXCSu11WuJgAgiTyifI8oejR8vssTGbKPQ6
REWz7DSC32T4IiWomiDg5aPCwakSeKwRvHE1cgRjDqwTlb4gYG+vmMf6dDSY
kVcUbDTkwcXJjzpOOf04SKoUsLToA1bJVH43IpvwtEbYeb3xXqz2OMU1m5WP
/6Qyze6zxOFk0qtt7v1+/m9NS13qWhAGcY5ve4004MmCCeNF1QI8fN3prdnU
fRT4L1G1segBDPD0xZu7haF/eEWh2FguHNIQrarjaUO2NFlDxtwWZF0Sckj9
lQP3arroaSjccTfd7JpsUCsEnp046xNXDpPZzkVJx9WB/W92V85WI/AVXXm0
vlUE69PH0tjTE9FGo5LK/3gYXBF7MVXoUgQORncVfpY2IsetdcPRO40grCj+
kSmsDTzjlXefLXWgfYzBrmZ2AQzNnq1loenAk7HmVz/mlUPnMUO6bMlKqA17
ovhlpRmNUxpKW18l4xfVKTvF8BZkGC5q5ilpxW+kXK/nLxfh6UDOPi/FOlB7
FWY+fkUN450oOum/SYPcC4by38PnkCP/1YannQpc7JObnxiWQDlxhVwPRh3Y
0P/n9vyaHqQpBwwd65GEDPRMFo01woPsiq6TFMo4Z5rgcodIFL9qCVGcG1FH
LvstszYDCTw99O9qXb4GVtdsCKY2aOAhQRv+EWEN/Jy7QxpbpQP5O9vMUUpC
4Cn2/ZweqoJqrBzZO29j7NJYqlD4oYUT/Jltpk9UcTecgS/CUQbknNKDPwou
yJJOTy93RelC1nO9/hPzsmgziC/7WOSR1S+3VrOPFDujmmpV2jWRnPL30DMe
XVzxKR6of1yJsrwLsu8C65HSicGyeaYSxH7IxEX05gHRn+MHkyXSMWNQMlEm
3APnw7oXnJXDMP6905UrrPtzjrJvUTHOAdNYVapjq0XoJkJ3U3kkBJe+rP8n
4ZYP11nTM77KZkNhi2ZnIW0rWDb84f1XGIe/1idGZUuL4ebHky9LCSE4umlw
sIcLUcXPctqJPBtKJkID4okKQajyzq2EoW68bS+qbOrSDQJ/bYSFruZhR9Z7
Q/+ELIjj+/pTu7kSBJqmlqJ1m6DEPC0i5CsBSJYkrCdjWjBi1L7/toQvgujG
nsWfAphTNfDSi+3DCr0W9zMeiVAYJPTRT3kE7Kz86isc+jDl3j35NMFKrEnP
f0691wP6Lx1+/zEfhJ8JjpwnytogJ+HsnzvTcfhVTezC4tVeWGa8+MyaJhsW
r68OlegQIKjAymtIi4ANNW6Br0c7UVpCY/5fTzZ0W6VSOsnWQXuXporlUCqK
PCU1GnpUDESDbJS3X+uj+iPT9USPXuD22Tt9k7YRCvJoZMbPRcN8Lt2GJwah
Q56z7Z0DzbghZ1MUNFWGBjgl+i/BFwUyTYX9B7LB4v3NgC9FRiC52+rRX5oN
mdd3jPQcBvAHr33dr/eViO+NNk+qF6CWXtLIPNswXjB/9Jezi4CFav0mFVZ9
aDovcU7/YDXOjXQ6h/1tAyaGkaYzV2Ig/UL+sX7GQtgwb53Z/a8ZJ0PIprQI
Q3C19nnS64JO/M80KDR3uR96Pz0rZ6NMxg+0nxhXhWqQx37hXdKtYmSYDb65
YtONl5Tj2fhvlsJU/M9aHtIB+Jw1WjBuXQnz0ReILNmrsXZ7ca9+LAU0OkJP
7Jm34/dDifdzXBHqWm673s1ugz6zb/F/0uSB8r9HLS1MDaB9iXCw9UEnpoW3
MHZKDgJp6dK/8Mly6G1MN1yzyEbvtbv2N7Y6odthIvNodwrEuUml2Fm3Qe/n
8XfcswR8ImhSEh2YCp7iLoT7B/qBWkDJn+1pNTT/bf1yvzIO53RoPrZPC0PG
YmJUnk8Z2H+tevZ8pQW3Ofto/9h5Qu8BNSuiwj5gJjgaGvzqxpVg+yENbMCv
l4NqWEp6sdbfr6TtUx50mnXoxDANI5IvhWiaEDBoT7e+xysFRmxeyL9+Vwcv
/xx/9TupGl0u5ogPd8dCqKoisU5EMVqV5vKfTk6A5LpJ+8LiAmQnjacluR8L
PC3vflKl94HDHWmzJM8qOOJxgRAZWoqd9wNYXrCWQYYGdH0ubUFPGeaqqdoS
WO3qClRhzAKaMOTfo3AHyq1Iu5S6OkxgfqVQl1+GWxJhD2Xud2DU4+NcuyG1
uDRBKkTR0QmJhxyvFm3UIvfepcAUsgfQcWn2kQhPCsxbc7oVP2/CM9oFhRZu
FfjmgO56Z2o3bJbyLfku1sPLemnqe7IZeF519iu1UTHIL5/8e20zEyXp0+/d
OFILMhFuxgJNCOk3lLOci5vxvEqeF1NOJHA4jAWd1u5DNdVPaoxzD2CVUbs4
/Go/1g3S89gIloBH2Y3lGOo78Ix4UVxQvwMvkacFSpb2Qd7NRgHW6EGIzT+W
GMvZge6MlDkHzRvRe4YuM+pEGsipZNExGzRhZ+/fXd5D+/7f9Xw5z74MQq9n
nrN/6gPkd52Pg2IjXGIOPfCCPhENYlj6/aLvgWU6EUQcrUWeeuKfZjJt+Di9
McfgXiU8VFgV/+7kiiVL7l8vabpg2tk6NRf3IJgjOef34kcJLGv25UvFEMDi
3TgV004CnjfWPdxMXQslbAcc6VJKsCx4+KHp5Txk0U8qI3tXhpWWOnWkhzOx
sOgIUUfWXVRJ2vw8yNaIlvYSIcJ3KkCw4zjpNeYa9HeZTTv73RaLR/ivids2
QhIJ38c6xSKUe/aJwPmdAGYZulnXS5pQKbIswOx3ChDs4hXMezrwo+qb7+Vl
FXhYloFlSiEJ2qIaTCgSWnC5TnlTpjMRlagMpfkcqyAuOv9lrVM8bkfWDBXR
N8KnVzrzTBqbst+K//yepaLENHod7vPPlDHJZzNlPl4KiYZ/fOWvpISjbmzk
ytl6ELB0LCbuuDouE7fufdJVAh6n/q8SYnLAfOw/oSBvJgi9Z+/K4icBrMa8
uRJeOjCndUMgg/Qkio7ejJW6rwkEz8+35pIoUTyGQvfozFGclghbuxWigESd
QncXP0tgznfht8Hp0nhcnK2vtFYB1BjPDD2nl0UNkUc2odsKyGfvTsJEroNH
2XU+c72Qg3lVJv0b5w4gbfXjVofzxOhuPKRnUSyGc+phv97Xm0K8322W1v9k
UYFmyCaZ9Sr4vuzyeGBfigZbTA+7LjTiia3Sbz1tjdBaTisivxwKJ1V38ndX
StBby8CGVyYE/9xvDLFaT0KRMoPsEPEMUBQasOV7botr+reM7Dbz8GX+QtrL
G/velRD0IaDIAsz8yzXbRGIQ+xyoXjXbAdF1+Urr99VgIMvxyZzzLoo0RcS+
8SuAd0/0ng911WDB7ucwOX1jrNXvNEk6X4gJOpd7tqY14KfVu5m1xSaouFl1
TJTMA3ey86voz0Si/gXKywp9TWjG7LKmbhUM3n/yJqWhBxgWM5JE+NOhW2ap
3FV3n+P6ZEfYI3NAaThYYoaqBYteHlHyZe+AnxeInx+umoBucH9pkDKE1z8o
fYgcq0Ub2nL7qiclwKv9N3ImoQFEtoIrhCjb4d2j+6MXa8Kw6ZKzu25jCZLd
+KbBt39XRbtirnmzOfA1VyzoeUUiSr+jWjE7NoQ8lgYRVfv5LNc+1Thyow5s
aioIV6KyYcemvkztVyt0DvTcnFd/isP/cf9er+wAnexHWfXTtbAoSyMQHFmI
z4klb3/XzEMbBgHJ1aEIKPCMDlb4pQTH3Xn7ZKnGsD+0keeOWznOWVKZGJwr
Q1mRi5D7dwDu9F7MZlPez+34pYc80d54b8I4mpu3AZV1+DuiHycCbaC5esuz
JCghPOvoFwyDv8106SPMNeDWZpvK+boL1dQ5Qtn+tqGNianghHAtBNnxxM5Y
5UH2kl2mjGI7tl+0qWrJdgQOFz/rQaY2EHsqqEpkmIdfql3iwgXbQEnl13pq
UDG09kVc2f3QjOe4KPPZjZtAmpY9klwnB7YVJGdz6BHSrkWMEbPXQM4QXWXq
6xEUV6n55xGSiQ9l4F9Mfz9G3Sr+6jZdjJL69990QSoOrX6XTy/qw4PHwqbU
rZohWco4doZvFP01ZbY4WhqhfEPXkoe/D3dXRwq6iFJgMZHVWNrEHoJKHxHF
yQaAo/X8p8XHQzBW3S7WxJuP3EJvRuS/DeC6765pf2km/mKpeTGHhTD8WztO
U6YQNsn9Nokn6rCiOaHto0chpjxf+Mq6vw8CPCRE3P2dWCC6c7DOsRWpVtsv
qjinw+HctbefdH2A5UBhueUiAZOkb51bcMiDo/LzsU/VsyHnJc1WKGkeUNdm
Nnl8QUxpKr5JJJUMbG1bXehGQOJTJEJv93NKgNTkYeO3FqjgW8oM8R+ACg7j
1BmaUlwUnZGzbkhGnaqBGw1cbtivrbJ29V0nhJz/myoYmoT38ghHz9Pt896a
n2CYOwE4YllnU7dCgMfNX4VeqgVsD1jP8JqUYc3a1LPjD8uwAHaI5X2cIaL2
csJcbRMe1jDUGWCqBn+/O1qP/DsgSc4x7dYQAZt5r3n4F4WjKnFX+IMT+74+
7y2kSBuFqkzJPuwMzVjy+8rY7rlobH9CtHyd2w+ttFfMSX4n4KjE47t0mU2Q
ZGI6eXQ6FpjZYpU8TPwg5+f485WJQGR9AkMcLRGwLvdn/u9AGYo3SOi8OJAM
K7N87T5szeBBdJrUg60eLghWWvWktaKaUfhiZe4ADEo6+smLeWDy0xAy3doa
XC1vfcP1rBgoyeaCtx8kwtweKXnSRD36qj4x+sVaiEoFeh9bxNxgg3agQ3Ot
CVxNHAiVVzLxyXiU+TuuNhS4/2ov4QoBnZq0WQPPhOC9tRja81bluCbHOaR4
IQDuJf206Z/uhRfPB0Kk7xbh1rFwwSPQjlbDBybq9apx8pBIhftPW3CKmxfb
S42HYVPriXmXBsxR+ldM/jMNmY/nuXmbFePtwctMyrS1yPt9+9lZ7Sr4Wlb+
QpO9Ez4RqB9uajdjuOHI30bpYTCn8/xH3ZQGiw+oWinjc4B+xl/0+9kM4AvN
U1bfisS39CylB6k6wWfj0t3CzWYs/n1Rte5cJQwm+SsvPS/Ex75npySSCtFw
REfpwYMqMDjY98krsBWn3zjS8N0uRTYi0uChxDJoVG2P/TOXCLbU22s//FuQ
QODuMC5vwPfXGvZXwgQWHUa1GvmE8ZMuy6DyH1V4GjuXxuOgi+XELvdXSZWR
N/GRQZ+mOAr052cTqxpCOEf2yD9PeeBfXDgwvaQNtiWMTUrml+ECvBVhOy8P
udfdRTULJHH6qNJ6vbMGfGUP4vqWehnJYtwZKWJF4fhodkxZgA4EEFQjn0ab
gTVL3Sb9XW1Umoqg+Fihi5Q//MeuxBijys2e+WWj66DS+NNt+oQUWD5Vo/r5
SQUunCQJsm/TxkJhlmdO2cqolqF8sGZcHefnfj4wDdcGYqYYPnM2fQxK8r2y
sB9AHuFdDBa5kuDJQDUnYuYJbYYZsQkf9n0t/Xk078kucPuYQ9MRGwQnVVKI
a6O7oN2PXaHLrh734jpqJA9koP+do5wtE4PA7f8+vUZlAGmanb8rPm/BxCPD
RRI2/RieoPJUv2O/P18aPTAYHAT2kw2XUmgR5P/mcfw41gMc/sG9A90dyOzy
7WvN7T60KCZ5mHBwEoJet1n9LJBHE30i31HtSswL8hX9Ih4KJXVN0+YrkVDt
XkhhHdaF27dOCPx29AH2PavrBurjSD57Tvnal1bUYXeKdL7dBuJN7+WK3KtQ
+9af7l9nqqCgUYsmEPf5Kcn8s2z9IJJN0s5cuUHA55J8bDfsS9CLxDvuaEkt
BjwMOMC5UQESZsJHBKTbUeHSadLL6VXgYmIntPq9CItPD7neUR9ETe/fPR8H
HsL9J405l8oH0cebwoOlsw937k3qhvtX4YZ+Ets9my60GCRmCZgoBDJVlSBZ
Qg5E5RQ+OfmmFhqklrlU7CtwtY8thXxqBI45a1OrOw2gKY1cmx7FBKSUd0nL
GA2DXGC81GahMsRmu5kNljwC7U8njBZFG5Gmg6DnKJiH0/hxvH0uHhU60pff
F1fgUNDXbiKxECB1//LPyioBiek6gzvO9sKivlrKYSo9LJurpzlAM4CrD/Wl
d+msscbAvYyioQVOzAoIW7iVw8NoTzbTcRNUbzZlnzxQjQK5Za6hysUYrCkW
mc3YjlU7v5s5rdJR2vnD3nmlWOTlc6r+FlEBfLZUHkIjBbid7eRj+ygUY8WH
XMXjU6Ex48Ozv9sZwCwqkD2uOQhyQgbpczYEjGHXE+54qYNipcFCbPtzSvH4
7Lo8VQxB9jScei4ELDgg7GLCEAm7jH4vdqxz0HDxws17TamwnTnZPqRAgApH
SprZh/HwUGBC5llVGEgq9BPJLtTAj0JrxbmIFpC7qD+uRGGBDKf/9Dw1y0H5
h5YZ7mbpSPKi/0EZWQWSmV/YkHtUA+8sCBFhpxvRWOmL03hqOQZnxRa9/EUA
yoUDIeRCJaAydML87VYEaHvKJ3vs9sM/DXI5v7kKmNonbcXQJjB8w9a3+aoI
ZtaeLd8gVKErzUGvHM2b8ClrSjdWBXGRnbr58fdSNC+7Sq+3Wozdb2+JuAUW
gmrYM4ZvUvucd0y4PpMlCZemlsYyorowSs11mORBBZx9MyPg+LIA61i6TMpo
4qDgkWjElGweilSoxtv/cUbTW4xP/ZMJ8Gz25A/JwmLguv82scWlEcVvdNh0
nUtA3vPir442psHq6Adt7oLifQ+l6qfSzAJTLpZ5puZirPa6Ir73vgKSL1ne
zheuwC8pL0iJqovR4ByVzOK+J2a9OHrBVKsItl0p2b5+LcbkgJTlV1CNFi6u
7n5ydrCjdenEl9lSTFgZsrtzKBO7h98ZW55KAEPfIYndySxI+XP9XHZ3EXAq
DyQdMizDz2+W5pM1SyBh0T6o8oMrxJFzOH7Wb0K7r5pqV3NcoWTnjEyUWDa+
zByUi7lXBDSkIy9j1cNA+H3yIntuLBBttnfKv+UB3F5MO0+VC5veIwFuW0Uw
3fLvqOmJVuyzj1wbDgxBKee42vfdxSBbx/Xix1wDlMqPzSnxFALDpR9zuzWx
GO34WvPwj2pcfMtfwdtqhREtL1z9XgfDk0uPi9aZ7kPHfynMbFKFIDejdo29
JQTX63RCfyUUoJ2rqc1ccA5MRn0ios9uhIZHrxppz2bCauiix8vYfHi+Qt6b
ylsARkd8xW7K12Pi/R2Ff1+Tgd2Q2OpUZSEslvmz3BSPwCdPkl5OnbLEJeEs
z+9VxaCwLJQSa5yOVoz6orvUhbibElLjsCwMDEpPuzgzyuG5OVfeokcp+Gt9
qHd/F4t8nz4fWXeqxZovKR0VX4pAiYhrpFjUHrUCmVON1auB6AP/ELeZLS5L
L/2nvpcKMwWPbsuS5eG26tYqR1Mxnv1cujBuRYAnowQ29iN5qHX+0Wy1TimS
mdkemdkuRZunv/i6Z3zAd+pg7nFrZfQ1XXcq/auDn4w3eG/RcSMd5cm5wwI6
aNgtahbxQAfzjcPDqRWVoXfrqOSOvR4kkNCeOmJ0DuVe18cJ0Moi09rfH0Vv
VCFi4ILLfMkV+EQVV+oufAUWJ6jI13XYgXCQPqZt8l/vk/bx92fJJaE7PtCD
j9gEBsYiJo9I6aJI0rfxk3EnsOwPq2k6kzYwpV4MjDXSB/WvwS3JrlLganfk
wwEtHdDX0Sv4/z/u6CJRoc+rE/jfE6VXbHOC0Fu7RzX2VgW5SL5ZRJrJoFxt
wszkEhMev5/6pnxZBGW2nw7R811DvmkKs0NzgRhllV00nIdg9+TMzR21AYgf
fBydF1QIa1HkMtvRw9BSf+vGhG0dkkSd0Om+xQJfxX/f9nYcBfONv/k8Wo04
+I1Efk+wCzkXDjzeGnfHk8LFfWNKBLSsVA655ZOCZ/Kl5GOOjsGXN04Nb3+W
oZmi3iGTnSS8Eh4lmdaYCQaxdXeYXg/C4ZRDp139wtCKVV//Tm4y2preGwwc
6sLJNJaJnxvJuG3b1/TgbCPYtlP6B5QVwvEFdBllHMWbGvQveT2f4s9Jccvg
Y0NA5JnjGhZcgDa5LwYNdRtgUbgoLv5oJ+qIbj9aKRhA8ddJtnzBzRhkv/It
fbMe+aKM/dQLRzAt1WZ9xqYF+G3pd5VfVeJ/1w5y6Ft1wREGZ8bfTpWgI3/+
3FBTKBx5ddLRpGsIV7SpC+1MxzDXve9+g2wLFExM7H77IYf2pzPyHBd6wWKw
ZpHjcBZWEdkzBnnlY6OWW5DR8X5sVJKW+hwZB59OdrtYP+/BxdtWQP/XDsxd
Ix8s1w4j0ZevKpHSj7F9iPbwWaYoVP9uMxXsXAOGx2mUVedaYMZ11URlrQI9
bLnf2xwLRbmmc6P+I/UguHCefKamEUsUNvhONydByOHMq02/elGN8d6/XOU0
NLkbf0JbbL+PnMoUTu/njqsAhxYLwRUE4j/fYrcagC2twMs5WY3w0qTtZqBl
MaYFiLgbZTfDalHEOUvX8n0/KLxnh8VwpGjUPeVZMYZ38nQRGjOQ0qyo6qh7
F7Qt5Mte1Y6B5KunNInb2lDt4FCm5JcQmOe3mJ35WIARWkej88kjsChGup/p
biMGTZCdlf1lA7JGq1p4Mw5pSrZcm5TyoYrpBSvlG3d8blpG9uBzJr4KLGe8
+bcFdyn2OOcPBaKr7+vt02xewBg+oOE4mIMlBxsErywjhkbQ+HwqqMUTj9dj
7bVSoK578OVKZS6sqNIX60MTkF1/fUSApBJ/klGcHDnfiEfbWf6SaNTDT0Gv
1TH/OqRhfNvGapOFIdLREn/JgnHGY4WES7AFPNcarJ59a0eRk3HnhXZNQBOO
ZH/WaAX/hITPZ/f5IS7zyN2zos0QovhjO3I4AvhVOf75NxVCcPjK08M62XAn
S0lNkSwFtDh5BVMV93nhdoP5hq8/ugq3/BtWtUV+hh4dn8pGWCMiitTd98IP
Lq/JBdXLsTnhuO4/svtY4lbU92TOAwvX74mLdtSAjfWXWNGhYjRTmL1ZFhYO
ahfSr7D/DgehGcN8NsEyjBlWvTioWQccNSarDWIxcFhtcjpDKRf5rgiNT86U
oMEM/7l2/0hkddESWNrvxz4tbtY0fwWou/DKxpSuG3bGichMW0rxybfsP+Xf
EmD7Y1ymcm8AZpRJc7y9VgU5o893E2IJIJ0Vk/WwMRnT2NsK+waSQfsR7aFB
ohbssLd9wkPVgo+C9G0dTmTA6BjrI3umCCTSlvlxZWL/vY+z6fOIHjg2kCHV
/CsXqwKnDxKi6kGyKW+Dg7IULcKCxqU0bCGrrXmUSCkFziwkiXm2RaFxSV+j
tHIC1sz1v6X2KgbPc5P/bRQWwgn7S3SZ81UADtwdqhZt2LdbKrBrYQcrk9//
On/JQdGCbIYlk1pclNfKDFXZ37NjTbf8Qoux1eZfn8rJMlyQO0MAsmiI2auP
OhCSinrCCl+vv06A5ROOXhsWxXDCRpBxjVCJU4XXOFa/Z4L3zuPB7WF/MPgt
kRX/IQ4PfnDk7/tUiMG5trUf/yXgRbq6x57hDjjU8kuOmSgRR9SPpgkxZuGG
8/rgK6EsCBWnXL96ygOORs8nKSynIVGy7zMtQVJYvtD79uByMJ7PmswJmkqB
I47byetn6/Ebxdike6IoyomdW4mUagTK7GDHlcMNqHhr+/nJtQIg+/vxwUON
NrSttiQydC/HKHuZ8WG9RBTjbX9YNVMOfTjGduiZA8SKCdsFNDRhu2mRhdtP
R9y0mCcshxKgkYHgqfNLFcMJvvScmWW4UsrP8uImL3KSWTZMbQN+7aHjH+5V
wsc2Y26iD4+h8FG12PUyA5gY29z4ekoSJ2okulUfyWEh612O+UF1dHkxrTLy
WR4rin45GUoqAJFLEnvNbTmI6I2g+GfIgEeHrwGHsRou+LK4nje6iMc9iWco
WDTh42DaA1pvfWCiC1X16JXGuXG3cqPqI/Ap/+KfNDNydNAy+8g7v++Xn2Pp
Tj0WA9XqyoeneaQw8ZyA74TWZRDjeHF4c1oM/lE8chy+KwN1FZuW52u1YPGj
cULYGWJMiFSW5kqnhRnheNknV0Vx3pR0NqBPGUouRF+h9ilA/dY1DyK5fuif
01ShGewFv3Uf8itvSsGAlNJVKQ2hpWIn7HlvFdKFq5wvWPGCL59fTIckD4KT
UC/t2s9G6Ip98WfrQy9yMVule6cMw9o4PeVSTCzOGucanAprRmJZgQ9ksuNQ
VmQ6l3gvBFOImn2CeEtxsUfytw9440jF4wzvtmzoUBpospCvRvJhzYCh931Q
wf6Pt3dqAPi4YvdAPw1C5NoY5y50wQMq98NSzjWYQf0ODYMGkLtbumiTYwy/
hV2yOvS4B4rd6vKu5oQgUndrXFdvA3WayF9sj1qx5/wYLZ1kH0wvUCvuRnQg
09tNqjWuETQ9tf0gbNsVb5vtvfpL0o8GPJ7p5uH9YNHwJruqyhQpC52OkR7t
xu/EGtuF7ASgCXe69UhtBDNW5Jgdyabg5rk28kKVPqAVFzc5MNiHKlr/eteg
FuXejua6tTVAz4+6lvC/5ci+Jbs7XBeB7zIIhupeRVhzXqTF8GQRnPhBwqh2
LRku0l4xd7hagswUszXGL2Ogm0ohyzCiEGj+mpgRx/cjRfnJK2eODYLVmOPc
deU+UNTq8/nwtRHrXd4Z7DJXosHwOv0eTS+8qzLZin1MwObEg7W960mQ0dA5
9uFpAxgRZmQ1jLvRpVPtjPSBLAyyJdK2vhoH0TsPKdzuN6HuQkqspEIHvisT
F1gJi4feEDo/U9tCbDeQdkoR90e3N1Gjc4t5oFEgkLc2lgIptRTEqkshGG5j
1aQqVYn8727wqK0N4K1rFt0SzUXwdkZLd7G7GndI++t9afKwY96BhY2yCk7I
m9UU3uoCB/2m0snxaBil32zg30uAw6+4gyo6rKBG2DW0digOdLwdG8xXKsFM
JDbgtbU3kDHlKyQ1VeJM7Ka4WHExEt3rO/2tkQMYFnSeegl1wHqX7zOfuRpY
butJfxSRCvlpdccThILRyq0Q6/Pjkewio+2HM81AOa+tytTXAuzyF19RSCRC
nf+oVfR/HZCTRH8+zigLouQ/5Lw+kwr3s95+fX6qADXykx6mXQ4Ds2ERhfcC
98FY6KN34Egb6lJzXLyx75tT79Mz5ziqMeRB+eyXqWSYvXTK3PnNvncW0lt2
HS9DVuktz3a3doh8YxcauhACF94Iqf+IroNmJba5y6JpoPJm91TXQX94TTjE
suc6AAV2ykMDCpYgrS7SzpZaB04H1VX6d7Ih3NJH0nc7Ee3ZT0ub/GqCjS95
u5/dkmGVqSXhw8U8/MamcixiUQsUVo6RpcxUAeUxNkOpYwXw+5i1yIVTGbCp
TRJR4V0MhNG7bGTkKeg1X2c++PYBCm9W8t7iJMAgT0yFSXQKehPLZhPN1gPz
YI/fj+JIpCg+x3Rinz9pWh50bV1Kx+NEBzMOjNWi3wt9zsrWUiCzLqfWti1H
jpVw5stXb0PW1uFL5QEtYJqc9DXtaBAUS5t+yrTsgOrO/yLm3pXjI+UjPqI/
05DRgEKYnLoMTajl9XfM/ODh6McpW+dmsFul+hNOVgeHd2Ou/LOtxPNCPjtM
Oblg3RyMPueLwFnygPiE4b5Ps9XrW5dH41H5x2IVDPlI7PR4W7gwBRTZXY0/
Hi+HtNi3/IepK7CifErPu7wWpJbMJf2jG+GQ35OHU287QOR7uKmYTgC8tVcP
/atdD8V1RbX2RlWwlXT8YvHVLLwyYrHr7VaNd2zVX9rSFuMXa/oIQ7Ny9D7L
kPXc1QcvlA0a9E0EI/Wvi9+mb0bizxse41SaLcC82aLXRZ+HfOIhVO3lifgt
f5h5/WkkBkdWUful12Him8em118kgLLjoVPKtwuBW1V5yGu1FOZGGK9t0iQD
cUBCHbtsKU6QaH5PDC+BqH/fPhWHFSOHoPn8CycTVJP4T//79SoIeid5uezN
HTw9f58h3DkVPN9aRH7wz8AztNYlD5orYdjq48XbnnnoXaVYxrkaitwRE1HM
osHAkbSirZyhg4TRJ9qZC0bA2qsaWUpRBK9O97P/4m4F3jx+eQZxQfD7KrJC
a2mA1j6LORNs53GL8XrL+A1VCIKAPVBVA7M1BdF07e+yEqktmaLlEkBvd/hO
7w8zkCZXYlF5LY86l3CnTOAUVpHSHN3aOYrk07QWh/o04VJ4lPoFdUVIeBBm
ttgnBIbLvzkYeS7hQyk+YXVqIexXLlAImlRDXYLhU/5mUfhE+75iPZYLJmoL
ZhUD1ZH7gjkJCsrBpV7BuE9ueuguwqa1F3EBfZVGH279VIEDt0vvK2up4OhU
4vdUKjncMiYnk1bRgRezLbPh63LYrakR6nzjLCzWmJ8ZzLoK291dJjSVZVhh
eKhbOm8Q0uKllY5DA/yX1mUTdyUJ7FfBYci0FHwLOhXecfWhMmfOlPeXOhzi
V9E52l8O/D2ijVecBoDUhvnvz5vDmLXVwHDKcwRGZqW8HhWlIms3yfdzegVg
mZF4yS9g/45iwvgu2CMsHv9GPn28CeJVZI1+unWjwTPH0VXSDrQj4R+++KsR
Z6m//2fZ0g9ML121PZo7IcJxzCV/rR621Hz7MqkHgcJQketHcR8udB9uyPjd
ijzXCJlCCeFw8D7hy7mFEYg8zRVzOX2f+/tpQsYba+FEL/+H+o/VwNBzgG5Q
ehR0RlVl3j0bQ5IQxxeavO0QF0HgOrUzCKSttZTuvyswKFQm/FRnATr955os
87cP70Qf266+1wcyhjSZyZoFGDW9RF3UVwa5SXnLK/51oDfGO7qq2YLBvvwf
jkQ3QM32rJrqCgFHvUuxJbQBE9cIxCkyw8B954bXf31DYJNSxDto2wJVDRMC
XAeS4VKrvNjtfZ+0u5vhWmTVCvP0e7b1P6tghiTzyo2PUXgozEX0vEEHmPBQ
N8ffaEEOMoX3M7c9cUGViNFjvA28PluMz15tArHkTAWx3674gOBxUJQuDUaP
cts6xrVBRYZz8YWRfX9uYNqpDO2EUqM/DIf6CsBgr+bzv2Y3HIm+28AG/cjz
WXvI+kkRlB8ZWP3I3YKC3gHz3uVNKPmeoGpL0Q76lmqht+8M4Rf6qnCX5+0Y
JSgn/NAhDJzyiCyyoBXy2Ed5macioVRDLDHmRjIkHh/542pZg/NHPUSEe4LQ
VmCu1ezK/vz8I3N+D9eg2toIz8NjGWjEelR8k8sH+ggyg7m9LVB+/8evJssi
sAodjuc4noC9C0o//9spBp+cSJVc72b4VR+94UlBAPbD+h8pC9PhgLFSt9Wf
DvSioWdOeleFQhEPfiRQl2B3sPubiMU2ZH3IXC8rfQ+2pC/KR5UQoK/7u3y5
fgmelDTYcBcIhAlT3ynf9GbU0Q90d3tYjMpbmhGHjFrBYLparY61GHelPB2t
HXNRcJr6cucHAj4zfn3u7OU+GMh5wKioXYZrDz8NdV5PRDapg3byZPlYrF9y
++1WL/z3aoF6CLMhCSN3slWacIbkrTRdQgJusRtzflfMxAuf7TQPOd5DVzH3
+fJiO9hQy2tf6WnB4cx1/YuqddBmPqnYs9KNvJ/kjfLPVqGharraY2Z3iFDT
nddgcoNUpd90XB+6ME1dtS0JisD/+DhjoEguOJHPCV+Pb8eC9FcC5YoB4LLx
OpPdPxk/SJTWFY9G4u0rjhxtqRX4P4rOwxvL/43jCMnIjEhWokSp7HUhJCEh
SQghCiF8rey99x6PvXnw2OOyV0KFtKSSEkmSSqWf31/wuT/Xud/X+/U65z7n
PpoluR2mUopkpY9Mr8cmgvUc+ElQN8HZb8zBb+tb0brSl0GPMRxeXhZQNkhO
xXat0ojP8rGQ5Rz4qOFBITBlX93MT3aD9tcuopnO5VAVEWJGSUWAtfpEOfld
L2vtjtwyXk/FbB5SJV3zrpXIixmnWiWBqMX3tpmuRPy08yKFtaEMFPjupj88
HQCaAVQah7l8kMbuo8cFXiL4vvbe0aUtQd8tvSfy6rUow7WYmT8QBko7y1e7
1KqBIP+nIabHAxS8mDTLfDKgerTLs1ovAKS2fcRV+YlIwPh2/QkrmOpn/yrE
noHlb06H1NAEA+V9Fy0Vg0z85a7u3ccVgDJP79stKFVjxLEHQipU+ZBxX2CP
4i9vSP067J3mXQjXnoqnvQ6uh4S6FjpFoTJs6+uu3awpRj19yTuzB4sgovPm
/hd/CmG9Rl7gdGoYHqd6N250sQ70Vqp1tUnFoEzmNmhCcwJ7hx6rrb0ogdtC
gt/mIuuRaY3PU9IpFoS2maZ7BLKQr2PV+CQxAf11qkJO+9Win//1Bor+Avjz
W92EVrgUjs5YfXlzvxLiIHbD8VslypkuIF97OXhQPiJVeXuCb2TNwexFf/xI
0em5nOGE5uHU/zRmC8GifHI0cugmZjyfcykfu4cjjmUv2D4XwmZf7gOZpHTQ
8y7xIvvPAAlMNzMzpJpxXety2cfcCyD2s+eLqbEGJP6JLtkxuAxybK3BrB+U
8WKgQNK+qItYdbjzdEC1CbL9yLnT6q6A5aIyykNzwljF8PNE07wUTgmx2Nhm
GsNIkPLC4x19NIrFb9RmGphSlOTGWHoSEv5uCzuY/VV6qyvYVfVBGpkW4XHQ
4kn0k6Q9WMaujef+9oGRkyEwp2du/PpPHbp/82wpiamhLY3JhpyTJh6Ue9HS
TnipdJopPKqq3RByBA57Lkyqo4GgbU/Nl8sQSZk0a1V7Dr2Z9vPz8QJON5Db
mNfy4TYp7cytkDPg9/1XPw/jOYguFPmTvFSHKj45D636BuDOU2PPfKls0DSh
f7jZ4QaPiUSZktpynJm9cKO6qh/zMnJJ12734IefEc9YQivgr+aKgAl3ExSF
iVmXZ/Tjkm1Yu3B4EWzMjHKLhTVjwTtj+Q+PmmG/ataf7/ti0P1Z5dyvb2XA
vJ2kPtk+AOMzWVmPVDogcsPb8tl2DzIoH36Krm1ITP6cl3ygEma/9pwWZG5A
s4vfvV76I8R4cposu4+DhZSnnFpGM06dKOU7TuELSquU0aR6Ioid+czqe7AB
+DUtc8+/Kwe/ihEV5tsNQGTk5mD0RrQIGiAdqXLHFRHjEC7+cvhDO8uQMliC
FpdPEZt/5eG044Ua4S0/kDHvUHv4KxakHXDYwHgAz037PntQVARyVP9+UZ8t
w9t5tQPtC9Xw+/loJwR244Kx+4v9s1PodFydOiQrGEf/mt71SysFJd1umt9n
OzBh9uH+sr44HK9/W002XAnEa/HPrqd0oKbPGrOARCi0rIdcLbNrQqvvsR+/
CUbB55bHX9S9QyCA7l6UE485MljGlR7eHEGRSs+jnXfaMFEw4ivPq1FsDw9j
UMpsxNgJh/LXpdV4iKY991t4H1Iy/mG/olKL8spNny5/T8Q6i7Tv/aP1UDjU
dZx0ow7Cnlz4Ul+YjiIh1+zzXzdh2O+Uhec/S+HPYXKbVEISjvzJbElRawbr
5Qq/bsoukDjNwp0YkIWh+84NtnDVQn2VgpxQeBsEvEk+Y2gliUfHHF36QyYw
7EGz3fNuErzjV2E8rNkIdGvhl66eTMUl0vHmzxUt2HFhxuyH2v//t8VY7XOo
EKc4L4VgLBGOiJ0I0FopB4qRnP+MDvTgT85rvHGyQZBVH6Ga4FyLqRxie57p
hMBCs1bhgugtHDkcfo5V2RsS1PavqbG0YpeW0+DSZDu0Xus+8NwlG4STHig4
HCxG7/mcsVMP++FcjEl04vNiLLy14BjPlI7N8w6yEkaFoCln2GshloSe92P5
vzAXgLnpTRECWx4OkViEjqy1YUBsUVDaViM4rfFzyPwjYoCrdejOiAeyLGTL
c5u2YdwXzm3Xk60wmJZXxi2Tie3SwuKMHmHwfGG54t73FuS7aH0w9WMbvh41
c6s0IGAVuByIKuwE7w4HdcwIBr6uzVt7mG3R9LBrWGRFNEp0vryTW06ABcrY
5DYRe1g46fLB4k8HBAo28CQ0ZCPlTdEzw17+YDqg7UPdlovvGkfb1G8UgmHg
yo9fhnkw3i0k8X3tP7w10nQs26sYnNcP8SaN+mFJ4ZxqV74XEL8d9NHbYw+R
/TTF7z4QYTrEK0QtvAEGjjvpaByrwp6sZzRch53gpv1kVnpCGRgaD8tQR5WA
GWeigU9qCa62a9WXKaaDL+X+xGvzGVBasRE7J5oI3XOfXFQyi9AmkidoiK4B
T37TofDQKkNWp0HxX52BmD2vwrG1y9P0vPWMss1p2J/F2U/BHYUiCum2ZD8D
gfapGr/Bs0bM++D/iOSWgyKDL1K8BonI1ihyryk9D1a/KulKXMmH9OzKDZ3T
Rch+xD8pVbwCW5c/j2RxJGCXkxuX+lAlPqcwka+JqUShFgnwv1yOlXt53ghZ
Z0EdX8yVSPMs2GEbS5qtrkZlM+mw2yfO4Qj9aCatdBCuP3QYM/pcjwGd9Eyy
wX5oXnyrIH+5EDqwIf2fcQEM1299vr1NxHw6a5nnP7LgY8eCOpnJPXyTNU3L
fKsAT4p7l/L2Z+KKgJWm9ToBPb9I3bn90x8pq3L2l6UmICmlAq9PpyGJy9+8
OiIXHm/w8XboZEOAPktSnVcpLrtkZbqKNsFyuwRwCBFRb2iHul6yEftZP/RZ
94Rjqzabl8V7V0j02ptR8aMErWM4TiV4+SKtu/+LaAxDMkOz7bzBInwqdor+
6r4C4LtR9at01gatGTUsB5+koajpw4FIqQLYSEhg/3KOAMptl4atrPKQzEv7
hgM5EW//Np3LCbDDkP+EAgsuuGMwqz0fmbE0ajb2WsTLa8HUlU/DN6t4UXOs
mrs9Vgb/vhowomS/iT/tX/wkRKqiS+rLDeo/8mjtfexDkL0Iyp398d/2GUUk
E1Q5/erxC6VOG0bZx3WGYCLxNfC762ks8mKg/zCoBgFnjJ+Tj0tA6dyenUVb
DdBsn3PI7jOA1Dd3VQwPGQKbQAIFM4chhuxQTynEa8B4pMDGqN5lEBynHqo1
PwK8nZ3uljTKqKTS8/DoQ2NccqSoXvphCKP1qlaLzgr42uNC1UbBeWBSds/l
oqDAt13bTkoJA0ohz4VdPQzlYaL/ytECohHSczKnvH9BQp8gr1t89/vAeEuH
PCQmB5fMbk800STgIcvm/uG2ZsyN5HK5tG8AK7dHx5X6O/Gii21Y4NsWGP7d
553Olwg6HDvdYuvdqD55qi6FogxDJ01Y9kg3475kboYLz5pxfjvupQN7Byq/
9ajwkevB7bbMnai2TlDaK3dX074NqsWN6KP5h3Hiyu3TDwUG8VzncPBz+UFc
nB2Fe/VZKNplXfE3px/YrRsmk/NToUTQv/yCTBeuLG7PHZdvwWFd53+U/HlQ
1x1iFfS6D2OjJOS1CxPxyZ9ErRzvXiC7tUWQze1BpUs6+31odu97/0UmdXIP
UEfL3KSlL8Cuyo0v5c+r8OB/v1T0C6/h7fKlksXVHrTjjJcLY9GHj5e0VF9N
taDvobV0PtMhiCMz+vjjWStUXv9+YZM9DX/dOLU0v1MPN+ei17MLHgKf6WUT
r5MNoD8byUqUJiL3J2abfZ8rUPTVGt8qYzG0vAz9eoitDhVf/rOkNGkB8hcM
k/CuE+ZvVX+K3q7DF3Qzh1aM++CPrhOjk3YCvNZhy5t/RIC7gW/C/F8QYUcq
7mf/4UZQMstcLWJNAHoK67XczmZcXb7B1ZzfCx83hR4XMGZgi7ZkQkhHNso/
mo1N4SyHY8f+GUodG8AxkgXrgV89yK4t46Jgdx9WK8cM15gbwUPU45HMTikk
mRyMuFZRgL1LLTUlkgPornqMoYqqAg66COaxi4SgxLnozqaZTAzRedcyrl+I
AneOZtd9fghZ5lOvr2ENUNQ+bb0XXAxVoS8/y52qRh5LseuGEd2Q1e56S/V2
Acj6pw9paVdjd63LjXm/FEz4l6975WQgNuganas6Xw9bzJ5pPiIN2K5yxcHr
agl8cllQJ5RmI1nDlF9Fsxv4+St+3DsUiEme2pzp4ynAU9zvFKYci72UCVFs
8vUonBxL7tyWgSORZqDJ7g4NTxJEIj1KcLF4RkHCh4TFujOsz33LQHCLR/7B
Vhq6U7qU3acsgumtlMA9F3LgjxEddRhPDdDH/7Qpl2zCqN5xfrohPyBUUcvW
d2aCYI3QZYaUTEgR9vReXS3E/UqUdCbz7mA2MDw7P5wIghGSW5aHgkHwdGwG
5aMK0Lhb+vg7Uz8sSti8HilKQ2Vy0+L/f0VnGDnS6K1VAsYR9ES/g/EguP1Q
/0BwMuremXdmCsqAetbSBgUBIsZwHtB7eq4R+rMPZRxSLAc2PRaL0rxyaKcr
M/o1nYOHu2e9WKjug1FGZ31lUAjqXOD5bCVKwmz9HySarzXoaMP/Jt59972h
chp/dJaAmgmvCo6S8qHnZJjXUesC0BxttWKSCoK5eCt1zs5YaJ3qvPJOyQKt
RMQeWwSXIk34jUNBb4vRNbYEhYTyoah8U1n2dwXyjnUbMKj3I32t7X4elWA8
KGYpPP9SG7psPtALzCcAS9W+qVsVjUDD4hLJOVYGlXwVqr4PqmDj11ZyoWwK
CBI4Nq86xmNc5iHpV3YBuOnBXCabWYBJI4/6vtkRcJyuSva3dBjQxv1tvCOd
BgHJOds0FKpw8fm59YtNDbCYv25y16sEemoJe4fvt8ARHwva0os5YExL6/0i
LxeeTouhRFgK5ph7Ej4f9oGea0cGmXkzQFe2oF0rioQ0h3i32MJiYf8DmUYy
5xTQYeNb6Luci2SibUqsJdexvKHazXVp15OK87UKKyqwSOEX65OocsxYk9Jh
rwtFaz9Y6fBIBIpXvYdvfyGBuPYffm2pYCymZhUp2M3tBPmMqdujYvAVbCqu
uBoNF3cMJl8dLEKhzBplu5UCCHo0IG7wNxQnHl8e58/IwLfRzgYS4XXAfmmW
Vet3JZAxfCg/P1+Ar2yGxxZ/JKLuk64Su0M1GBKW6m8omoK6FwL692/VYcDd
p0nW+ldwmkvLosM7CI15PrdGPq4HMr/0nXoDW5w6+4Crj8sd1QmXw5bvFOPB
x4d/hZZno0GNgbrATDHeKXBxMlfMQZpzi1sKpGZ4nPnb0P6GGuYItV9ZtRUH
wmf6ZdmPmpC2I7wSdk0fZpZ9OVXVxcD37u/jeEUNC64vq0YmX4Q2VilVjiQF
rIqmSeD2FoCMy1+NORn4YYpexKfA4yQy6HcoimuoAPHT97S503QoI/nSbS5e
DikHhwcYa82BLJGunVrpBP7ZXLpiomaGL1SYOb91auNLfs48YrMKengupo9V
qoJa8Hbih4eqoO9/3JSHWhJkyT7H5Qlcgb42BYFWHgC/c/+W20X1UKFYZD3v
xwmgcW4qzOExgKIAh+HS7+cxYmui2fOuApbmzdwfND8Jqs2+Zocb25DFkT9h
RbATekl06yp76jFDgzaZSmN37+zdIy6pRcL9FkFtt+73oxi58L2IR4X4M74g
3NZpYJfPpJk1LFuQcV075il9BhYmKX6x+FUM7HGKAgU2dUj7cofjgko/7itI
Cl/6MYA/GVOD8t1ccfQuoVL6ZBo00LuufqZpwGru12FtPxDnG2+qtV3NBodn
Nb/0hqcQOpIPcgiXYgXn88hOlQmw+DZNbq7pB74PvBg+2Q+jLidF76ZlDdDE
a//9RleMpLcaplz0RIz7dmLZtrsb6SXW66lzSFg4dmQ9kKkL6yjYr9z/ko6s
90/TnZcrgTbT+r8D5MEo9N8HJcPhCCSLvze274s+9MSol+/trUd2d5anMrOJ
OGuvkyf3shRJ+gFGF4gkIKtNT6Kzl0aWixqjAe87wUi3qFx3rRwaRm9PUq43
I4MktueyNqJFdhnVKnsW0q1ZMp2+R4Dvd26ftD09iFS/v/Z7u/fCOtmlsQTq
VPjoH9bjqfQQ2b6pJb/m7AMjy1v7+h0eoDHnrU+VigPYqV1qZrHrTXUuUyEm
ySQksS7Zvhgj7vqCX4aKsjWocwoorhjUwKjCmMmmYBYSTKvUB7wLsaT/yN9H
tOVQSHbozE2/cnw2JVd2IpcECSW07KYzVvCAoSL8xgsSsL14SFbcFoQs7UYd
IpTpGBF0ZoBHLwyPOzx9Z+9Zhe6eKZfmy3rw4X0B1abqSjAtKhZO7WlArbtU
bpI3yvGT+O/ebJYaXNd6USLK7g+9fsA0Tz+M1ZL/jf6o6wKyzrJ1k5sFWHzJ
8DhhXy7ShpNCRjq74DX3CduFiCYwoZQqvfEhCK0UDGxbbNqRaYeQzQK5YHQh
4X61Tx76lWvZHEqsAGL09/dXPnYgaeYOXcbnSqA3TXlGlnYTeiz4KW2xFNu5
2m/UURaAoMjrRakuV2R7NRkrz9OCUzn2rsuZRMigz13zf1oGznF73EQv10JA
9OsLzRLKuM/na3+vRQf+zBUeKDHRwAdmJdfpaEIxkJBAit0qgIlrFwrj8lKB
/lu8zUuqUBB2d7h+4m0aGv7a1RiBCNj7krXERKwIeLgv2jYezcCabvm+a1+r
ofKCytm7xb7wz3iihchcik96ZN5fim9D3U+MRjpfQoE52vmpr3kFjnqw2D/7
Wg7rlf4FaxMk5NxM/7c4XoJaNGRFg9VVwHQl/ZTGUiY8LpL7RhbXgi0bJy1s
4wtxJYRznfXYLp+8rZ5WZS3C2frGxbe3klD+VWDO5WOx0M4pinlUOTBj4dh8
/2shsog/SQ+RK0FtnfdgEVEKOX/hbNjnJkypcKtwtKyHgU9HeVp5QrGk2X7m
3YEEqHl7JdtjphgKc5dn5DnCwe4T83nGw6F48M2v06q0kfhUvcrOZrsC3I85
lGuJ58L3V0/lF9ayYLL9U2+WXw50Vzh899TzRDrZtUMhYom7vZUSVyRfipaG
RznGSI34xWuSaV2JAOO9ZGbt1slQTsa/kf/GCo7m5Ge525F2c/FJ6+VTApRe
Syn0lo9GCuLD8eh9hUBO8u7QCiSihrXk2gdCDVLk8NTph3Zhj91YkXCIFha3
dRwJdroD/7bYGl8U5cEbbvN0yYIi3Bx1VVzjJ0DrigCZflMeKLHqJMs0lYNo
XJf9zdc18MLmudljaIEXeh+vcjfGgV4BVd5FoSp83+573DEvC6rHMwpEboUB
ExYlBfQ2Ahmb8wkNdRbg61TPHrKMxj/mGq8lb1eAdtPS5ctyRaD58dzcn8oI
JDRL6/JP+6Ev84pVp6c1yGjf7LOwbkaS7Mj6X6tiML34A5+t5KKb2bVh2rB8
fHH9sJrPh2Ik1nQm/FpqgMjT7mZlbWUQcaR5lNy2Gvoq6bS+XC5Ck5P7P42w
VENHXuMPTd4CdHCTjetJjgDCcJbokmUkDmn+HLAmpODq6r5fb6oaQETR+oF+
+K4vmBYf0dGogJFzlYN/HYjwUvP6tutsEvTw0UZuUF2CSOJwf2mWHuRYrwif
GdSDgFsBy2V7zyLT3cOME0wsyLrwyE7gqjroHQPaVklupKRKZHApMMFRP8ED
JX8uAo2Vlb4NnQDMTFmtinyURnb+w00UE5Iovs/YYV5KC1+2040XghJmGc9I
g/B1SLTf/10mXB2jhPxFguWMcY9YSgO74yWgGDy4cVxZA6oGSx+phYnDuppj
1pU0KVTLfvPw6Q9NSJA7Vhq7Tx4Wv//98mn9LNLfcqY/P6+Id5oLdTPN9GDv
PV0/M+rLqBcivl3Uo4VcrhR5JbaXoUHH82PVOxXYEqsd4iwXx6yiOZt7u/k/
4l/4zpeMCDfHx+gXo9tx2/St5wmXQIyNlLBa2fbCOwsLZipTXchwbZNre4gA
dUFG9EcLBoEs7+hs2atGPM5bV0IyIEIohaeLS2UvEOTGjD4FFWEnoVdJti4W
FEbi/fp3xtDXP1/PJaYX/DZOrl1Ny8b7Z15fOZ9RCBddo179rUkBuhcHwmd4
eqC67nMlX9kUEka7m2cSkrGZ7qtXs1svsC2fJmN0yIGQgTcv885nISa39Tvv
aYAnFNGa5P/14bh+px7tAQIStCaZbqXUgHnbOnvkLi8rl0yF33ayAuGmwY6h
8mTw9isUjBOqwZLVPY00/wgYUB3P07fTDjmTlDrpMYMo5F22x4psAG6P8UaF
cY/Cp9uBMhwVD8HuLeeC0MNkiDtKs6pzPB/iXv1J4+VLRJ7+bwsZLI3Q/YF8
o063Af/TbBtZjSqB/Tft2MOoi0BvqGGYWaIKMyIGnNm8cqFV2EGQS6YTf2WN
NN0qqcfR2cMjhNcDIJsq1Mem0oLcIre73b+Xwji6OR0j1qDOu+yLkinVcFJ6
0LmrtQp9ze+72ox6AZNBfZ6Myj2wttWxOuzaj9Xwtd9BpgrYah5m5ppMQHbr
Kfc58z4QDRk4t6bfCickbaSfmLcBl9L9i98DEcyDu2UaGbOxwnFIwqR+d472
Pasbv4rwa7Qxmy+lOYgG3XaUu9QIN8T7pDiO5sEHgyYOyZgUaPMukdCPbYAe
GZFP9HN9QPF4L3Nvdzuyayg3vtXMwRj1z3tmr7eC+injn9eky1DquMC5hxcL
QWzGz1LzdSTQcHZPBRjVIoMduW6aUT+KpnKWHwmIAnoamebvN1qhXn5Iysux
EERX354to86H2riTk5/r07FnYNZ9T6wVsFx7GHigvRr9xdtMrlskwezPaTWW
q1XoaUouvie+GTz3CGZvh95D4hZZlHuPGxwzOWEvvT8AdyYu71PMqcXOxye+
Vm+24E6aitzw9XI0JSu58OhDEqybmHEJhLiC3k/BH5UHnFCmsOhJv30Z5Jmx
0GtPkKCS0YBecgHR2dg8vBVCwS7L9GCFYAK8WvpEe+0bEXV55DbS7zeCV2GX
Lt9EMz67ql0eLhaJCtp3ogcvJGNo8TW/0vQMYFIzaE9atYaMz1wmS9Y3YT2U
0EitXICFJBmRJ/U1kN+bMp0ZHAcpuY99/JKj4dbHFGYuaxLy3G3dilWphp+Z
zG02xTlwjLvmZdJ/DcgfeXPnp1gOkhiYlB/45oKa9cvQxzYRQBL9UNYxVokW
9yzl8U8NRqUniDfLJYDXuNCN/D2JeGqkKGPesxSdhO99rXkfijri1EoCJwox
4vaK39L1FBRgyhTXmqnHmO2YQJ13bvC2rCxfyTQdl/IEFsNDQrBI7hmtlWsu
PL6lrPy4MR2C0j9bZ75uBr22vgM9odfwcbWUye//iuFr2/tB+7ISpHWJD1ah
zYehjseztEq1QLIQGvYdL8Ur+t5X2S5mwEeGVPvM2UyYVNIaF8hIxTNjPMtL
9tWwMlgXVFXZhH/OvNtnyFeCfEw/O2cItaDglv3JiyscKl0+um5QpeLHQ9E1
q89SQSF6xUIpLwWK0/iHv9qnIUWe1YINVMHOonnb3KsEFNUUntNyLEEJuoi7
f3Ti0dmS67MSVwVudpeOfFiowLu6kWlae+pAe+6xvYV7Aqh4X3Y41pCD1vsX
/ii+iMLnYcr3AnZ9Vy+eTa962AGHRL+d4KUjIdO1R/p9ha0w+eVIrZJkA/K+
XWt8+7IBj3ucu98nHgpa7p/SGskIEHxEIk80qhq+8Ye2xJSHIkv158PdBWXI
mHmeT/5UGhoRcy6zC2ZiSFff9duPCHiq5+qVAssCnPvaYeZRngnaYpUVjJkZ
mDMzdqn7ViDuPfO7VUqrGnumgwVeB+RgRBUx1rcwDIhi+hN2HAT0H5a0ng9q
xKZIdrHE0HzcVPQ8w/4iFWzYO0v+EQqwWnBq7hk3AYjU0ZpHffTxR85gwMBl
aSTjoF0cF5rudq0u5LDKOodkdwXb/9741a315WjK6eOSWEm+aE3LcBIPtqpO
/GE4hfvkotq1u87BHfE353UXVUHln1TYbKkBPp7nNa5zlcWFk4yyq02XoSky
4cWdC4ABGUhpcoMD5wZ7nlMsHcSgm2pPfWq44X6ChbSghgRwVfdqWc6rwPXr
LXL1QQKwQZ42IP1CCiKM6wqesXzvVjik4WBodhJ6fCyOPvmnDS0Hdshnv6qD
7tV/G2dkdNHted7mp1p+3KSrZFXNE4dM1kcmFMf1gaxovNBN+70Sy4Gi60O/
1KCnPzZSPLULN2/vcZRoSQAGE+7fQWLdeAxcty7NJ0Fuebcgx0QW/I3g2Hz6
sR9lz5j4C3fVQfqLenZqh24gu5x8ZIWsDY61UrjZ9fSAm2zBrWOrjXAGrKee
fy7BvxV8atOVPdBinEAWnzqCycLvB166NKKuJ2Ndz71WnBb6O2tNQCi0ebup
KtMGIrzD5Nk2LfBmYtGJQ7MdF/3f2g5aF4Dvf5Vbd/t7oX2+eFTfrBByLLKy
LF/WwkKR4oXZyAyMuhc20V4xgEUPnl9a1CoFtTdt0lru5Rj5U619eLdnFOqm
Ar3S2+BfkD6p9nsXJJ0PZxHe34Qx88ZZpKhMEL7S30NoKIOw+du66oyP4H7i
0/6X2AWfBPeuMPyuh+Khn++VoiaA/cc8TwNTDh5lv3W9KS0bAlZzZefPXoHt
sNLYkt9EvGvMsy4v1oWtYp3pM6wJkNjbtyURXwK2KwyFUaeyUPvpMalHJwlo
sRlL3DHLR9pb/MWv7+TD+7dFeoYzuUBMrW217KoFA+bc2U7bZODfIGhmHhqD
2OPjKj/4G7GjP4B5uLULzrTGrAUJ5yD3+y8XdRn7QfPxEpfxnh6ImRAfIlK2
4fx5wSxm9kYkPgigkekvwlOF3/K0PrRghb7jZe7lQax+r3gue6IXGzSTS2QC
WoBveJnT+th1PM59SeEnWSnsEH8VuB/pAubp54WfViNR4uOVsfHWNrAWFTMw
6/SDECPerP27fjIdZkXhcDwIl9MP7D1EUwkV7kdjnjS2oqGFzGzI0xzguDWi
4KBNwoyksDid7v+QrHb/t7+0xzChtnnInK0Bpzan7WcdEOjli0wEXzQj39Tk
7+4DlfiBLMhkUiAZaymWAkUOJOCH7tf3u/hKwO0/thxrr1zUPMjTLL1EAl/u
FmPXUlcgm3AODfmiByeFqfw7jXtwbnlOk5rfCURjlQidREf4OfZIqGitCtyH
9jU7NxXCWuGj6by2Qli9c38mMzURewU+0AodKYIl0o1iZfs6lG18rdpuWIsS
e7fH9csr8fnr6LPDXgnAMr9fgOxQLUzEX9ijsbcFc/ZPdw8iAe16/v7V/ROI
bsWWRzZCU7GS9Y1b0dsS4Gmk9c5iT0NV6d+fqs5FgnjQX6OrM85w41TzwlMR
Et7fIXxX/BAEi/d9k/tdMrGbMtG+gyYOxencRXaqvEFr4i51LlUPOkUdfXX+
djzkCMeFi31rQtNeSw6da1ZAPqPBYqpMAnOe39d29zjY7VTMFYyl4XnON89d
z5WgW2J0/NZ/+dB88J1LApsnXqmK9aJrLoal7+iuyZ8N6tdeH46+XQ+KioHc
llfKgcVFdIPiQAr+iahRUTS7Bz8HGCsT5koghV7wRO7bYGiWM2xceNUJGzeq
Zg97kkCo+XeNkWAe2v5h5cGPWWAeWVQqe6wefxyIE1JfyYU4Fp3DsSeS8ZPW
vg06OiLItbrYzUamY9w40434HCJyiDVeEUqrROk2qvPbf8owLust1RP5FHx0
79iI+4ksiOXiomMxbEDJRav7RRVFsGckushJmoByNMZcjX3ZED7A9fErTR4u
uL+iDBRuhaXLL+OiLDNhSRqFK3ky4aXssX33VAtwU3k2P5oqDBR6sq4rluxy
MW9zDK2WMn7kfuO+PBKJY2JHMoq3CcD9O9be8UUNPPjKwfxhN6cpnJdGh0bK
0CyJQ/HLUA10D76TlCNFI61i9MjFXd7O+VP23LU1Hwg3zZ7LNQWgbDSX8l7H
AVTmOCY/4pIBuU6SjB4/S8DJJX57sDoBZKblGtTlUmGPy7lXybcIKFVYSSO/
ngIHB6qXL8f54keLGSN7x0pUq15kDyLUgZvbw7mwN4WYHfx+pGSwCNXkjnVz
UjfimqVV/SxfBfjlfReTeZSCm+9/vjmpGwPm+ZWZUJ8DbjtRfUlsicj7672a
bi0BLsWZR5aZtUHs5h/l/OoScE20muDpKkZPx9zWunvRwJuwZJH7qAxd3/o9
oPLKhmKfBe8i7/PIRWngb7VlgNNKZ1PsyHTBjmZq806REhR2M8n4J56GA5va
Q8wEAwgue8sgeFIb1Zu073BPyKBQxkb2sq8UvKNiPGAYboJJDHkRNx4CfEzK
OtxD2oeb7MQY/aMakFvIwPMwVg02vh0dUOA8g++urosfbFJGZe/jEaQ7h4Fn
I8D9oc05PPzAGjlpJKB673jTtzYzNONXvKnhw40xjUdODe/XRuYb709ydqjD
zIP2+pQvKkCxebWQPJsLtTW3ud9kyaH13gIn2WQpEEy5/rFJ7iQq8ffiq35D
sM6OVpP1uYzUosR7N8q60VAg7apTWjraOKpf8inrQEHvfiaDlmJQEedKFVHo
Am67nAt7Xz9AT/HPxyj3pGPmUrJrt2IDTMsf328xOAjWe7rUyNf7IbFv8niu
eiNGHmqqPuuWgsFX/jL+3eXKz5UP+vVf92CE336R2oB6DD18ryxzZBiZmG9s
eW5XoHYk4Rb5yxp4XiL7NtRqtyeWucmNSLEgw1B59uy1Lrh//dLC/tcPQbvG
fFF1bzZa6TwiJfGMwOaCWmyBZi9Ep1K77Mce1BSTPHCGuh94ZTaEk7+3w9DR
PeTJnKlIIZI1ol3bDD8JlfxW5ru8GlgitN1RBnfI0IDDpAICMvLSDpzpwpru
++mHznWCc8y3adE7Dbjaaa/k96oEPYVSXaoSx3Do+Ri74oE2rP5TQk2lE4pi
qZmrLMdLoPt7wsXRuX7MvuvY58NLAou06QvGzGFwmjdGjfJZLazni31+WOCE
f4IFNAN/5UGAB73NvGkBkPXQOiom786BnPayyrMMPBlFcs/u7ML2pUVhzuIq
1P19pDzoUS7KfdJ3T9iTCik9eu/UxGLQwuHP+Mv2ciCt8va+uZiL2j+akxgf
F+HJG6cUz+6UAg8Lnl+0JKA1syNPTQoRNKgUujV6SeD+9020pRsRKamS4P3R
RujQvWn39WYJ+hS9SmVxbcal24S1jYDdnghx7o1m6cTPpFP6ZNsl+KvyF8Wn
0UI0Nn8yLXWmHs940NBrMFeismeS12X0gISpuR5n6np45lj2rES/Fzz+NIWm
8wfgAr1b40xzDoxFKL9U143CEwGQWGuZAWHfVRmyvrWCPqq0/G4OBBax/f80
NZuB4QXXEKt9PvQE/2OQp1LB/T7TyQ+NPLE+sz3rK009RGlvvxd50AaWNO+4
552b8d3ASdacA6Wo5hbNNr+nFARi3+zNnq8BfdbhC4/9iVBqJOXlzlQO1Wkq
F2Rzo1GtOKkPzjVi7F6WMd6YchDIff22ZKURTlr8UnE6UA/v6vRive2LwNRQ
NKa6sQ/mVhcpt86QMGAyls/L0RFyaJIXCsQbgInTYsJ2mwQUHFS3UboVmG08
eE4oNcPzifnuL41VsEz9yZdHpRIzM6da+lPTsFF7IL5Suhj5Ru3VchX6gYX3
wZ6+SgQ+2psyuq1GIPw1vCTGqBQ64m/aapzc9abJ/nMKhfXILqZy6XVWAvxk
kGwee+qHHUnZlZyPCqGvtU52ItkflFt1ow5sOgCXMecMzVkCfl3iakprKcGB
MOa6KpEM/Bluo0yekogpWk4sLG1NMLY8y2W1GYb4Sl9grycRW7vEHpjv9udf
f8r/GkQa0EGCZtJj/RbknVc2i44ohS3LjVtsogRI8TNr9nlSBhv1Gd7scVVI
fS2oVr2PCMorV5sOa2aDwBt6bmdNIjKmhAfHaxRBno2+Hfn6fRSzeVQwt5KG
z5hckxTO1uJETIez/sF0bPCQfrLyvBys+Iu8Um9VQyGDeAK1VAasX7/MxSbt
BDMSycwtpxrwuZS5ntl2MpYLFLne2+8GhyeZNF1F8iGj/iuv2xwRB5+9+/LW
pghe6hQEbFxpQXAQD7uy0YASRpIsbp+LcEGewlt02g2eBp+5mprbiINyOmHr
wkUYoNlSoNgeBNath0Ro+gpQ7jj5AKtxIW45Huw3vlmKpwzT1Ou7soCPvc/0
M50NvCRdM0m+EwjMe9wPXTpBAmWtPHvDYnPIetpds3C9Bmad3vkX1pKAL7VW
k+p1BZCZiP04eOEy/IzYqaoQ8sHODKOXwrMloOd+JpjIGAiSdmZZkjW5aJs1
d3SqmQDyn6Q+lCY3gkdjKEuedSI4bNFS3CUk4VfyelWhynLsfpP3hvfuPVCl
uNu4tVYBejlXrj/zz4QzpWLUA04ROLvv5k5XFwENZ2Q/pr6oQonFZY0ccSJ0
0szeaNwpgfE7REH1MCIqHIr63duQh66kfpcxOQ/cYA8JXz2QBm5ndCSerZVA
D33SRw5bK3QNLnn5pVUL1T9ShZIaToNMycqh53t5cWj8GOfoa10g690SkJV4
riRXx2v66JkSfpJ9eN22SBc2FO/KfAs5gHebU5lZzM9jzuaUGuOiNuhNPenx
Tz8H+4p1HOTuXoDf4tOTnpe1QCDPVyqmHSDgkDyF2nGAxw6DCj9YjKBOL5y5
8Ro/RBVQHxN5qIbKv8iFWt/tdDuH0ViuNx5A55XA00Mc/7r3mG/sW6fQgJ+t
dy7woTq2yzXlHiadxChWbZ9RTxUQfHcnPbpBHWmmF2vPXBFFhcmcDzoyevCn
abA+9O5F5OYJGyd7cBJ/FH1Qv3iwBzOPD5d0fW7GsxEsrpyVlRgdUZ9CtcuB
6vYJw3dyekB9bGrIvGoMf5YpqFtf78C5cNkbKlspOGvRx12ZVACFJbqlp3y6
oPTmgcG6Qy3oIvjsoQD1rrcYfbMavNGF+wKEElCqFJ/nt1PpRPWDn9/WnlaD
CvSZxy+Rn2tBZkoz5c9aEgRJHHnW86oR+y0nyDwO9kLnNmWfUnEp+BV9OzPi
Mwx+3HQEzqvlsCZdPq7G/QjUSFbm7RxZQBb0p9/4QgDO6//g/xxajN5SMqNn
PIvA5/atrnT3QdCYDHnneb8K8iZkxNrkW6H5k1/MCkUl/JqIZ95TSUQZ6dN1
yT3/gVQnGgjUF0LMu5MP7q4MIeXVTfNJ/QxYe1gugF1JOJVqdfVZbzoutE4S
f+0txrtFj6Y81BrAyCQ/KH6iHTzYfnBEn27ChQK5ufAVN7Q42X7D/GkbiC0K
B9QfaoJiZWtBw2/DsDroIkye3QDPd3y6lcqGobSDNqOwNRvDx5MPnjJvgAOS
xZxJAUmQ3/fGS62yEflDH78K+ZuHEzU+xmXVJSh35WBuYxsRo/yG/SsJ3Ug3
+S8z/G4r/P1M9Y5FtR4f/DteuaegDc4JKZj/cNvlnO1LZdTkdWi2yRXjbdYC
cwPkRzvnozCtU+PEgN0wVqxFy7eJ9gAzBc0vLp54FJ81WMUGT6x94XL5vVY9
ru57e3ffZC20dA5QC/bmwwKV/Hi4qBfoitrR2RV3oG22tq3H5WbcDKnYzK4r
RkPHzfpTxwswKHFfX3ctggov7316nxoQdWcks8kuwaXzuox341PAKt9Xpruv
CR0URC/2PatApjfHqwr2e2AemfNm2hECPrXxMRSybgIUyEvN/9uPYQOpYcSL
0XjRtPWSf3IOvFPMTrZwTMD1xUgqMbUg+PnpDCuvrz0SnZrNcoNc8WNcNr96
MRG4u1sC1TybgGY9JcenNR4atPUi2sWJ2Pfj6kneG2VY8pUiulg9E4WOvxw7
Np0I4v6XExP/dmKK3cjYQZ4GiOEkfI+dasAB/6PdkVK16GPwqXjsgB9M/P2a
WbnSiWrC/Yq0gxFQfaOOsdMpGBfIWk7YfHMAGslPTgesi4CsrPrIMa1ALJfw
WHhgkI3T3ZTqRa7tqKy5ErkvqBOKf5CzGmxWIuaRX/2bVgM8x9TX/PQLYHLE
LtvgYxWEhfrBHEsjnL8hkmziUgk8bl1xLQcz8KBR8765n63ovOyZbhruj56H
l/nn2CrA8dmDG0YZNSAdIjh5530mHqg+uS+4pwAd8dONj/9q0Xy/lEOtWxKs
Pl6d91yMAumX9KmHSSUwHJh+ZvxXFow9L8k8s9SCn0vX1kquJ+PjU8nLyuTJ
IKJfeJbyeCbKyLU3ej1oxJFbHupP2FPwRvEaB+/zRpj90xVla1wI53oqCsl9
M/BU2AHDims5uD92YXt/Qyf0vonTapruggRhft8bYIsya4dcKw4E4wRDt3qR
eTYkf2HdDC0NwKs/NLI/WGSDgt3EaBH6A+nAlZTlpgYYcVo5ac8TBMYuZbS0
13Lh49PprID6IJgitVWnkBKBjMpBwpTOF8OqZHw4dZOAUjonXIcsGWezY69e
O1EFilduX206XQKPlRxoneVD0c7gqKjPQAyQg6WaIakBCMl8vlSj9uh6RXSQ
zdUR5ipmLq3MBqDMvhyfwMVcbJU38Lrd04ge1DbXhBYS4fn7oh91SQRsLWM1
fPrCA+nvrSgv7nqVs9U8w8/rAdCvftiw3K8Ig2xOCLJslGDAK8mOcEIukl4u
M1am5WJCmVG+hlE9Hku+t8nwow2vsr7u7P9cAqsNdU80DRsgrvMBncqzXS6T
qAPe4WRw5JAwuxYUg8axnZL/jjtj8tABtqW8Slh7u0dHuTcLHODF/tXlLOzt
vSkbtU1CBUdjSsIUcbdvr5+rmc8GtGeidaasgrbbzG/33ArF7fAYisfFachG
NVDBIZCIOq/bH1Ydy8SSartXS/oaoBf719XKb1Xp9pdD/g0/pWGkWz/ovxOq
mJn+pfLoCzmM8rU9o8KnChFcnQfkHYwxxlw7NfmvKP6L4LzeU30WZTTXdFK2
xHa9xrTcZoobo9L6aw1Z1JF3cyT4Py0lsOjNNDq1nxrV5X9zVDxSxu8JnbZP
P1/C9GPXWJ8Wy8Kq4de/ei76eOLZO/Kk3ksokJJ7je+4En48eODDarks/pbp
Xz4iKA1z1xfHa56Rw1zavXx7eWnonP5BzFhRxdazlml3OOih8pXjjq6yEkq8
XlKYrOYHsrApzmsyijD0Jepv/wcTFJ304qLLakPD0em+yMFObPPv33v9mBmK
dJoa6lNVQzrxLgXbMAnYegSrhBWHEXJPseqPIb6T2sw5Y1KPiau3jpHFt+Hw
a2LLZGYXtFEm1hlJkcBTLfaGXcAQsNZ9iXfLSgSSb+Hjri9JEPi21cI7hABO
7v/9cJRsBetfdn6Fb2qBlHpqPTS4GSIuPhTq4RhAZ1cv74miXvhprvYn+E4P
MJmcNjIQ7gWW2KMppxMr0WR5pvTT72boK+zmfyBJBNcIOsruve2wM0Zc8mrt
QEceRgbdyXH0jM4dpbLvhxN8IYfKHMtwzS9jLiC/HoeOrWxvyRKw3bWhku5O
FgataU2sUHWCgqJa8CwhB2atUq/vI29GNr2F0Z/dMbs9oNYRuhMKz/2LzQyS
e1B5r8nX5wrnYNlzOF23ewBNQ8TY5j6MAftwyM6v7gz0npwVaPjRCEr8WtHW
Rx5gj8mJpzbrPlCtBK/8mv7DWtqbHDQuncgYze936FshTgnk/ZOw9YRC9hWP
zPwi6K6x085R6cBVWvZ/fBfScOC86ylVm1rYq/ZC6NXpGjg5+Olfy5t89Gk1
f+gpnAK+PPNGxnr+mJBdkeYc6ANJ96fEfE614zVZyyrnvQRMLbk+13C2HkyS
YhMDTjdAeRm1F8sthDs9D1rVro0An8cROiFfc1S13T9xl7MfNU9UfrWYTwZi
fOhR7/xSIJp+semitsf3XM/UHpdGIY/jXLNgTjsEpTbGvwvPAfP8d162A5ng
2Ct+JLekFKlsd8jST7SBRrwfedCDLtSuFN4SPp8AhO9pqiKxPuj9LnGgnaMH
WTJrNnjaC6D75b3JGOFivK1d9qC9PBLf9t2kU/Uuh560+ZTaPb5Y6METLnWs
Fmy1k0y3kprwllltr/jxDnST/DlzxLwdGt1KB3WuJKKewIjbw3p3OH8luMSY
oxzqN25bj7+qwj2WPoXXVRuRy2Lmwe1CItQtfYr/XZULA4H6Ofa/y/Fjv/kK
uVc9tPezhuw+JRx843+pQisYXx7p48utJuI3d6uUD3yNwMjbeIrXIw2iSowL
Od6VAGmm/ULaajAGaQvTH+VxAZOdyh9nA2rRyOQzcX41A4xmfR5Q0Lrg7z0N
pXWaBcAilJx9Rr4Xf1dzaDvta4PVq157W2RbcFy54+Q5Rmd8b/Fp6nJnMf5n
OBMmuF4FGn6CdFu2UdCocN2neKUZVX2i1exsGjDt9K99Mmbpu1zRPvP7Qy80
MZxOydjlt3vjkztV4RGg7eT3nK8hDkhLcv2JHk24wSv9qoksFBYacjlOs7qj
8mnP8Detaug0KJz/vboKvfjG19nSCoDMo0uLNuk2nrzDwbq+3QMWAQOi334Z
gL2U5VhifQb0LCn99avRQPmEkw5LeeUYn61Xk9OUDT66HTXDXCWoXK9ua//Y
FOfbXYNYePNRnkWpqaM1DIcCbR+wxaXhen2haauTOxBnzltq382Cm0f2mZGf
SsDXM3cuJ9M24JrvYdnlDznwn0RxTFB4IzLV7UscuhQDFrkcPoHvtcFhlvFM
U3I4VuStWMSHRyGTVNb7DvsUFHr9difUIhc/BAZHc7SUY0rTILU8eRKmLO2t
OuMVAMz91ecWm+vQ9izhO2NXGsra3V3eMSPCQY3pCmuNQGTOu3pRPrAGW+2+
Cg5OJELy2ePpLYMNqOzOHWa9LoUUWzpuzxfq4T310R+HG2KQj2TeYlyuhQET
fWp3yUOhvb15/V9WAebQvztPvZ8EVu07B+kyi8E25evxrzpBsEnmxDF0KAT4
FCtiO04k4fMPB+3NSAVYqLx+yH6yCPRaNGZvdrRDyuze7DNZ9UjzMEjkSZoH
EovEu2a+JuLa5fX3BP5CdP699V/CkXvAZHUtcyMnAYzoaCfrnOpQWcPn6tNe
F7Qc/ZL8UScJNOnn65d3LCC244jh5u8aICSm321mNkeeVy6TM+tdyGKfyeqe
0gz7N/fPlR5N3OVyg9lFvjR4K8hRpXQ6CsatLi6cSzoBXAnvpWWfKIDQ0XD5
bWddOFj580OPlz4EWJMfrg8UBiU5ha2huTPgvWU2LjVzAtdbyxf3pv9Qcjho
e+qKoTKwcZVFcPByYvGbj9By/TLqrR+TyvlPA3q/R8gUHVJAc+f3ofx3VHGE
zfYD9RgNHro/XBQVxYlKn76YvpzRhOcs3N/JdHSAlXbCWNlPDbgVXW5kMgjh
yKbaQpS9FH4qv7B3LUQPF3n2BE2Na4NM/dHvLYNiSOTV5ZLWlQDel85XKGaV
ULBGliGURQ+v2pz/M/FTA7zcjA61papgmIX6lkLcaZgRtz66WUxC594xDZnC
Llx41zXpc7oehjQ7zbidU8Fq8SB1f7A/PrEpXv+wu/8vxN1+ej6+FyOruPhn
dgKxY3799WXOFrylIT+OwUOgd83fL+ldC3jRRCTJUz2A3D17K7486APPbtNn
Vld7oHNW6tW9yR4cMVGvfEZqAqWM/AZ7QhOun+BZaNpqR6ed45SF6pW4PqH9
t9o9Dj/3B9XS9tdB37q1bCR/PVBeYFwWYR1FoYBjSUsuxaA1uOdIkX0pSKu5
ultbFMKr0FzdH4yp4JF6VGhCshR9v2rG9Tg1Q57bQtuL8XoMSTUaOtfUiHrU
VGRvfRqhjNbR6E1iPxoaiZx9Vj0AHzpL99yRasUdSUWWXWsEvW/eXp22sbDZ
GdmtGtELGdkW379ploBzkwDVvGcLBuQ2Cv7lfoAOO0dnr8ZXoN/60ypCKQHb
djYWv7zuwaAkqsfqDESwI9s8EzodBdPvaXIk4tPRU0cjT/19OB7czqcoP5EA
5Z6S+tqVTUid6WIwFjKE08mfS9sZslBQ2prnCkcC0hydsXgxUoovT223jVLX
4WOdEne78QzUG/77PbKrG2WPkZg6CHk4nBfIrUzTB27v3lz1oE/AFG6XmWuq
ux4ss5XKyNGHNUkm38s+FuCHOhKfs04/st14c3+bohcosDhcjpuEShyCpWza
rcAh2H9gOrEB7rVkq58zL0eTftmRwD+NYG8wqdb2ogBP/2kZWpVCHFx1e/9U
kgBMz/IYacSKIevGk8qCtWKc4o1Nuf3pNhqWWjXk2CTiRQfipvJ0PlrSMDAF
ppQC48z3xeT0fhBkmr17TycbFqkN2fi6XaCvwYuj6UwlZNEkzjjx1GDhqbOG
e5NLcCeOwcRXuBnS1N1N2ZZ74DTlHkqJ0kqwIx2xqrbrxhHpt2RxNTl47tmO
Jc9qBlLeeCqSKOgMhtnGG8fq8lB0um70x1QGPl6kjEgVSsLvpgkeero1YLjm
TJe+4QUCLdtWL1wa0TKi6/XLW0lYKhlzmtumEkfJGhVNFZsg6Z/YhtJEC+4/
PsXKZ96Coom5VDGid2Es9e6kTGAfaAW07gNDAkrefL9/sSIHW+OC65IuBIAy
vfG5aKccjNp79kJcexw6dDrfO6VKAvW7xSv9J/LwwxvuXyGc8VBOe3Lqt00M
OofMTbraecPPGrn60cxUJHxdYs3c3d9J4bJXfl2rhL7WiUdaLjFoJZXx5e+F
VBx+8KnK+TwReTRdfEJ4EvBEbDVB4jABp6/w3blvWALEVLNh2fFQ0DQslI2y
8IL24/RpX2x3zwn+l/b7Lwkt+3tuu29nwdlgMXnLhFpc72a0DA80BD5np2VX
n0Z0NTDv03uy2/9itw7THIsCLdM1a21VIipd3bmZ7B6DB/m+nupRDMfMR0MX
6VKaoJw7bHpSOw7FBgJG0YwEH8vOFXiPRUFnkGr1EZ8KNO/f+cr0Xyn2qaT7
u7sUoVi3cmYIWzUuKXS+luopAhOLvn5dsjKUVGT821zZA/tc60s1GQpxmjL9
5LUnjUjWePpGzsUs2LA5RXlAPABF7nxl/25dhy4OIkxfBXfzfn7qhKNxOKz8
PWqh+zsRI37dU3hKRQD2rNSsGNcmuJjP+710gwgj0jeWlW1r8ZF9RO/VwDSI
DyrOC06phC3Hqtzq2ELMi6GetxepgGldvbNq/6PovMO5et84LimSEpUkKw0j
STbhtsnIXhmhSKJsoWSv7L197M3Hx563vVJJSiGEylcRDUnh5/fvOf+cc573
c79fr+s61/UopuL3nxdMg31qcO7Lp8NCFanwfPHXzcpztUg2ThUuTh8FecXL
RyW/5sLPh73x9yJJeJ4BNV3NEnFIJPUeJ3cVvskTGtCSzQB1pd//whJrwSb9
3D89tjpYlePfN7TvBrRS7bd40eIFPo7rhgcyKuB6dDiX4YFy5H+cxBn72xO5
4prPPxIuhI6s4j8bd/yguf/lA+cPiXjt3gMvYlECWHQL7nTGuAPZk1aJ5ROe
8Pr+Tq9CPwEWDepcX1D6A4H09OKPolQklpCfVckmwLsq2+0DtKVYKaMV8SS7
BP2VU4naRwKB0XE+9GxkMhh+GBoWKJQCP/UN9u+ZolBWbfFuZlQVHW4x5Rgl
qeAZ04x16Y+WoDRDrdpvLoMWl5uWhDk58Jkqz871HDnMOKJzkv6dDm6VKT7Q
tNMBui5XUkm0DqzlEn6VLxkCo1GY4BOJaxja1l6eSxIFCSkvn1d5spjAYPhq
tZYefy4FJWw+UUX2bNqimsOaIGlhp9MqJwX1isbOKXHcoEUzO0q7TIeO++5f
+BTMja/8+acqQuVwwy7uksgiOXz26Rugv6IIzpNXA/wPysGsWLJ2dccFyFh3
6JGUvgQx/bf2Na+chQsTNP9l7VHCbVfnTp5FIm4uLaosvWpBrWetJ0N+NMGD
lWkFGWsLmGwrfkUZW4sHO4LvNu+ui0Vna1z/n1rcWj7EaU8kQW5G56222lKQ
yNi4QiXfB7ypgsmyHXfgXIL0YTrDQaA6XNDPr5MCTmtP2737B8DkKutiqRsR
614TeI5VIbBQOyTz2RThHGecinrTANqUH7vo+aUeBPhppXJ/p2Oo3pUjS4Ik
FP9I7243WIgxXZf8g6ib0LaZrvDhTjoUHXinZC7UgA4hJpQHGIYxt/Fp7Prn
bGSe9BgQ3ezH+xu0uby6RDy8kPvIfYQEjD6zdDPmYZAv/TJcOq0IpKNWphwp
iCgkvGJka1gOhLtOj4SpI0Er+m8yHXM0eNU9fJFQOojvJmlOdkrXo28a1f74
+5qY4Wn9MLHfBYZbWe2PxiRhKo9y3HP5QbzFPnu7pTASQ9V8V9Vjs9BR67C1
8UwM7G3ejvZ9kQMjF+z/abPWYJ+KtmyffiqOndxfbc1fi24T5NYRqj1A5mr9
fOxnF3R8uLHzfbAONxaurrgUBKNY6WRJ1/dqVG94whz8uQUXs+6EhtLUwX0H
m8n1yTagoAune24Ysetj3WpsW+0wIdbMFX2gGwZqr+sfriwGn7spMbzhPfBv
WP1Z59Mc5NVTdWjlDAa1EMHxb7SINyiefX9NMwD1dkP3mGJ2ObiCnUV5vwv+
o9o4Sj5fA7chxNHuZw0mPtArlxMqgXfPH0sYu1aiTJUEu0p9C5L7OlvVJhaD
oLnxwRBLIiZ4qM/EtLXBHg6fnBdX22C+oo/h6AQJvo9OH6c+5Y7mV6/nuh8s
xq8nXutbRhUCTscsSLfEgrinxC8wKsEtc8L8o+E8eHzovcQyRznWVlQ3hO/2
tMWmp4i4VjayHnzFpVhaC7GNUm7nHqQj6ORnTnRGYfEb0owDbS3aP1Y6wEWW
jw0RhpoHG3bfM1Va//qdfBA2TA/QMCFhyrRU2FFlN1TPqkrjyIkD31+K9Y84
K+B5roctS1A9/Dtk+yTPvhqYN7kLZxqqIK3jzcsJ1zC4/JlbVSY7ABz/Kco0
/AoFQeKp556P65EnaPnRjXPJOPa7fMIriQTG4pKnAmuqsfrE/JuscxUwq8m5
RJ5UApSLo/638nPx3NJyqEZuMj70iPF8S56Kh1MfLAj9zocOJZ7zpvSW0FA4
SL3pHQ+DgtSN/IsBqHfym4qtawYeYXewSPG/jXrFpn/JXbNRprTzFm0DETuE
/5QLlsfiwj8z04EndaAVYvQsLs0NNAOLhQ86lIMvwx7uws/ZcOJprePKHhJc
DnS8LmxSAo8jJL+nmZYAe6WlzbvESliPN/8bHpEAY48a6cgIucD/hkw0WjsO
Lx38QCukVo0hz89GiZzJAxHectveo6UQeoSlbfN1A7y8ps+V6U5Chu9veisM
GyCpnePExukgpHm5bWX1Lg6o18K0b4iWoi9FuT9x2x6SJJ6jdUUeUhdux+6L
qQCLHsoygqI1GJ6UOROaVgaj1b4vFweL8MLx6VIXrjKYKv5NWNQugSNPZ1R0
a6xhL2mocjAsGrP+e1S9ylwK0heXq28MlsEdrXF2fecgeFAi23mdJgKmvu7Z
3L9dgqb/HXZhfVgKPrEVN4u7m5Dx9TUbYk0CUh2SoNtzvQ6l+F5tqGZmg8hk
uaMWWSn4mqDi76+m0KHKqcRx6C6cjVM38Z4sguW9EyeiLMvA2WeLXnc9C66t
RUgpHt/t31DeguSXBTgyU3LmEm82OGL6LdmXrmhTGUNNU5AOXyXiCKu98UBm
IVH7h/5n++gq16Vbm+VoXrcR/xltsP7VPWL2jyLU39N+5JhqHvK2jR8TPf8A
hi48vN1yuxr7n/Tets1uxVKjvVWcpAgw99T6k/oxAWgUjkklsOWgsVbFbTZf
ApS8EO84WJuHu6g+75lMQNIZQt37N0QYoXrZVPmmBiTN4otcxiKh8GJI6/Z8
CMSIW/bTvg5Ey4nv1InZNRgctcCXkBMPD5pGendWDNB7S0VRoc4Atsukfevd
rgDZoO6/b/ob0rjFWi5pwQbRLAe2rRs0MT/2dUeH+SWUFD2R+llJAWho7ybu
lz4HZByFrAUZ39tNO4ll70qlsamMneq4zHG8dG0mV8pSHivLNn+2HFPFSl1l
mobes/Ddq2Zl56MAVo40lpdYa8Ps4ZCOnZtC8EcwIYvqkCbech39TKg4BVkm
ROVZbjPo2zLaaxqqD9NiXa1Sl5VQ8cz3Tw/pFfCG/2mO9gl54FWeWp9AXSwl
/4/syT5pGBg3qnktIgdzTMaqoXeFYWWfwN6CBHOoWZI2dFYoQI3F4KKPGvWY
MWz8dM9xBDEPe9OuyYdYlKV/tCC7FnNcSwYNx1PxNvlnD+PPpfhA6cwJ8uVm
EC/ZrNqfUg+5AzYTSS86IbLQPnp5iIQfeNPzTyv3wOXsQ7RtOV5IU82oTaXR
AY/2PKfPcauG55N7Kug7nkHcHePKcK9aOC5X+ZX/YzPSFDTqaDxvA5aqipxG
pqd43qxr8d7fchB7QBa85tKA7tl59+dyB/DEk7NxOQ9iQI9rvWNgsQ+PKXJd
Y3vWgT1r76g/KnQCE9e/EdeVJrQ/NujAKRGIXyJ4dGQnEPTqdZ6GbPRChjGX
qsOnOtD/KZl9R6UQjzU33Xpm1ovT+4XbeKfikaBPo+21RkKuqV+UC+O9+MMr
wJLPuQVUqVglBXa5V4qnMOfD2QbYn5CeLZ7eCkLf8w6T81ZAytcNCZeYepAV
Yh2GrRegJ1Yl+70jBb4mBszsmNXBguVdyrLcQOj5EKbfw1oIpBM/wPiFP7K+
FM8UXSxAhfkLnuNePVhxIW/JP6wBujKaQo7uJGLBTK0713Q98NQE3nwinYQp
G5zlr97eAtGRYwq+rzPQJflZxzxnAV6kiGE+WD6AijrKjHNrVVjtTrfBkBwP
DGGGUhOfW3HLQNZKQDIYQg/ReYdmlsD1IZvXwuwEaCbrypXU7MClJwbCB36X
49kcwzBJpgDssBfZ9FuLw67fe9+qqKUDzWDR4NUGPxTJKOi5XNMDxK+dJTe8
6qBEY0b3yO8mbCf0GpmwEsElTM5KLbwGl7IM75hNFOOBA6MHDlbUIpA3F+Lh
SmzgefA45VoWfkg4VBDnU4/nj40nSxqR0EiKV+ymeQFuMMRTa5OScStLJzzn
QTZwrBmPWvgmY5/mw083l9Pgp8rS2Jn/CjBGgPVzv2gynBjY9x9HPwlc8zV9
tobKYLhwoGXFwRPX3hkFCaglI/9IjRnXWC5+veoBbZZJEHM+9pS+myNOG0qZ
ie7mcYW58JK0cS3qvJU99UKkCg+piRmdZEhCyQLdJxPktfj3qjqrrEM9qKQe
FuZMDoTBLdVLotfK8Geh6Z2oZ9nINb7o7NKWBHMSS0e5Xv7/v3fPFx8jEnFV
g8HZ4LgJkk0oTh27eARqb9oTtfeWwtuffGdKljzBKjR/coc5HldL9dldBmWB
zDZP6+0DZTj5pLX9oF0ZMh6vJXtiEwIbN7cruHRTYeZqqKXISAp86mJREfpX
Cz40W2MBS3kgl808L3MrB9Trmaek5GtQrKq1qCI0F70a1opMRNNw7Ald1YPh
ZDzxfrLQgywehcabt4YYklHvP5b523m73NB+JabmeAj09XNvxVg8QeNkZzF2
u3SMTKYQmNeuRoXkI6oaERUg5pPoMfMtFPi1DRI73/sAa8aFhsxTu/v2x9H4
rlehaMRSDF1X6vFwc3yYjfvuOumwXu8WI+LPPJFbv14XQWmLs5PBQDJyaUYr
j248hnMOKg0O1YkYAflUUff9wL/iW/NdjwLcu5pfzL9cgL6bPUbrJr5ILRH1
S/JrIBAMN1gDB7JQaw3uXXjth43mmWXFLI+h9tf05Q3DBGR1ZyqbuR8HgVGH
ojcEY9D31/tTrH890ErDbcZAsR5vDXgfls5PAv5JjfXB9gi4H/t12lejATQC
x8pWIQW7Lp5UTzC2hgfC7tJB8ZlYzFMTfWs0HFb3+/bQU7hAQmWS2tmsG5AQ
sKM7L5IDvjOnp+tM6dDrpMcJsqpE/BqyNgQXE1Bm5nxKBbs59sekyS+7EXDj
Y4+CyJoP7jmyEfjudgT2jKxM0Z0ox/SuMGqVfSS0a38z9vZ7DBxx/hMx3RiN
9GOX9oUr5aLt2zw5meNEGH7NphM7UQrfhBMdFfRSMYL59fBDo3hwbXFOC7oU
A7bvu/dSRiWjeqXer46wJPStdh7uYjKAvuT6cnHlUkzLVF0JeJGHzmBMtb1W
gjKMsu+Lnrpg/wo92VPtCgxVdFqO5omDtNrPl6f+C0PxgOuaj+8ogYjqBlHZ
WA6cuF2erP/mxGDbBzrXk2WRPVlm9R3vh/b6wspBdnUdSPnJE/Jl9ASqKva/
DNoSQmrF643C42qYNRhDYzArg7+jtNI0TK7AWiQv895hHjj/OfR+e50AMHcZ
fhgLl0biy4UzD3lOwZiuP9FJRw1rdZ+ffVZ4Hqio3y2K/jiANuYiWTZbKhD1
y/1eqLshUCalnfdwl8XK405u3710capbmXJ27iLOWuWTHtF+kPaJ0xM4LKcF
2fpdupOronDZndaT110Qv183UbwbLADKm0bbYZoKQP/s+ZehADEMPxNZ9bc4
FWcjg3KcSQ3AKfVXc99mN5wZUzugcz0N5tKaZ11sOmHR1cDWtf8JRmnW6hlP
+EGVhOQ7y+wYOHnWkNtl1yPbdSO2n+/y1vaxv/LV7j1oXFpdt5MRgTOXStOe
Hu4H8PG4bzMYi01FkNf3rgsm2WzLPP3q8co7blkew10/OrUy95WQg88/jBhU
pBFxZNqRMEZTjl7sq+0xy7t87kenluYUhJYSFK4eryoxiubrd9Xnhdjw407S
YaY4cFX4Sbw6XgZpk7oRBt2NuLyE5I7XS2CU7zlHZ3gB9Jk8mH68y1VzPmPG
/rJFIPbK/2noz918mbPWHbStgVqvCdq/krVIVWzLKBKYCsUZQXMND51RVMLm
3DFiDAxz/ukt/loCjDsrhM6n9fjO6EM451wdSoRfK2OX6oL9LYOBMb+LMOVO
hKVMRgacd1aLV9710iGzp0Z7X9dhzaXP/Qeiiajq6uhuf40EI3d5xdrDg9Hx
UmyiuPAt4HS3atZYI0HLz9EDRuUN6Beio7uPIheHDmUyBQUWQJnkH27mkBzk
1m2Zdk7tQcd3wwslPwlwZKE21VDWBQyKNIrX+hB7pBtrOlsz0YNDnzYqlgQ5
wSrEb3xdaGtvF2f//j6Q38y+Kj4ZClOVNYuBjnVQGcTcHDScD/tmzt1/4UkE
3/bb2z2UHhCpk3KzkYOEvxnrfYMaSoEvy1eU5lgW3tPWimVub0KzbvoTS2d6
ceIhuozVxWNJbs36izOIse8vB6RNtGNHeQxfWqATBjm/Us2taAKCWPd2Lusu
hw+3xirt8YNzUyKuMz9qkfieLeVFkzfce1FLcyCzHpnLfAQP6DZgh0XsBfep
UIy0EXpKdrsfxMQkm0PYb8JNl8mI24QSoO95+zHdpGG3D3O0P6okA73fOQLX
2ST0E1V6L+/WgYUH7599y9yCZq6Ds74hjXjPX+hZ+w8iHDnUVO56tw1PSTr0
79nlAJq23p8WL5og44iyW/+PVBS6X/NN+lw7BtWHJM9dKwanm1zx+QVdeIwJ
VF5sNKOM+OzPKfv78Emm/s2FuRK07+eWu+uaDKO6kYduW6RATK6cRqJMG0on
pIwzn6lCq/Bf2g2CZVjsdvEiplcDPykh7qxeNdJp990ZzUdQf0biujxXgOvn
NjaO7XI4Y6bePmGOJhB4JvhnuzYML76ev0tpl4lft9u8hQ9EYZbT8foa21z4
5sdzietVGwb7jiamCIahyuy54VD1DjhM0e/QcjoR7V8+4iZ3I+Kvq3dsD40m
AzMl5aFtqkwccJnnp5srBMGwXk0CAwnLnZLr9HZKcYEiPnosKR6OsHMNErV6
ce3UZk+5cScYeYtxRTwi4ETSaE9vRg2kuTL9i/+vChYj2NhSMlLhYa5JvpVJ
EOopMJzg/RsMFXtElL9Hl8M1zZUvjOF1wDvy+RY1QzSstuxp9qF4jKGZ/DmR
/1lDU9yRg7EB6bD/q03zw8Us4KUnuTjHk5DP13yScKUR7f5+s/x+ogKibE9f
uZuUD8t1Y9TCjtlglZazx+d1HdwfvbL304t62CAF9fSdIYLdpfBwy+ocIJxq
aAja9d9Jr+yRCfISKFuOiHf9VwEt6uLmPx4SgFbSiaptpRzY5iJpnJbKsIXJ
yT/uXTU4UpJuXf3mjTY9Eeh6MwXFj0mUtm9lwDpcGRIqioIlO3WyT54E/Otf
v/n2QCaa3YBQ2WO7/Nhr9decLg+1N4nLIQ/rcFW7gWVilwdU2ZKmcy/mgdlJ
XZ5HpCIIDD7W1EgIBcdHB0y09+/6HFWzn/yeFGxaORG1zVsNJ8jnX98nKwJu
k9wtt4BUeJtB4H6/WoPHXlOEs7oEY2fEtKc9TzVE5Bp03nNKxbRvagKHkqth
/YPMkZZMb3BkKYmge1SKZOR2KoTvBHCPPykzN5wFgbUFCnev9QAT6fQfBpoG
0LOk8LSgj0HOeJa/49eL0LLQ/Yi6TAlIzvy+vpRbg3SDBzzDHjQAz82/zSM7
52G6YsnUskwaVJqkrv4z58fFjfoAjUJ2ONqhd4NGwBhbI2+EHNLgRplK6yYJ
eip071rY+4FdD1srW8/fTpZArS5WszqBi/Dgs4X6vyIpHL/PZZ3GrwO/LmYl
vasTQPofT80vkknhY6/RZmo6eSy2S4z/dl0CX3t9q9KXVwbqeC1uOxs1GGm0
Pn286Qj4Ys1NNyZpWFZQq27vVMCka4QRWRYDqB22uiwH+iAWmZOv+UkBFk/9
cbhnwg8kH3k6x5OXsbBNzCmgTQl8r127Tz7GhFOEU0NPX6gjw8hmwL9sUXif
6p4/NFaOBfahpuJ1Xbt+4tdGXdwP3JfNOq7Mx0AGzdhI8vMOONNqwCJ9JR9I
C7qlakzZMJ97d/qKfRT4PbqymkpNwkq1g2AqUwetkrT37pfU4hM1hmOMmo9B
/HL0F30KAoYrxI63u7hi/gNKGQ8hEr5aXD/+UasEI9/kZ43NdwL99rrNaH8i
frsR4FEaFoMdRYMc/9nkwAlM4z3Wgki2MLm+Lr4t7Wv02dhd2xDpwmIsNnf7
ZD6m/syCWStUdpvk9/2oRitRp89ep9MwhfMKsYcQCxlDNrad2fFoUR/G4FNi
hOGmSdeutZVg2LLvX9XeMtxfQ/kor5oIh49L2gpNFYD4j4qKWysElA9uJH7O
IOHsERpmrU5d2Ih8NHH3cSn0hfKxWf5tgwy6S2PP2VsxxfN5w+DwY9wr1cF8
p6gKL1abh1ZEdsIWk2HwJTnE9aqlt/Z/q3G0+XWm0UwuRHC/ZLGiSAUvm6YM
G4pSGNI0WLqXVAfjlXtKVK+0wG05l8TY9H6kaCLxTEr3oBx9RggfQxPEwfsN
vrwUHA29zug00oO0V2ZORWXVAcWnzI+/xSvBOLiok9aiAVnP7p+43VGNziL8
zDrUhVDRVPeqyLIVZy3Zyq3FHuCYQjIfH2sxvH28ypAhUgaSST4KjzPT4VxB
0p4OnSwMt/t4Rkm4DBNcX3xV/J0KphTh4kGK1Tjh+P5OhVEZaIsIlZHUIlCa
qpSSdisPagf3/2wuLoQUQT95+owqIMtujbQ2UgAy9r8jIh9FkM7euV+AKhBo
N83MN+Sy8W3LHVt5A29Uqt8uEjyaBMeCODaY3HJQOD5q0M++G3auVI8PzO36
sBSPt21bDRzhMZoOs8zF4JGPseVAAKXj94O4jzwE+bXv+xnV+yCOlVP10EIv
3P1GN5K/1AkdeV3r5x9UwXLzzR8D4xEwI9m0HFWYD/mPFPV1K1JxR9RJe1qh
Cn6X5ktHGRegyY6a2v4nrRi5ry1PTyALeTRuVP672wxSOquJZfficMV7qkbM
oheNRtmULN0RClvm7/+IawaZl1wMQcLxsP3FiuknSz7M/U0w+CbUjWS+OnvX
VfdBbdTA/GRfPZgT/IxO8pei86OAXp2iEOTT/HSlzCgPDbKcBc6O1+KJE2bd
t3WJME0VoxijTcSzo9k0Nb8iMbOTy6hthQhW92lOCTjmwdfL9jO8AY9gwn6p
7WVxNCqdffitiJwIBF6xD+zTGej0MJ36xngHcpCf/8JMkYMix5nYT7+qxvKM
iPLTe93QOcDQ+9zFfJCZ/VPx7D81pP8cqkd7Jxz5TLRr1zzrgcNAn1EmLQPr
5UI9rnalQ7evgcvo4XxQyF09+yS1Fjjce12ockiQq8MIk535YCh2kdJQKBOt
y+SJuWmuGGpFG64o7o4FxRuJCxa+wFgoaxhYbYmXJsp8Q/eScJnb+t6SYywY
dVnbVD5LxXAGxap78yR826R6wl8CgazRuNGd/CSsFkddLej0wg4Nmd9TCbYQ
of5JdPxHBWj567hL3UfkcnifIb34EMZvsGs7SDWj2P6q9wJSyehssKGXlxcI
xV+I1S+++sPmYnwapzwRZbamh0tiKvFYgOjpFOFCGHhfi593+efz3cCuguAC
sHjE1JhsfA+XtqSSYgvzMNn8znex3hz8UXYxlJ6WiAu2m66m/PGYxSZg95ym
Hnibo/8btouDjn+Gfv10V7AjeDk3l/YRMAcMro8/DASqrHuXGu1ascR/wpul
sxZVdFgX+xKDsECiTfhtfDzwB9YLjMbI4e4XPE0ZVA0dsziiFq8Pz+9pv5Ni
bsbWurU7H+y78PnKqp5kVyzw8izMPbHNhCj71b0uL3Lwk77/3tDVZqDuY8r2
VkvHEdXFmFkqP6y7sZzgPh0LZHLTJt1v80HrjvmAvafF7rwPYPEjDqPE7+fK
hsIB+GDvJX0bvTgABietPdEkiAlp+nf8YT0+PP20X0gmFCedlprV6PJh7MTZ
u1dOK6F+LHUlHw8dSK6kX9p7wABCiXM/D7brY666MOPsjesQRVi+Pko0h+FG
/TgDydNoMuHNpH5TA6h67Ue8GZXAtutG4U9/Q8SXusqfmYTh5c6KKtHNGDsI
to5XZz5JS18R+jf2Wx4sTvDOwQgTlJOB6b6A61ir8OzoNxke6H6qGf6yQBKt
agxk3v+5AozDq3rhNMa4f+VUCQe/JKRk/hn8cuQKdA1d/tm/pQanLbUiu8+I
ooVYehlf9Y/2CMqr3z6R6QPXv0xGjWA5/JQ2kSBJPIdaj1tvav1lwc2zPD+/
3D+GLA4sQotmlZhxi+vb+tVumHJ26fmz3A2BNZwZvsxx2Mnedk8+NR9EiyMu
KYyVw1xDqvRVCX+YIqPNYxEoRrXbJm/TkqqAh1pUWcC8FKiJk/0BbJ1wmG7y
0GPGcjC68FKEHfvQ7MU99jSpRBD6EElOXdOInJ9Oj/pUNeOxpdtnnkunwvc2
kZE0SiISs52P7jfNh+Cxcra85DqQPPgrxri0GaaN37pe+JwIApS154t/FGBX
yrRDU5YbbmSqFgufyMfwqDcSmqIkYOH5MxRfTsSdX29GDht4gNdysustz0Tc
RwrsE3DazbPmC0G99nCI9uevk5vMgoP87nnOUTWYd+Kp5Hl+IpZcWFjxXWzG
dDYVUbvbZbB0yPrZYZZ62GY7HaCY3AVzstrK5Mw9qDLV25rDnAyuFJdyUt81
QnHN7F+ZDxGosvMmd4UzFrsPBLYLDtVh8z2bnMIfBSApu7/v0vtGuKKyXnD5
cA78s+V9xXclDSQ9GxN0FdvQ6oNPJ9mPPLQIyC2slDNFl2fS9qmSrbBk0G8k
UtYMBsN+mk++tUH+lELmW7N6PHDb2/BAYyf8Wjhzbqa6CO/sfene+qUdZwOc
J/XP3cDf9yKJJrklaFDJ7BkrUIOEf4tb3ndrcWurS0NokYCB20HRyztROHbz
g5LQmSYwN8v61EvKA4dyZ9waqsTb77PVF3saQaZmKJ3lfRGa8thcimrKx+/d
Zhe3XeJggsRW0ybQBdmrBgss52uBNT/RUEa6ATynb5i0ZnXBvq7D1ia1ZWib
paU1bBwG11bkN2c7nyCTAoPUK7dSPOR3QMdopwgNetzUb9zPhfrXK3xqZM0o
8VZ6cay8BYmOjIKm5rfhYpRERu10O75jq2jk1qiFtE/ahbI5TqC+9jjQLzgY
jMYHqGToXNBnOoPWSzMRIyby1VZD+4C/WLW3TbMSi1Z9TTePa2ANHWV9mVY3
fLW6x6jxow69b3ev08g0QodT2HGmOC2U4Toi+Ne9C8xNDe/+HuuC0531wSZh
5fhPhXbhLWM3vFV3vSX/rBYPH5OJS64vghWTF52K6jWgwhHFZPaDBI5v+keN
n7qjFvNZo+07XuBqs+nRzJ0ObN+eJn9/FQIXmsn+ZoalwAGTFxV5IgV4zc1R
9bZNJq4ejDL4nhEHI+a2aocGo2DaZY1Z4GoLKmOX+T3PdtDQt9lWGM6GtJqv
42wFIVgxHS2XnUbAhE27pUvlHSgqScu/tRAD268pGM6P1AAFUbyX1dYPPJYa
53t8c5A56FQM7zESFg2M0wmdrkbysPMqMv3RoJSvatfyvR5koyaLW//zxml9
D0G/Ol/U5ZhUv3SkBdsf2n9q2c2LzINZOTn5ZhzbpAcQTwKqW0cPnNHKRq8q
aKRQcUG3IJOb/HcTsCcr70RVph2SnO4VqQ8l48nHl46P/GxCruLy22+GMvAr
WRxnkW0DLFauP8gprIVyHpF6K7smoFl9UWDnWAoR9A8j9vZWgORgR4zTdB6e
mu5xitVoxtdUvBMTmxXw63qLFMODWvBN5DntePUeBM/KOyf2FqL8PV4WSu5C
uCWkb9PA54tXya38TkAMugf+d+29fgqE7n/xJv1jHKoYWakclncGEVeCVi3l
AKbd6i4Kda/HR+9JBvTHa5B9rF/DcioPWkdCVamTSahC5vGOkr0HOtiYBgXe
ZMEq+SmG3MQMvGAQd8h2fy4yZz2I5KeNxgvEm2uv1iLBNFe/sbPSHc5GLFil
COci4bmITVNyKFAdLLDkNL0OP8PW8qWjA5HIoK5UphmGPcIdF3bYqpFdXmKF
XJMAYQ01TLRQjnPpDaeGe1NQN6BO6HhsBlZ3y27QdPvCYefhZmhKBq05rYjs
PXdRzM1sS/CfLxT6zc/2HybiK9eZOoHn4SAp/ZePsksC+D3qrhgQgoGdS9ey
Sa0a8oyqNOIu1UBM977v78dz4YNFO8+DmRask6fy6gwigsYou/BFw1wcavmi
KNVKRJ8XvOPrKRIoemi642S7Bng+/EGTQn4dFOfInimz6GPfJkv+nzkuYNMq
CGFM1oKEpdlCBzE+vLpeZaB52wJXRo5kKfMaYx/cVToyBSiuEV7LEiAFCmzG
nYPlrDj844TwEJMQNmKM35/Vy3iIWeRuDp8qnhVxcDjrrQ8RUx2TsldEkeuN
wPEhH2W0/EPrlP9XFO1pOk4wU/ODzlkrTUdkR6m51GunvTjg+9kCESYWNWQx
C5Fqi5HADrncIxECR9FUOWQ0s4YZW4XU87xoLqO938cjNnmKwB9bQv56jyQq
3tmJPvNNDn599ruxPFSPdwO/fA+Y2e0/uYVn9gkkEL9BTcHHTsD2Gdvekx9J
yFlx42X9VgZUHzDwNy/JR2NeO7fYhW40/XncXJepAzbKj+7tux+LCV/droe9
7Qab5GztS7ZV8DJrH636TDw8VDEMWebxA+bannSFqy2w6b9Y+1f4EYjLHS1/
zNqIZB/tm9PWk3Dh38GRARvf/5/DWiTCUwiUWW9+GO2kA5WkpU3v693cdR/V
GqktREcT53d7zsSCf+c6h4taOvANHrleq1wL2ThIF3+uCM5VfDetncoBd8UV
6bSFHDissNNIT56LcyEq38rJizA6yt/Dy7MWKVRSkqbMiUBf7P20yLoBJIL5
0linWqFV5D5NfGk9VnXu27LpKgfp8b6h5VOJyCvovJrH1gDJulapTBEl0BgV
NvY1pwQGN04qdbwfxMJubYbnsXVwQXZtn/hUOy4JBh7yIhTgxcxpV5giYP4H
IgNvdhXEug3Pn07qhbogAdVKQh/2Iw/HD/06tOU3M0uc6kDyrWsl6SoFeP89
I03ix1a0Kvz7/kNBB8xBqXXIQDySDcazTV6m2OX5fwbjyoWosvWUO9K7Hjqj
jXbe6HSgNCXDu/uhzcBFLLeR5YyAQyqGn6x9c2CD7OWnczpxQCahzBlGE4bM
6w8F58EbhiyjJlXC66HfOVTj72Q5TO/hrMxn6IRSoTSWgNY62EnujslobMST
uoqOyberwW/gFkV4SC084IkefWcSB+XbZNK6HGmwoHJnMa64B+9Qf3/4xi4Z
0sq03pZV1yF7xBtri+1wuCZQp8F1rhmvLQosS6kk4X4Nni/XPGogy66DLKew
Dak4RD4HS+dDg6S8hMJDP2AXMzF421AHYsmqX+5dTwB5ySP9wYplKFZ4k4nr
WxLaHh7M+neSAH0qw0ucNwoxjL2CeCS1EA23HzX9+JQJ0X/Irtrd3fX6l1uF
a/u1MIrt8NVrRpWYwHLtC8v7NKD80MVc6pYD3td5Px/y64BV5rj/3lddRwtp
A9Uqg3vo+Cb/xpXzrTB1x8WyepcLCIVXPl586ompOqsGorok5NLOKmDZSsUN
sZCkesUCcI9vmNe3bQeRpBGKFbUYVE283893KBf+VqWvGZKVw+phSc3MO1V4
9mTjloh3KZKEzz89AV2Qsybk9PFyBoylbJcfUo7BkXsv/Y0GScicVxK6SROE
/v/ZVhnE5ED78nz+Uo43xlTavKz70w0cd/+0mdH1gIMzPRXTjXw8+7JMMP5Y
HJA/H6IikpVB30Ax+RefPMxzIK+YiiKC5HfnmPfhtUjfuqZQGV+K5Z6cWro2
oRB3UerPXcMcfHBrwoOhe7d/VqBz+Hfjbm91fXULDYfwkfevJAYzILX+fNqX
ylhYnFfP1P+vGmV8Mxw64mVBvIpz5n50Dh7J8fwUtOiOJds+c1cFd/28x4PU
3ZWPIrabfy9TNgC5kLANC9P/zxdjsPP0e4wyd93MUypKcT0gf/BjaxlojY93
dNpHwjQyMukM+UM4MTvGe8IGKCkeH51cycCVK5lnsl8XowZTmVsLQwdkb9F3
igkQgLU+N3/kSw2EkVcsEANc4d8jRd6PgwS4rDFLF5qwy4FkLlni+Y048+hf
Eteu13W5hM1QmiaCewrl7NBKHkQK1GUV7PK3jhqd7HRwDuRoh43Sa+QhY6Ou
ps/Rx3is8WLog6oStA93PUih3gk9o4r5ajeKoL/itJL14VJQNQOvl6aVcFMy
YeCZSAl8pDJh1ZTsQmmxTpeR5UzM2j+d0pacB4w/ryxo0TaBHvNGjcd0AZAZ
FRIY179JR2TwHZY5XoxdWlIulTwFQM8WEHviUCPoKb2OW9SuxRrxJgU1rUQo
IvL4D2wFAOvPucXP9IVA2NfUSlhtArl/pt/OWKXjyr7BW/vpMpGrSEtuwSgU
fXr7hChXEtAofEm6jtoRvLlYvAjSBIwSoM5/5E9Ca59zJnRk9fiVop7r5HwR
EDOeveb9XgdRWumceFkFfFlvxwzTsuHbrg83/3GJwaKzV5RR52VQmnNg83pz
Hsh/vWElFCiio2xpd/1rZVhj2Og2+nsNaRLPJptInQHGq/aZp8i08Z3iEr/d
gCFOt0qnWXJrgZ6NL/eDwWug4MHHsRWhhXNGv+70kWti66zPoE07F1RTrXwr
GrmGTBmWFVLCJ5GJaYJsNPMC/tczvnX0lxJw335cWoNCSKZ6X8LnXW/7o0GH
2q83NSHmCjn9cxszGEr4VCWTcBXMey86mpvIQaDBM30hchGUtOK9cIokA4dO
XVZpWLkKd3I0umspNCDiCkOFgXsLbrz6fkN1l3tzw5bcfh+7CN+OxvCWtxbi
gQ+JF+wzcfd+ZMGn9CAs860Km6irx1tU/hH/Xjbjh1mWKurRWqhy3E/OV5CJ
dsZX6CZ/ktCO+X3eglggns0PmmsX7oPeY3tMmeN88cuejWvl+pXA6+j1/um3
VjByEp8tHyACe/eTITryLODtL1k79CsfRiqp5re4ifBarPKv+Wwpqob0auXY
xMMRg2I7YZpQeOaTJOGWXw+lHPrj75qKwfG1+mxjTCwGc35EIdYa6LFLU3gh
Xw1i8+eCeaRrMPuvhp4DRSduy59e9pdvRd7cwEuH69phdO5Fz+Z0GFIMul2u
9U1Ho1Htq5KvwndzXaLcsOtb5azRDRkRITDsRH/WprwCHlrvp3bOzUTTHZWV
kIA2JC+gUCobtYYO3WN/w91NYYz991XSrh/bDoU6zgx7gF6FYczoBQISxlbV
wx3UgEpD6O7yxxQgMd0JddybgUtT/0mzFTUiOUtQdJl9Nzb0EEDeMx21PGuq
SwgkWD+9x+1waRtIJP4V170ai2md476dY/XgedeHY+svAW4WeGWqpA8A/dMS
6ej7deh7iolPZ84bv9LfSJDx60SDT4ZzXKa5IED7zKxGLA666TwYrBWKkUM0
kHnrTwcIUp9Izz+ei1sWJU7e87UwYtV9uGkiD9WOqAaMpBXC+GMh27T8Ghy4
yGylfagUb/86NfPKrAXZL7s+STxvBqfk5Un6+QTUWNIhO8ueCeHU/uHvAkmo
+GmorY6yBc8S6xniH+RAoX201VhWIxgpqN0dYOzCJiWdV3JXm6F86a0HtfoT
pJt0PTIwWo0/tb5ZZ9i0gK+FTuNDCk+0fdzVphcdDO3HomTpTxQDZbLxtjTH
LkeZuj08QJ+H1RuFMadNUiCS++j2df5dn55xP6JjUoo/Pa0Tsx+EAp8411fz
tnK4fCcoSdmmHRm2LNKP6/fhF0XNixdiCShGyH9OuB+OX45R8cfklqHVyw2t
q/S50JyseMfpXRl+jd77dmVfEchQuEvb3hJB6qzJkm/keaD09vRLPZ9STLYc
K+R+3IPPTaoG2fdEAJ3Ty3mvnzGoQXVjZM/lMpjW3nrxlTkV+cw2wqW867Bp
//Bj1bx6DBWeXQz0dsbCL7fIKGeLUcvjgZxBei2oDv2k0/rbClRfjBlSvjyC
P29GOdalcoD7olLGlQgSjOlE0b72T4RudyvH/odlwHAv4sXq7XpMk6Cc/6gT
BF3PHz7W1uwEoS4Kz+qdYqg0exbMxdOI0xJNy6uK+ZC2x1v9e2UwZnAlyn8u
iMJFjS0WUcEqfL0xNhM93Qbb0HbQabsPzlvNOEburQWq9ldjVDvBSMEytLSl
1gM92voLK5opSHpU7xZ0rxJVNdUq/zuUirzv0q/dlIpGqWrmkzJl1VBO8axL
zbkc+W6s2zauVSGh+F0BVV0dOnKaPP4l5gOzJjWUk1xlsNahwfG1oxr3nhqM
Fumr3Z0HlLyPd3k35rp297m4Osji6d/7+UUNaGlTajNURIJrheFS7vtyeGm+
t+9jXy2qHzlNUukmoDr8rHqWSkLd+5E3ioeqQTP61IFrPNXQ2kjtZxFrjXKE
nJT18mqYKPx6ME69GPmvv1205/DGbS+LoU4HF+ytEfm3p7oD2PXZ+ElkD+CU
ip77zm5P8dFFi7RaP0FzW/v64plesHvD4/23KBNnv32Y8Qx7CKaVv/jVKXNh
+FuMziG9Vhx+cqz9HTEBKQxWQuwv1oAzL+FS2tsUpPNtfbBDaARi1NVfUkW1
uPOP/vkXbiJqHjx6+ezvSlyMsBk2cc2DCFPdtNkCIi4ssB2VOfMIW7jPXHYV
3fU65Z8jv3xd8Z5xKN9DJiJMVdmXV0VHwvKEzukBZiJ8yZZsP7cagmxzoztG
k/Fwi3bvBZV3uZg1i3+GLlRjyEbPuHZbOUZwNfBbj+7ylBZvl+bpFKSmddFP
li0Gdq2VkjF7PSxRG3Rg5q1Hbs3bCXXTF5HIpVv/PUsLpw0HboK0LjCQWtwG
9fVhjLv39Pnj4kg16/Ii6ZAhnNtVnk2ja3iFjzmR20gKxJDnfl+dPF7+xFbj
56+MGJrteu4fN3KxWSo5WunDpQttFBVvLqNMfb35fN9/0i0mzyi7fbjw2XO6
jn9z8tj7pWW820YexQJV/WhWz+Jh0eFZnafa+DZ9IGo/IyvIpMaNMnEwAu/r
6sdWXrLwgDa/ecdJFtKed53nvKcOiy3LFu73j4PMuMVDh4+6GC5+uURz1hjP
T3GG44gciLy5VFtqpQXb1NMmx+3U0fLbKo3Kr3acrIqsUJJth9XXC8RDPdVo
2MphxlZTjk8/Fr4rH+vCJP4D1mbWsSi7Npr17lYmqvzr+8QmmYD2/6RmbrmX
4vkmDmrpgHLceeQ38KKzFzeXEnde7vjDB9hJecsWjznb32YvfvUHUt2x41ze
iPV0pwKrOVKh//LyB9nPRCCcZ8g+/UoMLIy5UHQtDVNur49/flGJQtoMe90P
VkPRF0oB8bESdL7DM9T3pRTZOoL2eHDngGREZLXX1zY8m1jrNFNRjJAzRU2x
1Yir73/Hqw4U4PX5dNMbbr3A7Njb3ZWdB7OdPQe7r+XDj6PPfuYr5YPd57gM
spRCqDQNF9QXj8eJ9aRg4qViVJIZ9f5IH4mNLhuqZoJZoCTDIUEr0ohWd+k/
bKWHwlLO43AZzyasuRN723ylAPKteL9IfCeBc+/vn6/+VEK5pKShv0AT1s3a
/fnBHwvP6HXOyJCqMGvtT+vTwWpQ2zv9qul3HtROq5hficxDkTp/v49llcjr
IR/ZnxCFKblP+vd/KwVCVw9pqbEHYmyvumTs7u8jn+/GhlM7IGvRjzbTzma0
cBT7r2u4C5zKUhsDBnNgUZYuK6YtHqab/zqbe5RDepjdj+Lb/cD+5/ljA49c
XBlxO6soUgUqEmxGPcl98F2g9vGvoiyc+bH+xPpYJ4roeDKZcJYCq2xj95nS
TkhkoP5ncrYO7zso88THNEH+j4Jqg7VEyNV7+wgXmlE6n8LU6GgdEE8ey2N+
Xgs+2yWB5+514M+KGw+VGfLxWCrzcavXhUDKzF3NlstFag9uJP5qhgnicEtV
US4WqpxcFT2QAGbS88MDMSl4qyQicJR4C1VuUxLVlYggwVjUJMBdAHs5Asur
LrpAEjKncRbmYGS9oU6LLRE5hF7Oxz4owqmr2jXjU0QIt1iOjJ1PhUqbWJs3
W1UYXnVtTvFaPb7gUpi8+74DKK2ecjX/1wf8N7utdaaacZvh/gzlmU5YiRc+
cEewEo+867t1tKkCG5lYLoQwtqAIyXrf1Z5eSCunPJr7uwrIH3ixd7wjgG/K
9T3KtDZo+jHQzZmdAPtdnn2LUKjAlNq3r1o2bkHh3ZvTN2gbUO2k3KOet3Eo
P1X+xq0gAU7EeyYU3d3li9eNRz/sr4fyV3zMqYmNsOqUzlobYokTGro3HT9W
AjuHLm1+WiFqCZxKIXhEoekxvVpW+RqkUXz/UtSuFBhbGpbZz9agunzhxPyr
Mtj4dbWpQy4Yv2l9ylIyCwRnmsrFqJ56eHDb7uxX72gQMBT978qPcCB7dWZ1
0EITex792RtCqICbCqec7LARrE7o3Pz0rwPzb3RTR7YTsIuM8jKDTQW0Eo1u
q0y1gdjBX9Ptu570/UuRwABlLag/PrDfKTcNRak/N1MpdUBMEqP8t9I0UA94
rnbDLQV0zJcZ9w82YlGM86WE3DKg2Oqvk3lXiLWj2T7c/bvP21KX17keAKU0
TR019/Iw7qak8dZCEo6YXxTtW38EXkWeX6wPEtE0yGvp5dd4pHuUkkEq2uVl
fj4ORTo74NU4YOefF4f3lmqXdKTz4Lyy8QG2SCK0sj2xu+HRhYW8+V/4niUA
ZfAp36z36XBmJzlH0T8JN54filE9TsShqDMSp7hqgDCdtS/bNBi2BS/uL01t
RIbKkKLxqkxcPXKlUzO8DngqUpo9pXLQ+MaXiX55IqT/+0ZuvrcYhrUO/6rJ
qUZmi7QvrE8j8NP3zQZ3tTTcefmk2lekBozEu+7ICeYAu+zVlZacQPhiG3qU
J6UQZUfvd4mbN+7ObdMzvNYVQBY8Z9lWqAz+kuszDa9K4JNWOklwrAwfMbzI
tD21y1/VP2snVozxeVd1ykJrLcgpv/eD3euciQ9/PKSrgLOKakv7VX3xRtO1
z8S2DrA1Nj/BD4/xwxEbzcHxIuxYefv7JxRgf8lPDhtNIhwgnjs4u1EHYmWk
TbOD6eBrf/jSQ48Y/HbtVo77pQ5kdNt89+VqI0a5HciujeBEVU8VMtUdBVjQ
ZSs4OqsGb2cvMtL6KqLN9S8jJ/bxwGVDgoWVsRZcmvskJ/JKCvbbq55Wc7wC
XMlvl4ynTyPZ5t6A/OI1aX6VtyrZ4rLAG5Hy9xS3CtbuvHQ+kXAeaAUSj/Rt
nYXVFsLxH+evYiet0pzWUROwQPUsr2lWFPRmEt8kKYIWA/X8d2pL5Nls/dI1
pgyTNW6Bz9tlUBRV+7dTtHAjde3m0Iouyt8OLRwVlIV7JMtVS2Z5WOi4pHl0
Wxg65K6PHWXcC/ldWQ+CXWmAvrttnvr3WTRQ8F4iRp4HxbAmTTHTbszLSXSi
4a0BbRXFnt2Vw8oKWz0+uSr81fw6PXKaiO+99Na0KvNA44HAPKtwJbiIk0Mz
Yx0wkmlRkjH3YuyNBb+MkwS0cChM2iYUoemH4AYqw2q45z166l3iICa4BnpX
s1fBxcX5+LHALIgVvNNNWx6LpOAhdprAduRJNxOqfx8Hppqf00K2Q/DmfeIG
rXAMbDNSsAXTFIOsK/m73OhCDL6YGqtySh+nRmf+mBwvQruF+oDgyUTYtuRb
PesZD3rLdiNqcvWwzVK/RXxZjyefpPbuRDeir2+FSfopFWiv2+A8YJSLb7OE
Vi7nPUQls6n3LmwxGPdmQIDBugw6gv2+Zo/FwV+J+Y3/WosxXPHNdtlaKbo/
63SzvEcC6tkQwTblOmTI5r4+JtONARXqqkeVqkDO+0/ko8TdXPvU2jGmN8Gn
X/v/SywmINP8pJP4GBGGD0i4vRrLQFn9kc9HohuB63HUueMrzcCpqvjfQGAK
hNSyefgIpQNZrUxgMrcUunvv75cxSwGLXdTiV3OH1weynV2Yu2D2CamFVTQE
PySPbhJ2eeXH0fio10+JUO/0dVLNMAUSKKbj5o48Qb2aOFdvt0J88yy0IOpm
HPblzD45ebgefPtOpx58E4sfLA3KZtKKoTWbe6/Kgywwcm87fs4nB8X4RE5T
aQcCx2mSe05JAbAYv3sTb0CCEv/ynx8ta2Dj3Ivj6n01UNpOoZO/teurv4nC
QYcRS50zPhd3NaKwcoJuZ3wPsAiK0u0XbQHSEyvyknofVD73w8IhtQhD3TWW
CRrPoKf02IB1TBYEy1EVCu10g0XVdd4voo2gXEh6Fvm5AatUxDtSXztDhXr+
h7AX1Xhavpl/2qUErccGDp63a4cuQ7nFV0VpcMvoox7vmQYU0tEYbahHOMvW
dJ7MLgfo6Kie0KyVAlNz2MiEVD2utm5WcYk8gdUMzbfS5d04aPqpy1KpANtd
1YSUKBCPEpXFLvVWIqfBhVRrziZICNrTdupiMrL9VyLuoUGEUrZeJ92GPPwm
pk7L71CDLzto7B5zNuJV8SiGGp4BDP3CdZRfrxsCfXI5Fu/6wvs0IZMtuSJg
f0ufdJKChIdsc67XDxKQWVD+UFdpGeqcC79k4FMJDv7XwibtWpD1tFqOp1w+
LqQO7B3nqIO5rxcVPhQn4+vNgYGQSyRsKksWJP0kgLqSUyB3UyGqOIweo7+T
AClkEfWs1yvw2Nw1EbOScMh11Hl5TqMA+azOnKO/TUDG9Kx9H67moMSY2XcP
9lbkP1TDd0cxG4jFOpp1Q75IL3i07YpJIijc+JUb/bkY4pROfvp+Mwlf/7ee
Rs70BItPElbPCO7m2eRvLXNwE7Q2PHn/9nMGdIvfvBvUSISZCL1TeyOIqMU/
aMaVX4AOx7+RHShrhCPSIodGPuhD0jMVtfssuxzrkEL5yTcfqb/tPVnOHIjs
Pqu5w9HXUeR9asAdTz/MZa020zVpR638fIEzvSRUlzhFccalEjkGmEZl4wtx
Nps9av21M8qOfU3lDirGtDyPKsGSXOjZ280QUJaLc/fbhL8HFoKRAI9EnqUf
/Dwk/FxMggR2i8f5nm4GY+KHqU/7ouPwB+2/EZobCVjOlSjus+aJ118M+xvY
pgJ3mhFmRjcARUC0sn9DMz6aGlZ/DKVICF3eM0Rtg9dkpF/K5+SgwqKdL+lN
AlCttv/6aViPEnVfeg/OlcGbM78ihTIy4N+GA88T7npk4Dxazm9QDOr3Diya
3IzHWQ4H/WntXJh1eJM5ouiFkmQlT+wMmiCi2o6pw6oQ6I2TjzfsK4fT9NfJ
bh6rBmrNZx5Kib0gaxPpms7chNOk6rXjHTVY+4Ht876sILz4cnZxvCED9mtm
no99UQaeAU7kT2yrcHrfVmJlgiMOXN5LJvszBdetm/XPPI2BL3H7yC6JdaLr
fV6r4aA6dJK8+4ONioD/ecmv9meU4OXNl0M03okQ9eQtY39CHSSZSy8GTwmj
YzTZFYtD2pBjYcL/zosfKxK95D/TiYDa5uo9RndxEAocNznvsiodILAQWdkr
AW1GbmPcRnqQAtfuX6s7BNfn+MSPUSvDImdAaqeJKlr/4HVWEZKCf/+j4Dzj
uXrfOG4lyS+jSIqsrGQnIZe9skOkRKmsrCgke5Odvff25Wuvy45Syk4lIkkS
UhrG3//ped3nnPvB+byvz/vBfT59tQ5/x4z+jeOZXWoq6PL1p9MZWW04Klh0
gsJOH+0k49STSffB6hMdl9L64+D4V4cifMMUj0hO346fMkbuKBFJkuxL4Ll7
9M65Ml4k6egVaI68LreRrmcoqcKKeszfOy7qaqH1VjHHUJcixg0psqbEXgRa
j1G+wJPyKJjWVMyiq4Hq3oGeoiESMLa0r6JCqgcpJcW/limlQgyp/9D70Dbs
c9TcjLV5gixq0r0s9r4QQjbvNR1VAP6nFGOaxjthRy/ToLy6BmTmO+nfpjTh
hJedKH10Jpgdzr/nSewB3bdTvE1yMTBRV47msoFw/xyze+yVJ3DbMzo5sLkL
vj6NPFh9tRq4M2w3FhRcwS6b06JGsRB23N3D3/LFYT+/c8vnhjgsNngu/se0
EWPaYud6S5yQJvJu91mNOnw68epYMUMpHJ+s+BKwWYyUQU+tcpYSkTaA4Zm2
SjGSXLX2HOBqB5+UiQGqQ6U4+/78aII+EdRdzXTOc1uD3oyWH9tOBHjLeLmd
TQjE0kdE7gLmSui0Eup2m+3HAyoXxJzFGoCwKDfGT96D2T8olnt1wpFfOVzs
5nwuSgtod+6PLUM+OZkbDSoV2Haq/r38fBWaxE5eYq0mIifZ39FBunY0txRX
W1GMxEhZorsTZMKonLlIXkMVMIU3eifZJIK/9isBE7saWJ145Ti+rxLoTzJO
f6fwhJ1moMk4XA4jUfaBVQVZYBalc/LXs0o4qDS1Xuqcj8u/yJqy1sqR7tEJ
00Oq9dBlJd4nb0MA4/OM8sjuh5dP5XyO0q9EEsOP82y8NzGwjn+Nkj0IXrjX
fV56lwutTFxlcoR6OPZ77BK9ahPImZlExEiWAyWdFt1Bs1z478UFLaPaKjw0
O1K2LlmAIl51NmxvPYD6iC7/WO8tXBN3l+gSr4Ctnq3Q9PfZ+JF9z6BJeyFR
hv8qVXop0pNWxtn3v8S+T1aSTbLVsFN5u3nbJh477nF2HSi/BP03FBpb6WOh
/WfPTmZQKnyc1Z1SMInHzHffm/RsU7H/QuVv3dkOkFZkP2J/KxtKwFJDPbUE
ot/e7hY2jgBDXYH1C3s9gHutnrv3egc8vnNnXPN3JXzQ5B/a4zbGFIYIP3jx
BDSurREux3bCXo030d/txN+94q+X9UtRtuDXsxtszehOcqr9RZgzbH/lMjEP
KgTfoIViD3p1WH959G3itWhQLlk1D2ZNx/Aw1hflhi9Q4mNk+c+mvXXEOStq
y7NQ9cxkbeRbFmyMUyYKP+yESe47x4sDC3CL5Kvt05Z65GuvX/n4sQ6/T1wP
1abvAoNNaZsQuwJ4fYhjSuMDomNUsYbAvgKYFMyuPOFQARLkHXcOeLcgh8vl
W2mPWlHqhBn9HwEiCMc6Gj1gqoHcBQr524cIUHxo5GLyFSIoVIdvNKxmQAd7
zkbRwxowdE/lbxxJwJDp4t82CTUYHjvu+cK8BOdfiTkRi6swS1zqS9JuIYb9
MRuzt8+AsRjVWK/6OIAATR+LSgLKvPxsRUFThyYiqzQrZPGw/IZUwGQiGzhE
rMKEXuaglbfjLXmmaLjg0aZTTF2AiiFWU9398TB5O9XFdyEZX0bXONNWViOF
9XVGgmE+DuS862HOqYBVoZ57WsQcmEz8w6O+9BCyqY9HKHzfy49JpQvLR2vg
ouM8t5RAgM9nBZ6culYN6r9vilhUuuOOkFP6YTUCNhOkl8ZF8sBLdV5loOEJ
HHrVqtr5NRZbaA54Ty/ucWpg2/NkeR7W/DktrHEqG6kD1R8nfa7Bk2dDn3z2
zIZfQbYOXfuyUMc7Zst3Kwk2eDytOq7FI8OJ+9di2uPQfX3aTfQZAe9rxpGd
fp4P8/+sWlehB8/qP59hNq2HlU/82u/HOjCwZ/pk3psktD3I9XHichnMf866
v/PoITAU/XXwD0mEa7ocvpoHq2Gh6MUiBdN94HCbztRhqcdAGRL5Fv5SMAt8
23xgqAf5hBW35186YWNJ3RNROn881Psfx+inZhBUo+Iiz62Diy9kbTgYG2FD
4/AFC8NCCKcU21+RaotLUwEs85zReFNRnKCVUoyX+YUYRhyacWrq1dHaUzHo
2zgnWr3npw6C50M4/hBB71BfU+WMBwSTnv+d59YE3tRmfRx9xTBOq7DTX1kC
8heUYk5sOmJiaeYFinOIzRMEaNbLA+k3rlk+4Trwe+jOk4g7jKCnzeB8QosU
rjQy8VmbKWB7tFkfv6gseIXkPv7sZoAhMePsdRln4FXktdZDU2x4ZpZD7LCY
OsrV3b2m4yeDh45RN8hsiWE4b65I0L5LkEpeyEohJYwFRsmF0876yNTyuUgk
Vgla9bIO0KudRsKJrBm/FQW4dr0h91SoBsozBtWcPisMjsrLa1E/FaB1wiz1
+rgyGsR/HlDI0sCyasYr1GxyyH3MZOPEf5fgdN+tlNl3smAeyz5w5+Z5bHz8
MF62zRBVLD7aZ/xVxa3RoU8cHyRw32+BYulJffxVOesQldmNQnW+gZYxCTjY
MWfzt74V9RYOtv5TCcA8P6XP0X8bIGX5ilBfWgD0+ahyBel0Qi5Z4BdFOWew
EBDKojjWAN0uqW9zvkRA9deqp5Z91RD9oWntEkkFLlMF6P3+2AXHtusmCP6p
cKrD88FPvga0jqRomXp6A2o3q2qcghuh2uEG43VyIpA0jkt6hxyFxny90ysP
iiDRuvU/+6jH2GrlGO9f2Ix+Iw4rVOL12F2We49GqBhnuDWoNf9VYnHA9wET
2ly8UFmhKV7diIHufEyrtf7oHvdjH9me552kEQ5K+E6ER79sKb+p5wKVzX6x
H4MFaKzCxpahnoDuzFVC29PZKFfq1XejqR0m4OmEYR8REyOtB1VON0A9xWuR
V+Q5wJ59Ms6hwwViJX/VXzN4jJqPwnyLVuKh29FUNyy/BDk3Q0yf1+YhNYuv
ZlRwHch0shm+OlKOWryWib279ZCs8CdrapCA7kZilKrX66DxDu3TxrulcJnm
tnG5XhtocdnZGgbmARBczt1baQCdSMbpSeNS4PGZnh7wKcXaYwo3FO1HkGSS
xrqZqQMVPwyovDnWjvlfRToeH+tEuXpzy4CRxyAuI4dL94ioXZWvd326CY1d
b/jInekAN7PDpPeLgkC7Mk1NVacUpzYSL6vJpqKGgK3cHb5aLPBsiqgVyIO+
Vi32DwG1yKjHDFU+xZhPdjPG2qITRdOqxe/N1sLfitf8z1IJMMp5K75nMwGV
FE8HL5wsh9Ni6/iVgoBfDrBuuzAiMsfFrdMpVqKjwxTldm4ROuUJQetINuiQ
XqedZqkE2jeVnVmjTWA1733oS/Iz+Hj8U3mUaT5YNJPv+ydaDb9UBy8r3E3D
ZV2lIAXSFhink1q/y5AF376LMl1gTcB/tlMjIuatKGv227H54kMQq/fgzrhb
gvdlnvC1GLhjMs2z69wTD/Gh2HiD40gAPmyPqFVjKgPSsh/dMx0EbK1lqpFm
IqLKstG3Bbdu7Nhw6rcwvArzz3w83h6NwpLa60S7lBY4oxZx0C4/EbTz42rH
HIhgQXskSGOmBEmKWm9rjiuDm9jpgMPiRVATvH+auZAIV6VTo5zY4gHuNzee
j+8D3Jg7BGK9wM7Ca9cdu3ffeWHXX6tZoKz3Zm7keyu+/71o91ShFNrHmY2I
1+4C69P9ZnzDdXD7j7wbtUI6yLsykzbrBmKOdav6IZNq/HvnoH/NAwJ26wW2
nynMhZwJ4zhJuTj4xA2j8za1YMoc6ZWuVwmxzFxhF361oPH2dBs1exU8wiem
y5sEtNOsC9SjLMc+sQmus8+L8WOCz1ZKaA2kb0TMPFjJBbJSGw3H2nqskvqp
cfd8HvzgJc/NHi8EsciyTtuwQAhf3b/1n2ctHvDO2uS+XIc1O9pDP8eqsLFd
dnAsvA2Iqkx0HqfK4NVQE+W+2ho4Yie763E7Ckiyg3cS97ysKHAprHCjBvo8
7TfJJ3PwqVUAqfpmOEblUB0T5qqGnLsVoSWvEpB/SEztzYNKSLfk649MiMW0
uULy9e+pKB0VUCiwrxq8VndN+AWVMSs3a1LgQh0qH7tc6uuZjrdNjLNfsGUC
/TPJvurzVUAtFhnmFJ4I+40zx0Nv1oDE/Vj3U2v3sXTkSuLOsWYIP3241+On
Hy48tJROYk4BbTGKlOwPTZCb5LvtMJKLj9yHguW18+GHzfko5t1y3NCpLP6z
Eo56b0oMt5kjQXLmza+siXzkUp45SqXVC6T9h79qupZh4QESu7rZMngxTfUo
fKQctKLsJzQzo8FXWfiK8dcMsKi5p+zer4kH54jrT49WowX7uTxFcw1keXGi
qDQkC52i/nM6GR0JwxevK5s25UKxYPgfL+1cTKecFdVUyURBFQfr5sI6SDUW
4v094QODDZzC0c3ZKHut5YwJTwp2Sq7TbHbEAWHYMvIK2w2gEWnvdzwUj1Oi
63edicUo/jmUo7y1CmPUR2pd2mJBoXtKUfMFAR287ydv20iC79hthft02qD6
b95C0dAI8b0kkTzPEH9yTzIPSl6CBAaZgk4dTvx421Z237NzIDubKuZ/+hwy
V8UE3TwuhIWxd0joxdXA9/nwzBtZbuReLYkTklMA622jd8WfLmKh2vDJkJey
qLT7x875ljGuCmWzfPhyForZOMWoaPVxPMh85/w3FSR5++LCcUYTrD83fljg
qhQ0+3w/bmfPijSvWoj3RBVAUIXUVbJHF/yC5CXHm+XB+VJlgUypDnqsbURY
U14Eh1DDpEtxSthuYT4lSqkIfFLKdzMaxdD/eyw/e7wuyHrCDW6RbpQ/TUZO
x1aHSXVWkYJ7HLPR0fIejMsDxk0Ki0OMXXD+ZcJgzXgBquY+HwWZAsg0uDvl
VFyINm10z1Nu9sE6C7H8Fkc2Tkzxp/1cqUPyEIpxm4Z6ZK8pPOMVZ48RIzxt
N4dyIN3ntdzctb3r1vNqNO21KB7V6huaXYSDazUhTMcI+PbT1ka2XyVICcsS
z+7NJflEGvLY9SqgqbWaEA7PAPmCPsmw5zpI4PyxadBRhCJyvM1d80Qwicrv
YLMMhihWHuuNjnoY467RuZZZC3wjFfWuaknw+klWmBRjCrz7gAMfO2Lgc5FJ
1ZlxP9zPQT8XcWLPKx5kX8kgb0SvJOEbX1lKUFHqlRw9ZkLFsovc/oAwNHfP
eNRB0YMS+dQc9s1xSHFh37ru3nzhPqX+XUKiEH2nwhTuNF5Cen1+pS8fK4DB
XaPZea0ehjMpf7wcf4ba6v1cCz+IMM4Rwj7FWAA9NkNPAlrqYZW+lD/bIBMm
d14q2V0IxEc6ta3XiI/hCmtWwQPDBkjlZjrLsjePK7wGtw+EECAw63BSHaEU
rUx11p2Z9rh08pqS7e5TIOm26a0xSQBKVqurPirdwPluiKWJrgHd7TxlTxx1
x5ktxdEF0SJ4stRpNKDYiDwzSsmXznejop+Q3opDPEpssfNQ53VBTi9N10vW
JhwRolu7+rAHjj8STdrwfQ5WtplyaXX3Ea4YbXaZ5kAxdyiNR3ITSPcTU5ea
muDNcS1y96ZidKKamgj39MLCZ1ud/IeIqJWs1Ps3sglef7zBr1GZgEcplaJ5
NyuQ78vipdS/nshW93N96HkAal9nNc1XLUUnCJ/JvJyDgX6N+2+uZ0Bjg2tO
7uMqqG2mcPr4sAEedTy+rF3fjL9+vfi9PZ0GXXX9MVEzlTCppH7mH4MPfrpV
9DRHqgjEaGA2Ir8Kq2o+v+usrcYM+onefas9SJJx+kg5KTuATYuVk347zi3e
qoxkTwTaKxxpJv1NuFJGef5WVQaW6kWO00pXo5B7avW7jWJ4Jd4+5EeRjEfo
lw80L5WhvAqjnFN3PopUyTKEN5oCZbTx+zbVZmw2i5hJqelGGnrzz6+9ErFT
3+i2U0wKmMnTPHtBUwwkwQuGfY+JqNoeCFXFEXhALUXoNWMxpk/nR7QEVqNM
RHzcf2+yIWriNXuoRj0a68a4vyvuRPrPBz2WKNpRc4Jcq3YrG/sN+4Z4BAnI
l6HIcEfCAf396N98fFWO+hLXZAL/K0S2cTk/slcpuCo4HCI8Z4fUD2k2HO8U
YbHi/OKVmxVwlzfgsyx5DfZLffRviXfFFaEHB2z28mj/to1Dxj0UBDbfxaQe
bUQGm7p0a0ImJpT2KsxFFsEjjYZ3ZSZduHJVKyrRIgf1LJdkxPwroHO4yXlQ
lwB8gq1/Xtzow/O1nm5XFEuw2297N/hDNSySaJ71bqrC9HkjTr64YOD2KaJ/
1ZSO+xaUZvnpnqDy4e4XR6gf4uS+EV7d8kYsuekhZTNVDcceHZLum0mGuKfk
JCRmRFwxzxs+dDINZ3IOz+/rLYbWoisc5N8KcDnGtd7paB4Ij1WdX9ZJguJn
K2f0JFxQMn7lmDitPzpc1DXmds1E+bBdk/hMAvZdLAkL1MgB31tLZnP0xfje
wudJk0IsxHA4/bqzFY8Hfb0tJcdzsbxYdsilJQtmdvhVyL7n46tYbd2fJcXA
9yh9sbUuEwhxdR0kS/eB+ufV8/6x5RhNHJctOhyPnJe5JdwGs7H9YExb9uIT
WMizfX49ioA775Yd74aXgEuB0up/J9tg9b7my4n6GLih8ILymHMTFqu45e38
1wENs7e8rqWGYOMfL01Dk1qozai8enFpz0flm78r/MuD9g8/hosOFMCFRAZq
/z3/vTPcL/1UlAAz3sb0be88oaYvyDJzNAJHjzygi6BOxAHOg7Tv32RCIuk1
u6CAHGz9bBMvA3sc766c1biYgh3Xyw29V9JBbzBVLUnaHkigujaQSgmLzC7f
5jeXQoO3NnnrkSbgM8XUF7GsCELuGocryRTwyei/Yzl6Suj7jfSs1ukFOSoB
5xTJPAponkyTF6kRBY/Hfz/3N8pj9h16LvPC9Xa78hXf66SS8LA5yWKeRgAp
H1dHsBipQPIN5jDalFOwaO5cvFy72r6+bVng8fEith+PFjYXkIfwOTVmnlPn
YVUllPkm+W47Bc+xS2lSUkiWfS9gP1EfRQx3QW1aC4f96M7NmYkDXfvpr3H8
56DL9lr4f22msIcDlffZStAXUHTEhcUQm/vyna8y64CD+477WzJZ4Ag6Hf0r
qBOj9F6EMRxrwxWFcz5aZ2xBs7Nr4p1YDljKfWx5drgFvvg2r3o0luLjE2eu
XnpRgsyB+cZkn5tQllfj7iWRBJiKstZEJwKqNJdKsNPXIjWZO33+vzIcoKXa
epvYi5RyP8x1AohQG/RjzLgA4fl7CiY/qziQP2faSRIfAMnPRf/o36xGgol5
uYZPNqTLOKcXjldBVV7zq9KpaoyPiHD8r5GAglcPMB3lqIb8MqbOwEAiWDH8
yLZ76IHPhWX9N5YK4EWAUtQxqQ4sT/cutlQhANfWisaKRxv8J/o49NKDfLBy
+vlwcKwKVA5MbNWp5WDkRe4IayIBmd+2S5ZlJKOVTY9Q4FYGFP1jvBjfXAts
hW/aLq11AEt5oLCIWg18OpBk9tKNAFT/6qdJiu7hVBv/i0KnGoxmm361kVYM
3sMyHycuxKPLysXSSKscyLQ7QwxmSEEL2hCD3rp83Pj8oXy3IwsLvJFdTxRh
Ip9jKnl5r9/XFXE+v5YA9ttsE2Le6VCeYXMqai8nVKOGr36MJ2GtnOJQe3s5
TMRy/DnXloK8bFHTLw/3QpngDm1+FEKcy+/IayyNIDQw+fZeeB64u0ePaJoi
ZjBShimuNcI31Z33Sc0Z+KVC5mXT+SZo0nhIn8VKQPmMANv8qRJ4fZ1j/Ih3
PhjlF3klMOSBC/eZQ9dTKtAn66O1jWs8FgqEPHQ6UoustJ5+t1/Vo7vn6WUN
k1LAB2vtvrI52HIhp7BGsx1jeqU/UlM7AM3J3aKcmlScj8kyTnkUAwIb+oHM
27VQzP6lZcyhFLYq3hs0niOAlXK2+cGEALiwu7Y7u5QAm46LjNOMHdhwT9Qh
/XAH3hiMvnWFoh4viGQ8LR72wHgpkYFOzwqMdJCZYZlqgWrKsGXdjAGIXXEp
+QQRIGwcddmZiYB0L6VCslUTYTKYNX/0QzCUXCst6TZNQrJfZ04SgiOhOOnC
FWGOGnRJPW7CV1KPy+aU371bCehJ6an0MTYf/kl7LVcJxcEVHurqwmuFeJ88
Id+wowLYSs42ll/sQlEDorjgn1QktlXeXQhpA/Ybg/Hpi+VoInWddXGpHZSq
hGm53j4AAeYgQuPhMpwSXzxzsiAHTH61rXc97QbLM1Pjxp+TwerxSz05vQbc
lfx146xkPTzXUtxwT0nEffId6zZpRBQxFpL+6xsPnmqPew/SVmP0DsUBjsxq
UGh7GzUs2An9Ns2/cfoJ0qToFKu8T0Pl/Zbrxp2++Goo/QZTdjCq9Ci2bnv0
gr3F5xvJ2QVAdJu17O0ugtsHg99evloE3F+OU/v6pkDqg80b7E/C0ZeNzubF
j2s4GSekNvamDsr9VufDbsRjjbeoeWFfFh4fbrNRMa6A+y5rdc1/O4HugoqD
x1ozBjeXMdZfKMa/lsvjGevZcEHL3ZC+pxtqx3e+sDElgp7B3Cfyi3v7M3z2
plW1BEnTxvSthUowNVLL7cqVeCwW4eFbvVgEP5/3PKcIzsVqgaqmmoAyyHWM
GXrT5YYNSrzb9AZ1e5y4y/Lm8n04eOGa0H/sCSD2wIDa5nsxWj1dSyFIZmEc
83nPJUITZubpbLz93AjStsmsnypTcbDP92DwfNSe57kNTD7Px6bu8ev31wlY
pVy3aBaXAKTPR9n07Krx5UGVy1RkpXC1YiQ/w6kLRk86alOdS8ILphXBlEKP
YdxbY8xgcC8Pf4ufyfTUYa/RWoKXaDEkpFKb7tzMgCzBgAKjPU74nptcGFUz
RjHpYja3Wy6wtMT1U52TAIpTB74X6CViF1POfcLpROSbC96ee38V+Fp+Ke7/
1gJdFk+y2maa0cVWhWdLyA/n3ZGzUrQZJX8lpXJ2tUPPXerulfUyCKxLpf4q
mYsknHzuhDp5IPScGhYIUEe5+rOBavLR8OippVi0Qx4ON8jYd7yoAGvHNdNF
YhGIiofd7ozKRMkMIadWumdo91RLWnA9G6dLykVieok4vrSRTWsYjPNP5Z4E
X1LFZFYLho1mXgjefzF4hF0LSZCB+ZTJcbBd+SDtd4oEMw0ec2p5G8IyD9Pi
rfsX8aUNzWq7phz+vVZZcCFaF5k+hagOllyEUebLz/NidHFR2Dqdn1MGDe//
5WKv48EcHYrpERpZDFYem2P/cgVIMv38btc0t7MUBekOLsqjGZOC59dSMSTX
Vdl94aYCgQbUrpOCavhp8JwoeZ487ls38DqreRpEmqoLd1TFMFlr360k0MSe
ZS+SOhYDOHc4L1TsyyXkVIgIT65WhueRB9tOb6vt+XFFkvPscXyzHUilUsaB
kv6JdN9XW/GMmJTuJ/1OHKJLCczZqYAjEX+FjOST4Ga4pc1GUyxwaXB+EnuU
jB+8SR8MStThPAfdeE9GPf7JdFAcHerBaU6ukfx9RFRUOymzvtsAcSX/jWeT
JWLa97MxY4GFuKk+shq/lYv7taJ+dJ2ugU2N8heD6WVAfjDeRV6hE1Jz/vON
dqyFekYyq407CZAQkX+5RCEfZPW3bt/cIMAnjVc7pl/rQfxJWCxXUTqyMnGd
LS2rwI3Xyhbm5+OBUiZcyGM2ESzekTQU5HvDSNy7m2IVjZgf2lD2YTIBtW6/
OTvAmwyRhfz/EetzkDvnETfVnXzUkLuq6XG/DmyZPEp8NBog+3rGl4uF7tC+
ORFcl9sITcxpj1VXc6CW0l/vUGc1ugZmP78Y14jmPnP80kad4Ds/2sh1xAVP
up8J6vHtgBynuOCDXDnwNGdl5N2ZYtx6kPOSOy8ONkZ4LGMsy1D2uFD7myZE
Jfb192YHK2BlR6FLtMYXS24cB+6IJmy0SPutoteOri1CoSFmzVDaydzCUtkM
+scVwhsrELl1hrWHWFPRafB0xfKdPQ4OdcQln24AgqiQ6eHcS2A4pS4nst2B
T1aoZhUPNWHryzujrAs9YP+1iGeXtB0e2uSePZbQB3KPHgVwRFViur9kGYNB
Eeb9XaOK9/HEsPCLyuR7PaNzwF7n7VgnfvWv5/OY74bFHta/dzLq4AgzhcXz
93WYJ335irRNNvofFrD/+jEZFc2b95lP58LO1qq8Fkc9GsaeqlVo7kDBZRvn
UkI2uJwe1Fmm2evLv1V5Pm7VwlXnxdlj8z6wKvwmRXumHv7bLLVWzMiDrRNp
ZrMze36uzn+QW7Ic9Ra4tMugCKzTyPhX/Kvw1i7JQqNLPQbXP4tk9yDAmUG3
X7xr9RgTpFgir1AKencGHDk+PoJfmYJtg6V1OH1H5lMtVxJMH+FPNaarg/th
NfTMQ+041afGHe0XAebqBj5UJM3w3yuSuuf0uWhxgZvNhMIVfz8P++ZP1Q45
2ekxrjulwDdWb1e8/AjHd68eFpbqhKpm8eLjlvnAI9h43pUqG+mMxq3vGyRC
xN/Uu4Yn0lCeTPrBadYqZLC18jpBVQHBI+etm38Xw+9TdhnfGSxx/80OqFyt
RWvxY7zBjIFI0uDdZ56mAc08tRLlU00wrXn9tJJTOqRyJV8n0FZgTnC2eVN/
JbxXek4qubnnGasz1OTBBCBo63V6vCjAix+H226rlKM8FaFJyLEIF4O6Dq/a
GOGoOsWBbt5i2HnQybjW1ADc/Q/X5gwyoX+Ecdsx0hO4CuyNKIeKQcxbyrS2
LxEX9TouPTiehDqshj+WPFtxlqa3oyy1E9N15GSEjVLBooP2DA23LSz3dh0V
sk8A/TeW/RM/SrHSRjjqGHc+vnnerxpumQTtuaEb0e8rMJAp4OdEcg9u881a
lK5Vw5R3E3mPlCvq99lunHix97y6LVriTVe8VPCAcnawEWcq6fzTNDNx58AH
9j/j1ZgjndvFz1wKHF15+SGkVTj+g0NPu6wLJpmZ7WL2h4DC5re+zPJqMDnb
NHt3xQPH/UxJdr81gWP9xSKpiWq8nPSW3FQhGUmY6wL9jlOi4yrFwpJVLmqX
xYaf+bvXZ4PkyoUORWKgIQWvpmQiaq9Juf+w3cvtkdpTuq8TkDL6cnEuMRUd
LZpPPuirRUq25lHtYCKEMJGE1jJXAvuA8auiE7ogf/GjkluMF2x+0026YROD
vgZF9RkThfjgeFyWZ3Ut/LaOHxfMLkLxuXclJ6bTgXJeLn2AKhySA8MTCOJE
vLk//mJmCQFP/AmssRpuB6EEmW2G9HxMvun2Idn9IR4ZPXrcQ7wductyFQ9l
puC51w3cMfklKOdxzDuoLA3yaa/F3/QrA0b573zvxYPh2LOpJ8jbDJZkJGUh
N/Mx91Cg9oYgAdkLTvtxhpfBqFpaunlzGj4Awa0Rn3o0uJn8sCAyBV6wxCoK
/WvFmQ4iWa62GpIxNpGbihujhWyl1cBHJVyIuUNzJoEOR5K3ZcnO6uHIjanN
D9V6EDGVd5hjzhKc7ByeK5mpQ5KjBE1EhAK6Kr1d9NFiQcX87F4uOhZw3T/l
XL2ii0aFGaNFrw2Bx/F8zsA1CTBpFrCfauGCBOLREb4Da+3uJVcac2008Pf1
T+/GBEXA7+uOQiGNPDRaZ61u0N4EwbvnFoTHlIFiQK05JOQqnmisrDPPFgHf
MkdDvyUu5NhhzXv/WAOjdCbrfCoNoPCoT0bFsDhyy5//TVVoii4Jk+pGUjLg
8lHr73iHOMjfZ9qQrWpApvCkJ77LHago6/W87k0XRJDYVeTZ+IHHrxvnlmeJ
+Mdy0jPqagGGjymd9N7ziLjqlO/XjIJQQJqwbFrUigL8nz4Jl2diXZ5AH8eL
rj3P16AxXMhDyuz2I7r1LXCsxbu3qTAfx6g3xGL7erCa9Jus2U4xRoqcMPMU
qUY5N7triY8qUfeC4Q6/RTycozWgObAeAeRhA/MxconAde0yU0pBCWjwj9Ex
zeWhtarQgztnayA50dLyhEIKNpd5HDM8WgCtrC5MFy/XQtmPX+k31ruAap/a
n4RRP5Qwf1MVkpIDV29OfPhO1YxvMs8MbCg3QmGuS+Gj9wVo5c1WGJSWD9ni
T8dq4w2QjM7upuZkFU7y34o+fT8AOK/1yVaSP4DQMBvi2+ES0D4XfzHnbRtS
fnnSeEE1AeRzlCyHIsOQTsdi0yUkDhLyMuetCrswwu7mDRXBWtiystHKcWvF
Vq+gcDPjdJzt8+87pVaOD4j+C96vGmDLbthGJ7kcehRi3M8thWHi70Tv/ccQ
jur8ijss0wx6XR/7+5v4sH0sPO/PxyI4wqGsVdvfgCZFSj8yjniA20I7+Y/C
EmgqW4hX/5eLnLItx2OniMh5pfNfuU8xMp55qhwr0QFGvzg0Sh9ngVN3b3z4
mzzITtemUyTLwSP/PTpc/rQSax3PVJoK5EGN48jaf5a1mFpwvUjWoQ18R4S+
fpW5iw75ShrHv1dCw25Iea14M+zcWj8fNpMBS/0vV59SVkPrtsLNWU0CmGx2
Gr6cJYLEiTtpJOM9sCQU2zz5Mhuk9/1qFXnXiR7aytmbTnve9l/X1x9T5Uiu
Zp3wrLoQ+rLM5vfpJaBYT7R+mWYVcj69VDJrkA2fHIR+/DJrhR0aDcbpkD7s
51je1FZsgqim2M2s2SD8oZsyofW5CcnYBSOK+sthNAXi363lI73zaBxdYCm2
zgjatgh0wisrrQL9dx2QZdPpR7ZbgiZs/RX6V6Pxv1cqNUHOdRj5rXKfeXsJ
/NFzvNOoWwlF23VK8l45qG73b/ritxRoFbZIju2Ow/L6DjaVKH8k+/knjFnP
Ax+/X+gbFi2FhI8f/kwoxAP2W+LRyGwIsr1ppNmahuydE/1ObESU1s7on35X
C89uTXSmLtfBcd9KWqmvsSgVSv7wEHk1ZHl7Oc8XdINcur0e6dM8tPsaHRPH
mgd86lZHPxyOwmHKRONC1ThQEy79Q5AgwFUL0TB6kkwoWbn+8+7JAJCOcVC9
xJePWxN+wc9Eu1B+hSTn7BlLzDr989Bb5wqcWmNWKHsfgjce261/u90OJH02
rHiZFQ1b6Vy/afqB4URvuOz5Ylhx1X96TzMe7YXFLWVfhQFJmSvtvsVL+OLt
a33Dw02QPHQmXfndXWiwel4Tc6EA3Vlf08tK2qLCYxb2Fc1qpBsIr69/Kw62
LDy37fzKwdDxYYkJQxAclZ1IPpXiCkyvzSfGirxgn6v28iFCIbxh6nFZuFQG
M3f0Mh3ucILQc61+uR8EfES3RusVnAxT/iP3v6qWgmCHzbrVnofxZMh0v71Z
BzwPnH5SqDbDjWznmy82m3EleMRnAonA81JTPH2+GG7sejKLkDSiy7/H3UeS
WlAwL3Si7E4Bukntz6Giq0KKfNXou2cJmEKa6chmTIAD7MWPXut1QWZR6b8o
8RqsZCWsJjj1ALHj9XHFqFzweksvQ3ayEflcdI0e3Y8FnlGnk9fky2DqJ/f3
MqF0TOr5ebBhzwcVHzMtZo9mgLpd5kGlWzbIfj9CWf3rNWzv0zE0VUwCC84w
SpZkVxAPp82dyHSCk0fyjM+Z54PL8gDN3AUPnPJXy51gy8QOzo1bW5pdwJdE
rugc2AbN5cP2D5RSIenSm+r//9fhJSPfeyeJTrD//MPArbEJFxbtaI6QVwDZ
vzGZpYRGXOj/nhajVQ5iq9y/ZcZi8a7CqcVjWsVA7fklVCi7Hnh15V7Ki5bh
0q7f2uBYK6h/5po+6loNHuIUhYo66ii4X+mQ0pHrwD0mI3PXQw5XD+g0Bimr
A7cbfk8PUsWO148fGi1tti/SR7645XgcabZ/2p/hUMQYxRRG+UUjUK/n+San
KYwdd8lI1/9dgOXMomV2SwUsIpne5fayRCtdLZ3sxwaYKJFLdlBABRgOatex
J0gD7RXSi7yZl5BdI8T/yOUzUKE+1hXJp4pedvush06J4OGyEzpFXyTxF5up
17cDuqB+wsHx++RpYLp8/vcDDS10ev/LzaTGCNj7JHiYqrfa2d/z+Fyt2Q+l
/XM/eIZU8Xfy756BKkOMi+S5v9AuA6IP1+ovy9cj/64nU0hRB25160w+Je0C
Xo/tlmu/LfEeNPY+tezA54cFZQOP5oE+hb/jxX0hsCjnckZOrAu2484y3Aqu
hZRLP+2fd6dBT13tF19WL/AwGWZ45mOI7j1TZGLEJLhHntUvspqB1E9OMTxT
qsFvC48YfYUL0NfJSEuqsA2/uWj4eq5VYOgZt0TH6EDokpK/tkVfD/Isd50c
LDowZu7w1Q4Wa4zlKPGVj2mCmn+fmf7ueeLZ50+0SBcK4NngwdT/csrxj8CX
u+f9OjCP/Iu3rnMLEr+rHug9lgdUdotfRnkj4d2pzgTjsBwkc9Hrn+vLgds5
XyWa0mqAdMJE7tBGHvTw/SmmIYsD+bvXRFaH68Cva+SU7bFCNGwhU+a28gRO
3q8q3eQp4PXqk4Godij0HPoxOW/8HDZ+j23y+EXhQ4JJQsi1eBx8LXU0+W0T
cnuY+U68LgcHDmGubockMF6+YnWWGAx+CUcNOF06oUbhoKOBeDeYMDI8jnyS
g40LZmvPvCvQfqNP9DdPA26Pz6T94SmChYMDhCGmBpCM90rIEq+HOk8zjR7z
Xtx53buvkKkKfAINj4jcyESX3AjlYb8aPKD5n7IcPREXtP65KaxH48edUBqO
0BcQUmv5lCa0Czhs3PoyqPNwKTlkRrCyBpZ25lZ1WjphqcHYhbwhFUaT5ChD
RRLgynCB7c31YhRj0OTUMCZibuun+/UXanDx9jPRKzmVqHHPMz5lzx+z0yUy
bZvv4Cmm0xXKW/Wg27r65p1aLcR8li5wb0pG6S/kQjK3a8FX0Pr6vVuxaOHW
8ngzNg0JwrmkXoQKPFjy81P1pQp45qf7zeZUKyy+3/9VRT8Tx0vITkoMleCZ
WmaZs09isdM74OOpkkYoHm3uneDKRQaZ/2wabIjw4PUsXb9vM+rmW/PofagC
1ZIIK5ZIZ1A/qJQQ9CwdR0+DxDOZNowR+avozucDcoUaCikniHCIlipfjyIZ
aHzjM5ugAG952l794vQK6WbFOf1LArE4m5tkczMFVwjLl0d5CvFnsrHoIZty
+Nc3Yae3SwSOpJZz87yNoF4w/b2E1xfyL/8J+/LlMZ4++/pej0Y1kBqrRXy5
XwEzKR/EZxyNgW/0lsuhl08gn+bN7xaMhrmrOXO51rFYxx3MMcfbgflpaZEa
q+Xgfl7Ojpu+GdxeGwY9JiWCa9E9iUz2CPQiq/xoaZIN1RTnCgMHM+E143dN
poYWOOR/0vf7r0TU3Qz/ebymAYE+I3Zquh5eFdlvfr1fDK0OvOkHviXDfZ1P
Qhsp1RDYE0YS9r4Se4iSu/lpOWg9M8nsJeaOQ9X+ce72NdgekRfUO1EEGteP
evbItOIblm+RJsl7PfIIb6v031T8Ry249v1bNpxTGtihe5+DGwJeou2dfjDI
XVapwdCOUgNyneR0e75h90fWoLcTfl4yHoxnqgWJSarGN4MVuJXWJG9GUwkf
1RWnny5WovKOYTnJryfgdOypqLSWLurosRUxRmfjzw/m9kmn87C9IUDjRUYW
ziexX+i/ewv5D+p/S3/0AD/QSqTEXkxFa8Pmf1F2hWjuPVh2LqABP4T3HeFl
6oDEf+/JSxabwOblaaoi23oIsueyUNgtwvNXbm2FSuVAQeJbZ+ksX+gwkvu0
XWIC4XQshalkzbixjzU15X0OvO/Oia1NrsDEnWeSLvPNaFFuKHVRQGmvR1LT
0VSHQL1S2w+GK0Ww/qRu/uhgFXrrZ2Vcoq3B5g0T02OS8aC31vQtYdIeqykF
FjezsoFZnuphP0slxm0w3mpZj0GSTW0qlvuZGE6cCdC6nY1OtqQaJ3tCUcbF
Mldyr7fa3T9MNXfXG4LT3LOIbDVIkj7MHPXdZa/Hs9LakObAJIl/FO8vM8g3
LFI5SSyEG+GflxWynwB1dlTpploesB+uonq6dQ+K56vIPg3lwcxjxngWuWi8
n15pfV6xEB/7SelnCdWjEyebkLzxE4gNMt1sFelAkeya6e+/DeDQ/uNv3w4Z
Y8JzmpItdU3oCKYYWju5ILdeuc2af0sF5O95TV8Q+CbXr1CmlCr7To5WMGkS
RjWB+XFGxd9gU/TyvlA5wS4OecKiH7/elMKrrrdXqYAfR6X1anM5L0Ppi41R
5zxN5E65eKX+vCDwWEzb/0xXhJmoQI1QWnlgUTgR6/3VEDU7nxjcDjUGAsWj
69KnNYHMpf1a0wkjLFZfe5O+KY986uH8zim6oEXvnPoDjCHRoCqBTpAdRL5o
t6g6ciPPg80vnfZGGHxAUfOwhQSe4HHQ9X+qicbSTZf5RFQwRnyJa36vHx29
Oy9Uf7gJ9d+UifNOdQBpMdEvXDoBTzw+xEpxuRNz2TlKGm5XgNY6izrdbC7w
ixsdvxjcCwyM/T87N7ohaSk+bPFEGpgZfm7pLGhGFVu695HFjyDvSlyB6m4t
2tr5Mh6QKMff/PY19B1dILGqYKp3qAAySysd3HxaIXfwkfYcNUJ2Y5rUyY5H
yPAu7IH/eCHKPlMZI1sjQnv72ctzV5Lwk+rXYxO2TUgtFr3qvJmJhekPsw3N
A5Dm8qcPimsEcD648ls1sRyIJuwdnCLOYFCjaTQ1FAAdfEd3z3+qhfGa+LpI
RyJSBdx2O0dxGaM+xq1GOwfhDTY5jjMOydjaPkv545kf9h24np+tlg09TU/U
vpbWYJlkz4JeWS04tRvRKJrkwbuBmptr9c8x+S6b69i+MNAcm8nq/EKAK7Mk
TCZf8lHmx9lfh76ZIDFUxpR5uhbfSl63+nS2EJtVy37WKzeBZSDf16+CaZhq
ctSQMaUUiq+/SagW68WO2FyaWEFHSB3//PvQkW6QJutgcIx+jvqqLvag34wf
RfZdWmCrg2n+iI60wL1cHHw2+cTIHstzLN3i7FPA1jdiTti7A+c//3mZGpaE
2RtkzDeqNUG5TU7ljEg9POVMqf7K2oCsug+y3nzIQcnjy1OOB6uBqDCoziBa
Db5RItdDp6vBQYA+jTDUhYbUqy5yo+W4HN5mPmP+ELxHh7PyRiuAoPCeRMCA
gFaamzZDll0QnhnhbQuF+OptM1eLwB00L905dYO5Dlr16Z2tG2LgD19ECswS
oFnl9aSHXQqSiu+Osvxtwpr2Ymb1sgrIV1dppJJ4AYHWvWVSG7nAeTHxiZpU
BTziy7hCSKgBLfXQ8kPYCoKtnkHbRwIxvfc/jotR4SDWlurDdbcA6uLlm18v
piNdlZvFD4pM/Cb4yfXuSgUOF4mR3elOQdWf2+EsBiUQeDafvZ4zFK0oxYMo
syJxKz7kgFZwACQJ67OcvNMEy5THe1PdH+PL9znUcldLUKD7e4yYVTn4G+8a
3nUtQv2jNtzjujmY77U6Z/sqBMY2x6+cfVYHFou3g/aFZ4IU/fjh+vRwCDh5
+hVNZw28vRN33c4hF9HOdLRpsBHm6fUHX+l2oYTx0MuMxVqUL7MI8dyvjC+P
c6tUCFfC32fVXMq6DTjxLcTcfrwShjLtiKY9ubjee/vD0chMkG97+9PJJQF+
5746an24AGO8bpauvaqDnaOVuzqPuvBghtBr4s9aMBgwCozZTkc+hqgL926k
QXLJpt4LMz804dt4xd/eCgQWz5UZtmDgSnVM2YMMhOdH1TOYB+O6XFBQ+pEa
4Ln0eUmKpwJ6Hh3o9thHhPgOq/1Hy7Pxwl2pvBy3Jsxcs9C2bmoGFp+Czybe
NRD3/LXOh60c2NwX+HZlrRGURWckWcmzIJ9O9/3XhRpspVD6XqyYiZMOlNdo
I7xgxdaJ8NI1AXajwtv0SSpBcX8p8/yXQjQA6xMiyjVwfL8Es/VuPuhcVwnx
eZ0LNazjQrMqMfB6v/jN2pEGsJ71CCszq8G3rY6HPPY1g+xgSQ1jSjbe5qmx
GOvNgKhGqb/uRrFI0lulbMHGi075oZmTVqko2HXv3lCpH1LHGI5HC9TidcPZ
ydmoRsyoJSt58bkY2BMM81+evA/Gf31dXcqKwfyFXtk/8gIIozCmNB7Ih3IV
bRJLGwLWucml2p/JRl/NqNvRYIo/VuYPc3nXguxo0aUdxmyw5Iqta1/JxVoH
obpTxSnQ1vbv8oP2apzR036wZbC3X0MCh+37OKB6Xakk9K0J4uZ2GI2UqzHG
+6V24ocEaPy7Hqb5xB0VX4hbtKuUY6eMRcDsixpotkm8bF1dBoaDjtHXhguQ
/G9p26cTRUgiLWQvZM+OR/hffu7zTAWeRLWnF/Lrod3fkZ/fOBvzXH59Gksu
QOZd59hQRRvcoXmpdZ6nGi/WWNBU2iZAcjL+UnlcgH83jRTMlgrA2+79Qo2c
Fugcs1LkdRTEr++LBUVrNYCnLjzuuJoa5jOM0yTYK8AcZWQ+17I+KI6OuMol
cGN2AeFZqC83Pj6smy11VBvuZdV8ObcgAuvPDqpwdnBA4kNPET8pbdDvTAqL
6z4PfWZdquk9kuinpGdtfl4KffrqUnlYVYGb2dT+AVENqY1c75imq4Ah76Uj
7EwMeEI+kTrzmAxOxC27Ge0TwdTK028PS0jB+ULNZvc9D5T4Gpti4awEDdSk
ST/1zgGFa8UamaYG8uhPfFmw1Ibhv2x/XVV10EmTf+i98lFcZWJR2zUQAmZn
gzQySSKOVfykmVdHSBp0vXTy9FOg3n9TqTE2EXKO2bdoZXdD3fGkXo0HMXBy
brHfYOUhjJlO+WwFp8FtdQEZi54OHFgkzdqfUw28l3tL5M0GkOFCVDzvJ38c
yPO4Q0HWD7Qnycm/p3eieJ8OZ/tsFxg5yOs9ZktCyc21ffCrHW8/+nZBxb4Z
pyToG/T/NeDUUeWX3SnlmLN55JagWSNIBetUmxMLMPH19o2FzWI00Jl6GNxa
j+xWnZWKbLnwn+PKsI15BySznJyxINYgj0bVej1HIe7ctNng1yWCW8eDKJEz
VSh3+s6OzfVaMO8j9ukEVOOF2QMy97oKUP51+j+1q7fBwu/KuO66M9TkBfxX
RFkDM0b2oSl7fN3952NJY+UK916ns0s8jMNhe00aHZZqtCXJuvGLswFSt3VZ
HjYl4nY8P72OEBHNzokm78uqh61XMymUokTIoi/iuN9QjbAxyhtWX4Cu4xf6
ElqDcMcg7PUn/QiMifleqKzgD8OTdUqe+wrxYXNMcHBGPmbr1w34D0fg0slp
hieKNVgXzvI8tT8Hc5keJ9J6FMCDu0c0NNZaoIbrjM0NmRr4237Lp0YlCXlp
bW5J2+QAXXfY8d0YFyBEN8j8YELs+Oj7JYP2IZ6ItJovi8xE4Qc8Jf5xeXCl
T624jzQVbysFzGnM5YCm2nTidkYOtiTUMvIG1cLuWR+Wgq9F2MM7IX6IvQx4
FAa+jeiXg9yy4OR3r0ZMJZtUSXGMgfBsCtIzxc1wdfFUApVwBxBs/hT8x1qL
nEc/fkrwroJC6d2CA70EZFOaozu2WQHOv4TkT/r3wfqfR+XGm4XYkcyTdH+n
Bb4my/vPRRVh5Pknpyid4vDUU7bh7087IZR05b3mlQKk/w0PFMurkGTgVMkI
Iy8W/Al8HxWYB8EfTDY9CQ/gz4suNuIeN6zqbwy2/22BguNAocSUhE1HFnN/
r+59L5GjFm7k8fjcdtft0t9qKI12VM04QUDD8U+SZ0xy8Nlr8nPZ3wtB60F7
9pZACAqdOk27ZbzXG9InBE88K4N/U3GpZ1az0eCUfXGmfwmSFIueu68rhYN8
a89S3+ZD2macxDXTcnSj9nz78CkCCb/o6RMVbtBFLCrd9mmAfFpOJSjsQM0J
1oazTV5IWA9kltgOht8/5t/R8/sBA13tvWcXayD7b5eAwWoJ9ta/8OnSqMSv
CTxG8eqBePxPadWj8wkwO3ThKkmxBzAT9M76zNWB4uIhhyFMwWHBsWNlQwT4
qfbpE5dnIGgPHLhykqoKuWDxA71KNdSHeH6L2K0F9smmrvj4YjQzTNUIvV+N
Kbel7Bn29cC3neZq07ZClD6v/Zi5ORgER8g2mo/UolfY3FytVTHqxQiXLj4L
QnaSQLF/nJVIMuK0ELoUARaWyayJrWl7czptaZQqHWeoPF/3DPjAz6u8BtfV
c9BY4oPXBm08dEjO7e/8XYOSzvuZxd4RICrAqAR/NsB7wdfPd163wqmQOIqt
/a2oVnTuS65CMqZZPR7apMiDV4aL66evNiJf6U1NTdUy3Ce8ffFPYyt8rE0h
O3g+D8r5fjzUlWrCyKG/lHn5OXCExLpULCUf1Q25gwN2ItFav/9WRFE9UkWs
jmfR5+Mxw6tByiTJoD7UbP+W0Al6K+8+X+DyQJzPDKIVI+JWbz3nzTvhmKvL
OKlGXoMmCvEUHZolYH0Kc/l2K5BtdCXn/+eHzCW1FTfPFMGlpbtm3sydcMzJ
7P7v6/7Q8c+gr6nbHXKfy/znfrID5Ye/tHxZa0NJpOMW7imHTP42129JZShC
9r5BaKkCSXwtu0nV0jDa7cWX8b15eeJfLdXyhxCQ/yx9zP2eFiabzAwQ5Kth
e/cHV4JjJQp85gizSY1B1yiRolaNDkBpGiV6UgJSRROdZD7YoJKkQf+bEcST
9XIpfooEXM5XVug4FI5UyUvSzN25wHiTLlMN8mB1xexe1tVqOGlkEH7YtAFN
OVOy9psZYaHo4to0txI6ttsoitWpAEt8InmLlSpa2/p0UTJTw7b1wv2On8rI
F7bvDc8mA8p9n1zVkTUFk5Fhn+4NSaT5khJ8I0YPy8Mbvg18Fcdi+7PzV25y
wInds+5LxrLgUBJsHTtyEeqC7VttvyrDdiErd/UVLRRnG64rEjXCgeSLqk3k
akg/GhtxusQUuzkcLBb7NXHrZw7jqqMYeEzh+b70c/iOW0HDTEAeaecmfePF
uTF3TM6YaKIOdOR8CVPft9pT5a1ZXePEINTHsy5A8SwsbuZvB8/z4XgxerX0
qWADT1wMFVkjHnfcOuKT1wM+MeGien39kPhmruGvVBGElLgIemR1gpVElazY
3zKooGuTKUnIha2rMZeULyYBqRUTtxwvEXtm7ea/Xe6EQT+6AwJ/ipH8fE5g
148cYDbIdn1bnYjmlPmGVC01OGxtkblDbEB3B1Vyz7ZK2DlxR261YBAsKXmu
pwoV4XbCsECAew4Mm6Skn9JNA56995CrDKC5iKjm/yg4738s3zaO+5akUqlE
VhFZSZIQ6pBRSFbIXpFZ9kx2CNl7z9vmdpu3ddh7lZKREoXKSippPZ5/4LrO
13mdx+fzfv9wXq81clFqW9P8I58dkCqTJXIcK+HmQvVZlsU20FpQySr9Yw8a
805NTf8aYX2t6EB9aAJQvztx9txGJWpyrdz19cqDlY9aS9eDs8F3dK/Yozft
+P01r2rncj28DU9f+yFeCLMF/93cZLJAfv5bn3gkcvDI+jZjng0ZTxwP2dSr
jAHClf4qGsZKWJb/ff+wWgls20rY6tUUQMTsqXMRUQ1Qf2Vq/IZNOJ5gi/U5
RecAPXJ9b3rdqtFRLdLRkrEOCDRHJ25JOuChpxzHmTAJynRIlr4LOUjuko5X
CKnB7y2W/XbkJgiZe82xwZMGRMNXjIaUraCb7XKdPaQEuDU3puhma6H+S0rA
oZhCtJ/pMXFe9gQeUc2bT/mcQOzUvHGltwuoSTyv/Lkz1xGrIlSOI/mg8/Xb
AT+6HHD4p+qOX1Nwa/8B8q2/wXjdqPy19uUCbJefOswtlQqx+c+jLg2nQOCz
XK7HX5zQPvKnpXxXGSg/PrtaJ1yExKXdl4hu1dDOOrdXQeoxCikTWpkH6nDZ
95D0CnmHZ4+y7Up1y8G6I5f7Vjqz4KC07etFqRxouKHOoraZiQ9nInWrHwWC
lHzA+PNxNyz8R++yLOcFfJQnFa9/jQHhgVvunRSJKDAiQXPUqhWv7xHnnIFK
MPNY4Ra50IBRlw9Y8ex2xNeHWecvfKpGnwSZ1X3XU4GBx3/j5Q7Xc/bkv50/
0wCnsppeCFPnwOeR67vTetpx6aLDP5/CJygbdc64iikYWWQ45Ts3W2DZln7w
6IN8iFrpe2a0OwfdTVgGqG8g3Lsr27XfuQhN0qWyPE7ngfnLN9KHjXxRdab9
i98TR3xJoxN4Ks8XD3kc9jlnGY3uXEP9w/RPoJ47SbX4TQ2GaNl7SXPVY78D
5/H+3+nIHV3y17wtGzzJb/kuKOVAnr/hQ32XOshYnK+5mFqJxlSvbnfcqwJB
655Nisl4MAoiZ65eKIHrx98dC2zKRiXW3GPKVanIdz9hX2IrAeOS991Z3cqB
LObT74U8ytD6U5WvwBd/CNygel50qwgnzryjk892wVMrv6jDbckYpmKyVLbe
Ae4CFt92DZgBe7hukWZVNYw7s5xxS7mH9I48Fpem6pDlRW4iz1sSDOrcGFX3
TMIntjTfNPjbwIZ34dtjvy70Ia/Jt8+QsYHe/M3d/2qwwyDppubOORT+pSKn
T02C7vuiLIvDCfhLdt9lhf4cmBB/5RW1XAenqwhVMErC3mDZT/2CjzAjKOzC
18xc4MwSZJovqEcHHqnuZTsidCtqp8+HtcLrmU+Kff47fW34KxW+FmJ97bEP
os9ICNEjjUKDpB1/NVsQrkmFNDH5R/xJeXDil7CbCGUJ0lm9L/81F4WnCXaH
VTVzwTjvUemhyRyQ9/l75Mm5EISO2nctBQRw+zkZOSWYBKvcFTkj0/FYufVn
/ahWAX694Mg1qFwJkV+U97qYpIFxECnll2AWPH71Js60goDXuY1JmvoJuHJ6
6bCLIhGHAxh+ld4ng9wjGtOfxBIwV7MNLhguxNNNVAdWR6LBMrBHcO9APn4k
7uOl3k0CzzekbhmHNOw8aBd0ese/DRNWek+up8PsfxsPp59WgLyaOxvTjV7g
X/pmt2pWiRSEL9f3LPIhs5NYcKlyC4wteJ1LJ7Wj17MGpWiFGPg7LGJ58lw9
8jt/mPdPCgfPwA9z/w01AttZ7o5y+UJQ3jRdmjYtBsozB89+veyG2pFiPKVq
ScgVXjDd41ONozSsLG/jUoFI0XjE4XIMLscNXrgSm4fX631k22u5MexcyRox
QgNCKsvfrNYxIOXdPNJMCz+49/j560cqgKSDeNTjBQWkT2TrlYqTRs2bKZG8
2pzwWqBP4YPnTbgiyB5zTdYY5gpog28yc2CZ8d9RdipBwD0etPFbUmikJfk4
3uE6RnLef2JXJgmSHclc3hEykDlyouunhAgqsWl/W35xGaDu8rtfH26APidl
+VErBWhyyS+vYr0CRj1TlK2RGqD6UYDGZNdhKLFgXqljvAzUfZ5pV42vwqF7
f+tCneRAIdn842qQFIpOrql9qRSD2f4LM5dbZCBlea8M+bYc7i+6csqwqh6Z
zoQynmnuhEJBipu7wjugUOS/V+w0FqgZ/uVB1YlCCKtinVkIq4Yzc9sCo6MP
8LHH0XNanUQ0cnz1riW/CTjkPmpS364BL/DwvLvRBg8Sj9LTvqiCQrGDZ8mT
A6gT4rW3M4GA2m9Tgh/ZduCo/3+0JLFGTKTNOsFZUQVcgmZjCqFZIHiybIiy
txzk91G5Zz/0hlcmknp9X+vB/nRckFNqDujd0Wq47/IQDJVNgnt6omHZy5vb
7lojslotqdq3dAGRZoWCx5yMf++vBL31yMd6IrlidrwU0/L3eGVl1+PpT8cd
QZgEo/cGPz8PKofEiipL/+Ua1JJMdHro1onWwKhizJGBVFM0gTKjddCSVdQw
wkiA0P0n0q0Ck4DIWrIrmrkVA8NWfSujsmBxneuqumkzvpPO+1u0RMSVj1tb
Xkr5OG5xnvXYdhH+/ZXy+29XK7AxnKENvqgPrf7LJ/nPhUOWjM8hY54mpHz9
s/sQXQWyTcVMbr0IwoUo7ktkoWiUkpji+tNSBe35C1oV9G3YnS9RpjtTDVxI
nbdIV4jJXuVx9zurMOHUX27x22kwdGG6R/92LhBdd3eEPatCNte2IsVnJPB9
QNO058ZFmNUjBZT3P8XIry+PWFXmw6DPY7rU45HId8mTL/trG9paC69mPPGF
XVFPa/eYpWO/F54+8h8BaXP/WND+9kL305mXV6NqsFvQ67ZMZQtE/dQOKx7p
xeT3defCv2ZgaGtIwv2AUlSjL34jO9aM3heUyfvYdvxsbLSN8LgQiU+2fMpK
3ZCfxHFIXYOAszGb+QnCfqAs3PRvKDME97PxvtETzYSHm8fa7y20w6Pes9f/
6GbAd5A25LpQj3WD8+y6S7lYv9rfrr2rENu69xXQEbJgVZ1KkjIoBDx0vBgJ
aZUwwpZ2zp6QjaOU6xt943kgzVHGt0ITg5ndmmnave34+8EVt1mbHND9eUdo
8XoMGj/1sh+djwTv0GtenROIrF+1S4+/rMerRnN7z1rX4VCs+XQIYx9Grbv3
U3I1wX3FM+9uy0djlMVp4ZiLHsDvHxFx4mU60P6b/e99ix8Yst2J54uqQvlt
ETU+3hgYvsMq2+6cja3bLSffEYuAwils1dvABt9PyJ4xWcjHmE8PrP9ZliD9
dYev3zdyYBY6/J4GEiCqmeP+m9+W+Km+vn5dIw8N3kUc5g+sh/PfGTTXrGuw
WjrLU6vSE/tr53jfkuPQ59+/yD7JOnTme/dIb6wMb3PI73WuqEH7cfmu2Uwb
KH+Q1ZydEQ2HHS4nzHknoK9Z2WWTrxHYu0572lc3Agg/Ju7RMzXg6jvHCc3K
Kji4b0qneTsHw3GXQmO5PXCeo/ChkqvAq0Jnrj740Akjbw/8XKCpAakDzatT
Tgkg1vnr317aNIx6Ppqv+McLLU4eKnJUqAD2zzMi2QXlMJ7ip3rIIgerrvW0
PLwRCr8pFZ/tt8yFB156mZpNJBwUOXqGRqkabcte6LW/I6Ht/YfxaYficclA
guMZgyuGFKR94t7ZFw+NggUeh1oo/yLliNblOLu0THJ7mALHeR3O0aTFIsd3
9XS+nyWwfoJz1y4pbdAiD90KGakF+8MC9u/+JWOBz0yVI2USsGuKbEmnPQU7
yx9GxX+zwNf54mXnm3dg+xIXb4t8JvK3HbWt29WMypNvX/Dyh0MOZVGT975E
6M3W8BP9bAnG1sd9KARzQbM2RvBr7A7vyw5HTjmF44fALBoGyzqwZNd6rH62
EzRFq/6cmosG8Yawnh6/fJCceKnvOemHWmYS6jMrbvBIltfk83nENZFO53el
2TBtf1Wnci4LTpw9YpBblAbV7xhPVuha4i7DFwIpbc34skN5l9rDOJCnGgwQ
pSnCNWapg9e3ouDYosgFXakklKXtWH0q/gSlXx9MccsgovxmqqpQdgqcqO07
10ZZhsZnFKTTRKOA8aUt95JyDdB+xT1f1H1RbdCbj/JOBbayDKZXruvBc4+0
g1EPb6BrywBVW4YmEg/o3eptEcGrFd9vvdZTRmqv1xZBKupIIcJNrk9qu7ok
3Z/aTqsGntwGu2PUZaGlSlHDxF8fW9vHuheMzgA3+5TjFztVGJNSWOON1oAD
B/etcHHxwE/mz9e/uNyAco8E0yNxF8FrXfjwNR1FZOr+Z9A8fAPZhoey6ri+
X63tVc26NKaF7BtuXnX5KsDz5AnD7nUxLC/782PM9AaInan13DKThs8PPGNo
NNnQdjWPS+HvHkixzjFnllVG37y4qvvZxyDcuW5AZFMOe+lezdlYSYAU7Skv
k8atq8zK+3+snm7GsId7L97n6QRG7iO/PTqKoexXS7NBUym6hTpHqTnV4tQs
j+xZwaeQGk45de95ARq6vomfkuzAu0wq7Nrt3UB9kmGP91QkTGfz9Z+0boeL
blsF5KVakK/cQzzxIAjtCxiSt7ViMKtskPnzfCtMHJAWVvJKwTfthff0+gbR
/nK6Uf+Op7VLmDaYPa2Eic2MDnv6elTh8L0VIhMEvpf9PlEesYSGa57bb5jJ
+DJcJJ3NuwGeKCpU80RmoPRn4kJVUDY0yd1Ocp57jNvq9vwpDcUonLPfnTo3
H1pPLZ9Rea4NYmZqUtVX6/HzQrphFQGx+02Nh8PBKqjzr6Wri8qGEA2L7Gt7
smDwmfEshVUjOt+k/n5cuwnEP7IaiHQ04SjzkOfuBTIo0FWZDBQ3ogw5Nzfv
aQr6XUlWvtJbgEHEn8QNDQIMxFwOsFmvB7H5oqX6lSikvHHH+4hjAY5keoYI
/qxEdyX1JtN4H1id0ag8U1ELXmY3PG+4V0GyyOzf2xHtGCFBud62w8ub4w9D
kL8JjE+ljy2xENCMOdtW9BcJuigfJ6+8KMf9iwqcKen+eEnkya1dCpkwe8qo
NNGkBD4x6ga+GqxGYXKwxa+JeKDjJJgzdVWivZLn7xAvAyw8e0tNwKgCk3r4
dZqGTXFWYWVvucROz79mY7uj6IimvJwvR1Tr0NEnIbt7XyqYKA4EsCcmIqP3
oIR/dBWMv6SvMT5fg9ohv3p6JZ4Av676IUm5KhRRo9jiaWmChKHDNt82CGg7
61IOKYlo+mC8v1ugDf+JiGfbjzaCvbLiwVMHEdYt0xQS4l1hvYz16As3Akzq
03UG3kqGd+7fZpm4iJjKZ/p96iQRPnrnl3SrFWM/ZXDbaZ4CdF+u+UKaK0bX
8cag91eqIMWs4iATXT5mSRCVBVmt4eRlTv7Lh3JRr+8V9rSlQU/CqxN8YcHA
saadkB6dg7++eRzQPF8EnBEvrCz32+Gdqh4D6x+1yPlaKfFIWzyQY15PfWWM
Ban/dNJ6P96CCpV7A19V6qBejcqB830DaEdqGl2dDcZl+t1RowO1MO+RQmcb
2Ywr12Mo/h4j4/l7d1ysgyrx2iQNmJ2sQbdI7YUNqXz89Odn39pwDtpmD9IP
m6Vhryu2ZUX6QKnJNAeaErD43PDQocw4eFMbfE/HKxd7BPriPAPaIdDn1eku
kyr017Do/PsxHwf9kty4VALA9DzVkyf/iLhcHClwUOoxzElkdR1kqIcgt7WV
cddCWN73d0VQ4hGGCZyy22vVjEf1d5HoiUQ4ssucTSAlH0w7bOr+PnHCcjPN
5hGTaiis/KFU5tKA7jKVBnMqWRhPfCssEJYCkuFTB6NdO3C/57JDpUk9amUN
j+r71sH7vVvb3ByF+PTb+2srCcVQNPjzFsXFThj440hxbSQbKS8F7y0Legrd
N1j/xaRm4KjD+fs/Uh/CvxskZsX7dSD1zp5+vV4BJ2YaDx8NikUzuVLZtu/F
kNVH+nNoKAY17vF0JD3zg9b7azXyyuVgyWpvbNRJRsExqafUUzEoUrWtnGMR
jb17L9/eM64K9p1DHspippDIHzomto+AKfveSjCMJ6HO0JG5mb4sHA7djPV7
HIUeS0p/1csIOO1b2cE+VoOaCuNiHdCG/tzndN0PkOBAvVoKGNbga+bcbP8E
Ivp7NZXb6dbAwVfhiZ8fdyH1fzTen1xScXb5PuG4VBZGVI4JDmgV4UWW45Fy
75tw9UHD33V6EtjmFlsIvA1CcjHVbY7BInRiHP8aUluI3aPzFM5DFXiNXDK+
LV4BJ1nMwMYsEk+7p3uyN2XCy71nmyY9PLD+xMMMOgZ/OGPV6PjFqBWVL7Ce
Fw9px9Fsg+Nh6wHorjftcIpBDervSnUclM/BNHL74+CaMtSn/cIw1ZYHUq/+
E6l4lo6XWElCP3WqIEnS7epe9YcQmtVbPfUiGayy5ouypLMha3jjt1t5FdrE
PxlI2K7C7PLsEfc0GSTwG0jl0angPZ9rEa39MtiwkKBdFaGCQXaTcbtzpfHd
osTVULprwHTRgFqSkQHpLHp3KyvJwietbJNTZ2+D80ZVSmA/D0StGKWFE+Rh
fPvnVH+rJrq7CG+W5XEB9XaOitW505AZOCXowWUMLCUXuET7FMGmcelbRJQc
3PqV/FL6hRRarxxfont2HX6RBKyrxGQxrvvvuf+U5CFqvPt92AQ76ozzZyyc
vg73lNhp7lHLI2lf7+iSsiqG2vQMR36/A4HmKyuCo5K4Qc1cXmItg1cPp2xd
NlHE1udi362Uf14lc55ea17twAiptElh6VaQ+rRHsXknz7V8Nrcas0hIqHoT
qKDTiSssVLolJx+jL0epwixTK35PWZ/mCOvER/8cw4/wEcGx5MNKLXUELl5n
mfbRrEUOk+q7G1a3kcB7pJLM1QtGplqSDOxZMPV2jTlWuRpeuh5YfP+hBlpY
MwIIl4vBVtFkf1AfGSTrXiV6XSLCVfvP5I29RGAwVmjR+BaHCrcnk77FRqNb
Y3fSvp40+Jrk/uBkRyXoUjPmd3rXwuek8rx8vRpUTMxjFTOtgRT2GKGwvalA
XvOqkgpuwdXxh8nxfmTsSVsW33O5AV0vvP2py1wMutu+mdOjnfhleYrKtbkN
E75yjynkxIPJpp9oCWULDGZ+YTvziISfvhaP7tGqxPeMkqcKtWuxWMx3pVUi
D89E+4+XmTRCrHFjYW1lA0wf09DUTyThjXWte1TMVRj4+8ic0l4Cejd/MPge
GAhnjaycHWjzwGffzG6Z3Ygn7d0rMk9kof4x0b79k6EwMSju/H6kGpImPx/k
53JD1TCzdv3mHKA/qCp5IbsBNrf0Mr3sq1FNypKxfE8n+HRluNl7ZaFwPJee
/uqOZwn/uCjVVwHPyp0CZN/kw/t116O5ReFw7GyZ56OqOOhtUVYwoSyH0X//
eeXQFqHp5NIoQ2M+mo/H2ByQqsFCQxa7H501oEPhIJ8SQkKBD6/Hh1nq0Uzo
acfviw5QaiHGtspYDREnqYTS1i2hdWpkwe5zDPh6Bw+GbmeC6d+VcdH6WqDl
Nrl7R7oQx7efxD39nQ7Srexn6+rCcEneJPbLWAaunumV4J1uQb+Qi+y3igjA
iesBoXkkDDyuHJB3oBCPC3NUxNlWY+jbXzmqyXV4LsI+PYKqE7nOfdxbWJKE
4Y8uRSUNEpD3o+sxKQ4iCBnzKfvseIVhT3psOFsF5swaU4qxlsPt8fZ3Z/8V
gShfbQXf3UIoTftjOb294wffP5ZYSWdgyIdUBgbeUuThOMNR4JGNl2e9Qzss
d3oskC5jP1cWEtOaRqK5GvBZ/cOt6ZEKaHh8yVs9ox23mBwSdZbygSBAHBJ+
WQ/uVq+jezEKfK+uL4cUJqLY0Adtho4ScHSInkvMrYYB5SSbvoVqoI4/zBD7
sBzf611fKpqIwdOmgW9ELlYgXyU7s/e5NmxO/KxXk0ZGv8+ZtUuX4+DlzJig
gngkPpVKu+OhnA1G8byjNOktKPY+XK+9tQSHY81WGg5VoP/mt9MTufWwINkb
+IEjF3NOTRxh6iyCyJQB7gM+zbBY7sTRnE/A1hA5ijvNT5CubnoRZIKx6KaC
0kxhE0QYnJYtzUnBBxqKVhNu9fiBpq94pT4XjQlWuSOTd8F7vMetfK8Fqn90
lfA9HALiQ2XrXZJhkFCXKs4xmQTFUZ5/3LMKgNr3yRqjQzYIXtklpFaaByPf
GS58mkiGOYci4ftjBfCe3uSC/2wjOtFfqqA9kIvE9trxxi1zKH2jGZ1Lase+
5z/NOV60As2+1+Twk+2YJKDCYL7j34VmSs9yHhTg97928DwlC+s3jXyTr6T8
/376c5BKgDv5ewu6ZHOQ9b8bMzrbmRix/vXFxxM58MbnnXneYguSbldOF4+E
YW99GTlcog2IezKlyJiDUnQf6NIj4lHRIIVI0C7Gg+y2PP59jnjx9Ye0+6bl
mJbc6fTwRjSMz6t88vlTh3eGNnqerxWD4fLFgltVpdj745lOsXQ9UHtt2819
zgSNMtXJgR1PTY8IoAnuqULixX8819J1kF/wx/eZYj9Mg6TnAm4FsMW6qj9y
MRZ6Z80eL3HmQeKxWzmUxyuxrcv843xSFgh/6pCOoMvFGxeDuGuqCoDv2ZWL
9yeLgM/vUHysbDJkzX/7FWMaBVSy0wec+UNh05GT+pyfOxRyi12fqanFKsUo
2XkvAqxP/osXSnXH2WM07w2e6WO7cXzj1PdEdDM4TjzUkw3GfQUemhTxeCyw
tsmFYoe3P5l/OfwkCWaPakZFfJAAp8WCAhn2Czv95TWwYKoMpQGvE6MZGPGJ
y9EVsRR9uOz6lf3EFXXU/aDZOf/mApxOU0sPLFDHz56MFrptetCly+btWakK
LKn/QgyiBTE1t8p05aA6PuDsXN/WkQXhOH56F3VJ8Doryy5jKIn92KvN/lEU
DxWxuc65SqNv7auhfbXnsWWQ2ePn5kXI+JgYxzAhjSHq8X6WVrK42/XopYI5
dfQ4nPKjoFYLrC9MJXGX3MTVoydnX+wXge4/Xrs3JARAU/XUcDLLTfjTNM1+
tvE6Ur8fWdne4AWei8rc9/yZwT5bbMTVogtlpNnNRldqYJyrcPH4xyZkohN+
0DNKQucvBTQKd7ow4V5m7Fd2X7Q7ckp44+IOj87C5ObKPfjiPOlpQN+Kxo2P
b52bIyF78fFJ2aYebIdCK9Mzj5CZW6go52AKkN/RqL63JIP+XkbCv80u/Edw
Ljy4nYCtx0cs3HhrgZ0rZ9mNgQjEf6c+/TEOQcHEC0x/UuPQd2Je128IYeRH
86WA7w2o1R898y0uFomqiaRaMzKwz3wgpPHWoF/lieKmrjzUGInp2R/SgJe3
7hxb+BwFd9wMnAretsPzpf2Suy9Ho4WcttOZd+3QKeujG0mqRZLWHk//USJ0
LksL/lCpAU8J5nve+dkoJNMQaqwRBbOejQlyv0ngrL7EokLtC3Mrh1OK49JA
Rb2NJYc7G0emPGR584uw7jaj+LhYLBjJhwsm0mZj46Qh777NDMyjF3889DcJ
5wjz+56RCHhe6CApnbsAKev2WC2e7YD4QqMbZ5Tj0fOA2tYGUwYwxbTa/fkv
HwzjLtpU0RQDz7Erw6J2FZhLOXmXaVc+xoXQDLJI5QOXVNR1botifE7xnirv
aQ5q/C65niZcCA+/3N7142gpsEY0R24Gt4BGqVj6OfpozEp8riN1kwxbH1wK
b1pUYJ1p66VXSjnoKmv/0lAOUbtfU8NshgTbhSW8Vgu5MFjvJJ4t0QiuE89p
WJebodjvUliMaO0O/9IFRxErUXXWmcM9sgr4P7ikOxAjIUhSYM9Dx3o0Narw
ULvqB+uJ1C51t0lgrzDyLb27Dkue2O2beVOP6p+k/FpUmjA/4avr9FQryLnM
ar7YKMegWj/ZCzxl8HtTyuxESQLk1ayLMwq77uSyMDcjqQcFOHpbC//WQAP/
C+E/e61Qv+K66bvuCnytEi4141QOjvJjwhTaJZi0tqEXPVkK597ECbrF5aJ9
6uWfJ7qjcX/AryFRnWLwST+juy7ejs81OgJ6HBBcZj8adevl48hX5uA3oiXQ
R9n/3PFgFvoK+1AURJvBwxX7kIfYiNWN4bM6BBLOCjab7WKuAuHzfjN7H8fD
0mUpFhOpx7i/LSzBRq8A+M1Us0I4opHrDa99NysRWJm6ZzArARVfjNn9ja9B
33O/uWjTo6H+4OHnrnvqMGHswDS/dzdSl+iS93Wl4Z5tm1kZWgIKLF0vtbqX
jrNvZRZ/MBVhxOiAbPv5Nnh/de4Z10oC9K7yhk5DEjouns8TSamEhfR6xsWd
5yoNPC7+9iAfH26K/JgOrsN2A6fintV0+ELnf3gzLwZ9jSqYS2774JZA3FCR
ExHn4uPCfnml7vScv/zceiFkuUse0TwajMN1LC7GyilAK8HK/9/hInT9FbAT
NQUoZPUvtsIzBAp9Vtf55GNAbJEiS/ODE5D8HJ2iYivgTM2cAE9GBhoP1Qvd
3DTC/oUFnkOOHUgk9uXVUUYBS6NT9/0z+aDxamC0WrYIhaCc3SCvHmZ+RS/4
B0SgWEYpFdXTFOTLT4iNCY+FTrJ66RgSofbViBl7ZgLShx8fCWfLhllxB1bd
N1ngtaf+3KRJPIRafk5R2c4HYV4f+qkztShqxbOnMrQYE1zC/mg8asAUWV8H
2eRicL6wnP17vRJs/0pdC80h4IS/B49GST406EfmnxwsQ8XIX4ea6rIQmVeU
Vhvqsf1dy+6VtyXQWnjyrbu0G1DMbfefuyqI5aNsw1k0VeBu+fT2t243JHrM
LnDGqyKtWF9ywFsLJJLPac0rmKA84eYkt3oL0lhQiClMP4VbTGSlqLtEFHL9
/eaOTTuWzB47/02/Guq/5BETy/xgBlKVA1gqgO/sWNdz/3bU+RkucNggHXzp
/D8kbzSAjcZRScpbhVju/O/hc75UFIsYTbNm9IPXF6U35SQfYWNMxIrwgSoM
Fv3x/mxkKVhTR0UaQzLWexzvHNMyhpB/hR55UAweL/ea5qq0QRCBy2GvQBYM
P+owE/ZOAa+fSub/edWh5TqtbqjWBazZ2HaduM2HF57TntT8oAoT8pmrre0X
4Zvn/RO7Uq5jpYuTJ+G5IOjH8xk0lgmAVkgPNZP1VaDW6DE2fnoMkuzm+frN
TmA1f9if2yQZoJlycPEtVEd58uUTF4AXz/5OMmk6cQ0rllizVWWuQtqYmSJL
yDEkZeSZ89oL4yWOoXesr3f8bmD1blauMFQL6dp9GQEwzzYPyVC/gf0d1GFR
v+VQxEOSnLX3EoZH8jRd0OZD7YYqtrPKHHCbelN8TFUeEkcisvsVBOFGAhv/
jdgrIO+kzaduuh8pSt9OV89stNjHGn5gm+hBhsvykdl8yeBp88CBkdyKp1z8
TtQFE3GjIGC7dKMSQzT+GHoSSmF7OT3eSL0SzhGaZ+MOIqTkJkbxnujF5X9N
Naxe2XhbIXGmD4tx/viyIsxVQ0tk30zOpR4MGDhaTrerEnxtnrPnkMJw+tqa
lutEDraUPtV8odGFG4X9t3/YpaP6+PEaBpdiVOSdNaE1qoRb0tZDtLR1EOaf
lbYREo3bjOEnT1AFYKrdvX1vT8ZhiWrew91MbdAbwz74djUb8k//khhKaQE5
x2PBDPnt6G9MJXGA3I4ewyE559Ur0Vj/2s9iqmAM3NNXaPVfJvA/OGW3wJMC
EpYuiuU7/tGdfJjHO74IckT/mfG1FaF6DNer45iH2ltr5w11yCB1yj/vak42
2LJ8OHOcuxYZ7uv1dPbm4I+ph+rJvwpQtXW6Mu9SIIiNGvkf8Y8GcZ8YJW6t
NNCNPuysx5QH/O7xp1m1s1HxU1fMskEDqs+E2o0o7PjT6Em9FZIHtNKuOZzf
MML1h57MavYkUL8V/O5CIBGW7JorKzSKkUbP6JxqfgC+XwjjED20M+9vP1d6
3UmFcx8NTQNCYlGb7tfvLvNsWLxdwr7ymgiBcrxNLA6xSCnIarRWmgE0CyNe
eb2RSMege4B1dw4qCYZStLhE7vRVsN/Efhdg009t/jekBZPna5Ndb5Hw/ZH3
rrZ9mbigr0Zx53A5WB6yTg4JSYcTU0Njzg8zcGroSaV8ax12Miv3Wpdl4ufG
8CpBaSLqP6AYqZtH9Ds6uKAQU44++ssxlE87kNbb0PXonWqU2j8dUv2yBKvw
0Xu/jERUpCxHZToSPmf4K5nHnwSF+dEiaa+rsMtWutexIx523NX1wk4eGx0s
TcloKUd5R8UQ6rNFmPvtoGgydwksuv4LGPKuw6lPZ34NKObCc+osgb71KlDR
FE/Jf9MGIhHT9Gd2DICf9CThZclD7JDeN/nZLw/poM44iRCO/FyT0XcDW0Cm
98mz95+q0JnhudvVj4nAIrffaXO2GVkkbqrenqyArN0jNl+X/UBjl7XDzc95
UGog8EOpPhQaTyvm761sw7+j9f7KapVQI3zENUmzBpZ+0FFH2OaBmi+Ds3t5
NXwtjp6gom/f4T52WbvaepylfMGnt5QK8n9EBJU47eHxns5nFTZkODpxJUn4
kxNGe904K9naDM9O5nNzi5Dx0KrJqetJBLB2D1wzCmhDS2NR4gRVALQ+eF78
IzAZbtSyLxxyJQO9EpskQb8Qv+ehAfOzEgwWMa56vMNFUdt+DcfksoCnWoys
ERuGYz418zG5DVj9ijbFwYOI5YwBDxru1EHs65gPd37FwrzMpGlffzkG60gS
3s9lgetuD+YXUqX4hobDO/taG85QfaB+2JiFoy8YaOciAsCTtlr8r1099trZ
Hm8Uq4Goq+1LLA07vCJDM2ZtEQC0V+Mrh8cdQNX/SuKVC37oTB4rW9GLgazA
C9r7b/qjWcKKLCNDOU65XUw8l5cKTexWf3/u8Aw9w8hKg28dDKrpGZnw2eH+
ICHxwC/5YNxCL1XWUgZPaDYTxa/lQJb0ST9zNQek4gi7lzaWha6nqm1WGLIw
k+Mm+dSHXJQ/W3t37aUnHl1ZEfddS4J/8c4B/6jrMOk1uwM9TQ32p77eoLuS
A+uDy52OTs3wutfzN29KIvCk7XrptFULSnQ5LHqTTdCUkzlF/yQRWt3n9Wns
DLEp9dYmn28hUKxrUe+ey4fc2J8MsW9rUOjMV7VjMnE4+0lGnDLHDTe73bzT
b3bCETqbdCvvbPQzLefWfNcA9VSj6vLRgSjf2s5PL1CEi1cELv6bC4KqW/JT
y49iwdRbrlS2LxfNTt1z+88+FSt5dVgsKUmYfeSJJH8xGQL6ZAfvjpDhAZk1
JFe6DSQX6Udm4kIhdGDA3sybCKNZAbtoqe+D1OF2wkHKaiAKxY8LH27Ftcmc
P/06JSDlVPu86BkBXHSX+t7lZqDGi2rxCfYjcE1vU2bMQREanrnT0veqQ1Ti
ox/JZnqw6uHcGCWihKQkKz7F47yYMt6x2+AmG+joS4vY5mujmKHysMa6FNjr
3mNcuaaHfm9H9l1uMAaLOz+PHbDWBLZ94hJ7hxVAebxuUIn9Kg7/Nx5BS9JE
2SKZbwc9pMF+SHOF7TwnyjoXbpm7HUPXI2munXnXIN/AfH3+rBqc0DacN0+V
QXpRadeM4iPQlUJe1F7RxA0xk3Oc+uygYbPuvP5dAo5ubTpHBchAhUiQ3UdZ
dTgQZR+rbnkdWS5RZ/ExXEBVhm5+hkBWWGwsqY1g6MHNPx80xC/EoL32R11j
zkbkWGAbGl5Nw9WwXNkH1USI0X7j0PRfA4C2fMMRuj4oWDXoxcJWqJrWpo7Y
JuOt90at5Qf98NxYolL99y6Q2vp49r4tEejn1Y0MXiWAyS6vIR6XbOh/snT8
yvlu0B3WXBF4SwLLLTmLSoVQlLZZfKu+EQ2ST0reE9d3cqgx8YXZuyfo4ORg
PaJcteOfHO81Y56AcZ2GIuleAj7x1NNitydDeB6loUpdEa5q6U+M+2fjJUFx
zeY7+Wjq7UMbFNEBwh5+r+avVCAF/d7wx59MsKAgC6x08oDtGaWs4lQ1nH7a
akO0J8JGyw1yLn01lkrEU1jVtSPnqGit7Uo27tuskyNT1eHzmP6DZRaIjact
ZNdoU3BDj9R9IqgJRvLMGKYOEZEn4FFm8vIDpH9dxPQ5KQNYX+2/PRtXBbLi
vHtLF5+i8h9rJpPnJHw3siIWS2iDB5yaC3+Ds1DK2pQgut8YOTudPr1tsAed
ZFHiSZ1qtCiw9PrcVY1H6R4wMonFYVCeQoeckQ4eJnwTKDn3GLLbPb1lIwLB
1jbz7deiIhyssFEKby8FHoOvR5ClGcZGP02dlcvA9eyHWZYjxUB4x2B/IDsZ
FL3WCduOMZj6ZHKwLTEP3wZSjF5byMdDf4e/pLoTsPLWbgW/U2R4k6G5J107
Gk6Ul9Uv9tWA2cGyRkP3HDy0zUmnKl0Gu1Zr2TJuFiOb8e6xpk8G6Gx6J+2i
bhEmpdmMEVO8cGKt9fbJvZF4f8O9LvZpAZZK13PVlWWCzl3NPYMMnvjJ9JDy
K8iDtL4MmU4jEp5QXOlQOlWB1gxeBnJm9dCbxVI9ea4T84slHqBEJaaIicZT
PSCD9MwhjhcyZag0zBaUy+yPrmq3QwPiiKD/L0g/7kQIzhzKVtcQrUAhI6+U
H7mNeP8o24/pU4h63ixxw8er4EoRP9nvMgkqfacIfndqgUJO+neuSBZ6MacM
xZNNYf+jQ5yHL6eA1s+gX6QLyWhPc1/ll2A2VLBZldReyUKFxpW1LrZcoGjj
vxeSqoPb0TJ74sfrYXhdkUGutx73S8sMWjhU4uZGxGKwSx2kK+nvjnEggXXR
uvh5YjUyHP8uKLndiFwvaPg4Njtgy/18wJt3gfC8iVXW0T8KFJKq/IycyNh6
29PrxWIH5OmpLM8OB8MLlhCVmDFfkH9VpRvwvhkpNqYIhqFPIDOc89eP9mKk
MLRyHO5LQArl6UEZsjp8kLH8Dn9y8Z79u062oQS8Nlt2YMSVjAe/ZCPVaChG
KHyUrTufBy8CL5sJ3KiDD2tXJbOVi5Dz+J9+g68tIKzDs3qIkQzdoGH6tn/H
u0KuBKvfagf7jQp1fFMFtg6Hxl7erwGl4xd6Jk9EoNQq6Q5vw07uO8neup8f
j3/rd/W1ChOglfTblvNNIr62Yo784lwPtucNYjKLo/HixQO5qV9SIOHaufRr
B0ph0mZMMXeLgCS5lXtU0wQIfTYbIDcYB6lUDH339ofh8pKp50dxe8jT7nF7
5pSDhp3vNLxyc0D4rcZWdHoVTEVqRBc2VgFp8PfFb4cImEAjI5+y+BhG9eYX
KTMfQslv6SZHm0JQLX0s/exwLs4OvJrYR+MFMaFbaSeCSNCi5yIra9UMUeN2
LLkbvhCqvilbaFcIRApCpnOvBwIFhV3hQANM3DAO6PivEWo3zjRNH9mZq6WQ
mfE/GRgvqm3rIpUHQ515j0ajEedunDpg9jMHdPlT//uR/gC+aVwzXbUmo8os
aw/pMwFb86KH2R7Kw8fskKXepVY88ZnvDRVPMoZKJc4FnU/Dl5vzQcMLDej7
yqUx6X4LXhRqP3XPrgDt33CqjoyUoO9l7oYTqzVw8Q/PHyrnHLBacplelmkC
WbmMazN/GiDimHuCgQsBrzOJjR6hyUUf+zeu/ZIuWPvtacHLoEJofsvh5rZa
gzQ39UTaLKJBSes/M5WduaBanI/+8KMciX3pd21WbuHXNaUh0j4VLJuOSh+x
uQbbr9UTBq+o4GlS4ePltQugsGzUwW6qCS8Xm1heSglgU/DZIv9SfRxd/iVX
tMGNnozmMzkLqhjWosMqNHcHvBa/jtNWyeMck1zJUyF1EDjvzB5SJQSzb/KE
6tYPgNfX7PHC/jvwKtf3KUuEHGrLS+WjN4DY3ksS904LI+fXRgnLF2r4flxc
70frt5Z7A2LUxbZSMHpHTenbvtOgXtzRx+gvDgP1rvaHu67Dbc+Xl+jzVODo
oxuBJykugZRluIkW3Zers+WxXoqDP1p06b6qUl2XR2LE33+f6bqRfZDjvpRX
KXpm83DISNVg2dzD38Msbljf/mPq4N1WCO3JDOGyKYHH8wRvdvNuoOFk1eP9
7giRl+4MnCO3Ac/XRupjg+nwmUfNfZ2zDgL+GKavUFRjFkjMaz7sBZ/I4DDT
lCyoFo445pNbjjfG5W61VFUCl+DV02aitSAvRvo5UJ4CLnPysY8VEvG52h4f
oz/5IPi4evU9QxL8dWd8zHyWiEyD1AHjMiR88yIs+e/uFhQ8PmESkpaNtYfs
9x2uSgT1ratbTvat+Fs9/VilZjpSWAjVVzIpwANLPxsnzypM6SgQDxEIRhLT
7vPWHETg63H8+BUrMEr65jk+qxiQNndYyP/UA6ZNd43nisho73RIvk47D6sV
qY5VtUUiIULwoglfMxyTk+EQy4hDoqfBtEteNbywde4T+OULhsKMocfqQ5Hn
8sVj3+Yz8NfIGYcwiiysNVRsODldhBBZyOcyWY0VM6WPV283gm9Hr+DiywpQ
nHmb/T6yAC/ZnOS44J2IgwQyR5wEGXwf3Q2fXzyPk4ln1MTfVoLZn5yYXS6N
O+uWZe93ygRfCmEK/QFnpOoQanlJ0Yi5DrJKKRfyUL7rpGbRtDeMnqKosxDo
AcmwiHSmXUVoJvTIgsu8FiJOFvfsUsmAg2uxbauZVbgUUH1glVgB1F4C+cah
cRgT2Pprxr0V05Ycv2gN3wOBA2tlkT939suHy811fxvcJN+8/ejlIPpSXVT0
zCfteFRFmr1aFcak/pxvfLbz1ZtaI9atu+B2yiGRS15J+Du6lLiUHYGeLUuf
rA+Gontnmd+/jhhgox29vTGmjh3GRBpbng6c2192V4kiA58XSUtzifqicpjO
ykZAPW4tPqT6eDwaW4NNr5Zy+YPiteaLwtdN8bFK7u35x3nofzDoqlBeCl5i
smbR+VAHo0xafOzvybDxaD/5lH8fjE/JCUvcqIXZE6PWQpc0QEaqsCH7fR62
fHdT9b9QhiF7cibjFRyRKo+R34RjBFoTr9lFdsbD6Scu8l8FSZgTRU8d/KgH
hdRlRimOF+Il6i9Xw8zz4PF/sU+SuHbWF6LS3aS246fMckx934h46eU7d9up
Kmg/HHF01KUao6Jiy3Wia5G2iPPluqcb/g0g7Na6lA/FkXOJWkZFQCF0yed9
fCpsUZgoG4gW4NHE3i0Jt1zIuRTw33BlKujRdHCxfq7BjD6FOOnIWJBO/+PU
phwBlpqREZcajdHS31lowFwLts+EEoJV48D9Bv096yISUB4ML4zvJOL+tgGp
gxoE/KRbLPPy8F10O1pnc7mBgM115GtLhiSkXm0erSpzhOqsx253r5dgodG8
BdkjBhq+FjmuTJHR++xvLdvRKPj0YEs/6XMxhAtumP+dtofpvV4dlKZEeFlj
Wl2kmg/OcYdE5Qqj0drkn/hMUSqkG+/PV9kyQ563u75OcSYBVXCm2qhOMfB8
rGTxOVWA92dEZwduVsJt+Rs3FvgJoG3y5n54fhluXtf/b2Jrx5/LniktDuXg
2c+SFZoKdXhg//Vm5RvVsK/N/G6qbQFS5D3PMT7jBrNCX7Y6wiLBv8m3aNwu
Fe0nN1311twgZoOh0bXKGNMVr7T8Mm9Bd0L7UI+nNW5PnJS5t1YCllzZA5IB
odiqKsBW6lyCZ7+LKyjsykNXSefATfE0lOyk45r9VA1p1O94b3IRUfCzZssN
rzoQuK/DPChKwKW1EvEUBhewPiffslRYg1NcomelY2PxM7uGXGBFOdyYeC8j
s/cpzlYLrak7m+H6Uz3egIga+CRs0X5bohTFEu7/EzsQib+nwoosDmaBiNb5
zs3dRTjLwxKXOpUGh/eurq6ZP4UPCymFfmLx4HgqpWffg0i4zf+hpZGbhEq1
1IaL5DKkqDGpcKPMhtauXcTOZU/kbzNTnIiLAA0GcxG+b+FILLYY3lZMw1bp
z69Ul8RAvuaWcYHdQ2QuvXgmJ7UcDQ/H7m9vz0Im3wluruomOGVyrCmI7g68
rnR9cTb0Mry2HRPNfnUCt4Q4SiImANu1tP0Eb8tjb3GHnRctJxJHTI912x0C
+lf+j4rN5OD+l6sfv+wgk9f5pv9kH14D884fEYLFvFBwf743wEoeFV6eXMvb
fw3dXEky/Mu8+NlJisLWmxt4t22eJjQY4UrkddUvp3UAL7Hc/XxfBmcrxkxH
tM4D9YerJSKrGqDRU+12/4AQyNjmuxxSU4Igted6TZXXsZHONe7hAQUwOT9i
yftdFAhH8q7VZp9F5ff3jT6qKID5MaW7qxxy0EpZvBi8yow8X3qSZZmVYV5l
he7u5S6MtNujKXa+BfdJ2ZBEapKx76K61unwDNDTp1CL+v99hKCnVNdkQ5Ba
dG3jBEcxeE7JXLkTWIszvVF7hsL74NV+10+4rxJfcyr5mYc3YbP6oHjZ0Z0e
rH37w8g7HYLDZZzJR6rhiiF7MkthG5YbhLdQm1Wj0Gu3h8KWZTgmeakw+1YD
Nle8PdvRQwLlskC5rCQi/i028c0TKYTr6q94mfYXovIyj2hNdTxOsHGZaHxo
RCt95gh/wQIwVpVSI/tfR7bzR7uHnrbBRM4lnvSsbEiyMm1W1CVg5EWpPVaW
dWi/7nBXSN0b5bd6iLYHnKCln6nyj0c0jD9bo6ozrwNnpUGfrZ9kfF7u+K5w
h1N16xsY2l8RUKNqqMtdLxaYDQ6k91oVgGofj8QCuQgUBH5+88utwBAdF95v
lU1AfOGQ2FDxBKoiXPZliNaArJHfTYXfJPytQv46IZQATA0PKpy34/Dl9b0C
eTaIq1wlRkoddXD52o+uF7TxaLj0n8U/vTSwdJQ5IbunAnvLFhzZN2Mg5dRp
czM+ArTtafmjakaCy5K3Xg+2FkDWs3lZUM3B/sBm435ZAgRviUxIna3GPTzR
Sy/OdsHDlVsCGoxpaPuX3vlGYT5ad+nWMqjUQL7FwsjxM7nA5XKKhWqHp8fj
SBPcO1ycpneTKTuDAIw8UycjT7fjIJ+tBKVzDTzwc1NbE4mHFLdbJ01nUnFp
iqJW8HMk+m5Exrqb2sKd4ZWYTfZKoJ7X6TRkQqhkPqmq3F0DNH/D+jSm63H2
tRLd7pMuQGs1qNDxwRh+ae0VUu2rhvJSb7t8+hrUH/gzSl9aji0R98RPv6nD
BO0z6/FsxcAb/PkWcV8Jan6pyA74kYcen4+m37qTACxHb5z+XJENR4kMX9JO
V2PrbwWWabZHqJQZy82U3YOs5tQRNY3ZGEo65nBWiYxi57oc7CnaYPaIxDOu
JE0s9G+i3lTJgm5Xy+s/r0Rhf9KXipPl1aDf8XbqJGsVGsnD2rJHEya5o6PI
02rgNJFUEjsYDRsJ0RVzzjEgNuvWvOzqhwZCGR9t/quE0TUz5tKjxjguQOlI
uJcIwn32Og0ZxWDMEeS8q9oKHKt4gvufVQKFusO4iFUhcO5/3N/dk4tdlrw0
lAPFUK/MXwpvk1B7IOnTA/EkYGJrv9MKKej0VNT4ovD//0/LMGX4rgu0T3u9
nPscD3GB2maVVSR4UfAot0fGBzj/k+QwT0hHOsP9PN/vhSMfhcLT8NBGlK+I
z//k3YB5TxdF3O/54hQFfdNyrS8khw9QKjwqwPED1TnceqWoMhRxQe1UG175
4UrDWlSDqSIfuspWmkG78t0DGd8yyHAby4i1SkWfOpHr/47YQ2Z7z75dfF34
dLv1yZHzJdDrMPPosRkJmUmZk79VOoFiyLOiZJIZZnQaLtyQC0CvoNK3nuKx
0HvqZonjYxdgy7zRTWjPxNkvZOE3GQ+xMGeWnFrVjsK/Kb57RT5F039Xp3sZ
KzFoYOBWHmMERj47IlSSnwmdoiX7En9Eg1iF1X+rEmGon5x9/19SDgaVap0P
02vGl/cs9If4C3DgVdOnkvwq3M33Q1RYxhcpJFzFeMfLgL1W483uDkT3IJ6u
ZvEc+DYsezqWlQRkx3v7ZdkqQYncxc4mkAMRWr7C5cM5uP9M8crlm8XQvbVQ
cam6Cgp+GuiCUS023il+P8NeBJ/+Y+x/+YgE3ihsm329FBnsqJ0DhLLhxjdV
rR/3kuCHts6zB5zJsEVPLObeWw1Mzg7Pd5cRkWLLt7slUQZ/c7Ma4VYkaBC4
XnBF54LpwKrcC5tAVDJaYzto3QolTBwP2I/tnIuwve6y3cGoZHtk2MerEG2O
B6TFCOWAYRGD0sX5FniRYZjbvJUP8p/vUG/aJ2LUd47niwmRcKIwkN8mvwbf
mY1vRf/xhw+Lndnf5kiQe4b2pm9BNZYvdvq4RFcBWzzv5uUMV5zmi1NQMyHj
hFua7vXLjDjRedfmW6koHFKX4/z69gK2PuhWmvlDCzGbGZd/zxpD+C3BroZh
YZj2F3Nk2ysDksWnJk+PC8KEztMckQERSInpe/5aTx9Xft/NKFwTRuvmXIPi
DSWoZv/uE/9FEtb9yiLTxkSA6awfR3STKmw7TcXq6p5F4vPy7YqfV0DssNOI
yz5pOJwpsHuFWxpVb30/9ipbEcd289SJq1zAx53CrBsVfHDiYtdyp9dteMbw
djljUhNW+Zelqe9rg9XkIUby1i3spiibNpcDlJIvEYl9JYEn7SjJFjMiuKB7
yGmx/QTSp6wnMgu1o62PzvZWUSfOXst3rHhdAE8t40XeVueDTAZ9b5FhPTyR
ZlPIu1uJD91rmYNsKnEq75Wh4MM2DFBzvi3taQ8/ZM+nV4vVo8A9bxo6r1Yc
acn05FAh44wcXVbVj17MfU5wtL5qha3/tF1aI9sBS0xmAtmzwK+vIs65ORMJ
PjyPshRacGzgdYtNdRl4hV37nhXpBuY3hDoo6WrQyP+1wjXlWqwqnRzQcKiD
w7ajLhqSRPjZyRgfqlOMRdtZwQeDarCN9/jLJaNi3PeG44T/egHcTjWid3HN
xZzZZNVzldXYQ0u4mnClHgrWaEaJ1BWwR1dzKO9FDfrzU8+5tBAhpZQ65MyR
NDjHcLL5oVA1rHnY0QTT1QBtdUXooFMbmNH7r9OzZQEtp4JuR4sFCp8qtL07
tfPeyCv9Ou/I+PvOy2I9S0vwvxD5eO6oP1g8Phq+t6UO/APmd18da0PtzXUD
2cwsWBgaWTq9OwbO3f3FmRCYA2h9rX14IB09F2oevfoah/1GExefp+Qi9ZV9
w1eSKyDXu8tqTx4RCnSFsi5sPMGqZP/uTMxF5R/ULyLGEWnOpYabauZhSgN9
9VBaI5qJ1b4NYk3AgGhdg/9RdJ7xXH9tAJaIioois2Qlo8jMuhEZWdmEkJRN
JCTZo+y9954/e7ttEZKKEjJL8kdFKdLjefV9fc7nnOu+rhfn8zU274JAPyoP
9s0qlOpsak0078XdDGL+YZKnsFGTLfrG0xKJ2RhJSIYbkD/eXNVULxIJndp/
fpysh1OQuT1wd78/FNUzW44XQJa7mQHHkDW20aj/ZxSHGEAaZPRvJQ3zTLwD
bO6nwB9uofC7amngwO4asDVSCKd9u+SM5zNBVJQj9StXI3LNUgjOcaSDiA2j
Tm1xLQbiYpbJl0JoShhKUCIvhbZjot+aFjOBri/oKHtnBewpvHK7RFQP8v+U
j7wcKQLKP4Z2V1hLwM7oTMPmiVhM+zgQTWFYBWX6blN3qlrQ9O+pg8Vij1Ak
SytalbwbGslJvdvfRwK3pPbj72U1SLA4qEpifBF4T6faX5PogKJ0zRP9qi5w
Y70vyE07Ax2GGZ+9L02ArUcHV+W5usC1cazG174D6mesQlV2SoFR8cRlj6/l
YK3CTaItiGBkMikj2tWM5+5dTcynz0Lykg/2cve9sJ4mwSM2qxieVksmnC6L
h/WAuk3St6UwJ2LaGC9Tj/eWmLn0TQOhbkWZ/qtmFfa+Seq1Mu+ACJ5a2RdG
BDTQH+SdepYKrEf17ysdfYpdstrCBtO5qLL8vNavMBPUujYpDHtbkMWaZW55
XA+fj6/5hxv5QiNLwuOjYcEoF3jBperqMxz5dXyQT8QXVpgjxR2EQyD9zq0q
9VUCuokyzUwxPgaW9af2eto5wJwR9c4ktwibRv/eeCcbj2Rm/kYf/wsDU47b
1NrOBFQaMxj6aZgPda/MuI0CM2Gi+PI1iYM1uLk2ag2GlZAVqNj5zLUbh3t7
0g8zBCDxV7WM+Fep8O0YDT37iQL4z+3f23mBYjhnTNv8g46AG4oi+dGzkeAc
xltST+mLntRRAzOfavEZu6V2iUc70Kmem/OhSQbZvA/jez6dUBkIPwpl8vDY
KNUbH6Nc3Bm2uPhlpBr55WMur7O5AE2fze2TCQSoiWc7fEWkCO3VebKmBOKw
K3X98kJPB7xbka76fLQeD611U1+aawICVXr5Oflc8BMNlt1uKce+aXeJ0poK
kBmhzpJ0z4aYZGsKW/0ytBSiqu3K6obLZZd6nff9hss5k+/oESd41/AxMrHM
Cw+RsHq4eZdhTHm6R+C5EvxYZdPzMqkYrVtvie/+l4LHOW5FP9HIxu3CtBWK
VykoccBrgLw+H+mEFpyp5cshwDinNKe2Fp6tMv5pc6rBM5YCnF29WfD+torQ
/PUIOM5Z8CIXe+Cw7+E7ZkmpeOJVdo0bZT0aqqrPyN1sgSz1Y37bXjXo/3eo
lJm1HE/IU31y4QzBFLER+qr/kkEsu39PY/4ZZNnyltIf1EHJ59Xh+RPZoFfQ
xXhWowFKpZ59iLTLhfPe5x13SQshvZEnj8u3BKOvnvz4UkUVCjuPOClE3UCn
rDgPmhfXgGSJbdab9Br8vRCgL9ash1kSDCckaFhR/Kt4aJKiDM6mT6vpq16G
knfO8kc2r8PGjfK4zj4mrA4bV6c8cQO+Mz8JrfIBCBELH/LgUoJBN9mlP2FS
6L5NT22nqIF7J0PODY/dgLxQc9orWpSg1GMiq2zDhVVJJBVxaxchY0CM9vY2
Nz7Rs/kTfEUaRN2jkrPWZWE2Ovqj2xNVoLhl+dPwrRawjPZryZ4mBbOp1xy6
jIog1lzLesBOAWXMf3JxVmrjqtX5UF2CHJilsU7+KNME8o/la5WKnRimPOGb
frIXnXcUXykc6wSdhHy1QKJyyCnlWW4+GYeVP9gE/+UR8BxZEQN3eQtSSZHb
jvEjSlyvuON+6jk2Pblr2i5cg08Oy5RXhe33TcuSxbxiMdqVUETYBJcjf0Us
+V/SdjQbqJUPPFML3n7naCf/+INYmtvvsNAu6PA+U+ZT3QKNdEZdGkvPwCl5
7plOmTceU+u5x05oBp97TLLXiIvQzMM8bj3KGuradmIFnBrxlKi+y/XGVixo
SmxY0AnAdwEBwnnqaUCn0Mp3O7sGt8VvdwhP1CNn8T+DQ0NmYGq9m8WVnoqH
RMVOTiw047UNSWkGnz6YNMm3LnDLQenwrurBCyWQQMgwf60cA11f2G866TVg
4qj9Kanjvcj5YWTFph7xs42Iw+nAYnil4Dd13YcARTfuXhodrUbPQVUDY5ES
8FF785bLbp/nxPkGOvfiUUsxbfK9bC2UUW7eGf/YgB83m4/yZtaj2Nid6rth
FZg5zjRb8bIaVl7qnfvF14Q/Cya/b4jk4Q597fOQP3lAdGnnucliOSw/Tf3P
oaQArQkXOtSKc6HLpYK9NTQf0oPETNOs0vD1W3Im28/xeGKy6GwZbxHwPTyi
nxSRhfFi4cEp61VgRbe74hxbj6xMyf/2mKswQcyT0ZCqeN/r84+Ui5WAjEvz
pfLj2SAxdeVrsWwEqm6Jbe+U1qOMsxtDwY8sWGca35DQaYT2AuEi9x+VaNaT
Nux2Vg0luXq78y+1wDur6bZfxi5gtKb64fN4E7x7qVxnQaIDM9WTXhl+2Zg1
knRYTbIQTd94nwvkzIdy145526YO/N7PfqTiey46jvXEr+XF4lh24k8bwVg4
deTDTtbbLGCour/hWpENGa9Xnh7vzcN3bD333qTdg3ddk5oN2dXwtf9omJxi
BVAus5y9YpcNQWdc+qYfx6LO3dS7M3E+8PjR5bRrsWUY/rmQStidALcPNf56
YFWKMlKx7dzHnsDJtszbsUodkBaxKPu+Igm1qokpyBRqUFIqYumCBYKpDs8s
cUg7XqAh7nCf7sDXAkPhI2fq0ezw8/9GYggwe7/iqYRbJbDodvduU5kBrTtv
A59VDgzSUnwxik7CFPKO2mMXutGu6V+NoGItGFE13FwfS8PJv+e+hDoSMOak
9ttXjo3QPWQf5EsbjR1DbtfTG+tQ4RddAq1DHWRFNHX4yNzBOC2Bg7TbEZjW
pKqqfLMK9dmrT3GI5ENMb7Lb8FYuaAr/Kz0vbwiULPq3F1T9MGFae9J1vQB6
cp1v+s6VIPuNoY9niXzBs1H4XsbkfbyapVU1xV0EwoRGqiWyJGhVpRcwH64F
13MVOSmz+z0m/syD0qIcZMoGeTvdQ/G2SkDaNHkLDp/znLz2NwrxSTvjhG40
3AuM8Hpt1AwOcY7qFteK4FHhVbVvPB0gkjJsvrzVAHOvB7XolZNh9TXH0Rav
GMj+NaTIoJkLYuaMHWpfEiCFeGhp7U/M/nmZcszprsfN4BYr9tPtYK/uVaqu
ScDF7DTD78WF8P2HwHsr2gpMjBVX8fYuxslTeh4FlZ14TLtEwfRKHnwyo+YY
IU7Einkqjb73NbDJWSWL3jXgRT8SYchdAa/VOmYm7tVAghar3nxTFk7+sxpo
/VYHbjWK7WIdBTDM8cLwUmInth5iWSc9XgYbIp1npbaigHtuaV5AqBKI4tW6
ne5awY2GbLarutH7/rFI9F40HsMo3lVVX8pCI35PU1fRGKDQ8RoeyfeFsumb
MZ2f8nGwoC92eLwMTmrlB6bpVCDRv43s5qN2OKdbzDVX2ADXKRRTJ2sIqO7/
5CaddjfGeFRnXG5IAnK/i++NbFuBfZ70YJ9jOuTPvWHeFehCJ8nIbdqzNaDy
o9prpboIdslskpUHk0HrYED8b/pmHHn8fuZkaiYovZCTm973wzaKTo1ZoQKU
UyQSLB8qxqepd2ZpN+ORyCK3i3g8FFT/6rK3s+ditdW/u6vmyXBxVTLoWJIC
+FXSc6yp8GDzC4X8yzvK0GXrceTugDaer358lTbKAo4pK7x5cPgkzFg/vOKY
rorhAuF1bzKu4OylILX4sGtQcdZKoY7/KrBkeRRdZ9RFcTupZNHTypgQZnO3
bV0MY/zDr5+o40U2AaGrnn+uwfeBnmePZsyQWkTFtjCNGSMmb3E81DqPxxYj
Zi581cTjOeepmf+dx3tuniQuN08jnY2XU1m7FPSoljj1LAriIdkJFm1VORjU
ed4eH6AD3y+kO3aevAAB22tXfvIowlTBw+uWSteBr8TxC4m4ImpKqh+ObmfF
0lNjsz+etuBIRucTP70unPOYlHrZ0geKJ1f4NricYFNxWYNOuBXFVFt0TUs8
4TvDTpdcWxE+yWTZh3c8XAb2PxVF3fgww8zVJqIcaezytMpresDS75Pxqc1q
zOtUUL2T3wHHJL9RWZ5ux5+rxUxOT3rx2MHvz4d/V6PIRoz5rapm3PBmNHT7
mAJhYmJp0z77Pep/Ry/KOhvXzuqW/R5MB24Hl1y//Xs3+yfzwu6+Vx7cEPhD
SK2CrYjRv7TVBUhH9vG60pFyYCSIlP3/fwW+HA2LQ8wjsCwvbxdCEo7Pm1uW
o88kg9WHUyo+h2PBezz6hrRhLAwqzF55JFiE3+vd/d66pOO4+rdme4dqCDp/
3yF+uBWNOWMU6w/GoZojmQmJYSmwRjqwLz+oA3ZJSrvshEJsoEtWl1N/Ai3/
nVZ7eS8Jnh79YVLu6oMFnC3HxxrqQbYwcHydpQhmSWZlWNf216fFrP7ApwgG
hiM3Q891g4qXcFMlVQ1YP01sylRPRQsTj7T0hloofDGawC8UggU/PnrfI8vF
Va0l3qqdaNBwZko4UZuNGU88nohlFUJv+pf3pwQL4RUDXcPUlyxUjJz3DPGq
ArukzwRTxVr8GWj16uureGg/GzUm9KERVZjC3j6krYYiF3eDw48DwfWfiP7b
GF/0Oi5P+ShDF2OU5Em9DAvQ1Zi97tGfeDiTe+Gsf0ghzISVxQXFpuLV9hX/
Wy7VeC/t5+mKYB9UzbmYb0pTj9c6TrD9kKuCGnO7wRXNXPx1Ifr66K9Y2EmR
3CV9hdgc8c49oy0avpPQ9ImyN0LDEWNqnvF9v91QjWZvs4R7thM2rYylcGsl
tdHheAYmjJuoarMUg88lTw0esVvQ2a7jwLz5AsmtPbfkhRNgz+AR2ZHHgVg8
s6hXaVYNeSvJ4/aHkiGIQUnr1g8CnOhSCeXbc4H78slc9vuceSRuUkiBPajq
SKPHYdoCW8Je5sZNg0DUrPI0Z4EATCGnKNcvZmPS36LAj1wZ8Ohws0A2axLq
PLrts3YuGniUnv1K5yoEyWOVeR7X6rHrA/eOTH4yFh39q7wl6Q+XeWvPlxq3
wSe5hqrEpUp0Jsmb3oNW/E2ZUkws7w/Xk4kHEiWqIeXD/YmpA00YwH579blC
HppqFf0OYGmEmVvn7Tf/VuNs9O/Fkw2eeC764O4RlwRoWa+RJOEgoEXy3MfY
O5Xwqfr8BFd6FhRFKwhOJTTg+N2pr9+F0sCv+A+hOqoauIQ0Hu5oN4Ox6O9v
Yl9aMKy1K3hzrQhZMxxCzgrWY56AzcG9jkYgo/B5rWTfDLx2UgZhnNloeVaD
Wq0uCt/cdfiQt9/ds+es6sjfV8EbdcoOQnQEtn+ZX6PXK4HtD8Gc3ymjMEm+
4GrlghNkztde82NpBvXvk9kVX2uQpua2a8ijROBpJJO+LlsIn/4tSZfqFiHT
Zenl7a8NWLb5USPSogHOjInI5lnHgpMJH7WnUTA8JaeOVdipQ6e1fsG/lxLB
ZyI93cSZERn4ehz18poh9Irmknp8Fp4Gza4HtxJR5DFXsTdTE6b+N1aMcllI
mcZ5JioqEwRbLAscZUrwovOklKJIBg5NKrKcb2vGosB7kyUmjTDOQdAbKswD
T2un7gfihdDVL8v/+0UdbFRl/fdgqgQruWlODL/Kxudf6alyi8uAP0RQtrYt
AojaInKX3ThQMjH8a9q1Wpj9L6z2Losp2tgmTHW+TcAZSq8Zud0HOPLdhQn1
S+Djkz2e9NQmZFwgpFzPj4M9ijrKvblY/BAp2xdaWAWKAapTPhENqJgn6/Ik
twkPPvz6/J55NIwuHTv8TysB366b/DdTmIrs9e2vaA7XYtXmc4k/7sE4+rr0
0BxPDIrSPP/g0lmMBTc1qnX889DS4WbSSzkfXPWQbmNJICALx6PjOw3p0PDg
VONtkwicajs6fiC7HMeM8sSJs8twobQ7dTClBnkVfDamCztANHGiWn6/J2Yn
1woHrppARwar5RkpEjz6yvNVbZEaPj7YYvLjpzryq6h87e44i8sFcQ11pldB
85P94fXf1zAyNfdP04ABvHtx/735GC3GckvmRpMKIb2iRmjfeVXcmwmpdynk
g1mj7zp/TunC/Xghgs+cOGTshQQ9lDUCobWvUtrOHPjyQS+hX0YQFSlXyi0t
tXFbQb82cZEGWBO+C/eBMuiynctfvcoCxBo2eVSXtfDn43oaJsfTwP/pj+Q5
LkV8wzvbgq5CqLboVNX+VgSLrL2fKQYqYMzIGnW8pz7KaLCn01edAWOq9JAR
CnPwOnKZNviXFPDE9d+8J12NDJ+vHqoW6UTer6nZL3l7oXDBIZN6IwaZRfVn
P33rRdWSnrGnnAQIf/6e7z5bNnxmWVH1Ih+E5fI4fpacOlAv/ebu2pcCITFl
FJV376NMaICO0KkYLCJ/rUfFkQg502cXGW89wuXT+i/m3uXilu3DHPL5duy6
cOhVOVUXEsQtWC0tHaCc9dvNnOeFaKkwZEAfWwr1cSNi1xj6UHp5pTRfJQMl
Uzp8HLvr4Iut98nXzBXQUWtfGjuTDErnVUI+pxShVpu48GbMIKouu/H0ktfi
5yw4wOlSDJBL/J/McwLy/wkdv5n4GKgmikjmv2eiNxZ43WEIx9H8aH2egiik
UMGSYuZsIPojgT5/LqH76sXfT5JDseR9e3d5RCOK9eWYv0lqxwqKyTWhtSLg
d9uVPn0/D89lP2j+N1cCJ1Ykhby4EvDnM+HqK4UJMB6oI6Ttn4tk8nWXPykW
QV9N/0FimVawaJSvij5ehdKkk/lWa33IKZpT/9qQgFamrFaRESVw3EGjg020
FPnF5nB7IR0spz9+NWoqRMZjpPliDg1gXtFFo99SgKsn3C66nM/Exd8l4uvP
QvDXIkVUcG40qIa1qcwMtoDZDy2at7ru+OmpSCjo1+CC5l7OAbtodHKvvKjR
lY9RzVRZhJBY1NwhlVwSSUTITT2uvNkGyW8zrKJOteEZxh/+9twJKBYg9d7j
Tz4c3w19H/e7BwNu52pZMtTCygdSpzMCmfg04To1p2MVbka8vL8N1dC5dPGU
tUo6Rl9i5Hua1YhLL3KL/J3r0XXrSor4ow44slng8pI8HzYDe9LPxxWD89Bo
D+FjB/6UpDE7dCkK+bsvxrI+a4VbT8g1FTgroOtl9Ni2fzUcpuyVktMpwvTM
1G7eqSZIDtsyN/bIhcs67Tep1cv3fSrUOHeiFq4FZjLWbcRix99Al6WBYlhU
5DfcdKzDI9YGKoc7q9BC4v6ltZ+IRLQrbu+6qPe51qP/82wwDuk6yI5+aYLt
pwaCybpeMMhIdC9rtgEMMzza8+RLwb3ei3T6bx7EZHKV+TwsQen6Eaw1ScCO
Pzdzjh5uRJ1rFs4xcVl47cZEWUJzDhq92v394HwBdDD4z7H13kLO5uc8qSLx
6PqF8PZ9fDVOPNCNKVlJg+9mdlX0MuVgofXATe3UU7B6wrDXl14KFtNltKl3
ylFB8dox3fQ45Mij/s0alIijh9XO6OjmoLGe9NbG1zTk7m+fT7eswS/l58W5
C/c9x4o8S8i5F9lNr3/QponBdbFCXptvmXhEtTZyprcY2y9lpxTxZmK1jlPY
nUs1UBTx2VCVtw7NxAZIzQ8ZIctpjmNCdbVYGX0+24UpCQ+cL2gU6m6FIWl+
Esrz/vBf9I8Ks8Q8HJ5hLYVfxRjf73cj7i0B1gdnhywkCMDSE/HaqrUG+51k
ef0/VGH/tPNGVkUe2H1gWq7jrsCApLbRfwIhKHbzaJdjTQPe+uP55gBrCba4
CUi4/8lBjtQ6iftyaZhXoe9QGt+C36+/O+8U+QyjtHt6Tg3ZwFMmir/hc8Ww
fNk2xpw7CFkXwH9cPBeow+eLYukqQKqa53kXQyH8cQ/RVH2fj74566z7uo72
0w9ecDjUQhRdyuzhtThMCOceZnRugFm2EdGgOB+M2PT7/J98B4y3yC663iGA
kT8TjWp2MH5u+J1sKVSN1uPSf11eJoGN2biObXYekvyTHLUw7ADBra8Pc/Vq
0LxNdZNurxZuvE4u4I0qgqKKGG/VES+Q/zuc7F2z7zG37l/H9HzsONjcvX39
Joy1JV/hiEsCh9i2y4quVUDHc/ySqV8A+lA81NPs6MAixrXEAPU68Kg52/d1
Yp8f8Z9VKGdSUbK9O4N5/9wP2vTf9HUogsW3n9PIY8tQn0d6Zty+HjukgjZJ
04zRtFBLQWu1E2XyznX20GjjmYgB4i3aR0DxR3kmvCsXnGbK/ppY2+KoZYxt
y9VaLDpH/EPKoBPCvzqWnBDTB16LZA9WuxtwAkt2yS5cw6LSMSdpDjbsH890
9VvSx2WHHwENhzVgQbOS0FoigiZPgrMeOGni6N3UhzfCzkFr2JuIm0tCoH5o
yInPSBCfxtPnDyOAX9zVC2f7adGaadEmSkwULEznqJypJEGcQuMGd4kxZky6
KPLyGuD9/gQbKUZpJJqoNWTh3ZH+aktllOJ2FUZibA+/FVYDy7OjTpPHWTHB
7+nd/np5iJ7iZRSeMcISp3M5hZ7yQKPu+m32tjrK5J9lyGzdkP6utBvGSywA
67kKxpOiyqiozBvppnYZOIdR5EM/AV379xvnayMG1+bNFha3Q0L6rweP7eKR
nE3bfdvgOb4gE995RFwNn9gqSHcWq+Cq6crlLe5B0Nq78nri5HOIYteeG6YO
BkX35adZPM045n320UDffhccmlgjZ21CZun+pOmENDT1z79+83In5DzgnybT
3PfaR+IUBa7t8FRrTX4svw/c/nNQCruSjV7CWb++H0lE76VI8usFneC0XrN8
odkFjx9+MGH1uAYlKQgdslRVyCpGSpVE0wgfaUTf6T/tgCRaa3hn3wQnT2y3
N56sBJ0cKnJ39Uzomd1LoCgIhGiyPJOyN6Vo++VKZwhbAXZvhvMl5BEwY/aJ
SJcvAZJIhKk9ZQio38ax2Xi0CN8a5Xw8QFQPwT+tRSTSsmHwps/byrp4nJS9
pKt/oBgdz008ZysowrJiZvvRqjAs0n36U3vPGbnuY7jhhacoVPFmfqUsHVUf
8XE0dyej4PCq8O8nVXghJKHNjSseZv9uXFm+Y4jf5oZTVeMq8LfQ4b/nVQpg
i/+CuLpkLeqlfcqLnC4FY9l/CknzwWjwh4aMLrQGScr0uD/o5IId1w2xJXo/
YCA9reBPjtjDu2GcpRAGQo08rK/0uiGy5fPhhl8VkPaFYohiOhjKlGq4Shfz
YWRWuXVsugu/x71UJSSmgqvB79mgv7FI9EKcN7igAWlTqn6cIyOAcEJd2Fpl
MWTxzQe40gZA2OfHzN7fAtHJ63XE28NueDibjGHgQArKdOVGPLe8hp59fNTN
3Fm4ZyL4SEkkFzvuidPMW8YD9dYeqUJIEvhKf6cjXtznscV4wqRSPXSw94y5
v45HyhDWgZOUhVjxc6zqtEUo/GPfZZVaT8CkzbNOnRVloGPmxLtkW4/HeCJc
aXnz8DS5jCJVSD28SKz7FCaXDkNUZhoKAa2w/jBZVkC6Aw3y7v9ZtiXAu5FI
b06dGsgv3/O5rNSJDgfilJajimGyjv1Vq2k9HAypJdKhb4F7ZNtnJpzy4L3g
8v7sqAHLEnv2uZ58uCH4TG4uuQ2cDFiPVrGZQ8QXR2dZ/0YwMBY7ffVQA8g7
FG/3ilSAtZVW0qpyETgFpRnZ/o4BRXu9jfHBfkh+NR2YergK3LlYRZfZgzBx
nrTAY6ULJNl6OIKGh4CF9xK1qYodPOas9cyZ3+fj0MGAXLkcUP8lvnJCab9T
8q5IPKfMhZEq9s5Qrix0f1b9vSkiEnkK3ZfaugthzL6LbOddDZ5bZI7k/dsB
HaHONckLkTD+o1iRZZqAm9z2r3/J5sMxojnD4K81MLT8r9VLrBOZi1doZgaz
YCMgtG6xzQr6vticH2RqBmuCqtv9nmb88eDu89rGQvRnd15IqSiHUaPctceK
wSh2iB4rL9aBL5/ZvTsHStGyz5+N81MWttpf638wFI8BdSyeth+r8L3wlFKa
XyF++G+0rtGjGbxtgnJOuNfgz8mSM0Nt9ZAVF3jtqJoohselNCM/AR7W7Owy
EXzwuqd+4aPOcnzgl3aoKsMa7muURSb6PsV7r33M7rnmgei3ab4Xus04fjtV
VqaeAKEH3naSGxQjvzAhnZBUAXIjtLrMxCXIJvs4mnS8ACb+LUU8k85HPbS8
ElTeDOOW9Ie2ovPQStE5soAxBwSA7n0TXxyG0PUurF6Kg3dHnms8Op4OR9Wl
iaom2/E7r7uFamI+dgdX5oidy4LxELqgYdMy8Gib6Vjaq8C02LR2yWQrfGNf
/9c2IA9z548wLYrmYHOO0Svui8VguyH7YOFBEbjP6E+UcqehrsVhfsnntXiI
p5XNdDoHn6DCjrNxFpo/7NtLot7v1L13zO2PcuCvcPWFZ1PheOKb/jHDXlsM
WXPrNVEsB/7KQ1M1BtFQ7HX0TOJ+vxxZ2t7rno5BTT5OzyPUeZhpZGXGMVqB
Qn0DufY5lbjiTBxaHlMOsxOlW4znPED1obnjRGApjOEiWWRkE2ju0UWfianC
PGmHWzmj5mCZ4pA6vR4I4ZvBb74kKSPRwGDvl/mtdqdqNp1BJyrwoUkuIRz6
T7rLj4PukbAk6s9Plp+wMMTouJR/Uy5SSCF6ezH7Ohtc/qx8NXRPAfV+pu5E
rGuhu5l/2X1KLlCTi15+Z3sBuUXXWsbOXsOGpM1YEyc5/FlP/qpHXxKOpe5o
1TCJwIlDtCs/nclQpTqyyHvxBrp996BfcJEEzlA24+Y8VaRIqmGj7RTCUr8l
SxoFGZxaX7prnKAIVtUj84XyevtzPNJb6qAgtn9RtTr/XgY0L5fNnnK6CSyO
MeN59KeAKHmgVfD+rnRaQkDS1g85KO+coWX6VYvHD/qd+BHdCaIFuX/PR/WD
TLzl6dqmbFhLG6O4QNYF0dYUZt8nCuHT36mNE4b7XPrT9lacPRYUtePZmAc6
keq44m294WYwUJPffO3Sh5GUT+gO1QZj+/izRQmlQXgYSrf0rBlRunD167Wp
DpAVKuFhn3XDRJUsid8Krfj+Q6DxVnorPqksVd0k5KGSqEke1+0yPPlY+d/C
bj5Ee23uvfpchhZ0Ue+zfycig6QhG/FyDAZo/LPSCQgDgcG3j9syB2C7suSQ
T9IjOPM4NZZ/tRwHWza6wjZK4IzyM8sCynAkW//4ZVcJwSeanzIvNRZ0f1xw
5YwvR/6Zxk90NnG4enSSKVw7DUvcnKkT9Mqg2WPSOm26BIvyh1tZSWNRXVnU
QZc5BwsKR+Ma2FKx2bC1QPhtNugwmZ8Jf50NbH7zZ1jvluG3KzodHww74deP
Wx0/U5ph9A972bd/rXiB8uTrkek2HPug8HmArBxeZb2Ws5XLRs7Di8MUq2WQ
p3RmkF+tEA6sbB0MiUkGjdoZr3uZBHxgEPFUfLkcuy9pHeTXrYDGzyVvPjxq
wG0Iliz964m6CwGN9KdaILXkbHXulUq4wi5t/3uzFVdIHFncSkshkXxnVzCy
H+RLFjzeOxahtI3cfxEMWfj23RCxVVg3Hoiye7F3tApdOWTOZOkkoN8yK8un
pkp4PuzxxDMrHymnM/JW0wOAyXQta1iqBGeHrXe5it3wnT8zUbxMPRy2XRR/
cakTvqwJHNQ4UwrDu/luLzx70W42iazZ8SkSJQsjldMdYBR8f6/heTGMDz+m
o2HOwpRGwlYQWQ1qfiOWlR+IhI2x/3aeuHmBgda5fgypAt7vQ5TXexuxPdPM
7WVqB97fTA1bTojD+YDinwouiXBK+BjNQmoJrqbRz4s5x6KS7y0ew70QWH2f
/5w8yx3Napvn0mg0YbfYV0L3ZQRYTVsfT6HMgHmiWQOJ0Gos3cofizvTiO4v
XswJMHQDk/d1kZ2aWjD6V7U5sh6FC442pt7sXVAg6ZpneyUTPjHXdH57XYu2
nJyKwVv1oC4R9viwZy68DNbhKSVLgLvlY6u8LgQQEeH5mT7fCfeEU6Jo5OLQ
5kUNuZReEn5R+i5+njIN3Q8/8NU2D4a3e3L3vhnXw6mH/xTUboehvX3+SAdR
Fc4FOKlcJq1Ffr7gdInbNpAhxawqVlkN1c0uIWrhuSh+bQw5L9RA4zuXwKDe
JPB3e0XTw92KllRbkddv+kFwXCJnJ2sB7m5UjC5Z5uJ/FmcuNF1thDdUzt1r
Qjn4hZteXo6uDi+cJhOboGyC/0YFcjpaCXDx9eTJJqzF2SlGsdaWGqwvd1Qd
Wk3Ejmdps83FztBRf4BzXNEbNv6W2epsuWHu5fU/2af3e/sdXavBRiGW6D2+
KpXUhGlp8nV81r6Y876wPV21BH7RRwhsS1WBUPnJvo3EOLys8bn8YnkF9Ij1
e7UZNmNgY+pUN3E1hnyLzS3SLcPb4ef1Bw8/wzgNRaHqsxE4Tapu+fVMIZrY
i10dVs8BzemUaJ1naWgvTlA7tNKGbbdq4rYTU/BgtZ/BdcEC+Pm+j7K7OQsp
eqwyP/FVoFc+cSoLx1WQ4yYmvXfWH+R4bP7TP1kPbzrfC3H9rESux/fsXPbv
U2S6Kv/ZJ7XQedHxzN39/fYsWODnPZOO32i3tzbE6mHBwuBG+Z8KTPTKULPd
2J/DfxvsblYmYwgl18O3NWkoR230O2myDmNeN9H3GMVCKXOGgkJ+FQYNeFf4
RtZAGUMEqalAMZCJGtY3EBXgRsXTH07Rd2BjzYyeKNwcWS2lfWMPJWKqtF14
ck4MKrPygldTGc7NCjm8vLm/L42q7bfH8vAXX+U1tuoI6PMLs7NUDYJUPcf8
GIFGtFL73dNdkwGvW+dwS6sKfdyi4o2Ny0FHdzVG/HcY0Lr05hrtz91M4dvu
D3mSIIh5ltM2Pwn1LnSmhs0k4I9T4teJ6AtB6VjoK7WZa2B8sN28R5AWxqLV
FzocJMDnzsUjjLuCMNGwXvvARgl2aGwlKtdUQEaswLBWTAbqrl3KYTqjjUXy
RhlqAlRw6O6xyZVYKUize/F1W0UHzAI1k12LxIBa/5j41kstZDQSU3FfEsc4
Ppn7SsLC+Glj54p7rxgkCtOOsV7XgvFH/ryX9GRxVZY6DPbnnJNA11GxsAu4
0VC+8omOB24fC2/kENBFTc96tk+bUmhynbiMeVgW2XZ5nKdczbGWSsboWDAb
+BjKdT98pIpK9u4f7MylcKRqUbhv7CoeCW+qpMqWAbK9Lw+6WdqxyttymFq5
D3o+KpHmbg5A5+OdZ3/nU6A/QPHzJZFW0DP8TU/IrIWqS5dIFz/lwhMOsI3f
iILb/+atFm7kYEWHSBtGdAP3UVbDC72lSFC5l/NxKQoSwxUHr3fnIcfv7Gfm
JAS8mvg7OjOuFml3rZ31tCvA/QBn7C/iPtAxWmJD4wDcbfATsiGvBdJY5QtG
nwvw8C7bD/X1ETSrpqwg/VSIOfelqaYP1MOGWKL5dHDbPpemVyKfNIPPa5KY
mXfZMDAq9mvkbid4ZwhFC4qkYI74woi7XSmuDT99vPAvAnd9+/TYuGqB6lDC
qMRQE5JV07S4WtaC/T3NywqznTDrcE1dYigQprLDJ52u7ndszPcRGcFsdCwW
CKvkbsS4m6Xv597mALH8DbH0tQJgsrXZ7tfpxPHPn/meXk8C72uOJBHnioGd
1pChS7oR6Z4r2EfdTMWhIHJJaQpv4H28vsbXEoMGPDlM24rPQCO/1ohlpgiW
Vf18RkYLkE5sek1btBrmVolR2roO3p8Kkfj2mIBkmuMbQ5eKoHbR7ji7Xw5Y
xQccmxOvBhphtYCAiE4c3XG9GnY2Hed3hQOSPbqh7LK1l5RYF5YrF9oz5tQA
7bey/hfLjUjUy0H86pUpLG1e5qBkK0Fdc0vBf3QE2FAwpRR6FoQfKeVgwSca
DFj6C4svh4Kl8mYr8+1cVFD9tkL/qg1i6tczzb9mg9Yrineij6qhIzzBXfGG
IyKDm9Yjh2isEmcOVQiPguHRsweoaavAWzba/71LPKqTif9dIIuFp5NUfC6F
SbCxGpGdZJ+AYfO2CavsLuj6REWMnS8SZG2qNJv6ukF1/UBR3JVs8DxyZpmj
zRfG+KgfDvrUQRFWPdX3CEG3nuI5tw4Cbm+1nfs8UYOVP87O/Lzoh7/pBUkT
M+ownufh/Ttadfj7Nk1chFwBkLfz+BwszsdPmmio00CAV0NLLiMyJehMWvpL
LsASRE0tZTy98oGLLuOEbkcndvT2SIf+KQPp+1x2JqUJIC14ZLEMK9DiUaPv
Qd0Y8HBubrjoUodKCbRRDKdykajPmCV0KxOsDvPwlwYVAlfVG0MS31CgjEnp
1f4cBhGlLGm2cg/Q4+w656tvWTCZrfK4h6YG1uTOT4Um1qCrf/LMs5JMNCmI
kbX+mgcNa28dCjvrUODITpCJczMQfSj76i0FMP31Qen5M41A8YOqfsKnFXVm
VNxrjIKA/7iADjT4g+j3VK2hqFa4P9fyeYbYB/uZvZ0bWvrB+E0+9VnRTrQk
dLIW/peCxiZ3vv7xLUODV1RfxncIGAXlQsXHa+Dxr7dcNtaNWOX+0HwtPxtG
7uebflTvQXqXpEvqG+0QwXWj8errSvge6yuqfL8UrKkXLN4lVIP0uRtK2y9C
oNpROpMwtN8tf41+WrWWoVx4xtjUdCPyal7eaV8ngM/lFmXdxId4yqSZeKah
HNucyOo9HiXDxi/6/itlVcjm/2KHbN8jSdq++Mv7pGDP3JcDj038UfVNfhLR
bAtE3ZCmaVjxRDjS12zi2ATMXAu/mxNKsDyeYVj0+zMU8r7YZF9EgOeevZqN
1dF4Mnjh5In9ddRO3vs4wF+AP9wE7u7UeuNqPcmrB+mFKFaj5SrSGY/DZ9d2
nhnmwMND5hXFukUooBpi8kguHrqLL6avDeSjNAMnsb+HK7DE6nEJHNMEpTn/
tEePfcGEV+Nw29dmHDNJv8Wjl4vXfGm2OStbgcjwpGV+iwM4qhRYRDsWghXv
0dsHq6rxoXzDE9uMMrChWtQzU0jFDvC97gQmsHuZfCXaNAZYeWvZfrbfh0v0
CemRorXQEfOJ53XQ/0dAcTr3dApy287FB+w0QpGUwQvLycd4RkJ9YJu1FG4f
HROkpo6FevWa/voXrajftEWV3BQPItwumzdYa8Dsm8Onkt8BmHGCPakuuAQ8
xxkm3cds4V3vfPdErhdafX0xUC6bBz8J/wRJ7oXA8YMufKfoZODhi+jxeFZN
XI71bMAHRqhQQxJRfpcBzb6zK7l1quKE+PmP02FCmOdmfYgzSRYevzXsVlkX
QyGqcdv5OU2Qv3O7nfBZDFcjXxp+idNBkbQ/aGWhioRgKj+tCwfAwkR45t0/
Zmzm82iY+KaAFrbfLhd7SwPX2AjtcwcV2HJu9NRnMIDSyIUkYYkrsESCp3Yz
lfFVlsHquLo82MV5hq2MSSHJ9Ayj+uv97qTMvrPzkgltqj4XBhdIgZeljM37
n8IQ5uZk3uajDrLSNK1utRqgNDDbSyGviOkfC38mnhPDvOmrxt9eIxr5xf50
Z+2FMkU+km3jTmDYzFe7diIETw3Ei2zVlsDDhS6+cqMmKJob5/npaI6z6SeN
2ovK0SvqTzMXNsPQR4svB3dq4Lrs7rrc7zZYfty4JixAgEURhlh5zhE0Zt8O
u7bujE2ffkXfrujBFA0yvnd2Fdgi8KOtoKYKohlUk3kDWmCkfefeOw0CZDA2
8+jWlKH4xBFeKt4qiIgzow0dika6f3s3qIT14HPb8rvUrRo4QXnpbGFWLaqI
EpFlLrdBzyOjHG3FdmxSt+YxvxsLgxyTHr5NeVjEZhuvi/l42n83shMTUUSx
XKjOuQO8bR973dzHuNCD3an5Qy34ylOQjaqjCiXLD82FvbwP2SOHKqQC8tE6
vLvxaUAcrEr7wcneUOC+sbbdWrzflbQrCQNBVXj/W6dKf6g/1K4NTDiotaNW
fo5Vv2IlnLWov8QnmoSb/2lyf2WvQx1l7oSKuHh44dNk7eSej2SEQ9GjhfXw
/IWO1/qpe6A4LaUavs9HYzrZL5TRGejOYdClMViEjHckfxO3NaLMeeV22Vpf
mDH7MET6phY1et1IWvP6IP1oAGn04DNIof4uZuJUj28PnODYKUtD8rMHc65x
usBxHyT+//vGuCL95LpmfygLk1WnW9/n+c7QqRqecLCsDJ32/5qCNvQb5RaC
ueBmljIW/akOp/JsalxiokD+4cLrA2ZBcCw0rEWEdAg7ojYuOK1HIxFbIeNi
vQ5me+aKJXM+hROd/JQnO59BzjH3V2JFcaDFzEMiZFAAjMaxxPLeRdAymVN+
l36/C2aNgsYW8sCggsOPqq8Us0Z41uRGIvDQ9XniSJZmNPhssBN5PADnw8tT
tOTawJOK6cd121y4Ls1cH/a3CRhKiaKPuSfi/VmNUY6lWmyQmEp6T1KOZEcY
9oxFG7FR2/QJMY8n/hP5PDPhWwbirZHnKwwbQDXm5eB0bD5+r/gkRS0ch19i
Qq5Rm1Sgukkwt/FeBkaJPe9Tj85DA+UXMw3k3WAp72dmUBIP8Tb+D989KEP+
qLaxiYYc1DL97HFLPx73XpsVpFJV4aeEW0RyenXAtFp6s70sHxImZTn/kpWi
4p10L2vjVmh42X9t5VYHqrrTSSkMhMEwjegUd2c+8PpGr8z0EMDl0a6UEWk1
+v+w0foVVohMq0NvzqU1oN0t+9aU8AIsC3AV3/JBPBubaVQoWA3FKl+9BLoJ
8CaGpCt3fy7Rffn3ZfBiN1hRT5+I8QxFh8Jf0o4kTZDVvFrFNnMbmjmWwpR3
fdGnVUbZbNYNzsy78N4ZqsGDfNyqBWp56HDryYXHvXXwlOLHJFVUJagcm/C5
VZADV+6kjtknZkLGcT/hIeV0cHmXfu3paAvyBEr9no2ow9l7ktZH1B+ApUee
qIZzLig925BxPZwOxZP6lZGrKejOyP2bp/wxKkpK2dufr0anvbpjijON2Mcr
huDdiBeFZt8M36yD9Nck3jFfsoCkWZRx4jkB4tZ/OIplx0PF+lBZ3+dCVEm7
J0D7owunDIINpBS7cKnkzryMUCm4KrY8MPAqwKwuj/PEkjVwhY9o7ERDAu7S
0zsMDpajfjy3PeFtFcZ8I1K6slIKnSwWdzwe5QPLdQYS+W/lIHJ6mM17Mg/I
t9iduK6mYZGuc8wIUyXUdT5WNL1dAOb6Q0azLUVobq9a84EnHaMktfg6FCtA
R9Bu72Z4Ljj1CF238q3CumW/1RfaaWCuTfx1gq0K934zH3V50oTcKdP8L6n9
kaGkWiR/txA7uPhEt64mQ5FIwNM3s9XA/bMw/De0AtVuEknt82ykUTsmu2VT
g5r62lfu3SrGE+VNBQyWLkAuQVoTeroWFEaNOkiJCSj55q1oa2od+AjnMMzU
+oCQ+dJMUV066PRvW2q4FwB3kjv96gN/zHYPlg49WoRmtcr1e1M30NtC301j
Jg2JqHcv0rEGAjnn+9EBiIdtoZ2FP8nF0Cj5W4um5iE0FpxaitcSQ5/3V6yK
eJgwzzPo0EvRy2AgqtBl84MDYuKi6M93X4bjT4WjHhE0UEZyK2WP+gRGeth8
csq6CMOGc+u9YYZAVKk2fZN6rN2OrZ18c50VabP2eCt2tPFf3gFTvWlV2Hz4
YiTaQAz+2xs6GJGgh78usl/cSRNH99lUsUtLxyDl9a49H6UE3ghntdH9owQd
l0iWLp9XRZ8eKf6ZKXagnmLsv/VZEmPu3krh7FVCST+TzMxrrKgTRHuzZEkL
dMUomO5maiELY6fD3TxNjCL/N97wlAl97ufZSZOcB1Z36tJPIpr49TukvrzQ
g8+S+/UHL/WABsmvEy+fhYIg35ztf39LsLIE1U0XWtGeh17tc2sxdLIm3s/L
qUYGPZHWGNV+PP/wvbtTWi/0pTbEXJzwAIO8XJrF+Hr4emfJ/8E+F3Jzg2b/
eMSgasGfmz4yLqBV6Pufy9keOGsd43LWsgxHtEX43pUN419nQWUJyRYI0d9p
TBdsA+mjnMuvSlv+/86RVFMyB6LadedvGljAEQmHk41DBDTLtdVzhVSQsYj/
9rNBH063z/cz72XjCc6bn+6YFGJlbOs4f3QpTr2XnzWMiMbd+SMHKmfi8Frs
eovIRi6q0ovcOnMasZqT6w7BvAUmn8wK6nmnwPbvUxJfTvpjqc+8usR2Ox7i
WX5z2qUR1l+9YbKQ8cGesOqAZNEKmHuZc9mOrwN2T0+XJdPkQOboBUP6eWfY
MPy3F3koBv7YGqZyPu+BuOoOhg9crpBVYCJ1Ma8CPzL2LS+5NKJkj096vXY4
2DNPbi1I1QG5GPHpEvIaaFN0qHq52gmSJea0Hy6046Jcm2WEWxb8PfbR8Ww8
4qLSg5yeMQKw7v578NQ1GytnjqSkyFShkgkFjd6PZOBMPEWw22sGxlZV+1/i
aVA9EOgxsFmBDcHJBvk/CfjzdEvZeZUaNDpWO1tsVgyeHr9m9YJKYHupyENw
xRb5XTsEst0z8Fi3WDmLVB4ut3CYkpb4Qoey/43JqS4QFDrtGHutGrvIUv4r
4CuBxY8/JUtIoqFIcKL5Sm8eDJFeFnAnz0feCwofJcdKIcVdl8JdLQu41oWy
U0MLgMuK1c6pJw07b2vlPtNsRpknajLu7GZ4jdK37a5sI5yNtDwyY1OLM7/W
vK+zBeBQYg9RLm0Omv3HpP4wMg8f9cV8SNgsB+rMf0d3BiuBvjU2eXO/a5dT
rY7uuRDArFn2w6HIXFikJzDqRHmD5dF+qhfzQSCuGZpwRy0SpV+liJVhFRRU
f9nilajDvzRpqv1QAJL/zrlH3noEPaPEoyNrdyFSlURMhaQSiWikJM/eUQYm
5DT0Dx/AVLPZI7qVxbhkmUhE5BMLeef4rijPB6DAjIC9HnkOxN166P5vyxCe
r7lLGH4LhC531+8bWI52VFlb4sM1sKsikdGnXQmvH24rB3woBq5NrdNFNF3Y
eCW3KvhfBhA8/Nyr+zOhizb+YLVyMTiSWj60tqjGYQ168/TnJaC+5UR9AIqg
a9dAf4O5AclVMgs/XYzGzQWnQ5J+1Vj+5EgCQ28Okn+PPkwjlo+SXBkyK++d
kXwnQkvrSC/kDOwKfzjvg7IPKW6m0TVB41N+7zfqpUBCnb4Vt9qMJFJPjFO/
1sHiJAU9gSofVO20FKNWAzGuezY49FQ1EKlcmuDQJcAkycArzLGCkIqnEho6
GaCtYX74rF0cXmZkNuVY6UFCSVRhqkQiBlBI39S5+ASTZ8kuHqBvgP+sksUS
w/KRiZ/MZ9mmAIncUsqOhD4B8f+mLt5pq4CiVxeudkg6oZFUbWhvVTBwne+u
gff1oEPqtvih4TH2Zi09yzPsgQ2vT4VKGg9wipLyzY2NWOxrnGg5UNmBwcYH
iio/J+GJrkDfXuMgGEm6K67xLBE8JcQn7AeKYXtc5HLUAW0sr+XJy619iCHL
lF+sun1h+dfMHFN9KyQVkD5neNWMSad3bXhGa6HW/IsbeVQZuL8J+Vz9o3rf
d/iUau/WAZ3lGGlifTgUT10//pYuGGOzP/0jbyhFv35PLJnJAo66ovwAEp99
/6SSXQhKgZ7go5WjST7Ipd8UcNQ8H+OEb7y7p10CrSYvnU5+Kcdrv0ZtAj5V
QcBdpmv3yGKBS81Vu6qpDB2dRjgLGKrB6af2M96/NfB2VXt+0rkJBJmY6ORl
Y/E1l9BnZ7UqrEl+6TwRlQ0kK0Qbf77Xw7azRmR2RA5WX7ygfrs+F/0P1lXN
Xy3CTa4B2kG+anR0O8zjJ+gD30R0OI4y16BYB1Oram0u1MYotx+EdEgpXf5c
0nkeFJY3NVPdlIBI8K/w1YWj2NkX+4GOjAW7vA0S6i8IQYgQZ1++1Bmwm7X5
eDFTGp9LVtxZW6GCU6bMEQJX1bBdt89DLPA0PDiRpTV6Swh2h9TDSAmCYDMu
fqvhCRvGVJ9E1w8isJF9ZG4glBuOnF5NDxwVwyPr3wpW4yUhqZrtBImaDAjN
9WZ57X8nJUUCI47cBALPUrPyyM92pfuTezoG3ED85E7E1yBtlJl+ffT19Bvp
yYXAorRCDaSEuHemDVxo+WAtiEhdDzeEU8eFl2+AwZBskaygLgjktyWxtMoC
2dHFQy8ae9Bg41LJ4kI7WF/wbOt4VoqJeh5kh4IJeD7+Si/HTC8uPcy+kanJ
j73mJyJSHNvxnkDAZnlJN6YlvHbTVsuBSYW7eRXHkrHa+NwFzcMN2Bd81sXl
XC48E6kYyUsZhhXqtqnFL+Xg6xI5V1+8z6ttyUZt0TI4wkHEkO5WBM+1THbc
XBB6jSRqHmY3gB7b4g8mwXLoceR5/myzCsfr3xHwVyScy6hln5avAh85gSqF
DSXcMOPLLFHsgaFv2d+EX9WjpscVCQ3HaCj2vS4UE5YHTGdDa9RDm3Fg+BBr
TGUVyh74ujLDlgzcW6Jvmx+UwZmJoy+H8ypxeat5eZQuD21zI0/o3W3av89v
TpLL1kDWla7ivv3zcyrsFrugtC/Y/ez+THE1CpRjI4zKaFNgyWNpW+xtKoz7
m9rwbnZAdd4n2gIDAoolOqwkv4oGJg6XRT8vAiT1BYbr/8wC4cUDVw0fFECS
Ss7GkXh3ZLn5skkiNRc+qVFcNO33AML9C++Ey4uwlL/PSMSlCunv0VHckEE8
E2oxTuLcBlEdNC2f+R9BhyMF9x+uXLhXmsyYzN6J6wJ8qUzDqcBwnDHglH05
HlNLb3RPvANZLFYFP4S78Nh3Y9Fy42RwX3E0aXwaAxeXb+Q57XezUObN9+s1
1cCZtnybcioJ774WLetOzMH+xWLF7oGnqH240/v3xyyQTLFbnGsOhclFLRtK
4Rzs+nLvYtlkMV6Q5LubyJuPPMQXGz4IRmBjzLScb0gpGoVfHHGTKIHiaBvG
XI1suHl+ofFORDL4yZxTuQ3dcPDbdub20UY4Juk3KCTfhDeP/+495dYBOdre
6hx0QXhw5WD9Ja1OOKU18OZLXxVYkMWJPvpcDwmagvIyD9rwW4DzH6mXzcCm
xJjemZyGFPQlOpPVBKggjFOE5jeCcXwT84E7cRA2+ITu1/NCjLJ4uJXEUQSz
vlQKL94Ug9pvC83mVAJEpfm6kUAQqu5Rr5kO5eHbx0Tfbgs0wEcWuY+p/L2g
E2zVNyoT+z8Kzjsc6++N4xIqUpJNsgkhSSrcQvYKoZSVUFFWVrL3yt57b57H
Y4/7sSNJiOqLtCQpRSWkfn5/n+v6XOc659zv9+v1zwejdbyof6ongS3vZXp+
ljYwKNtSDLesAom/Eb8D02rQZ+/1yX6TIuxmoh20rMyC8BQ5P2fhGjxn68M+
kkqCiGUV1Ss2LfiuvJBGPqMBEkkFr+1kilC8d9L7EV0HuCa3lbiNNUNu4HuO
BMlCJHcpdd79UQAOL/fFOkADbg//nG62qcPfw1ed5z8mw2xGJtflT4XY36PI
We/QDSWawVn0041YVupLVWtOwuVMUcvebw1o+aayNv5mGbJd5q6udfTF+reO
174vlcKLPv2s5M+eeMApTy9aZIcz+oIezfoVQtz5w0SeC5Uge41aQdyBhJ92
ORrdj8nH9H9Hxp//q8blD39Eq2wLoNz7mUbAU3e85NBW8FW7Gr+yrjFFnCpH
E71x6nDaDkw+5PZNVjQf2k6YfRruK4aIuI4PybMl+Jkh+z6zWCPw0eo/amOM
QK8f8hyXh9KAS6/xExs/EQwmDacfc5Lxm/5ep4alPGggXRfb+6cXt0SqqPfO
F8BcgXErN188+tkHR4vvePdemqC2fAsrlGY+Pzb/rRteXZqlur4vGETW4jTz
A3OQpWG1gHq6HdzLPaoui2YhbUzWh4TwDnTYIAo6XvIAk/6uWx4tqfDNeIqx
YOsajjGoRp4jx6LBIXp+Xf0c6JJd4tDc6dObV9TKxI0LIVWaiW1kqRXbfJTX
Tl0Mh/IFF2rGq23osBpAc1w1FVbSe8gSJghkt5vr7dQ28Mf1ZYgqMRnI4fzd
5V662Pvx/PcJ2VLgqAsaSUrywVuv9T90aufBezUDyash6SBfcT5B918e9jAn
MrttEkE8TPmPYHcjag2+d9sIJqDV/KO49yZNKP3mwhTr8USU7xK/vXW7Cp9O
tnk/FSiBbPUJV5eCLCAvsVLljd5GQ2Uq7k2adji2daur0jwZ3ul5hU0z5WGH
RtaufsMKzHAYCnHpq4S3ccApiJ04X3OFWodZC+0suX8mMihBn75Ex4cbp0Bm
cvbNAEkPg35bd16f1cVbj3LahKZMUfnia9pTPRogsUIIWik9iTcEX7IGsV6E
twfvTrNwnsdFPvVJQeMLqKtNeSvgjQ5edU/czOo7C1Y/58UcuT90OdcGxV+x
PImOxHCLsHxOdL0ey68xz4/V2qSgqW0THPn7e+8G92UIFVkNrOaRRdWbFNUf
/qoiRabd9HNNYXh/ZkBvUU8bVsUUf4grnQbnCUmNI1sXwOnge0nd70rIvrte
lf2JOlotntBcWzoC3Bi1EvtTBsxU/FhtPmng2VO/os9kauAgRR7Vn+ZHeNGu
dHLGjAQsDodWtxnJmN4Xwb6SX48xbfg8obYf+xUjrP2DwyFIJtGk5EMJfuE9
lSZ0NBHFW4XGz//pQAPSMUnemHok7fkRVub1GPd8i468WeuBXtNvVWhOpILe
MTqjMv1mYNU/K2Sm+Ri5NZfORWbU4vixPucPdSS49Kqmd+pgFUgxChTczE3H
rNK9xOnUMnhUWmJx4kIDVJYE1TpaEHDhXZjokdup2JbBJmY/3QgsBm8kFdoa
cUTYe/DKEhH3/6USFUhpwBs3Xmo/I1WBQ4yKjiAHAgX5R4JsfXfX39gnzC56
fbBkHvS1ybwR8x9/ZhLQHQTfq2x9uT4VwNTzxYnhdgOSWfmCqH5WwN9iLraU
9RQQ2K67+E8tGloWq6ujvnnjXR1960P6ZFA6k3KZaekiVstk/CuUbMUFoeKI
a1fJ6EiYqJuUzMUfqt8GP1pXoE8qrYwcXwk4HZI2+N1AwMmiFlGBhTSc8vt1
4bViI+b2Cj2k/dIKvZ0/Jh6zpqHZMzePh5rJmB148zMVJRkHE9dXTN52Ict1
heQ1mXRkXSn4/Fs+BY66Gr5Zp0pH+o3rpbR/2oBB3GHTdKUJZ5h7Ik84leBM
wGKUam4BsJi8MvH/R8Tc3SaKt10bIT324htrqTSM5jj2czWtA8TcaejeDZVi
pelzJU0SGfnPhEZvVLTgfNWNum3KeyD6RtSBfT4B19iuBll8JUBM9BFeHqhB
qfvMa/alHpB84tfJeHIQyvAz7pqZI4NHjcIq90YxzvNz8aQEmsOThoNv1bda
wP7mI6rVcRIyD2j2+f8io0RswbnHMQTIetVD43mpDA9IhyT7pcfjpcabb5oi
qpGKKCQUV0yGOM5YkTXVYkwYLODfW18Jt0j2kmGMJPgCzh8ozaNByV31RdtB
P9wb1Pn38PsstO44dsCoIh1f+Db9k3gQjqsrXmFutl2I03SeR/yK4Hfk1Psb
xFIYHZxbpyZnQWnUyyfrlvXgfOifaMOXYujYeDlApkmAln0FIVv++SBQ0p9b
YJmJPBlq279Ivhg/yKDTt5mLf9sToK6rGGRc3qX26UQC0/2uwf6hOBQ3aQAU
y4R8cDe2CSWgRTnNmSjDAPCTaa/7Xl2Ge6+E7hh6B1xhpw3sPzwAVw+zHd5q
DMXXBEJiM3MMejjsy78iVQIjNFxf3zk1w/vIuiuPLxai8oMkR8FbfshusFbT
vZPTJwf5pAT52rE4t+jFedlLGLzntkeWWBkEBZ75wj+djun5Rvxa9xLxVfpw
xcMLTah0jLd+bsEFftTeDa3ND8Rs/wPWzRc6cDH+7/BpchYWsd5TFynOB4W+
u+wJAXWo/SLuy5vMGHzPOfh9+E4R3rsqStN4qwGFdk9VHeDJhnrqPWXrXD44
3xsrl7VtDfSBV/et5FSDzql7Y7oqNhDX9Zm6t7UGjFcSjEdpkiColkDLW1CE
27+zOSO228EqQzVcm6YOx0nyp8wJQTDqttWj9aocfgTIrn35WAt30qslREbD
oXL5Lk30IRIOP4+J81erRpsTLtfHgxswv9Oj+zd1JCqPv+BTM2jCCNWGU3TZ
/eAYK/ji9d8SkDM8Y36Uqwa47LpFnizXINFw+9NxlVLMm//+WEi7AphnlI+d
xJ1z+cjNujBMAvfIJ01iGU1A0ZkREfzyDhYqrdu0rZTh/cisf7td6pDrnKmM
gWgABPRd6l4bVwc+76w/M5v5yF5QYnoyLRVioXeqr5+IDG8Vv3fcSoGb6nHc
ZnvrQWqAtkP/eyJS3M+7r7/hCXJ+wRpWrCQwpaJxzPIkIUnyiLDjdB7qqHxx
PHksDBfreL720ZSDwCPv2lrxcqC7OvKpZISE5SuNS/L6LVD/i26djs8D5cSl
+m15vcBa7Fcic2knLm3/O+1iWQHzk3PLqbpWyJhjxJpCCIEI+Rcfj5WX4gGb
gcK9RvXoYhw1c7W/HQN+arx+suci7Mt6L7hvNwFMnFqViJTd0PL1BJ18xmGs
7RccOChqifN+o7X7uWwx+/GHO1ITrJBWffxdu64KzByh+6mSeA5EftSkjzMf
gV8B907ffGiAHdf1JBu6GPBzYMBRWksj2O9Zb+zxRBfXrLijJNpM4bWLocWR
l4CPBAOe/qdzEpkYnp93k1CGJ0tqj3cd1sSZcpqjbTqX4MK6gt8TFhPImUgR
eE7LAiTNwCp2GUN8r3vaMFt0q+uETphDi+d5eBoq2lTEr4hM1smn96Ry4ZDO
tomslQmk3yig752Vw3q11RPSjGeB7FH53YWGF0NSdFz85SQwM+a8zRGCNpwz
l7u1YjqM1UM5Z/dkuYP+hzvpgWQyOkx9bViQJKK3gKjioeBCZDxXRpadbQSe
Dq2vmSntcH3Xnb38HO2QOiy1pVMzgIe3+5BNrB6Tgmzp/r1rQI2XT28Xy7SA
d1eXnUgWGXNck2rL15vhbOj+7FKzRHR+yvqb40s9yvP9rZI26EA/W68HF3+R
8Cx/bWmDfSN69HHG+LSQ4S7Z/sNHBxIQpfLifQvTMT5C3mrquBWI77a8eeff
HVD4ISU+/7sdchN0xg9/JsAz2yD9yzGPgK7ZVXlUsBB9bnjrzIaRkYr88k+O
ABEb5Xur6elboFx993bMQBkYCJzY3mxxBC65enthRhf8Iie32BU7DKL7O9T+
3S3G1f1cH48v1MPqVytPO4ZuWAj8EpvMWw0k6x/O4TxdUBv6cNjjYR6E6Hev
SY8UYJNFjGCVaxtIEbdeO1nvzBl8TxpfqUavKFcf4vVUoCg079TWi4RMVVeX
+WISinO8Vw6ZdMefeqZ7kseaUMJQNmUzPwr/mqsUt10lYmKdkVTy8RogHoo3
mTUsxIiOx/Z3ThAhJrP42fB3hICnqTE21fZQZ3tQoDS3F2ne1bTccWtCmZTA
WmqbVsx7xcf6y7EFtb5Sc1X5VaLUuUmfYP/7EMX+wGWjIwL75c2cut93IYUU
hVd7pxWKK/lJuPfHoxGHQsHCRj0qkQSbomUt8a2HhFCCfxvyFvy5GXSlAvnm
Si0PT5fApi1l9efuRrgYciaZ0Y4AlW+4qTLf1OEThxueB5TI8KD1V/mRX0lw
P82D99meVri/wTLZ7xwJbNbn73vaB2GWbqq6v2EDen3wO1BRHocbn+gKWPeR
wcI0smXuXBt8UqWB2Y4cGBa2XvMWqoWwMbueCyczkLzp/zzEvhz1zBU9RctT
kQz7Mve6yyOpSUZUXLAB1f+sM859IaAD1eTxNpu7mAU61zmca0CKXnTdpKAV
pOR/bDsZhGL51tbvhtIUsBtj079F04xTdOr+2oOloPpbwOuyew5YuMfqp4i0
QHHKjGhP4j10vzYY6ydLQJuSbfOOnZxUK0rVZaiug6urKCq8FAD5MrnWfoqF
qCbw+tV95V7c3f3sZ+j3bODvzmyJ6M6D1zdceFuuFaEiM4dh4Vwl7jOQTg/W
SAWxhYQGI7OHyL6/oU7/bRkKbBymqu8tQnJAvWfNriLMyPQ5JzOYgjO2lPea
W5KQUay/R8ipBfiyf5k+XMoCgzwS67JvMSbXnk57eyoNow7Y7T8j1g36nd8P
rT0kQ8BgyaHqATdU4DrkdiuLgFfe6p8WDQyEoH1WBmGX2uBYXO4b0YpIlPh+
s5UmvxJNTtXzWU8Ewda5qcHMuyEwzhvhvVLXgFZDY2N3iy3AnOExT11dDYyr
x8QWO9eCiK1FgzYUQbzlriLREy7APHSAm44qCwJIFp7B9AFw4nASs+18LXK8
le1/lBIM+W273OzDA/HC7Y3iE2tRaCevIw+yXdBUddeaTBMHZ7U+lD+/Xoov
Eo9QdsUmAM/EmoXp8wAkGBW9EnlZBCz3A9nqZoNAN6mwJLg3DyU5ffXbn1fj
ve3Vw7fXCaBysPLZHHcpQoqxuaFpETQRfnUedWiF+HidSb1JbzhRdDma4WUV
SsXzao0R7mPKhydHjGoz0cAkhK14WxPG1mS48hQSMFypxcGWOhPPNpyl/c+8
BRfN6IQZ/wzgSLp3fMbpDLjKqS84w5AD602F3Nasbbhu8kr36rdgxPJvTcfI
iTCp/WJPV643bl777VGWEg/qGsac/54QkCJs+UKuvRR45olGHHMnYdqFLlEJ
hULsXG8XzPichxsZg9c4qsl4lMt8Cg0zsFh8vfMBywPo5G1JFOtJwY4kjURa
1mQIEGiWTKjswRM5q9ctFlPQ7nhMd5fejr88Ovzs5c0CPHGOimua9yFGJbOs
aq7WQeXHD5zsCklwq8HzComuG5Q/s+0doWjDEq5UNmJ2Peb8Pm4jVloM6de0
x2tzZHFcUvDXVy49WDek3J8qeQn3j+mWsu+9hNeOP/+ieFgFKsUcNtejz2GP
+BFCm+FJ9J21Mi/gNgbjY0015s9EYWwo6d5E7VlUTmm4xL+miqJxProSI/wY
x87pKi+khvX6f/77M2GAcsWRSboWQrChQv1y/b4MuBOLJEMc9uLEnuqpjz66
2C484cpYJICLn+/ztqlz4dkImU9H95uhoOxj4zp7Pch+Qul0/bg0RBy6e7ES
TiDVGM2/+Bts+OuWZtwIQRPPjj0b06g5hV+/da1M8qnA18+VmvYuJjCRWLen
K+4CrtSVhNM/GcBdFDUntJUK0UxcoTl+fwcOpVRKDe7JQfvqA6/T6gjw5uvJ
EeqVVmhR8WSfSnsM2rmes4E7fei5uPrW734DXoZzfmrtIZhU+6HKSHAQ2p5z
mXrT18OAocl82mgmdGIsbQpfOXx5Y6HltmcA7izKhjvJkOGNaFaTmFYpjLyc
PuvfGodkkXtCshEt6Lnwg0KZXA1VtQ9DWoo7sV7xbVhahiV6rVbZMolEYsrs
+FlFbAHb7yJWnIeasEPvvthJqQSgsFCcYcptw0vDK6qW0z0gpTsV5HskBX/n
PfZXO96MvhDQ4Xg6HvgDPr/yiawEk+fTlMq8IeD1I+uU1aNktGs+91VlgIhR
zSF9334mQXVfolPq6H1UZaJnZnjRjqtmQewVo9VY/Z717u3IAmjWJ77k5w2H
2I0h7fo2IqpKCnRSnM4Bc2mnQkfVNjBjGAovtilB57jf6oVjcRDVAfRV4elQ
sKfBLAzjMPH7o9VELEanJYYvzEFNuMSzMK2XbQWWRfqO++kIOE+Yndm3no8x
UGtqv5CPL9Kr3k/EuEPE+3ElHkciFJJYp0+nVMNNj/uqHqKtcGMoRYJNYidv
xBcrR8XzdvKZ6DpUR0C9E1/doq6VYm/cAYv2ny1YK95+jR1b8FUFn5URdyUc
XRc4qa6YipvvjJ44fa9HK66UkY2kIQg4yCAifskH/Zt3tYeWECHzVJ6zPTMB
w1rYnlAFEHB411JUYmIzUPFtmWn/JELBmxEfl416SHzL9y40oB0itM51E2j9
0eBi62atXi5QXOP/pdNcjuJ3C5M4OsrgwoavV11AK8iNb57jsGyAid2BicHH
utA6MLqlJ2CHQ7g1897zZyLdwIZwUmoDPt3nGXpVKx2bDhrHHpRuhu0k4++j
lmSM3PymwpBVjYEMn/gVDtXD3I2Nn3vmwsG6u8mTxicZ+kiWlwl3G4GhQUzh
UIYThK3dS2PiLoMx69m3+yqI8EmBYrmIsRCXGfvXkhVaUEdpbo4+uAMrX3Zs
vVvqwtHXXInBuf1wPtDXc6szCaaM+Dhpt+qB4XMGYW0sChl0igtsBfLgr//p
j40tJAjXYIzUuVGI5iT9VEvHanS6/0Peia0Qh3vyHHUfpMIP272NdE0ZILUw
n86bmQZCz//4n0uuwErmCxVbt8ng08j2Z69DATrQfjhtGl6PfRR2QyFbxWCf
wEJMeIiw/+/vROX/qrHUxwB4isOgf11PoVI9BcmRcmrNZvewfTCzr3IoESop
T/vQcJWAwC5hh/KQR+ApldIhEN8ADK57h4WKNCBkdI422rADn+u3dPL+rQTu
oUdCNnM12E7IPvtquQqDHcp9UmPr8IbPtYNr7GQUvCT94J5VPcp+8lZ7IxuP
ZNdG/uREW1i9ymGQJtUMR46uLgRQEaBHYYFjXbUBd6sYzQU9CcFMkY9jjk/r
8GxvRKVRUCakZKr39Q4UgcSoLCurQD3qcAoG/deUg4++Xj8pVFKGbNEcEXt6
S1GePFFhZVgOi5f2atlkPASpKKeYhG9+OLcSoPUpKRudPdwYck/fgRZDI0uO
1iosv+m+rB2QDFYMv/+OHryI2XZ6/tRsLvhN+N7D/dXRwHPtksD9lVy4JWBS
Pz6civu1xqRrwqqRPFRGKevpiAa36jXenYrFBU1xN/p3gUirmThneyYLbayu
cRKH60BnabuDYbZkZ44yPbszmpAqb+7XUeNCsLpMebRWwhfZfU8q1B4kQtcm
BZ3RkSxcyIfPun9bQS+RJ6XgWSP0Pblm9fMNEbaL6PeKzeVjpgp3QKBSK9T4
SCgnl9fjjwUO2Uur7pCSpH3ZcU87NAu76yVd6YUnlgmSW9zt8Pug0QxnZz3k
s8pRTP/zgr1jqyKzm7mgMq3meUy3Gfu8hYlNyU04Pyuq3TObD6kk/4G9V/Ih
KTf8XoZLBSoxf34mVtmIRIrPj6UfkiB5t+FBhfvlYBJ0vIHCNx9/OOVt57Il
4eIW4zPGk9wwbyjwIITEiak5z7Q03ykD+Z8Xj8fKcei/auL98xns8OTeWhc1
AbCSs5XjdVOBgAsPlUtCVhQDBKw5UpmFYOG5y7aOgCU0vfhw//PR0+g4LaPq
8vYi9lTRnRATMcWHv7kDbA9ehcImmbCkS1uKSrFeJKLbKTiplPzxtoAS7l1e
u1LFKQcKtY9XVntUgeXDB97zF9Xgz0h+e+CyDPSlbAQ9/WgITJzvsjU+7PQv
lfdVEw4pLDwb1hhVI4zyH1s+Ul5kgfVAoiL9yQuoJLi32PGCNLLelBpUqDXA
6vzhxuf+6vAn9afYhOMjlLZw6ZLdaMWPybs+r52ox/JgSaYrcTdgMjFlZmNf
P2zZ9jnMh1aA4LUmbpv5PqCN7546eTcFE++Sjx3W6IQQ6pP3bHULUOS/yU+l
Dc3w7cXaKf9SIto4eTu/5h+AYOZbBYt+NnDjAa+VQjwBG9M8Zo52dUM318Pu
Oq52mBqlrz73tRhc3x9eKxANA9Z1hQ/qhelgpLLy3noyA+JP2venb7hB331q
c5OiRmzxekPd86sDsxNaZEu521F2flJlM4wE4nkhVR7hZGxK+NL92KAft6xa
Ll+xyoS3w+kMGaJDqFmTdyHwdhne+c4XXO1WB7e7ZG5ErJNAlyaDni6lBFgo
fp0+t4BwhzpmNxJacfVFm6vGUAMcMt0d7K/SBAcU6uOWl4JAqoDygoxXN+b6
mna3O7fArc/K/qsHqlA/VXKD6OyFnMHl9O+o2tAn48w9r3e9oOcczBa1k0cU
Mnc1/D6chTccagJRzUSsjpB9cWCiB72Gi5c9MuMhOfTdyMkxEvi+YhA6FZ6J
YeuaKw69bSjsp/10k58Ikvod+DuCALsuJivKrVdDp+/DBFa6Nty+Ky5yfzof
2ZZcOadUcyGmtfr1Qf5S2LpEo7UQnY8fT8Q4WKzkosHnp4cstRqAkun3j2Ug
QHKrZUbc0QDM73/oU/3tDkg8W0/bq5GNo3KMZtG3quE1U8Yt58FmVPb24ZCj
CwRmNe0h3mUSKk7SR8ru64VXXDZVhSeLUXrULEX4WDV6cNfbk3b23xdAuSRq
SkSeuONxy5TNMEg5WMd0OxkpBVIJdeGNO75FlNC4SEDR0+ci5Z+1oSx9s1Lh
IAke6F93Wd0ugvSbco9XL4QiFcVYls/NPihPmWtvvdeIyW28YRt/CSDaevJi
qUcO+OpFSTsNt0HA2tzxoIWTwKNa8ujNUh3UJbnxDZ0jYcynbufBu2S8+MXZ
gctgp7dtwgwsGeowV4tCY9AlCUykLsgf8K2HZOe90lLa5VBURsyYcNi5N5xd
Sz3aAW32p44fFc8H0dAG64wn1aDHd2Can1CGhpdER8ikDHx1h59weqEYeSKG
GagyLiPJ6Evx9vUkuHqhOf+IeA2+4KfNvUgMwq8HfgZ3+efiwPW6VqsruOMr
AvJZZkSU6p5V92ENwvYzlYenuZLQ6nhDrwLXbWg5S1RhN2hC/TRLDpuiYiic
i3gXPF8JKRn3PIaOJYLLf2EUU3YFaECX95J9IRdl/tKONC0QML788fk9NGHA
l9B3noYvDClcdOaToslgwG+2nfPPAeWWmiMOsyZB1G0lCyv6JmiY590ovF0L
Dj0PZHRqS7EunomjrpQEZDDTGxWxhsmUheetMu0QLzEylpfvBgNK+z9vj1Vg
fmz46aUMQxD1dNbxs0hErzJRJba/YSjvnDO+f5GMmX2RDB/Gy5Hr98IzjcIa
JHIw6YSxktBgV8mMLBQj2xjOnj2chsT/fvXP3KmD8rOKEhyWZdigQW2wcLsC
WJsaX0x8TcXfGUVMq8GlQOluk9s21wQOU3kSHJEEpF3ipvyvNgTrh1u6c0uS
sCnZbkLniB2ULJtOZe+pA3HGA0c1l5PxO7ydRcEa7Hhl9f6RcBJIRV6R6Wh+
gD4nX+tomOaCx/U4+Hm9CDkYKxjYdZLBa3ypuPygDSr9Mz7Oq/wAeqoqSmR3
8oJgvyv+6Olc+O+I6oXOxECg4NYjHLulDj/IlMb7BtIxPe8OU2pFD3hrlKgs
6bchxdrXfBMXCcjvW6ih1TeA0fonpi+MG3Hxv0H2H8ttaCjOqVY1Vw9KYjkD
e/SdkfmbqUxybgFo/PFkeUZHBD1LmdR5PwJuyX36VCBfj7GS1IlzO/MVf/w3
uaf/Hg5muD2ffRUJI8MT/LHZ/jhGJuvu0gSYchHdzSJfCu4jfSW55bnobMHr
vdnsAmTDss1n3flg1xDMOEYKAN2zzzij+itAzsW9nm2yHt4brhScWSiC7kXb
iAuSxZic+e3BTMxZDDjFwyevToP1cdedWsp0Qe7XSkjOS2Ew7OF/n96tDC8G
Bxf6cvXw4BMh7cYweeDz8DDZp6mF8e8aTgdf4EbxK20SvziUoO/meavVPECJ
9l8TLxz0QS928RF3nSJcr83lWI7Uw9aCh0mO6ZcgLZTm2NVWdbjjtnnIKd4A
9/LdD/1IdwKdqZz+aP7RRA8UOnyvWQqi3N+M9epfxIop5bFX7haYz80f1/hb
CdOHq17IZJvirgPjga379fGaYLJpwiFZ8KLWOSIZIoWK6u+lB2aU0PBo7ImT
HlfwW7uDJ+E9PXA2el74+WEQc8XO1znyIF6eE29dbrUGx4Cr1uGpVaBHodZ9
LL0fDFQHze9qRcGRmx2hviME6PMV37UHG/CRzxhXzINHILlmeuf0k0bc29bw
qe5DO9JR1dTYWndjurXW4VybYsjn1BEOSy6DvzmpAjfau1F0/svlXQyVWDv3
nSu6HvH2i0cEJvsuZFz5kWvk3Qhsh+849zxtRTJdelObVzxapacS9/Mnggij
/UFmrU5ctBaZv2beiSOiDX7PKvLA68uQRwPfPczWHjpz5lIHiBNiZbSSa/FW
7tOm37616P9R88eX49UYY2z/TPJhBo4V7FnR27bHzIeWdDcp+qCnuMo52rsJ
HjUHquukDaLS2JGrXR0+2Kdp5xOhkICj4G4ePdCMH/Tl990L6MbqWS3C3hN1
cKFrme7hqzZcNs9r7JnvBq6j/Qnkmligkhzc/u9rLSb8uyxd/r0SuETqGHJc
vOCfUaAVqzUJ1E+czyfVNKJoum8Pb0MdyNeduG5lVY6FmxbhwVm1OFUlI9vy
owClj6gaXaSuR/UgNkWerwSkmX36wFkjHHK7+w3fLZPx0SFv+ZD6ephi3/22
5G4BVJVybolGVaFGpdBvCi03CL64rj3cQkQms+yG5Mw8YKypfB90OxuPDSd/
f8BMhqph4sff5jcgPeKVWpYIGb/1iLqlSgSCchJL/9q9JriaYt6x7laPctcK
rx8S8IekmPSK/SHe8D6O0VVgkwBnMys6tB8S8QWjGWvyZX8csars+TzejZNf
VUPdi+qw0HVd7S0hCZzJxRnh6b5w8aCQ6JWWsp08jAoTeBIChANZ514NVMKa
/NtTbT3WYClvVGp7KBWe7fr4gTKoGOVEbsy+DatBSqrc9KmGHa567bN1e6gU
yaeGf76jEsIvv/bvqhHJht0hnu8KbHf8PO3RWoJbARArFDkOmKZDbjwneTWc
BJckbr8/WJiBy7tVTK8VhcA7Pxm9+FdEoJIfOs3yMxN11vdcG+rOhPYb95wT
IgOAOnMzw/JbCb52Dw19nF+Ot8/cvWUgXA03coQ7Ne9lQS6Y1J/PrII09xE7
BdX7UJzBeGlrowKMAku0DLADmg5IJ7se2OFyIealRNsaLLlXdeTYFU/cNPvT
uErqxJR6agXaVyn4Lbhr0XrFBjr0dLu+sgajnJGyoObYFXz+dtqX+TIZVMsq
Z/xiErAsuF2UebkZX60GuFEKJKPT9e1cDXZXjGe5ILSwnIhZhJ8Wdp2tQK+Y
dM+33wP1mVhzOqkbwTNDpruNIgf4ZHnf0vgVopM15+fzq1VY1eGm30+D8Kk5
VErFvhkSf55+EZk0AFdIPk37YxJAwOqW2fnnDyDD+xPRsK4aDzhcdiaNFuMh
OosxqqMuGLXv0DaFYw8kE81sSujb0I/b32pBIw9s/ly2f1RdC81U7t4HTyej
UPQt6QcxxfhWkMh5brYGmN+7/HPPzQd5nvMsAY6pUC1ue155TxpmJTGYd8S3
AiWP/H+9+qG4GLt9n908F7o0Hly/K1iPU4+MveLVCnHhp+7Ry8ppwEW5T7j9
+kMY/xmr0P6RAAdqK5rvuZGBl+2N8VupZGCSPix0818PKLSwf0sTrYBfGyFX
VHbyR4KDQsH1ewdQBkT8qXRpQjlLbzdiUAM2nUKN0pICNIx3r2V+V4Mtnqc1
CXMBEBae90LGmoDJ9Qfd3b0bcCPiSdNV5WKQu+EqrFgajkHK5O7N1TIUPNm+
KdVYAR2HP1f/youG/RW0zHWZJfjnaWXc6D4yVmZL6Bv2B6HqLbl8sQYSDH+h
XX893Yx+OQ7pFLxFeKV4I471WTpsmF4W3JxrxU368fbVT8W4V+T76Ovch+AW
IXzEPboBDDLbOpsjAtCVaslkSzkTg3TH9h1hLcSoXVu1vPs68JYjzzi9SAbm
awaYvvGIh9qscy/3DJTDA032UK2tctyV8eP10loQKMUHirzui4Ebf7UHeHwJ
GBaxW6x/phj9N+/YTVrXwWgJ775XIQYYs3ZzsZDnLBzfdo0ZyDwNc67q460T
+vgmtTZ0OvMi8sClaqlkLSj/7/QDfzNd/Ou5kZFK4IT4LTby+U1uTFdt++Xu
rAoPRwUZDhWfwvJMs1r3IjHk6V76IyK90hXwgIvb/sys4kXb3anXw64hjW6F
nfDKCXQYDZm7y34WGCcULtk0yoG3cnARr5MpUAw8QDUyFbT8fOPFNXoV/h5Z
YbVo0cC/fKbLv1S08cTt9Cdm6zJgl/ePKuOMHo5T/VO1CbyIlAObIbt+iOCx
2Ud69bQKSK8xo5+4aQAs0upsRYbaaJrOqlDv1YMUhn60Bzb6MLPWe2ButQW2
mOmKba1K4F72ilwSNkAnldM/zWul+N6PT2Fk5/46j0VTrt7uQXlRqQ9UcWGg
kqMrY7bYgcun7mRrz5ExxYnt36WKZlRTz1LibBlEVqrc+hKLHf4LGbZSVB+E
06bm+4+UkKCTM0ZyZed9edxI18nf1YgCzPUSf8pJ4Hxx0OCocw3y8uyVygtv
xEBO74mTAj1Yzlv/cp9YJzBn9XHGBibAAkdwt2ELCakK3SYfzDXhda2nls2u
LaiYkBHgJEWA1KsbbjPjtdjH785xVjAWbBtnDJ3FSFCx3tlO+EICuKegFr+r
EzO4XtHbzjZBKVXXpeboalicXT3T05GD55KtO14u5YPR+n6nGctGIJPZYnSp
TsIB5yjL0qYy/JF1JLIvowLJ1Le4D/B3Iy1J08SW1IhND55r7WFqwFVv2oDj
V9Jw1vbkjRLBbBwa81zdeyABPrl6EdrHc7FX7nr+HrFsLGEt5RRJyQdj5oNu
uzvrocz12x8FGxJ2yOauiQyTYcnmeLDonkjI35wI347Kh3wX3dQXTuHoFZHu
6jLvCQOmzn6bVrXIc99ytj6mAyx2xQ48rqsE0w63v9M1Vej+3aI3jaEKmmOG
Nm7NeWFTp/6ZWZ4MvKJyZHgNu4BxZtHXXigNbv/e/ygyLxfSw9f87BVbUFRQ
/5S8TSEqxjSzeKlnowRjGbXkUAdMFmpRrS3FwhluCo24WySIJ9kJ9zJFQ8Ih
7/AS90K8Uxv8eVy7A4X7DocE/SMh0/cIpq3FdiDzXM9sPWWN5ay3T5557IzG
xk4inxfiwDn7U13aBxt0JomHLcl1wWXm2uPN5FKwGk80mlx7iDOv3/22yMgH
Wh775P536fhR+b6L+4EO5C5s3jtO14mm/SnuwlEEKD7dUdnl3wpn95UU5Ozk
nHn0FYrIxkasWg64t3akBLgyGKfs5u0xrPXIoXnNVJxbiM9OP1UMTG4vXm/S
loLWbElxoHkeyN0uO6LuVYOyGqM3PIr7sV719FmdOzv9nSEn+di3CZ6vq5yt
9iZiSNlRxf/GY2D+Ap2fhXAT/Mlf8Y7ir0QR+3vTErZpGKDFzMUfGo928tQb
G7k7vCSmE32SKRfPz5fps/xsg8pyTpUXVh1Qf2q9858+Ga0MKOkTSdlAlRhl
7xMfiCOHi/VhNQkWpK6N/hGogJI2vpmlcx04RsVgwnKzCO8f5lQKVmkDbrYD
1b9V4+HWojfzxUMJYBEiX2EmkAu7qGZfPHYnYtrip1+eR8ug/+PRHze80+Hu
6HLgi539H/2XSfn4OBHLCdPTZ+hIUGOsKrf8qhYs+RwvM7IRUeKhcF6d0Y4d
XtCOE72RhPFrzwRXsmyAwuZFqH+SA8pX1OgdT0nF1NQRUaMT3UDwbD/wpr0C
O51GlNzkajHQIrJ02rEW3xzRlfL1LkJ39aDYb/y1QLJIZ+Y8XwG3/BxDWu9l
wJ+i2fM24zvv883DkMbmXJxItiKzXctAncNvDM2JnShUJP1U5lQ+aObQzBhc
zQR+DR2mmlthKP1ce8FjnAg9yPJTj60VvdfHoh4caoWIoXQvF10SCkn5+X43
7sW/Q09vZganoZju4puDLEW4mt4VFstdDG+W7i522TRDPb+xSzx3E/5HdYgw
YF6JFCy/qBz4PUBvaMKZcL0Dy88XR8rYO2Ncndwx7ydloJW4TdtyTh4YmUs0
LrVUQcFqz6zsuVJQ91twO5VUjWPPxn2pFC0gTuH6C7JUA0zFTWzTzbkih91j
Ksa/O77d+Sn/s6sTKLJ8a0q8UoGVPxjEfk5kgFp34TEFySLoqF0wObFWijQy
jk/IH5sxpvJT4FirPabvr+G2e+UM2Y7v3FVc2/Cbywm5MMN7+Fvgut8M2Qd6
zvCOXTyaB6R2M32JQ3mQ22Bv/Nw6GWyt0wc5aStx2c5qoUIqDs5uhl////8D
3Rf4hFg+eUCAf2phRDo7/gUxtfP0zaAxbu0sf3urS+6ab+eNciU4XT5g4XtV
E+vFH8Qm7ReFxNKBscMTF5BtxrYpf8QEs97R2F3/bgCKvoPvg07JAb1z1uRs
xU4/fWHwMbl5ARu8VOvG3VWg+YlvTk0WH+6L9HNMoL+Mds+1mJ2MzmC6N39p
UjEDaAi/v2PcfRGotIrMDAQ3FefC7HdzeWiA5Pd1AXWeU/gt/J1EdjA7WGQ3
H2xNPo8NV+OZJNXOQmbaa4v6HA0khylHraao4OTN4A8MHFq4/GjSfPOyNIYU
jGQpWcvCcjPvDZdMOZBr41o/WKIO3Lle1W7tKii9d6/VtTAy1o2aW1AN9WJZ
r7e6hHwfdLbJlfnaFAA1Pqr1Ws/HnE55IWe/Aqz+OmWRMtiKPDUDghdHOzE2
IKmbsbUfFX9RfTl+ioCFHrexmkSE6esqb8ugDZ9T9+A1/Qbc5F02N9FrR2KU
+g+r8UqI8pPZrcboi6UvGmmv6PUD6bHafHB7LzDWXXg6wVGyw6VnxP37i7G/
ukf8flAXaAXfbmqZIaIshz3xslohGMiezcjqJOFE7ZXRaYV8vLVevpr5qhLN
WjUEwk/ZAA3PyLy9SzcSNQ+MBja1ocXfOEnu8lww2P164dFEFn573Mcv5xIE
qsY/mmwYEDKZGj7f+FGEC0edB490FMLH64fvvl6tgOzXeVVRS4W4zIQOlrvI
KC7xNll/Vy6utOsaUT8vxu0391kK9jaC/+fJ9svMzSgnWRW8CJGw+F7U69v+
VrATaSQR/kvDl5eDRy/LtQPtlh45zKsY6nfZjHCtJeG9C66jOj3l8Gvt4MX/
kluw7mbaS52SWiw/thKn9jUE78QuZA2Z1aGvq2HFzz/5yM5CuPKDMg8E1sZZ
wnHHUyoFb9V9bELy29epmTF38X1ODcfz5kHwM1EWCrmUCO3HxGmldjhirtk4
Qsy3Do0KVhrSwstR0SGG5SxmYe0BO9oxFxLSu1k739SuR1UmCXzZ1oR/wiTH
9puRIbby8uSvR7Gw50pIjFNiA2osc1JTUNehqEj3S+Wd7zs/OMuQQO8HNjcU
/Re/NqBSZHkkn1kwaLjcu2hmlQxGUQKf88eLwfnY7pHQnfWbizUmxTXl8JxK
3EjxQCksftjH2SubDQy72VjOL4dDTF1ae351NXx7nKf9VSwQ5uk/hnNsNqHb
zPAZFVIU0F5bkVIWGQYta5uS8dwCHDr9pOEGTQYGWDc9vtPXji5HHEV7+esx
gUm62Hq4DPQudcz+6SyBBJH4z4FFrRApbHz+gGMWLr9Rqn2wuxG7A7L0mX41
44xELMtzLhJutvAE5wyHwsPgKAO51jAsFhH4NVdTjcv0XLV3p0ogSq/GO/lI
NhTtcbQcuVoAlQ8/f9Dhzwe7tKA7r0PJCA++FKrvSoaQ+yW9kRdyIJjtk3Vb
Sj7qtN4h/LPtBJbjgSavqvKgZWagQO9uIpQuuM6OxXRCgoCk+Y3QKnzYDIWm
++qxjL8wm0euCkIpK5aP7sylA9kNedyjgKCUQDLL7oQWK/EPr7caIWamS+Dx
HgI+8x+xEKbPx38FN8sXBh/CaTOxz27h5VDvbZf66jUZE3mVjwEjEde9rLxd
HFPxZcOLpw2WYWjiJfiiYqsZ7239pzpvWolOlfBGzbYdp+/rOC5cIIPc298j
N46lIGkvb7/O4kNkKbcRqgxtBK7fb3nLg0JhGf5ev0F7Ax4LaH1U3KrDidv+
wTH02Tii9ikhz4CMF6RkI+Y98oCtZLbBklyAsrdt+F8xpuFUSvVTdqMq5Fc3
VR7PrMSVyLmfXQpkcP72n5irIwHcUwRsh50JOPRGjit6VyHSCjDSDak2ouOp
mPoUoRQMDFEaUzchQNT34fvLkyUgNXRRSf2qOXi9M6nTno6CgAsdGr5c0chk
b/f8pHsuEkPdI742poOhhpSt14c83FVUf7nXvQ6vOTy++sWjFpki0VPwSQ0w
rKXenRnogYDege/Ec3HopqZhtXQ8E6e0e9sq7ApQOoDhxweHGuRi7WVxvhu0
0yMP3xzQCoDNl3Q/5wMyIaDnknFx5BGgNV+6EpqTAK1Wx1YPvyjEfP8v2/2+
XvApiSHKjCsBBoLupYZiMFK9vNhMVRSGg0U6fEyNDeD/yJknIKMQWLKO3uF5
XQHyqk+rqGZ2erXW1PXlj3AQ17zlGhHSD55sB49fX6nDmGKtG7tUCiBZiPvr
WlcBvg/kuPyFrQmGPssq0cuX46pYLeNT9USQPmleMKrXCwmzU1OS3E1wx+GK
4Zx8IUq8WRL09gqA7HwOJunpZORkZJJvqKoAni2ChRXpW5conaB/gYQq3HnX
tOxeYYjxTFY3ud9pAo1Ds3dpqgQGDOqeO3/ip+LicBUMtanjS+m3ZtUpF1DN
wPb01041/C/AplZsv9oOD3W1+n5Ug4UPulL5qWZwy7ja0UJZH1OUnIMs3KVg
5k1oF6uEPn60uCc973cevzpJjMsvHkWR4n9f/5w2xpTGhc5wy9O4OnfKXkvm
PAoIla8wUsvgVQuZPaqRQjDMYpDd5qABi3nh8sKn6eCWy8CPY6tSkDPt71IT
qYO/FKuYz5yRwkRtexe/aW1QjWMsOqSlDMl84Spi1EbApBv1uLanDT1orSeW
1hErY7l/T8k+AqW3EikSYheh8FliNfOvXpy8PkLJVhgKMoH0ncQ0Ai6eCc/r
6EkCDzXx/bXPuzGSWfAdNJZizKn7isEKA7ASajrGPNuA88rRMfuMycAuJpfu
xkjANHPraekjfRix0pe+3t2OIu3CPDbcXchDp5n2bE8+UPBt+b06p4+2Y2pO
116WYHXzOePQUxWQGTc+8WdXFRq4mByJOlIADAd+L23MR4DjfodiY6dcXJ8Q
v2crWwohjb31i25E+OBkl36V9AgoSM+4CwpFoW7cwSYmPgtppm7Jygk0QnTZ
3qbaK4XooyRM95a9BfdePGTUHpsIQU0ZWufNiiGaxepw43g7LvR+2PfWpAGt
6gZhjvgA2PyC9l8JaIeAyot92hkp6L3nPO1NSiKu8pwZJ5+uAf2QPUZ8/4pg
2Nteg7G9AcQebzWLsZSgLvuLG6KGSWD9+MexleleqMtRmuL3JGJt0oMOavka
XOJ3p8margEZiW9Vf+M7IMBkUbJ45AEqnjdO8/qvDgOcHfUsE4nIVZlpE/0l
F7hOmyq+PtYBzrH0teXbl/BFjWw6QdwLFBjfVUi3NWDh5H8/zxlUgo5EcJHR
lyuw+e2AdPmuejRWpd33i74M+rSzeJwS+sB5Q8L4TagxLlIGxqRoVcNb4brC
yeUMPIa9kQvuXfBbd/C7ziwJo9KqPSR7GyHAIy9AobEHzpqMR0ksliI5+8f9
U+92PKLN5IWwUCeWZwXO25enAKXwFqVU/BAmDD7/Ye+XBneiTzBU09QAd29h
B520NRbXV5g7V5RAcF7NzV6LfOi7faqdfTsRpVuMucMflSOTQzut58F7MPUu
+nUIexF+M8v/vutfAygVTihneaZBD6OMUqh6Os4w9XZLGIUjT+7uL4dsdnxM
/Y51xWMSVmtMeDlSdkLPni9U+k0VmHTYw7WVthEGDMKfe8f3odC6gY3TdBPG
d/e7PKyLwcSAguUblh1wZm5y12GDBmy+NR5S8yEFdFnIl/M1m1Hixi0tV694
+C/4e0f081r44aIrrXM1Azqj3BNWRVvRWNd9tWaHNxRPl0Z7TlSBocqo7UFS
KWhTP15L3drJRze7zTw9EdzYtYTJLpn41DOvIDgtGrYbZNlL2LvRqd6Gg+Fw
MQS8zutuVEhChsstPgtR8UDXTd/TQN8ImZGO+57rtWLlyaecNCYF2EM0ivVT
SANaAQcdjrhyxBN2A5zaVTg5JCVxO23nvpxqeFY3eqCH96vANnsD9DRpNU3/
6oOfT39vab+txbZqVzGh3WTMo1mjaxKPhZ+FeYZpPwshqmXW03GlGNWKhQ4u
HOnAAy8+aKlLl4JrSXPOnHkJOgwZ3jw2noAChaMfisvcsFYyT8htXwXWMx56
YKAXBVe4iXM+n6pAnv64brlmAfiRbwuWvnmItn96JAus6uGFY+C5Qr8kjBZx
UJLIzMd09UGt10EJwGp7bM3KoAjZHC6YPD6VB+f+RJq3E9Lggs+5zDrHdNR3
D7vweXcx3Ciem9oIKYB8cm6jh1sF3G3nEpDd6UG1u88mffYUgHixcELPuRq0
jTA41jPshebdh6UZfXvhPx8beam1OnzubElulCdi7pM2Ib/RKvjR83gFWmtQ
Ros2cLAgAIJO//O/1lqOSk0tv831yqD2y8Kf5Z31qZEWe7Zj1pDJUpKZaVWG
HjqG35n6otDb0UJQ/kwFWtDtG6+JLobgazav2CsKsXHff3WfhwhwLYuflSIi
CUTrCH91H+bC3Z6w3suB7Zj0l7fY+XYdkCSaKrITEuHxKG0Onq5EER92T4um
FOhzYpgQ882EL7ekKxKSi3COzkqdEBSETIZ/RHJHQkCu8lpY/tdUJP7Z72Po
TUZltqJxzqxKkG6Z2fCc9AflW8vHX1jcx0K7rzRE3kJI7qbdoJ8gQEhosLbk
5TKc/3P2yx2ZEHAMZClVtK9BKupPRj6HC0Fe99qVrp9EFLfjuX7guxbkb1ka
9x6X3cnVKNOYi1fAwP6k7NnXWlBFCqNxLr2IPOJImSxkCFKXumWqvMVRiW/6
d1GjPFLw/Pr039eTuLh6LGGB1gAesfG4zj3XQj6SiRltkyFO57aLd6yoANNt
d869Aifxkf+Z/5a0jkLmq9oPJlKG4JJkfksw3BCo9313r2XXAasx1q3DhZIw
30f9TLXcGOdL6jxDCQKgJFPR7WUijBoiq/TqnIbonMYd/HW/PiQHx0wQaU1Q
Tp0v/Y2GMlBs1/GcmFIDclpkmfYhSQh4Nr2j9zwQ5d7FqHlTC8X37HMLDm/G
sZ+FjEX0Haha3xr8s+4RsD49O7kfEnElxVs+0H0YL+rxLx01KwKVxse15u+L
gGBwSEuw7xHUHbotETDYCX+uGuTySiSC+9wnips1YdjDeIKxyqAeHT+zmBf+
qoU2imDZ3z3pQJatnuFRtIHhi1Wrok3t+N7x9nEf+xakONB8XVMpEnt+BZiN
vmzAP23DlbTOXXDfjvapzFgf+tz3+6xGKATaqKS6qgGEb1+s5JzYA2BL61c/
0bsZ3ul0PO1zq8fMjBZQcBlC18a26jva1bi4+x3b7kIC6I1eVZ84RUIZNomV
+H1NUByjWOs6S8CB4T7Kpbo0jKIUE1hZSIayr+nuzQwl8CDb6ZNVfBvY7WF8
6+dWCaPr/ZFFac1IsdLB4j5ExBTNTAfpvC5oLfK7vssnGaXDXybk/yUB38I2
jfZsLnDm5dBGUZeCrd4c9cHIbBARK7GlbsyGZYXfsx1qzWixLsk+0RyEZyeu
e73cnQ4dxQG3s34FwAUVTUW1k234dChiabWlFV48r9++URqDKePOuydkyfD+
xZ0p5dhufO9ZtmxzrhwYPje/5YyzQS8mn+UXhqEwlvXmNx6NwZnP7cOvuTMQ
48uikyzj0aJo161OykakpmQOvlbXhuXPKQoX2cMhM1H67RW7NFTqitTiY2rG
Fl0rGrOUENRJoD51wjodpzyvfeKmCUKymtqKZnwgpt2/uWj5wwz3BQU96ezq
gRZ607SB0CBsCppU8yHlQ0rhi3JBzlZU8kYrRpaHOBO92FJ7mbTTc+XvD+3d
4Z3jP24PMNegsM3jXE7bemwamd7WMcnB9Ai6M4y2BBzza+Lb32ILSswLoYR3
WtD/6+vMeFktmMj4GrR/TsTctFjyf/k778xKoVTlARl5/vukWtmOaLy4xFZ5
iASa1+5lPKRoQQJku/q6luIkPmtZKvfFo9UNY9ZhZPim6Q3vPt7Hfr8laq3V
HHydunmNVpuIrMfOJPnmpOB4SOrx4zIVsNtMu4BAJKLuWulZa7MCJKGsu7ua
JwqbDlI/rCGjleP+MwKtvhhMMTTWEZqLJq6mb9/9rYfFUfP3m6fD0OrZz848
pnAYsDN+y0vfiPGulCczEtzww+SDNfnhEvjr11RXxRsP7FqpnInqQWiqqyEv
0E4Aiuh/HXpPbwE+iNejj2xFg0e2/5JGnGB9f/Vv3tIM8KCyO1AQ0IzP6qYz
0rpKoeZ4S+iBi2VYz3uKhimnHDh05CkHU90wgPqGJ+WRVnh2V7u05iQRh/fH
6F8aiUcnap7H16q9kFWmXbiM3AQzwXqSCd7xKBe8URpLCED+O2dpxFITQLgu
Q+XR43YwikFfy+F6oHuXFMmf0IkJ62r0BXbeeFNY8Jvot0IoMnxzktIgHxsY
TCw1DjRi39MHY9d+3IXEouP/o+hMw6F82zg8SZZKiUT+QlFJKqRkqUtRlhDK
VlkSQiVZokL2fd93Y98ZY+zLNfY1IUklCVEqJFsh77wf58Nzz/08x/27fud5
zBwzIbcUaHnduTUwOS8SSbsagkX2k7Fyzyd127lwIO8T8R/y8ISstED3lDPF
0Puzfa7YogyWV9Mdqko8UZhZKe5IAIJoRpfbQGUljNE5nZhVj0H10Xw5Kosb
qJg8+KxVnYmd0+xTh62yUOFfIz/vw2wU/pT4z9sxDkldlg46v5uQ2hfbVKV3
CANnXfhaDClAZb51jG4xAOzVOYXIY2ng2Gm+06a1EBf31X4ekS3AmPlHJemS
jWhNaaScL25Eg6cMDjKxJLioTzVtpeU7/PE9ydX2TPws/SKxUpYC7hfT8i66
kJHveMCAZHYZ0A2NRRD/lKH6T9d9ts+JKCOQyBSU5IbXdhsdrH1TiX/zhi0O
L9TB9OV5cysLIgxsaO4ddCsGNjjqlpGcgcTVsykSVQmgfrFsadynCgw7bOSZ
vAuQOdHDLNYpAYW/e7KslyVBtth1wVcsmdhg99+Vh4/zoFxQXPGWfCkMV2Wx
FasiMNHII2QlDM71JyhPzpaAkudntcv3aTx/7AjvdjsHnP+PI/n8zyS42h53
VUCmEpL6T0nvOUeBwcaAU7grG7m2/j0kQq+BbmfX+47L8uPYqRPGAY+vIYEg
liZRmtfgxHOkTkH2Aozt4FM6MHERCbLWlz83nATirTFG3TFRlDOs7ThzXgrk
wppTHejO0HgnamqLnDzIESO3WZ85hetbiUrDHBfBme15xVNvJeQ+2Rq3b1gL
J8ZEtk3tlELl6C1vI8Z1gWG8xMDzy2kg3JDp5FI6C26V4eO6HAdB7g62ClwR
BKqMnnpZ/Rkk3HRwbCyUAVFmS/OMIwfR7cWthi+vmZCJzLBjB1EHCFvSRqi3
pYCaUvGAX1ARCaHb6vc1XYRzj1uCXJZ0sJ0yPxQjn4fv1l5eFlwpR227M4c/
7m0EfnexIBZKMiYubHk329SCrRcvmC6eK4dNNbtKeTcyrJHYVZQ0OsCz+bQ7
q1MvmHNLc9NbO8JuFfsrXfxNqHVr66/LkVloE6gu3vysFDslxm+qLfvA230b
o6ZZjeA8cPN2XXkW6FxjmRT5Qnt97veblNlG8LO7NjAVXI2TxIDakMlIePE4
PiKJtxFsT60um1IKgJhebavxNggXOvcnhVHrcacUlxvbcBW8Pt7zc5RUAWfH
sk7NspPhPoOStF84Gb4WTP4cdimCslXevaOyWTT0qxrcqAmAq/VtwkOeYeBm
wcrxX5sSUjz1b61E1MK3w9m6Torl+CzlcI19bjUSr3ypGP8WBW503qxcg7nA
lhXJnCCRhh2xD1+EL0YjRWjg5SG7Gix/qrFq41GFzyZV6rizErHgoKDErz1F
uPOzHOHozSz8uKiUOFWUi2/i7hSp/63HoovNlU+ckpDAFFerdvEuqBA+pO1K
aQXTvpI9R07GYZKryvsM2WL04/iXbx9H8891n3113PZ42+uMGH26OQj7lJzQ
+ErrYXPrXVtHi3D4kSBXYBYtN78OLnFNVEGb8aXpRMkanAvPWLg3SHv/TOsn
PMey0Ur1v8E8zSLA0WC6qW2t0JyhonT4QAYWXrI6bSUciVWMcdcnBElQXsZq
yiLXCMYDWorGyS+AurKouLz2EPWr7NluZtHyPvrykNNKHfonLde0erRiCPnm
8lWGCrA5m74rmsMJuq5aiRloBiGX/kWSBzUTciWmm607U4Cad4i8HuoCwxn3
mB+O28FsxGHPYRr/kooecr/3uo90Sw53l9hz8Y7zhq5fcjUemG9rt/BuwsLh
07uUzz7Ca3KrB81f+oLaazbXHcQsnDvmwRR+xAM1VHR1/wS34dRqiXrNi3qw
5vPjulkbCWG7H7Fv6BYjm1QRY990LpgkzNldYMsBGzHp7rAjj3D/euU5S8EK
jBsmiX8MyUTKg/b3HXqxSEN4+gTmAiB3lgwk+lOQ6u5zMVHMBs0epQUnxIRi
6GzP2HRfCX6//kOtrqkC97J+G2TQy0aJa1ceVT4h4gmjPOfIHd1oaZDKVvMv
Gld1WexTT5KwVNX1R6h4GX4vlSVWNtbhepKW6bhfGGZ9VrdkGE/B7pcBjM+v
BYC0aXuc6lAd3jlUerrDPhOfXewy2KTmAZHT3+pQaxF0uIysdM2H4cmyVx9G
P6XD8FU1tgzrXHRk4si7HF2Dsg9Zjy9+S4T63ZoLmn6l6Pmn6DbThSxM3vZs
osPWF46MprqLaBMxqPeNmbVqMXqZTWy2tGXjAYOCfrZTBcD844my6Dki3vT7
yHN+Mxd5JajHyUxR4M2w5+lRO09wPfKwh/lZLlbNbt6QehYLHLOsvV+iibBt
KpVTQd8frojl3N+aFA/2gj0uh4qe4f4wU1F+k3TgCtJ+wqpGwoZ1910RIwko
2C7W5lpdi7IOXT+OXYgBhZsyuSQ3LzxVqNFmW0pB97V+/XmPPGB6cF6F8P0x
eswvnZIP8gXpqHUtLc50JPz+zFl6zw/5969bZvcnIyWurJ41rBC4uMkeu8uC
QCnu87ct14rB8j+m+W/p+ZjMcZ6RZ4x2HuOf+Y1OB2Cf3ZtPhRGVMHc432h3
XC667S0VFLNMAe2hmXnO6jog+3y+WUCyQc88SyfHfjIKPRxRdheLwybeDybP
isthSlZoe3t0MB7yOx7vfSkDTh7WSMm+FQZ717r2eH4n4tU9h03CijMx211T
kfldAUQ94l96fMIG5bteJayppwHvjgXumY0i/K/sfp9pXgTGpjnWbpjWodOb
aqlGC1+aHxR0m4Y+gTevkkK3/qtEAeJAA3GIjBVUU1eh6VrQUxz5Eq1sCZKn
lZVkamOhPpy6dIu2DhdFzsfQKxzbjoUVnP6eAbLv3GS8LHNAUyOGke5ZJopy
0P35uFGKekUO2i7eGbB46J2FfnMUKDUvuE41JiAx/eRgtaIiut28Pvf9vDS4
We+zm/lA6yMNevrGW/MX+ppyXv8GQSBsin+vX70Mclt3EgUOXkCC1dM/w16A
hAMM0X/zRYBAGtqtWHIRqELmapwCwkh9FvdR8N4ZtEfVi5dE+THMrP/JE2F9
mHx/8hcOSaHJ6h0FiT5J4GZuPagipYO9pdWuuuFaQNWWaH0YrYREz2lWyYca
IDfj3mAzCkAw4Re1FBNAQt+1qjf67OjWaM7pGHQJCS/qusZp3kgwVXs6UKwM
biIOorKt+uhW0yH0hywKhKMDc26XJFHuvGzIRsYh5B5PFOQ18EPhB/91MSSp
QEXGQEfJRhLWU0bEr1pW48RL0YkzubTndN3QrncXGaZDTm/xSmzAr4WBOcx0
lfApXLmxTSYXTfoZbHwuUsHzj7kJ+/8/JzZdLC552Y6iEQneM0QX8Kyw04y+
UYpyl7brFnDqgOLg+V/8tZ0wsvXQ7ZtmTXhD0OnHe6dYmOU5U9L6lgqpGVf/
DbzsBJa59xLn6crh9+AXtfHAVrjSwB0cSszAkZ0eNnslMzE3mp5h42YD3rFk
Z8qpQ2C+1hxdzFCEVV85vb1rfKD1qNz9IQYqxj4QyTj5sh4CKZ+WVpcQTBs6
u32d83F2g2H5/WASCrwx1Aq81YRJb/UHt01F4aCC3PgKiQQWu4gHcLAKhr/u
20k+XoymEkT5ExYdYNww7HDwixfUReuF1Lxvx9vhqYkPIorQ8MSDRzkW//fF
r1fGGrNxR/AO40jzKuxxHdC98obGadF7BhNOVeDToV2fzuRUQ4fp2U9pRslI
pTf9mG9ARNZb2QaGu1OQ5/Tt6ME2EszXefT4nXmBdPJrUtzGGbD2929C9Ewx
HLIWKIg56olrLg+qGr5XYo3aiX13jdOQpzDAbW44DTo4Hhp23MsFgnycuU1R
DXpJFS3yUKKB/8ubk3TquiB659mC0WVPWPWoTLRSzAWnF6cH999JgUpSs19q
VzokBDvrsbGng/L0lSHqhSwQuqMQqGAeimPnLz0V5S/C+TF6Y8djWcix2Gbc
bJeMb8R81vy/p8GXBtbLixaFEPbrOZu+QTasX6g7EhVRAB1iCi0zTTFYRX58
iFsuAk68brGvl8hGnYfVK+bbs0Gw8LWlCLMtdrB2vNHLJ+HJmkBGnukqEODu
o+dyyEfUfbnue6kW1dMPVfT2UeCGfsuGjehTPGTyo2AjuBYOqA5/SIvMBPPE
hSVXsVK08pR4kzlegcY60tyt793RaSzvkXIjBaJ0C1O3yyaDc8LNMpJ3BIZt
6m3QqWTAOIGFcqogFZ7K9kg59pLR87nnt1U2P2y4wZ3UK16Morv7csfd7kPf
1pTjKcUpIJd7oM6OLgfTjwZyqJ1Jxb2DUmquu4uQTp1t743UJBRdL1FWZHQG
1uTePonlF1Bfn+cp8S8CSA07TMm2d3As56Ro9HsD4DVc/XeyPRWc5IU6uAXT
QL1dLJfdIR0O/gpU2NKYDpcSVRr5jpOhUFr+7fY8X5jSNb2FtzKxJk2d3P6q
CpaLdjmdqarDjqy0E8268TgtZRI5zEjE3PjSE59qU+D2T+ZOJZlY5LdWfVnj
Yo/FCZoXTOMzwbf3qOJ90SYo+3pHhi6EDINF215FnLsPB15v321IjgaRcMbD
ig8ckOohC+WVzig90tbpsKscBEaldx0YjUOXWb91HELcs0zHy2bmjm2GVhk8
YRmg50yvsFe8EDiebrreP05GHSeuqb02kXBShvWXlkMhPGtlfOQqVIbEvQeU
PZW1MZ17R2TEiSeYEmWJ+LIQ8s/wv7GVrgC+4Qtd50+Q4DBH+ROBGAomVmiV
fySlQWgexyPpwHAc0d2qFDRaCfbSlL/KVHfQ5yQvxpuRgCwbHGrwPQipccok
zZLnWCs/Y7VyLRnia/LH7Y6V46F9WhwH/ybh+NiZoLlPlZBte47IdyYQZuzM
U85E1sG5I8bWbI6NSHCdMGRtZkHnjYqSG5YF6PMHDr51cwOvn5V27Huzkfuw
XfHkz3JU0d3cZaxaADWzXWFK81VoGqwc/cepGK4IXVBK6srDQgXH+i8HSnDn
Se6Ftp48lCEeqrh+vhaSsWskcn8efr53OYhFOQ6IV5p2pF7MALeOoa0LIhTs
atHN6DuTjja4vL1veyE+Pner70aAPwalLVqe2ELEXuMau4CXCCx5xowf2nOQ
hXhGoYi7Cl9OW4evpERDLX3NZNrvSpAnPae3oXlLBEfZ9jvqbfjDqsRnN6EE
9N/s7nE4RQXy5jSHyOcM7Gvx7CbN2qKN4Yn2kHUiEqJvp+ZJqwMhLsnx9VGa
T3X0rlu20QMhetNgmqIONk933Ug9roAED7axF/Sn0U2no/ThV1l0UxCU22Gk
AgSzhj16zpLgdmdXmFolrYcsDA5JnNYFt8VbnC94RYEix1EWKKBJ4/vSC+2J
cphicCTX7ro2aJS9PMv1YAf2HRuvP7xJu/7wN5W6W7SeW3S3O7B6C+WerF9g
mFcFQs0e2X26vEgIZuRL5lBGN31B+euHldEp2fXkdztNJERs/vKlXgKCuVuV
cz8PEGz7V7ZayCJh3X3qiBCtJxXaRbL4xHBsre24kYsiVhVcuX5ZOhIDt7E5
7DO9iRfOZQgeDc3AwHSHbGtTKv6dPvJ2IaocqGpJ/H8z6+Hgrrs7dTVa8fr5
W2cKGSrB7fK/6sG1UIwbqnTezG8GLuGo4krOGFzU8olVcm1Fcgm/ksHZTPRy
XOWaqMmCKrrQ3YGHC3DN6Pfch9wO0PB893K9Jxm/7rkhW1ydAyFNGo/62FuB
ottDaXxfAz3kC6YWfHko2LkWOOBJAYvbWhov5u2A4PepqD5WEZ1id2wuBkRA
aGonwx1jEposudyNMojArUrtRmzOeWBGEjmZUJkNJKUNl979RLByVHN5m0JF
uVBWwxdcTWhcaDK2dPUOag2L8j7fSQUnVf0J3rEnQPhwf8aqvAkPJbVo61xJ
hMHMzzvucVdBk7ChsqN0Mxp38+XWCrijTmLMFgtyHTyjt+qOpPE42cD9mpBF
O1wJSKncbKyCE3XTtyMDKMDdVkdpiqRdt9l6z/5PPGhUDK2JNMejdaISXY0q
ERc97Rok1zyA7Y3fndbNKNDb/fGWkVEw1H6IbaOLL8Pw5BNLn0SqMX9bauTY
UiTk5q44KwoGYZXZuuF/V3whVKjHatYgCo4fXHcyyc3EB66pyfXREWg+pVsw
7huOwdltNihK87G3dt4h6zFwYvW82MVz6TAaq7jawJyIKtqNU9eSU1H0XPKX
7jhdoF6JeHYtPgOZz3Pnpf2k5er371FWWSq++B1eNpxDxlzHobekRy4wppAR
sfN1Prg8FebjFyyCupvC+55sRMKNEYIuw68aNJ3a88W7IwT1pnUfa0onY76k
gLBhbBUQ8m6uLonXgtIr40PtOlH4LNXcdNqQiqbIrKx7JA5COeZ0TOSzkUex
iYvBqBGXX2LVq1BX0IsctNFgLwemxyozb3lN4N4VJb4DgSSI6JeTfPWXDD9i
xBWrfOqQN0fScwtfEURv7azcO/MC6DXXZn96xsGcMFNQxgEHyOr8SeiW8gSd
l4ymP/STQe3D4ELTUQoQBOdLf6YRwevH1qcm+rT7LFPeneeUgwSza1vjIAfG
7Jwv3LxUiHsjF8b+TIbDuaXLH0/JmkGY6o3TVoR4pP9+IONDTS3SBbA9DKT1
uc+fKhYjY180rt/gic56AaID/hUzIy/w/NLS41LFaiBe466UuVMO20aPTT68
F45VI8PWiS7h+ONAhehsfSC+dw947WKYiTnW0oYRXvGQZML7Xb+xBvWGpXU0
hB/jg25PBWpuA7z37uRc2+eDtTPznRyJOeC19E35UL8naFc8pRRYVIK7x9Mg
nZ+pOO4y9rWCOwJG/Q3HsyKJ4N2lxCy1Ix87VGbciz8RkfxiTPKTAQV0yiY9
1FyIuK6uE2j9tQbT3358XOyXj2sfrrDHnA3Apj1bF/3JROR3ZmipuRMJTOLJ
Ia49USh9rExFozYZrz9VSnNOK4L2+xeWn22Nh+boygpR/1jc6S+dObilHCYv
u2NeRSywH7UtgmOJsI+VWH3yFwl5emqeiH10g8LPR/Rqj6RDhjhR5TZrCbZP
/i3IOZ0BSUcNLWuuqqJM010eeb9s1I/majvWVwrrn0t17FlSwThqqm+7Tzrs
ESVd/SaSAXz/HfJTqngO92WVPr9LaIIuiVT10EuZuJTQmaJUW4h6XWeO1UU3
gUbDNrmP6r4QG8dhtI2uGvLVzUfzd+SCyOeHga3TFbDXj2NaLjcNRyTFBRUE
o3Ep+5U8S48jCrtuUIT2VuDUyaFzXAa+cDpSePTkYjm0tc447l5sBd/dNYOx
FhXokuLuPKYdAyrmftfTpBphxW8uULWoFRpnrskIvGyCKy5D32xTa5Dc2hN4
IbwAri6pM304TYKC/R/WS/TawNbgyKm/P4KRk+Xg4RWhDOg+83dXvmgGJn+S
PspRQuMx642LT52IcHu+qiTfLQ9GVAp/z/7NgLEW2b0njGyx4MSlmLmL5aAh
bpk7NxoOns7TTAEFWXDu+Ke67gBfTKf45hldLoQW8cChXRRbGOPsvXXyjwbN
69hmF7ZeAQKdEfv+WEUg0PN/kFS6APzjjA6uO5WRMHblwUVuWk8dsbrU/kMO
CVM9itLHZGjeWB/kq3wO3O6+Wue7q4dubUMY6HURCRvCKxP3ziP/rXv2T8/s
wnl5meSfxhpQeCKTazJbE+uOTnlrd8viZD+TdO6Z2yBH6nsRn07z0MsTW9NV
jgFBIa7gnQfNU6cKHdIYlVDuZkz9SXU9IGxbur+DQxHckl+OkV9eRoKG5sfI
7PkGwnDi0rdHh4CQ70GJPSgN1Dm5CznetPsSdXi56ktb1/rgvFKmBBg7H31g
hAGYxOowGvrKCW/8PF79UCgbqzrNzQ/xtuDjAbEIRRo3cU1r8D7tpsLNfY3p
jlGt6PNtWf6ffg4QEgR8NxNNcSczuEaINcM+IZKpKnspmDXmro22NiCrtd4n
rTckJHx0PPJ1LBi+7tzfL76XhHJfhe7nOWXBybnyavOD6Ui8EqK67JuC73tM
dYRHUnAonI1U0V2FDHuiihdEKmHhgNwbz/paZDqVe6u6KBoW6tuGOq2iMaXb
vZLzVwUQXLoiFjJy8bzpNbrFBTK8OSJkYbq9AMIz507ZcnZA9kNHDu9lMtJZ
eK4HDjWhoMV7r49GaTDQ9ftywcssqLiid0yNPwct/bOPPq3KAblvR3ktmJrh
/eKjKbu9DegbFXNj5/NiiHA8jm22iDdl5Lp7xahgtppoW/7CE0KTHyv4zJDw
Wp8j31OWRvRKvr+rSTgX5tYtbULj09Fuzz+Tn6zpoOG8/tZ1zR1XRqjeI1fb
4Bwr22D8rCuMyYkTX80EglD8OX2ObwF4ycllaESpEu8eYPPksYqDZ2cfBz3T
s8HAlM7e4z888PPCzpAhkWrgWvKXlrxtDekJe+Id9ubh4m6xHuH8fBq3VCqr
NleimE9V96ZSGlw61X9Z0oCMP/q6jQSCniPVgHy388MzGHlk+/jblzg4Yfs0
ZYA1Gw+g6qOl5/EoGlfC+2PyDv6qN3966Es24vLjhCK2UpjVNmObsQ8E+tbd
LfvbgsH54/6B1wEkWLwo8lOXsQoF86MUrzoXQMGb+w9kjdKhTl36Wc9eIvZt
eNsb/0qDv6VJ3miejt+fJtTKxyeA0JljUkc3FcCIYX1dpocM6/fTrLvO2UK+
mWhVkr8zbmd+sxEWUAUq8uEfY6JqUPBZ/q2RRxUo9LUl+/QKGel/lJtZPnLF
r5euHg/+k4WtOiVm5IVMiPGtOMBqXIo5YwrE57OlKFduzqderw+5TP1qZylp
MKpSu9N7ZwtO2jLzv8z2R1lLdaPoQZoXl8xq6HKWg+h2Vi0R/hLw1G/dLLte
hU9ec3qmfQwAkQdB09UHveHA3sSYleQ0oIyaPalootDWcb15LbwS9toIt+/n
p/VfS3ResGIzHAx956t2PAtz7dTcFibVsTMiQWyOIRztCSFPOAXI6NSsdVQ2
uAg4HvkZ8RwIh0alAK8LfPWgbx2u5aWejQ2FTOc95rMxg+X7n/P8iVDVMDFh
qGQPqm2OX9xeIEZ/6WRSasnGiAVesQscVBQ3TnHr/FIHzmtSVoE+iVB0SOoI
87tcvJQnmrc2SIZ/dKFEqXQibU79Uy7+4AnmlsWDMa0I1iZXlcKVo8Ew8dp6
+oov9sh4yjdvo4LqsOjQq+BE4GpXc04cCIXnKhJpd09FwuNI12lfhQQwZPxM
sG0rRcZOq0cwUgP1JFHzw3JRoAppWvKR2fg7UNzBtoyIu3O/Gz3gKAFdrwgf
42dUaJBL4umi8eCI+NGd1bVx0Ptmmf9XRwR8IKgNchXlQJ1HhF9YKY1HC46q
hsvpYJ1Cq4I9JRyc2pT+WRbVYf6O3/p8DPmQOb6f/yCfF21eyryrXTGFKq+r
L9451WPztNGnw0z5QLSXxhWHLjAwEnd5/ZgCateqr8mFZwLXALlti6kNitjp
+l3flYS5RUKqzuNhaOveKh0aXQPatUISw2zl+Kzq+VRKczW8fn9OaeVOGWoE
bt3x664i3nH94vadLQEqchs7Csjp8GLPtrCRgmqo2hL/L/NBAbge23e+OSQS
Bb7zsORQE+HsuKvYbr502PVibnXGuACD7iTNi1+qhHyPG1/FW0tRlilv9cKC
NzL06xsfEazAbs0veu8n0tHkPvOszq4KpL4Rf93OKAaZGnRhq9pNyMPur8h5
zQbTmEZGVN0b4S1TEUksIARtHvS9JdAOxv5KjjOGsVkg8t7si5dEJTBV//lv
oSwauqMFrZJEamAiheFJbUY58N59Of3jQi6K5MTlPIzJx67wszkv3hUj4dm9
RVd6cXSzOHDlVDzNCwluckdf2zYQVIG0X0sL3a6MREsDMxJEnI8zUPSRsKw0
0tfFDYTJ70/ffBUCuRMe8mxcGkC9y2dwrd8YqV0F+zK2qyGhT101p+YUXkmu
cg5aUAKhr/+kKd7GKPuenJVzTwGHdL86qz6k9ZO2xucm+huoFMVbP3T4OhKe
jmzKOtP6LIlQEzQhg4TetcP7PfmBsLPR/2ieIsodS2FR5bkDYbYmsx/eX6b5
n34rBy/NA5P9ChldzwKBS2vXeKgSEhzdItgKVZAgdHwj9z47uomf971oIIdD
O8cb/hz3QjOHLIVhiTT0SvkaEM+fjlyM1fvGL7ThCPlbrxZLCfyU+PDaXacO
kqcqr51zasOIyo5Fk/AIIKW/TI2oIUGDUND2a/1loDK6Zfrtv3r4aPXjUFAM
Gbv2nPDa0hmGNr5TdK7MNmC91T1ufpQCWvtMHIJlk5A/j3Pnjjh3COv9UHi8
OQfH6M/wiMh3Y5i866ylcQd26OmqCUhGoIMzbwqXbxOuqO/t3381B/Klt4vn
rmdDzNzpK7fK8kF6qyWfnl4p+nRdkXnDmQ4Wt8xSIa4A00ZLtrvJFgPhhnTV
SrIj1BKvM/TGl0HfT8vjvex34JUcIWcHlQyH6LrmVDNyIWi7C0Un1g+iPd/0
XvZLw5XkvQ82/xYBcanLMaPzOV7sqe5duVYLMV8rRdei83Fhf5bs/sJMHNBs
4xRubgKfmxVfFQRigHj2R7aNqza+bRx4/S+tEMUfaT5UcItBHUPLZefeNLyz
3uQpqduB5iuUx+WPC7HVP1c2hL4Mif4R3cecq0GBbNvqG9wE9O+FdBmmw+HH
F/Z1XRofxvK2K3ELVSOD/4Wc5xnpaC+Ux/r+fii4Thy6zi+VBb0cXbWRZkXo
8W+g87l9Gf7ZKH93c08LXuJzbdpSVw1ZxK1FJ9jiUOHJklDvsA9K5fHcu94f
hyxBeu073oZjWPoaa5KaMsTZT+Al50owaV8tjOHLA4VdnUV6WwvxkLa1dIJ/
OrrJ1qgGj5Nxu9p2u4rXhRjc/fuNjVw6SEioUhlLw/Bkx5dz11M98cHB/bOx
TEmQycYeEDLmDX0dE+abD8nwX32Koa18Dpyb7/07sz8DZuiMcgzpCzGOoyzx
vFUJishkCAfsCAb+C37/XU4Px4X6Vkvnw5kwfjujvHa1DDJWB7fGdofjFakF
xbhrmfhHyd+qwj0DeLW9rUKsk8Dv3ZbWq1+TMEpkLv1qfjF8f648KemeDkz9
LVuI01k4v9Tg9JXW3xWMpzK/59C42fvaQrlOEPR5V9f4HjWDTJWQ6uqzdaCS
JRH5Rp2E5Eopg1PEQjB0t9yy7zcZsxS6P3m8qID7IgVJ9HeKIPeezFep4gI4
8Ir17+k/gbDxXclwVzoZT5bu6KjizwLixfn1d7oGMFIflcHLQAFhbZfJp7vK
0d3+/MrgHy8YtbUMHjDIwScr2rISRpE4+ou8Rt1SDYTNHRULB2pB8tSY2buO
MLAfZAy+9i0b53WKlXluJON3LUchTrMydDJsYRjizobevbrW7wsSIVD/d2Zz
UALmnvygf3sIYXxdqFmnuBY9pOb+5Xi2Q8qOnLSXLfUIE7m++TKO2BvyPrrw
bBMaUxQjR37Hg0GKGll5LQlpOGzmfTwNMHhD4NN6EWxWi05GbiuHPzJqWSyP
kjGvRoqnQLsBOIRDjIXciSDTH9kcuExCbsNJatVQEAps5nJ89yDCu518HyWm
EqA1Vo7PiNICFr6zQbquNA+72SkoZGAIwh8yWDSKGuE7zEr946gAtrmVHtvz
MTB8JS+mwz0Ck31cDhjE5uMzrrg1k1cIz1/sChTbEgYfhneLZyo1oVZinHJQ
eiGOp/UIX9/MAJXPT/7NXqVCc+FSaejefDA8emWHy9NKlL96b+aQeCHulpCd
s3lTC1lOMWMTv3Ngnd6KEsdEgrORAZPDvk7Q9e7v1J2vTbh+2iHZ6GsUmI7F
lTkeKYGQsde9swaVYE91ntSMK8I9/AZ1XmzhqNPez+mfmwYJo15ey/o52FKo
e/bdXgr2E9XfPvBJgC1jY6Fl6nlQXD5zIYUShKxdoptJm/noq2Fv6vofGYyP
JC5W5hXg+A7TOHFiAupqPgn9cjUdITGH2TU/Dy9MSoqxE31Avd1r3bjXDNJ5
d4+/dXKBOlmhHXH7HuPwfcOsW+plOP8mqvkBXRgO2SV9T4hpwrXZfW0Df/LQ
b/m149j0M8ysGnrwS7oAdtq5BGd1JuL2OxIKlY456KrYbv+ikwjnXj13sDWP
AeM6nQtv1OTAzbCPmX+T5n2BIQ+sGqTA7U7Pzy9nVEHa7XU3m7QOuCVevZb9
4wYQjM+IOd353UC4LvVbKlUAbRIsrcTmTVCOaMvfPaMFbnLVEa///z2ZxvVb
HH9U0eCNqHYAgeaP0p5JLIbM8KLrfd92+xsg8u3Fmre2EoZ1nZ39piYNkzdF
uOaDFZH/h+yfvm80D+Q6abwbAAgsQ/LGjpdp/ee4+T1JEwhDQ5r7vVVh/rIw
I/mAHFJLxfzEBmle6mar6b+DGwkMFzcIssIo1zOaKFh3idbHYxAhxorUeW6u
zxFiMGHJfbhw3h4Z4Fw1fX8a/qL/+yFVJQnPuHw7I7m1C3ccsnjpb0GC7+9L
KRZ3aDm3Orw9rLoZRQnjxLKA5yja5iNZNVgAFobc/XqfQ5BJel9BkUwWwFb/
24UeBXjg6W3vZyfLQJQnKW5/kSfwC+/J1X+ZCzY55Ej2imbsG3xF591QDmHR
ebVBaRQI+cQ3E6TTgbfaXddULobj30KdHLe7FPTb3Z//j88Fk4UPJPXG5gNT
NGXUXKgUnqxSf/82SsTramoD8rxEENgxthWLiRDzK4Mn+Fcnru6Tes9Q1onG
d0uu7Us1xX2srp96+MshJISZ1KZfBfO7B9o5JBuRsShgN1cbCT2znn7SUS5B
o9Bzfxfia2jPk7HMR0wThDZ4h9tbszHdWCxR8RqtB5SsOPNdgiGWmt2gW5yE
5I3wxCSbKFQrMBZ+Z5sHjyl/SqZsiFiuXbPNsSgbDDpP6IW/qkTBDflBo39V
2Gv7aLJSrBMq4vma43IpwLP1Zuu+rmoQiX85K73sBoS6JELE9j2YtT66btib
i8Ljd2vjE8rxX4rmUJ9tNIy1Bvhrc/uh/jiZbjgzGkzzD2gf/1iGJrvPrfwo
pqACv9C2qM1y8Ox4Z1mn2gh9jTuCn4yUoduixj87mn8OrmhoyqjFYdUNSBbS
D4dmXdHbTAaZ6PKps65CuwiPkL6avJwqh9VRVuUO9kxI9RhuUYoORi5RfTsu
HiJ6Ssk6TChXwdeJkTyKAgnqA5tH3n/IhOQcxmdCsulgFD0Q6OxeAE4f90fw
M0RB5iM+C7XiMtBxlJu2aUqDy368E4XG+aiXdTMkfz4e41JTGX+Jp6Br/tdd
kokkIMz45+589QCjDB9p9XMi9ibmOlkq5uALo78OZP4MbBKflHLlfAaD0+Qi
cT4yuFV5ZP3UdIMF0yHp+R/pKJNSUi58own1foVw+rBkIsHcweJlxgkcj6H3
fqdEgr71NqaPLAloGMcWveRdDsWU8R4rSjKkLMcx7i8lY+ncf9bZovFwoH2P
0n47CpinW/UZ+8Zg4c/ndmP6ZdB2+VHuzrwMOCfAfHcPVwY63VNp9O+uQVKP
hefwowLUSBHLnd90xfev/H6s0rUj5apbyjJ9DBhS9Y+9sUasdzyStq22AdPf
xMRIuZfBwMXNCyHN6WD1+szK6981YKAl2lnjQ8bvnHH/MoSL4ayE2Z+4lBbs
O1J9dCcXGSPGuAKfnXoCw4mrRMvSGOgYOcL+/lgJ5A/lyXp1FWNcfJpjWF8x
8lR+un+0Iw1Vvt64OpYfhgfO/ZA+fZeIVg6van7Pl+MZ24gvxA59WGbUtxQY
eoRtml/kV4xKoXVCrNudL+3/v+E3ct0dIeBFdM/lm9Gg1q1XmswQhju4L+/e
xR0O5ga1jSX//39oj96IErFk9Nnq4TZQUEbzBybNLMs9wHRz+POJ0ViYjF26
ZTJfgl7/zv+Mq/LH1YyjHvQjMchAH68i+piM3MEut2xO56Dfeo+aPH0EvmLp
EH1Smweufu2Bj8XjkNvpXYIYXSZKXD/+gaclB1TXis6/exaOKnaH6r+aNoHH
jSmlV9vqsMozP+KNQhBad58e7buYib0f7SaGhkvAamjDf2w/zX/eGwv/x5yO
bxkZf8s8qMa7L8ayiuZJsFoQd6Be0RMMRMdbXmsnIVz4c0T/bxq0iFw5rHg7
Erexlo+0Xc0G32EPmUs/s+DYv8z7T7AGpX5x6qZZx2LLUvbvmswcqLG+n3vy
ZALM+LPee/KciryNEVUXP5IwpS7eUFycAt7xtpp+Rk3Id2rylLlOJX66+yVN
9ykJGP4xlbEs+YHlf9p3uw9VQNxEx/tGuzQQeRNTOKcXAHriSyemS8pgC0uv
XHKQN8wu8J++LEFGauIpdvFIB7hRc0VE8nEc8sz4Kv8Wz0BC7NWPTGah8PBu
hMi5CxVwE7M4Ygxp+0tqFVbTTIevfofnaplKUZTZs4QtOxkU/vSrr/1pgPHy
haYty5VAvXNR6/iPoyjntXwhlUUd3IJeMdmU0zztplaYDq88GrMZ9mqYCQNh
Knz5VIU46BF/dHff0gKnmOar20PuICFlzBTX+JFwRy9UOPA0uLV3sfNFyCB/
Zf8jKNOGxb1sN9N9zmPm0NOILl8tFH3Eeob9LSeS89lZ69fVYFNdObqmThNs
Oq9tjsbSemya89gun3Mop8GTmjB5AakxSdoF8TJIbf6UuuglD7Q5zSSXr4wd
W8fZhdqVgarKdG5c7CwSOl895Yi4AATiqnA4mQUJ9/RtHOilgeA/YzFhR9vP
eC9DbYU8jKn1flt+7ATHOgxXVDSzMO86cHBohGP7ztan04w9WN/9faZToRDc
Xv4JK98VByGnpMTFrjQjK4up+8OcQKDyrdPx2ifBhPzN4qh/dej2xq+VvzsT
t7yO4dUxLgcFufBrJvtyafuwj57tvIv8q78jF/WDcS/Z/dO3ohZcaP1Pevub
KghqK+UWqIzHMLHtZUGCobhy1TpmTToWa7zmRPdlNKHElfl7K/+VQUiDzVUV
gRaclfDPfldIxO1hP6neb5sxoecjng+sBqnLl83lDaqwzyZ3TFsuBwgiEb32
b7zwTLvfGu9BCrznuLlX+K07MNfzDjySbUQLy/MGwvfC0MuErOc3mguG1/8b
zPpbgWqfGooyiLT5WpHTtUX6Bhx68mdNaSsJ+NkOn45WKoZ3ZgcXhbdnIZfr
vYOr94thJ3+qaVUa7Xx/uX2dmuKFlsPX7z7qpMAN7ijzxNV8MJY5nt5okQJu
T7wPcp6PRIJh79LRn3JAvbrri4umJjCx9in9ZWzDxIK97Fxc0SgqptT/q64d
lxKXT5mdyIPhoIyoUzRejYnlFfOSS4aX20qI16SqoLR0PqJMrBhfl09Yf3ju
gWOPrMucvMLxYiyjq8LXbPQgWVn+6HLHHauZgVFaDdB29HxQ+bUgZEtToKpa
EWFErPO031A6Mulx3nHY9IaxF+91Eoa1MUy7gfDuVz1GdQRmNuZkYxi5klRS
fx8nbjTXM1wuh9o7a2e203zVmTtsQkneB3lkVoTUL3sB04vdPDZzEXBkK92L
bYxh4P4xopuakI6SK3G8z2lz6nVpeS39uXSQi3xC19F9FTs4joxOtQdAly7f
52Ny4eg2zJUfMAXIO1fQEi5LQUHlEL/dyU9QP0+7iv6VB1TB85Z0v2qMzhjd
IRVUg0qXhYT3aDuCg83PI4XCZDT0j+3RUSahyMF7FySelACvYIFaFWcVzAZU
shm9j4C2GsLksRoK9ClbHotsfYh7LNndxwVIOH91Y72jIRu9pG06S8oKUCTm
kX2DTDq+5Ou9Ln2qAqN1frF3PyzF1WmK7A7LdGR8F24+NovQ3rjl692xPGTY
tFz5vDUdh45RGNUHUjFCpb9zarUKZ5Ji3N8XUWFK3Gjbu0ASGl9lihRhKcWG
g/ctvryIhlvb9khtdSYjf2CmU23qM5TU2TM2frsQ5PrVvjjYvYDxtBsaL+kc
8Xo19XjyQjnOqER7vKxrhFZpWWO4WwTS+383B7GSMfDX3rHvIw1gn0+6sNOv
Etq+mSgs55FQhayxS4fGXV4eyTXSLFmQeoP17okdUXDS/YEz76wbSGwWPrbp
icermv3DT9LTUK6f/8lsmiNWSDhESTblYReT6GdmxhxoPlw6bcdKAtHdTT/c
l8pQLPdRWdZ2Wh6/G9ar15PhQYzcIQ39QnRNdus1Hc3C7Q+eqgr8TQbrSeHV
1okUJPo5TwQ+dMQ3x6UuZ7Y0QvZB7oipmSqch3Prx93KkLJv96ONGcSjDJJf
WI7U4u07Qac+jLjB12T3AQvWQrwU9SNahDcdfp574Zw1UQWGpokx3CQaDx7g
WrWeKUXBEI89LeV5MG6/s4FvNRx+WDD1P8pKgpLVSyxaDKXAk5Qvf9I+E4xv
W/el6Dih1/Ne9qSGKqhxFojLZa1Hsprl7SqbPBBS1GaV0k3Dgxrxa5pqJFBo
o4w4ssThmyTd/NuJFHgaFubpEERGa6EDx22j6kA9Ue2Vx2QRyAquf1fc3wIX
f/rfrckrxMxY5QN+9TFAfnd89OjFRCD4+h4KeeAPCY9PXIij5MO730Vetzmp
sNXyx6Txq2xw49N7WuOdAQ1sw/ofTiTCq2dFSvvTabk0PKsT9a4G1xyqteIF
ImEvoadf9UgZNPNd3ZMZXQ4d4zyHVx2y8D29OdPpM2loHOp+NCWyHkn1yU80
qyJQw5wyabPdHoznuS6kqeki768xOsHUGli3CiknaxWAyNsJc4kvpbi4NvWh
sTceSWZM63uKSDAoHNHUu6iF/I4CGrZfr6DGLdG6ndOGIMcQhQGS19E4z/35
BVeal/34qC0DImjsMVccvXwGxrQ+KZn9dxb4Fy/9t2eXMowxDhyW174IBGxc
qFHjAmr7O+eG1IMwYN60cnNKCXKr7+548F0e/9vnRLX9pgN7Z0R//3guisZT
BilH/rAj11XmIqmI40AYN7eJFTsKQpkxm586NZEIdbMarZJI1av4UjxyEeU2
DGxexl8EN6sv1WTN/8BNUvt7aR4dMvGuLfjs1AViRUMynLwNbr2+qvQtp0Gj
r3L17FMTIMz7PHunSw+SfVWOwRJeUKuYz/jleCbeNvbIkl+OgRv3Zk59o+tB
vowfHU4EMhQO9EtyCoSC1KSk55mZYrT6NyxYqZwDbozu8WqnbeFr+ZZJa/cm
JP6+HDfkmI4827aWBji3QNdBz99s00QUNWI2IfkFYMeL2W2/BOPAQj7r+Zla
xN/ZtneM5MugKsY90U2nFBX57h9nvtMEjQfXHVYu10GF2Mrq1v5KTGKLbPqc
TwbrfLnFG1YVaBMk9sxwuBoJzwset/P6o+gts5zglw+A60vl7y/kQDDOJao7
sSZBR0PpE2a6KBQdZTd6zWmLfvH11x/uCUXeB/XCf56HQ8zSzsy6BRpnll6/
kV8diIP2cylC+7rglPqByO9MPmBhJSohsacFRSysFbjJ6agUXZ/omBIH/F0P
nH6x+sNvru2Ky6OxWBcpHZUQkgjS6iPSTpZtON+7KPk1wRYC+J4KnwtpRja7
xdVR5SYcBaw7JFsArj+nM03CU1FuoOy1nRYZNRlL54T2N4A185Bj03gRhrQz
bzuz1ARtAxWrTHlNOK+nWgmqNRgTfUpuWt4CldC9b7TOD7/qZT++8LMK6nJf
MndyF8It+Pntuj4FZFbVmPv402BXR2Wo/+t80NnQ3v9xDtGJ3vX4ie95ILGd
Q9vsYA3UFpqFWtoFIv+OEh6V2gcgFOV7UrG5CIRiTX53RZSBzTW57dP7rcFC
wf6479tosJ7oi0JiPtyXDDosx+0PV364pAutBaNGYuXC00Rarthk7s7peWDt
tcNmbeOh+DfprGp7ZxLuTSu5t6xHweR2gdfmK2RIyWXONnv5BBT23dVzWAxD
PQcZ7qbPVDi73tYeuJYGot9srViWssFL6+ynA7urgbDjqUXXVx2Mk9RyN09w
gfdPlkrkpOOBGNKk5fJcE+gYbpKMmVOBlX5pNO10KMiuTiXMTj3BszluzQOn
ctE4489yZqM9TkpyTojTzoXz1YfEF+a+sEriXV8paYTnJifGEzoiUEvEZZFV
rAz2VO16IvOuBt7eMyXvbqP119but57qoVgVS1eQLZMJb6+YJb1iygXrgXE3
Yx9PcP7uimYMRJwy5t0vpJIHu//pbnlnTcaKwpM8H1NKYONB7e4svgakUFgP
qxqH4D2vs7BaG4f1WEIJcPZBwZaU1MOHc9HpOv1QnjsF6fdv/L6cWQQyaTe5
rF4mQ9rbgDltQUdQZS/t/eQbjP7w9NBbr/vwYPaXYHplEfhFa3eLLfnCWfH+
eb8D+cgvslkXepKIN1zlCu/M16IxNE+cLgzEK5mPqSPJeciT4TX/LasEnO+N
/trQzsPscUn3/sVMtM3U901haMbZjyXDf6vLQK+FhYtJOg7JvKv28pVpMBph
v81Hgwhr26VMYo5GotC2cNLpyGdoXJNm73rWATw9T+7LliLjiOLMvgXZXLQ4
m/1U07kEMh9rlLdcpwLhNDW4b1QKD2ZEUt8fRljplG3qi/FG66esxxVWIiD6
At8QH3MpRuxnVoqRK4YJnuV9G4dK4AjBcjLmYRXEH/tix6oeCwL1xkvEphoQ
F3jY76TRjhasQd+vctbguSafSOVRbfRhXm+gXy6Gr0VhvZNGZbjdzjwsPb0F
mPxd3GaiKyDm7C0XuiN1GMfkfXTczhGXKfv1f/WWgcJAs0eydQEQPpkVvLsS
jPC44Cexm4RRbIluv0eJOH9258LyTAiwndom4E7rGwW99O/qkWUw3B5p9rHU
D3fNj+TW15fjpbbK89eXKRD6Kqoi41QZikqPBTLSvMBd0fVa9pkYeLpVY1hp
IwmTvSMOWTsWQpzvMxy7QvP/bIaRY/+RMOOoUWFDcwGoq3G/KGLLhGP2/w1n
tfiDOM9We3/5dIjl+8Q3e7YS5fr6TXweWGJmyesPP2ncT9QSPmrvWABufqHF
Cg1heO5Jrc/ERBAwcknTax9vQBHDK/49c57wrJk5+OzfXJgce/+I63YxnJS2
vfWiggKZFXbjJi5UrCPOqQ9H0nolPaHxSDMHUE/ebLW3OwN+dIJxLKWaMPzv
E1n4oCQQJQ2CWW+oI1H4+EpLwQEQnWVRDhQQR7fR3+vxReeAuK0lXfaYGPZ4
1Ie8+qkIOu/5R7aEaiMhal3yF/NZfMZwxSH0xA34m/QxNZflIii/nUzO4ubH
sGcXN5a/cSKzhPlZ/VJlpC5JuMrXXUO33E9Kf/YLwHDYjfkbey8DcYdmr8bt
66ghbCTuXaOAVexMzEc4BIA6vbvd2JgLCFRKn0xV1AXC+C9GuYVLOLxxcVXH
WwvHFo7ky4loo97xWxM1HrK4zbr6wmsMA/1HG1MWtHzUrwbx/ddCBM9aq3n2
8G58qXNlq6ZtGVD36rwIEz8Ln98s/7crMwsW8/slBupoXO8cuaeD4IO4LirI
BWT86n1CjdRdAhExG6YJhm0Qvcavm7KFCCcrnhQbfaZx1NU7F7Plq2FYsU3p
5eVcdDGrGe2fKgZCjcNy53UKHmqJLxK81QvfRIpv+dqGYa6nWcqX2nrI+2Tj
70JNxIdJxLzHUulAGCmsu2rCRzvvvRW1YhXQxfjjdvfDaiT+Kullj05Fee8h
gSChaohhnOzo5m0BdsNP3xkTaL3JoOT9juc2DLllVmaTY2Ega+/dmC0pUEoQ
L9uhUYEWtpYPqb/DMErEvO5ujD+ql62nSDwm4rcKvnvZcRW4qB6n5mRJRqso
/9f0LvnI3T4YkE8qwR+xz2voxZ/AENVJOSWtA+J6TAMHb3agpZ7u355nmWDy
zO0Dn28VqPRE9K+5dCK/5CxLHjEIB8vrBYJLKmGSK/ORWJc/gJ7v5qhiHVjc
U1jchhHAfyTK3aQzEfhnGkV6TrvifKFjTaVGAxBsUTt/Mg+jHPI9gm4FIZPb
yUPs69Gwd+TUz838DCQKFN0iSJngQOzsiU1SMcZGd+lnEvzR9Lzpyq5LNji1
NZX+b0kaeDRZGR1IzUTv9DM3tipW4DUmQu4DHg8smt7voVteBQ8maxuFfvij
quTIXoWpGIz2XO8SDSGhzUvz7f3qeTDrP1rGcicHJe5ZSX+Ir8VVuS3R3FnB
8Elphd7tRDjuM77ZvS6aj12B7yNZMmj9erYyQnQhF6csl9gM9yPWa7jlPGjJ
waze4KJVznCo4Rq0/a2aiy0qHSmP5wqxZ6YgnEctDCOyHujLCYfDAd+fCgJr
saisyaAzaJiOvXJSggfHsrDlS2Cx/NFMZMv98S5sgjbnWW/FfvuRDk66Ydet
DO2QX+XlLmebMnww/9hbmCkMvhj4yrOll8KJxz0dOQ/SccZ7t3nSvxLs0Rme
2uYQC1OsCY2sND/oXGkbe0iMh3H9L5/67uTiAsuW2Tn3cojb7L+5YEjzj+YL
i+LKRehO3dkpsIUMyeqWxzz9KTAxZ7Uzc50EQ5k6ihVtgTCaOT2yPpcEvTNZ
kqG0fuHs0l/fR+OJGd5WmQShCtBP/as0btUEVYUnFFNe1WBu0eRXi0Jv5NlL
XRH7XYgv36XuuS+ei+0WZ1vnTpOQPurVoe+TFcDLUMo5SJvPQlfyDMQbSBBE
dzD0qFsFSHf3bUmaIkEIe/8NHvZUSJ/iLmF+TMF6UfpXqhQqXHsQ0TfUQML0
iwF6N9kyUeCJOul4Yz32hVwUY/sbBfukn/76TonDr38i7keblEPYbnTO+2kK
N35S/O/dtcXSfPKbVxqVuPfc8icZaxr/lSgtlPPmA9fR4soRWo+klEbnuO4o
BQ6t+POj/TQ/HPpjcOdcLgg1pnTsrqlFH1Lq0rntDvj8eec5Jq0atLH3Hd9J
KER+pgrCye4CdCMdqoi9y4F6+mYmQa1pYFo0sufIm1Lg9nEWnK8phsWJ7+QT
KWlw61RExf6BXDBWfyxZXJkHt36z6f7YVYdWOc5Rl+ricDL31Mg93SQQuN0t
rsIQAjyDoV2ip6k4qQpu7/4jItvN4LY6UgU4mC6zezST8FLBv7Qm2QwU5W6S
Ge6JA3XJHW27txfgfWHSPbm/MdCTNvw8dz8F2Xg8p6Va/MA0bkXtjBEZit8k
EzfOVaLppcs6E9/TMMSk0FhsJQC/qVemcVakINvF22ti++PQK6m6IEvBF25c
vLPs3E2BxsIQpxsbwWiSYfeF3bIFJ58v/hr9FYADdcZ+YwQyVhnqKI0bpSFd
m8mSCE8Svi/3mppKzgKuM/852lyi4vy6lvTPs0kwqbYpwfGmGL/Pdwod+S8G
ImfgYe2pDtAwmY6YCbSHnpiAWWHeKLz+Pmjxs1IBTop9KwvHckjybEz4+T+K
zsOdyv+N46dpJiWSEqmIhFCpcMvKTlaUVSRKGdlUNlnZexz72OMce9zHHiEr
oySVSkjEl5T08/sDns/1PJ9xv1+v67mu+3OLiNznLS5POVSgd/Mc51fZJjAt
TZB/yUGLi2fXb/LmXgDNqBm2g+dkIJz2uVYMpzow03+XsDm42CizoHyEh3IE
rZ+Pfb3EJQ86E+vzb3nkQGK2Z8iZXwk9r5q7Oz7bhsVH/jus/kkZ8weOKr2i
14W2v/G+xHPaIK37LHo/CGB/8/XPvx10gMa27waNtSLS2vkceWTOjS/POmxe
iNDF6scXBUqPSSFh8RezGjsdyjwOKWouYQVN5k3pGuFzyH1Uj3MuVBZGPp93
Z1q4Cvb4qfwi5zWcyjjY99yGGwhzRZ6jN9lQadff/tZFVWQ+EkFzNUsOG8VY
2XPjdDFI8/fYSno80Bq6DrWMZqHLjoXJaZ0SyKmcl3kp14v7XHletUzmgkP/
H68bUWk4c4V8M+VvI3iyFFFk398Gg6Sbp1zLosH0HRu9wYsyVNrBnbVrTzya
HGHyPy3XDG+ZdewVZ8qBmP+o/KJiHSbnGnBI7SxBbnohQ+fb1fD8Rnvp44JC
IIrtjuK76wSnZS+ze3llAU+1QZz5jufA+1dOF4qbofeE+unr7lRk9RocNhV8
BZ4fynozb7rC/VXOMtEjOaD8yqDrdnQ43jPcdlz/gDd+WW3QPYbVKMM7ekzG
MwqkGfYeodwsABtVzpr3ibnoefbzVJhjLBC1n3y6cWLLA6VK/p6rK0EqGNOb
mDtjyMHc3vNaJDx3jvlRQVoDNI24ae7zigVqOvPtH9gMB5zYT2lxhYPH8/fZ
d5jvgjHKbr58l4BP9n9Ybj5YjeZJPq+NLoXjrRdp1mf+VQCBx+HjyAdheA8E
WkpXE1icsjwwUbrlte0aCrs7Q/GSr2234Pdy7JR6xulC14SZVyXv3DFpwngo
lR194YeW4k7FGRQPWBL2MU2yoOKGKyvfulkw3M4Kc1gRJMJ3PjruoB95IGBz
bGbzRA1k/LV8tis4GsOHbSIUZeuBff+vlomGUujrmPvn/bEFJQhEtYHJOjjA
+c96bKgMfpFoTtZfckXCPam1lavKmOKiUtY7V4dTPW22NRbJ8IZ99fjQ23Bo
KPtzJ2YEoSjSgUDQJsGBXQKZQZv1WPxOVa9my/NmNLgMzh9IxpXSC7T/HfAG
BWxZvnw4HVTuvfSu7c0F1ZfhwiEzZLRyqT90xbQcdpxbmTm2lgXs3Mvrc9Wl
KFeyLcFosBp5bSVZfvmFwbQhLd99azLOFngd+F1WhNz/Oh48cQ2HqePRcZdE
SqAzfykjeMQJFQ2c5p5v8bND+LYVja11OG29a9/ksh/ujIr06X8eieLFgXkn
GLNwD2fCiM1lMirRLBYpmZWgd4PB8TMGTbhrGwXb95ZiHNsTM78XjbguugtT
D8TgfuJ/fs8MSDDJpqntKu205U+vW57fjoQzUaGkHSfz4bwJw7QPNRyev1m2
O9aWC1ri+RbHC7Kw+9a+Xx62CWi5si7En1ODrRn05dOfHBAZinNOvc9EOO1a
WNyRAYXbIsdLU2pBVjFmNflNI9gT1lnwDRkIT5UsbFS5seFDxgVx1yScFVQe
lLmTjxKCrnKnOkOguFToQltiPLq8OriSKpAB0nd+yzm3k7B4nr/WnLzFVT3d
dNfWS1B12YWhRyEPStXaCNt9vUFQlJhOs9sbA1XPOT/QCQU2njcz4ixNIFKm
3cb/yBBkFlKOBNuYoV5ro6LEQgG4ap8WpHY1ofFylB5jbCk6tH4Y2aPdhKHt
Zl8GVROhoObeZ+bcLDCi9msHbc3XS7fDHHYz4ejw9y7jKo0P3Ljy4s7mRB6a
y7xTjzgcA4fbZCQ+nySD3/ItJ5HtWSB+hdfhtWAxTLW8vK2uexsyauUoz9Vy
cGpoZk/zQCaqqt+7fFkgF4cMbTw03xegyBu+X2nh1+DnzhiJ2rE+UCafzX/Q
UY5uRZHoOU1B/4E+gcDBIrRjFytU2FaN++mmW+t8cqF4PfHz43M++ONP95GX
Vfk4JyKbfd2WBNbsfj2mtc3QT0O6kUVngatFD77/3kyFqcp6zZoAW+BeYLO/
xZqGYyNitaNfU/FecEyeVGgOphYJLBucqsBNgfVBtaZskHSKLazdVgoWFnZS
oUHp6GyVKbTkVwZGQ2feLm53wvpDCgs6W/ubzXu751G4g+UH2Gc68ptQa+9V
X3ffKNxbser0y8gJ+WrsSP0H80E8+81CSUEQJkcd9zNsbQHT34G9GUn3UPQz
u0KFRSxKKOWrGhtmYdXdrJcT/E04rLooqzRExoO3W9tZy3OA297mfFGgL3i6
hD1cFPSBHi8eSz7tSDxOUJl7VZSJl8S4WsQFU9Dn3bcIfU9POPj1/YOVsTIQ
2f/GlEO9CG8y1z5uKz2PoXm87kXHrqP4s5/mfClngVB56ONlx72gevOj49w/
VnwTFy4f0isFw0+rmb9WXAXCrX7IzjiDFCXaWeUHKshOHfLSqxNBphAiB+0j
PVQKtjdiO3MKw1q4bC/suASzXcVxsU3qcGLnTZVYDzlcm3wepWCuDdGFXUec
dl6DkeKVrqfb1ZHw/per5l0WpP61Vr9begWZH3roBtKJwS/3lc/ju4zA+96a
GKeAKeR3CI6jxjlYazX/If1eAwhn5vrI7y6i7SVv7wXPs+hrF9YaoyaHDnGs
xkivA0zcyjdn92qBwrwO/4xnIvRsuBoPeibjRAy/7Q/fMth83/3l0OsuPDXi
Wk3Z4rs1o7u69AFUHDZe+RBFboGpD5w9QZuxOGQqU7p/ohBiey2ZqoOyUNHs
68Wfc2QUUaoju5bnwbVXrzn15l6ASp1Z0kXjOiy8EKkJs1SMdw2f+uveBJOu
toVHxCpRU/zsEAPvczjfezlU53kdGmuriXsEheH03WHbuhdUSJs/vms6NBnq
5F0Ef4TXQsYZumm+unowvX/o3xvmRmTST+qPFojBrJCzQy+XC+GmQV0QVSQb
L4Tp5utMU5H4aH3bh8jnIP73+HLA7i2+drVy4sspxNLP8v1tlxJBs6Sq33ei
Cs5qNBV5nqbiXtkaiQHdGihtkNF5SOuLdRllhf1XClH2ndqEydMK9CxZ0ftV
4gS7yy1ltOqT4U7+u4kQ1yxUurXTT90wDv2fH0veXEoHwamfNv77KvAkP881
fb12ZE3o9PizxfvRTDcNFvnL4YTraNviu3Tcc5wh22ylALsTLtX4Bsnh0/Pu
WXJRJWCksG/g5ft0+LW9qt2f1xSPJuQvHn+cgB/v+IoNb0Rij6XoPUX5AHy8
e/CD4bY4jH2atEAMTwd2fufBU6sh0OQhzFUo3Ix+bkstKtsbcdqvt+mMciOc
wAY6ME3DxoSFLtPxYHhLe1JL6mUxiCYMSNs0NME2U8Elj8cU2HX+7K35OyX4
wPuulLFrCsZ3vzFe7naFhWpNoRLFHBj4Gfd9aDADgqxORgz4JaPLT74z9Bop
mCh43uVzUDaGbzvTiVF3cOlIScEJ7628Veh8WtteDiIz5OE7+0k4m7axuj+o
Dn2VchsGUqJgW6DLz/tJ5Vh+17tEZ64K6o4oLh98mwXGHG/2uJUTkZgoUJfV
l4xRBY+UOt43IHvQ44dLh3MgZBun5YlHqTCSPf3tylQsmJ8pLvsjVgznC3fc
SfxFQqLgXduqfBsYNPr1oPywF9DP+Up2zweDQ+4uhXyvBJRxWUupupuJRjln
vRlKy+Gj3vcoonoSZD7V9YqfTAIHwZCNBzL//28zdGg6pQKPamvvCxWPAfmW
6pJ5yQikZ/vExa6XA4J/Siz/bNVxD9ndaUWWoXhCXb3TL7IETnLEP0h3y8Ht
IcqU5NvZkNud3iHFTYZVYR2y+NY6BToPmr9KTsLK1ZNBP16mYvCN10c/bs+B
6qX0+pZv1eDyY3Tzs1U2cN3T3unNUQT0T/4ZmV7Ng6Nxj0x8HqdArI4mi8qS
H8y6DhgOp9bCZIr7KoNeOo5ZbBszHKDg89tn2ax21MIveqOfoZ3N4LCtIbi9
PgNpTHVyuxTL8dws/eKv3HRwW4t6/WmYBDu6ap0cL6ajNrcA/7DD1rltCX19
XJOEZgK/vI1O1IO7vMZXO1oq8Fx3psT6VSPTp/Hm3MV8WOR+PPa1mAyXadjL
L43UAflgkeOeM0ScUPmRpeBfjEI1V44ZFjci6ZGk2Vl6X5zMy6rcVpYCR9Ll
iu7v99zyISamQ+lZuM/IJu7uIRJKoFuQios32DLO8htrVkDsLVmHr3efooCg
Yu/lcw7whmboYFqRD+QEGfQa7y0H/zf7gl45RCGheeAHz9VWTFg6m0IyboVg
Q4YgS8Yi/HVigt11dyvI/Os0emuog1kSE/zCI2RM7je5UPihCsYoNP6cLkSk
uL7h2GXnA+2Fc99DLKugtMfB/49fITbXmfx+Z1QGp8yabLlP1eFFEamnTz5n
g3f8eEZtRTkyj6myJCxJweCzk/2eohmolES8rxuXB5cvrjJWTWRDcF8U8Xl0
KK408e6KOZKL34mL8hfekaDLlfvqA+kaDMHsSonmBhBKkQ7btAnGI+XGN+7L
5iDXp74LRapENLO86SdhXQb6D15JKlqGg4tPwb1Sx1zsYQotu+5TDg1L3Wxv
JeugXtPYJX9nG7LrPtA9Lrzl+c5SHz701cB9s0WHeV0y7JHUJSxbJ4BpHJuQ
bFQkRp5QOl1WFQyr/MP5BjvI8DFcPGvlKC/YGZ5yeMcvg9Xl5Y+yPWWwVuxU
vAdVHAmHtO2fW1wC6+/kOd16WZwpItKnSp1A08/XG728JTHLynL7zudGoCa9
oD08pYGzbMxfhatuglv5I9/ZYiVIVqh8a7Xrr7TE4s8w2R4R+LWXVl6EBbDw
iPb456Uz+G5Pn/suETX0mzVrZjlugCKaL+jsHp4Ggm4I9WfFFWSsdfhOv6YF
IbbnHu+5LA+Wa2wh4a/VIGdhX4y5nTLe00lk4WbTRIeuQyc+mcqD5zebdBaR
66A57bLWE6wAIhtaToeJ19F6e4u60TQ/ZPimNVslpMJhs0l/E6UI1HB03Cu7
WQUvhJrjP8p34Pge7XdLixHwtpX7PksGFYU+9JUyylDBoexoA5d7FXIX6NVo
d8dAYRfLy/73TzFQMj3x2q9C7D+sw5fZkoz7rRtouteq0fP2770n+0vxgLXI
oV11uVjNMKT86HYbcNAq5S+0tiCHRczsZ5FaYHpNtyf2Sx3WVfk/DqIvwzNK
YmDBV4+eGpndFRH/75MQefdCXAWKvrqKbUqlIJsY92HqHQWnth0sZo+IBY7w
E0ss1jmo/3Aul7rZAhakEGWRmkhUN/9ZohOaidMcAypKQhkooDBuvk6Kx/kO
guuFDF/IeSiftu1OBU4ovfCqnWuBTS2JMtvxDFz+9md7BTkd2784R/lMIzAb
8Xxx0anBQDfBvdn1IVjn7XjIvq4cqpytNweSMmCeKe247aYBKI0c49aLJiNk
y4VeUqrBSVeWN4XpTUD3R1fKv7IUVz49uHh9JBXf3zy0rCWSAd9DVN50T9cC
f14ol+3LMoxuyOpPn0jFWGWlulmROtTmsrZ7HZWAvGKKPB9zk8FXYTKLiz4Z
FGtbnwjaRkPp0ad5g0efwOLrhjOTTXYQbbNcs6qagaIrH9dBMwvete9XSS9s
g4kfkenS555gzqqU2vK/YpissMngZ9uqQyaXZ7emDM0ZRzn8VFoxfJRV6EFi
JPidUz27fjcW7+o3X0soiYZ+NjNL4nF5UHjrq9rl44sH5jl6pCMSkWm066fE
ziQ8MjCh0vkrHfeP9RY6f6uCquqi5/KT+ejOfe2Ge1I6vK279KRsXxkYX69Z
6qqrhm12MdcUbhVjluSrpKZIf5QxvjLhe64ewxYl8s69yAD7tcGvf8zTkKP6
YbVBmzPkBZHvXn5fgoKB9hS33en4WTrDNcuoHNXmOiYDe+yg4vBbnx1mWXiY
LevyFdcyDFQ43RdbXI7mtYMrV97Gw+hQ3cHF+QJczXXLeDxJhiTeyHfx8kQo
MxX8xuwXATP+fLl7kIwUjlqp66/i8KsunQ1DUwXkhEVJ0n3MwNIy0Y9Rn5oh
6PzycGVoIi4cP543f6MEBCOPnQygQSS9uvx3pdcT2L7/sOvnKITtXVwe5WMk
sC0s++XTl4Yu8Mijdn886Nzv1fgRl4+WwZLn5K7pY07G8dHd61mwIRD23XWl
AErthmgF71uiyDjLua14wKzQabr3w2Tw8Mu+NknMxb81+xKG7Mnotxm44KPQ
gbuEux4pjlDB5pa504HQWIyTeqe0wZ6EjtsUHSync4DLwfQMrVEcymrOfd6R
0YiEn6ucs23mGO/PcDRipARWvkQdvLqPiHfXzJd/7InBkELK9rapQoxrnxsv
NK9EkduWRsOZCcjXIe30RD8URo9VVL7/kwWSTH9/61uWwtW16fv8Z7KR4+37
T8svi9HzD0fgjg47qD/WanT+RCPuvPHZdjQnH+MVjl28VeoCLpR/fkmpWfgp
YfL0+6BuLM5iNgo6Uwt7r4jmXpaoBeoT4Qp7u0C43avg1e9ZgWkNsqcelZZA
20qf1Qg1CpN37fVq9yMhI/22jhH+MtzNozvpnJCGWuMO4X2Bz2GOlddUmy0D
3n49UP4zNxF0mf4Z0Mek4yxNTVJ0bSZ4mpUsz7zwg/fHTr39EVeMJi93Tb7h
asULPAvbuDjy4XiE/p7EDyQUYVnotpqtB8YuueiYg57o1rwirWCZi84an/Yz
aUSDhxR7K7/4E5jZe++6xUguHn109aqJfhEsHhkZMaFLxYT3kqfAALHwFVOQ
2LcMzEuCR17v45GrWvkIzYcYEDlkG+fyQheu5hBOnYvNxcXMvv+spOJQ7uWT
1b2PK+Dj+wvZYxw5KBTkujh4LBV4OjPTBbuLYTzt06FDwTlYWiymQA5KRc2D
ZHfRoWb4li++oGuQDDJfy1gGs/NRRCPyp1uVFeaWnJ/o/obo/ev79QIJMpzd
X73yKqYWM0yjNWLzIoF4e62K900NNNq62hY31cNJswP3FFokgcByvsr15mHQ
D8zUKfYTwMGuX4OhjVrwt0eS/NzyCtS+WNptfF8HbCtfOQzTiSChw8tzT8Vn
ac83o0bDt+iwtJ77rjLHBfQVPfrEfac4cGvGHFx3F8b3se+6Ivacw87CE9vo
3qoBwXQFqBE8EN694VnfqYXTyqfiO6q08FnkAkVxXR469IsfSPKbATvRxtbO
TBc0L6V+8BmWAGrRhXzuJ2LoYOFw4p2YJm5w3V24d9oQCCFvq8RMGIFbfNoh
wvYsEqy/TR9/IQXiOUox0xlKSFh8cOTKSQagVLz2VvsgBFw6XLQqcimw2CY+
4VBvB4bvufHaxSoI284lxNvRjKUUv3C1zmjcLnVBR3ChCWfqbt95YNkAB8KK
LXI4qfhrdIjGxCMTY0aqzaJkS0HkCq/W/aOR8KtAyOno7jxMK8Pj6c9q0dOM
esHiSwr0BtJsdmY5IHXInDZqqgQ872+S7X94wAe/4x6W+q3wu+8JKetYJTKe
FBRyjyoFhwRt9352RFf1JcbXsXlQ+7hFweF5G97ceBRhMtOKKq6r84pvGiDt
3/WBDCUKxqc1uDkEVkA0O832+S1+vVRy+MfK3ypIubqzPJdagSnOFsKxytVw
c9+HFvf5TCjd1CefeByBhaTPwlOR2WDpnz3e8SEcdt0eruCLa4Lq4VTqrf4I
yOdhqTwQUIvB7y4Yc8nWgtNfy4KoHXEwk1kw4TZUirTqQj7B23PwwJ/h3uWV
CMixnXI7vDcKdo9GajycfAnc6GYeolcK295eiXQ4TQEfAQbue5MVoJHG765a
TARNH+Mjk5ER2BzCKPRlgwwTSU8r7CgpsKZ8vHGOrQJ+2WQrmxwNBtMdAbYm
ErW4+OSKUrKyO5aT1tNqn1dDRrWP8N/fjZC8LLq8Yp8AtnuPSt8OIsGapj+V
haEJaY0kf5ZEZMPGHyonRScA7I3SF+nvb73P/kI2I8tinLj8wZThZDDq6Pb9
p5WQBYx7O064/g7FYN+nn1t1y0B54dfXXxuVEK2tvXuHXDS0Pn7WvKH7FIU6
OSizzlSYSfzPz+1lGF5zjGmyjq2E8xFn/I7V56HfAkOA8LMKpDv+w7oZCqF+
l/9zzko/8Jz6ar+b3xPOqoscqHlajNkGYmnmW55EKEtOSriVhwP0pl3PJymI
1tQS2u/10LhyvSroSRau9W0m3VxLQJLlcZb7pAwcjep42FuQhyI2BtobTZlY
7vjDJ1I3Bk0UhpOZx2JRxP3WbmvhZqD6upmEbM8DEU7vpm+LHsCufkEz8GEy
zLiafz+UUQJnS4V/GeygQvhXhUd7O/1x38tng4ez/HHU4/mAyls/GBu6tPhf
QBDUO01x5D6whiNjz5iflZHwH01MxF+bCExS999nlZ+BJxR+NuSsREEnQSPa
hj8HBxV4swqEwnHz2b13Pf9S4cf8Yb2bnG3ImjMuKryWgbc7ZDqksBR28r5K
iRKNxEAaPvVX3YWQGp0mOeZJRB5zsYFQ5lCQ4XlWUhdUBhPXgmJ3v6/HyPDj
gdNtuUg/cIOv9GER3KYW6nUlZCPdFIV+MLMK+sH6JFNRBXbuPTvaHJgP649P
kENuNGKV5E3FANtK5BW+larg3IziOx0Pv9riW0m5+PsZxDJcfGh4vfXIQ5w5
LVe2T6QYvqmNGCk1leEvab4weYd8LIxw1lPbbo1y7kLHT4vlQWqXf8O1hgr0
VQxfIpfn4Wuv2eZZcwrC2+91hxSLYYarulr4RRnIkN2kO/jK0Onbj0UTvhrk
3McvVEWbiVo0HwL2yydBRmbpf52FaaA5SefLKR2GLwOJQ4uvCyAo2MDEy6MM
5vfce2Kok4F066I2Es/LkFvpKkt2ZibG9RG+rAikQvQdZc4nLP5wsOOH1ebP
KqQfnmVQolZC6qnjB2r2xsG28I+fv6XFIduhJQmljSD8q/P778/FLLzg99Sj
dygbeIWfJRJelELmti/Xuoe2fP7Ncvs5+SIQN07w2/c1DJ0W7Fq5gsph+1LV
8Mb1NDzFLfLhmKErZoWL5s1sa4Xu6e+OCT05OHup7R7ttyB4zB7nUFtYAxxr
SQ70T6uAh/foe17DfFyofiWeIZoEum2zEXky0ZAWHMrauycDvnQ9LJYwrwGh
2D1PHHlyUXN8eRc/TS3OfVb2Zp3NxrHb+a/r8/Ph/srHL59upGKYxsejVQ9J
eC+8fSjxQDeqH9nWdk29HFWk/+vhXXMHeTu//7hN45FgJt8gqghorf/6QXKO
D1oQWqxPOzojHfYOKpmRofudWm5VXQkKWXC/HtahQOffnY7NPzORlyVgrl5V
DqvXGB3vz14HSwejwRoNRSCWu04GOikga0mO5+aMPBLs6Zxv5+1DfadPpJik
K/ir2+OeAUUTCJ63nTvmhNCUXV7K9qchmg7NzHtQjgGhJfn9RaULwMAuzjXg
dhE9Mz8snPMXAJF6yUeJO2Wg1CX6SZqVLMhMHg2iU9gHmi2TvRu/lJE59c3Q
yIQMEKXFeQoc5XAx6eF1noqLSPivkFArfxZs9Yr/25EmhxJ8XUHaTULI7nWr
g+/tZaCai48qdfEj4dlJdX/HXVAqq6tqUyoK1H3ONXceAJZoiu1wbjdAdYP4
Je/PATB4xaFuV0QEdBxI7Qv8lAVf7ZfXmJeb8GiuqcmOIxSU5/j4tiqdij0v
OsOdjjdBYTkh7CBtA9oOuDqLbPlYYbPddBBTLTBaRMSE3CZDU4x62DNDKrqP
UDzN66JAfPir6jRbHciEbdMbv/Mck+p1XazPFmBpSOehtduRKLJYS7973B8P
NZmoJfjUQNTNQ8wW3s6w+l2uOeh9Hiroure/vkvCsdqV8C95iORAi9NxH6j4
8f3FqPkiMky5SLzO+hiJDYWbD/57UgVOqi9GtMsS8J1+z7fbfhWg1ij5+HgK
AumMEfsrtk5wtCZSZSySoUdAgm9APhOtOV1f/thWhyT2edJbcg0m7moJ+pn8
EvvF42k/kUqgcILqValbDkO9o4+eHy3F1uVDMZkZ0agWq0g588QT7j8OYb3z
NgvGdtyW3/WuAMP236A986wV5/yTzx0za8P3FpqvBc63oPRVjb/pT3MhsWE+
7uCxUmQ+QbjmRE6HgOK7PaPJ9Vgk5N++IZyATmMNutBahV8jutbzi3Lxw3mO
rP96s2FhNPv6CHjhfFZCXmisF0zzj74r70qCyOqxkLzCRJRijIompFVB0fMa
mbjlHDxhsXKp3q4CHAICHVd/hsOeWqc7FhwxuPvZCTPL39U4b8WzP0CLiko7
TdTOWJOhfDnKqeZ+Ougda3nvkBoNg3l9nGNH4nGWkXw17mUhPqWZeh96nYJN
cr1WQYnFIDLOpL+zJgWZiEsT63EF+LvY/2ZOZy1KKjDf+xVYBIb6qade3vSF
r7eL7edqS6D+ioGiwBOE9oUAwx/Pm9H5v99NX/9rhAnvAH3nRQrGvUvm1a2K
Bh423pl9nFnw5D/jfUzvS+GT0qPDV4GI1i8jeR23OCqsGQ+fHM5A68YXz068
d8c+iolNiHU1TnCedOJbdYcvNbW3PL2zgPbPY/qYzVDona2an+QpBZ+vmny8
byuRJNTumtqZhLOkQdJnQjr42QO10S8fToTsipjXJsKAqIvCqepMvPe7ZOj5
CqL2IL/eR3Z/FNyhc1v4VRhUKHUwMRLt0f1wT+z9zUJgXup/RtwsxYhMH9Yn
fIF4T1C1ne0KFeZ+qGYVBGbD0YZtZ95K1OB9zniCVHYD5BSsGHdYBOBtFP7Z
x50JJjj5zi7LEz8WpBoarObhxqu46X0pXqhZFyOpavgY7eUVziTxEIFULmgQ
3tMIUSIVv4ODYkEGHvIfkNBHQVHLs1+NSOCjLGUw204Gh2+5SiMdQfCIbpmG
gY2MplP99CTF+3BlxxiLhlw63mcosnt4IQ0aXj5RVtWkwIlijlmvMx442n72
lKZpHbRemblOOvMcOh8+sfcfT8FExsfL88R6rBzwldIO9wJXK4VeW9E6SOjO
/WeYhXj508uTYjXleF5RwN9ilz1W6ITu+GxQjtWlydsN96aC5mkdr0eXnFCe
z+z66PYUlOVjFtZrzwdmT47g2N5StEtUfcHWTURNowSzCQcLPLrzkmFDfQS6
cMZaua3GY3eHTNoruRy41XdBrCKHCAo+2Wbq4s3IRcr+wBxOxPQ9248y0zWi
anvdf0EC0djDa2PCdysdmXgS7juFBYPqgGYatTcCWl7XHmXY4jF958Jzenrl
cIk15wiLE4IAzxetcdFqoKwOA6tABcbr3m4jPwyC6o3DRwZz/ZFZaIKSrVwC
O/PyPda3zneSAseGQWgKrkYvCf3bJKKvSPM7lcosEMr6l/C+3QtkxGnG6Tu2
8t5zZe/3ndVgKf8uT3GfN7JxKX16cICMJQvrARdoKmBUZSkhx5QI0vFvrM5f
8AOH5Uk+4wkS9jzW5NvmVwI8+gb0ZWdagDL3aDWKqRr/dKitVvdQkKqXxmEQ
6gAvOUazlTmLodhSusA8k4IXe4ugOfEpPjaNSz5kVQChgW22YSnR2OlR5TCf
kgVcNC9XmYyisPMi4zDJlQi1Jt/P8OmSUHG38lL0ZjiyBwd2a7cXIgn2fxJp
lAMZ3/C9shEX0INIX7ovwhA9dYWrl9XkcJxBLVJ2VB6n9vC6j2+oQDX/HSVy
0BUMF1XVT/onA9x0tqfv0iqi59e7tgFJV8FTUfd75irLFg+N2zguaaGITqSk
StzWeHZNozrP1VBG+dolTrFLEBi+Q70tVwyso1R/5bVoY6FDabZMqgoSlI7J
EaznpWWeyipVUoyAuzvgXvh7KSDwdj9Z3rkPCazHpnQ1xYC09tw221QZ9WNV
18yEt3w2ymut76MommrauhVGbHlgb96QEute9PyBay6aUigyxkj7i/cA+r4a
aQjUigf//H6IH0yEqNxeEs8oEdha637G0zWgtN7h7d+sqnG4c7l1YawRV4dL
S07dpILhyTb9sc4SPP81VOhmQyma7hY8Qdji7s7XnkMpHvnQvUqKTg9rweNT
FAHOe5FQ0mD3j5m1E8S7E05eDymHH/fm2FO+1aJtaLrJG3IiSP75MS76oBHl
tQrFB2fKYZnB+rTJ4TxUUjTfl7fF279uG7hd9EyD9pPnxWO9y2BsfjPw/X9E
iKdJUPMQDgXBs7brgYM5wPplWWz5SwXSF0xF2m/tN48lSrWojy+Sij5b3mx8
DAm/vskGnylEWtngohhPezx/linFkdwIkUbumWpBZJT5YttqLJCI1wWLHKJm
s5C9wPHzjZLn8EaHJVAlMBYuD2g/TlWtxX/NabWKuvUYeDLjQeVKBtb8dSQb
j5ShiMDhTnMuEjbc0qs88KUNjOtNXsirZeGLQE6q8f0aqLbgsTy8HIU3DrRZ
v9YLgWPr+ytidpYDc5992cS3Shxyu39ZXTADKWlxOdaL7XDVYdr8EGMN3Dy3
KSL/rQSPTd6Uv71AhbRzdv139aigSHYLuL6/CU1YdIUtHKqB8D1j9/lbl7FV
vuIN1bwQrLpEite+18HIaPtuyC/YysvmavMWIiR8DLMivK6GrMnl0030OeC4
cfbdoHsKFBgGF1+OSEZL8b1uFO186H2rOPX4JwUEe0K9Bs5mwsz22mv5r/Nh
zJaYNxhThRp/De3c6uPx2IC/w77hXPjKLHlYQSgDBuK5aPosM8G3WVols5wI
Kk5juw8wZoDevU8pd3eko+r0OTfG3xRg583sauMsQ+m17U/eH4vGU9k7d92e
yMDrJ2ZJFy+WwR3j2Nzwe/Vw2U2fFLRGguwDLH0D9nlQd6u2gEq7xcmrtYuT
quE47PBFe5PaAF9/515TliOhxSEllfttdiDPczFxaawAC+/QMRTy1qL/T4GM
ffmZ0GKpuFSlWQhzkqc5IzVqcPdrFeu35eEo0qUtEEhvjIl8f4qnfwTjzWrv
a4yuJJgOdx09rZEJK6usIS9/J4E1T5EPJaYKJi5qX9DLK8TbYQ+p++srwemg
8cTPY3Gwsgs/ea2nIO+Tl3yWBRTYmSL054GFM7wYrhHsvBqNlrGq8y9e3MPb
ZiIq+X6ZwMut9nR7cT1aprF6r314CkpVr3gI30NARbN3zTMrC1Sentmlt6sK
T5I/7iPtJMFf7WwngR81OJi1zEp4nQPGhq+fmNpXQDeJfLJVtQQ185yC6rmi
sfYAy1qSfBUwRt7dy6AVDtl7nAwPUstRn2ai9I/pUwgZPCVXfqwM7MVeB6nb
UED54LP2yLI6OGW0+K/yfS5Yj5sz9zgTYd92oazG3RmY9yM2cFd+Hcw0HZL+
uJqLyY3d/tdORAIh59NKv28Snn/tUFd10xZlWggMmzqPcVveXRlqSjkcfsIw
dKeECjz5RbwLysXoe1nLeL0lBy2sVw/G/iUC7ceFeb/3jnDoWYben6R67J09
cVN5bzkwHNFM1FNJRPn7B7s4+UpQeL2ngdfDCblUs7+HXCj7f3/D21EmhTA4
xSrXnJqOQSl7CtyzGuBbt2ZnbV8W6r1TfiqWVoYPOyr8pZiC4JPGflqBpGww
3Je1J20pAfKTdp0tlS6BY0/UvHWnSXgzy4j2w4U8TBK4OrBvOh2/SGpzFVwn
QXPoMfNXDyqw9M0xG/n/KPj4s71B6qUGXHOWOOvn2wuMp4T8jc62Qj4b/9tP
MeXglk6nNcZOBDoBIt29awXo4hQ1dlEsBUjJEnnPBArAk9050+GDJLTqvf7e
OWmHr8/+oYqIN6BKjCZJkpmIX06UhYSwNeCq9oPAbc+b8NGRnvQiTMEpU5Kp
9Hg18MztFDjfGgA9v8iGP79EgZ4bt3xvRT62WXKlHyskovwRjZsXFNywQD5V
ZSD/KciGjLyaPV4PkrFvHyrlJ6PAzlSFPWppKO7VQ5fMHQei49J/+LAASFIl
FRe4y9CW5XPYv4oraCrBw9vx//4rMi8/yDCeBBmWP5ci7l6FmWAbA95tF4Aq
ECHtu6qERDbil6/dV6Gf6xCnFf8N9ATaWL9ZRZi6xroz6pLmlg9aiP50Aewf
5fEVv68LOvN3VTt0xNH0jN42lx9b+dSppeJ+7ypkuUTLaaEh9F+ePuvAdANN
m7rlzysIgOZPvwqL/TrgWbCHYOIigQRT7SNz/uqwKAfV/+AWElw+BpTsBiAx
Pc2gbkgAweDzjelTp8Azs/F0txM3UFXH8O6IMkwvhtmRqabg+e+P+uvTIsC9
OkTQ5rqIauGqFRO1vpDF78fLku0PU6VR8dru96A9RoJA96kCFRj8jq8UlWO/
+k6OjKuVOM3wWOPBlr/rODp47WcLR8Mu/PKb5IMO1js8DM62gO3BeafO+AzU
Syg1enu5FQ3Vpcd7AxzQYeP5ds49bVAXFGy7ydIMxhcO2MY51uOuUzc2mKmt
YDYpK5aj3IQyjlkN1MUwEJ9hD1stDkSN8N19AeHtwH3yg9UXhvMQf+BlockP
EtyvUGBbkkAQ7pad1P3XjrG9e9SYHWug/z/3OqEAc6QOEJj8WihwqVtWioU/
D1U85t12c2egIptr1bfWNkxtGr/kTExHbo1/xkmuOfiGiXOPm0I9zA8XvweW
SqimmNGfY83EaeH/utIf52DmSYm1yKoyXBSQfprF2QyR7wN8dyhXwfeL72CF
NgsE9KOO7PxUCV8+Xjiu3BQLknbLv1Z5K1Howycjc+c8IO5J5Ks+/BQ77ZI8
Y7744xvZXTNSzXUY6+XyNUYsGTTrggV2mSaByPmndzOe6aE1SS1E06IOrduG
/Y40ZcJUVyPYiBmi1cDdO86qFBy5dvq2tVEl7qvIq9wlS4asz8Rc+V9u0Myq
zTcSkY+GQv/a524mgl23ZPKt6AIk289UugtFAvX9MEW4PBWZNBhsPI7WgPls
9cuXXNlY/kdhTmKrvn+T8tFKi6oAzYRaXY9HjuD437YSb4xBzsZHVw2iE6FE
P57GfSkHZ+4uER9xVIGnTXBxAedWzrJsMLt2xeMCK/Nx4t5a6NK2ka2Ry8ag
s3QpI+8omKEHPE/XC2G3yvV74S9qQF6obGWMwROp2epron3ZMNlLp3hhjzse
9WFWU5THref51xjLw6Cd9hTbjskIjO7oV3h3MB1fSvwjvVrzgYW9e/KpV0rh
zTOrg11bnlD2qLtzRoMEL8Ytnuxq3sr7Z9F9Oi8jUOs8ffzY9hxsaNz7URPK
cVvfyrUlyQyIiPeRBd4SMEyQ1wzd9Iajodm/13n94NtYrMoVMhlCc5ep/KOl
uNAhcN4rxAdfKAeEHudIhsO4kePeH4UFO09K2mSRcIylnP5GtC9IqLHyPW4l
gtmlY7zR/a1Ix2WZvH0kF+3nRb35evJhmpmpfi0iGOmlFF7Te0XBzYEbK7MP
vPF+m+5gBms1Cp33+O/O7mbgjjWkOehghH2js8axYnl48+aEPI8hGWmf1T+0
+BeNzLtM2VmFKnG+PCSitrYc53dVsj4Ya8JXYofon1qnYWqP1r0AoxdAGFq7
oiqWCkqvu0WZQ+OgtVP9da+VM7Ll5a5ZhgaCR3CtTDtNEdJF7zhxhykHu6OW
Df42pWLQv3mRwLg0PEFOE7SzzcV/HwvVUwhNKHrqZ06DWwU+//NqaancDftf
hG/yBdui9/Idi7D6mC2/t7aKj2rDKtubPdp1Wdh1Sk3k50QsqJzpbGIb94fz
o0tdr7qKobM2jUY9iwRncscTZzprsGeK5fa79iSkb/3kLPCwAv5yUiasV8iY
oh1gKq+cDlcKTsr+jqLitogb8WXhlcj3IH73ul4cHhgXOMLu8Bx2dkzuimwN
hPCwcbKwSgMeubc4cT6tAKNnr5o0buRjrUj9iS87M+A29UWUve+Wb3rsfjuh
UAD291+M/l4uQs+nPYJnElpwIeN1B9myHiyaL2z7sT0f2NvkKRFynrBemmx2
fm8bjtm00947aoUVR1alvwgXQLg3wxvcs5X/Cj99U1clkKUogLSRT8FFRQyI
5E+EF79uurofp6KDpLhnImMkrD+q6xtjykemyktkjT/50GrSOZ005o36zAlN
+LcUvlgbD4TvK4CV/h2CjzAfvUj/NrW21ol/d9iDze8l+OfP+OHgP76Ybpqg
IL6aDFo1E1/GK8NRr7CBsWp7IzBeja8aOGEHGVFyLB/ECmFm3yuFEYNGGBMy
+HF4izc1VAQXdn+Mgt6/5hEwQAKd2UfuJiPRwCrr/c98qRJWIsdk6hRJyBPc
GrRoQ0HCb5tAOXM59Ny/98sTjnNo+5lz4gWDHsqc9nxQ1qGBIqpWDPBSDgla
zPPS4eJIOJAywEXZDZ6Xz36nSbkEhMUHO4aslbb4yDB696g2EHrYPxz2PYCE
7WEXM5LlQN+kxNSzfysff6+715hpAeFeRHnvqyuoSaFh2ttggOFjMzl/g2SB
oPXvgYWoFsisloareG3lZVbIg/ZDB0GGY8p7zkYTCVK0Ax3OgNx9fExSL3SR
+qNB8JodD8ok/j35lEEUCGoN/wpW9LfqlNg/Dw55kFFM+R4ZIYIEHqiaGJIH
7oM9PHyfRaGwKy7v2N5wDNTRU1OlWKPp1NQo3ZE4lN0fpiNbS8bhAZsM4/kC
KIx50f6UtxTuOGebnx1ETK6QqExRrQDZvDAOilsKXnm+kz9frRmsHb76nonP
xp6lgAoSbwteiqNaESfT4VuDwqDyAAn1fYM9T6A/KFUe2i235fsyBQeOj9i3
4IGZnsAgwy1v/MD7s7KuBfIvB69/q+sBJeLlpmL2EqjmkmfhXN+qEwnHJ+5h
BPrruPkbRhbiOaJjWwxzC5KIvFfMW8gwxnluPd+RguGnJ58UqD2AQ+U3fl2S
bMQCS7MY6bkCuJXdwp1cWAsPKq0lXr0gYfjHy1oSqg8wPN79W0UNFQd0Zcn2
3wrQW9nK20WvFDzl48Pb7crgzeifr98LGrBx9ZbOHsVm2JheuPnBKhUbUrPc
/aQr0dVeTtGqvwoy3nDKlOYHA4OCjFqMail2MFnQcJMqMDnm0Q26uGqQ6cwb
OrTHFw9+Y4/S1stF9d7RfXeu5wBxk27OZt4WTq0cQj9MRvqxSd4bSMHde3X+
rItRIX5qn9HvlBiwcDO79jHDE4rTGcOeWXjg52sJ5IWeNDghFnc8aI8HJr67
9Gy8n4I6eHh6LxaBZaP/OptDAni33NxcOeUKnYdtgp0CyFjhTRO324EC+8UV
mi21bFHn1LYM8dZyrOM0k6ZyJ0Csre/phnvZEPCU/3MYGxln6k7rnNWsAZk+
woaWAQVkWa9ovI1Nh/TM5N/qPok4b7g/lo/QgP+EKx68icjA0dXSlnrdajhq
7MLBf64AK2j+7p/dIIPMfW79r8c8YWZ2Ra+NmAgVXo2yByQjISzbniW7sxR+
Snj0dlzKhzMyy07vNMpRBpMliZcLQcjU63evQApM0+F9GqkG5L7033luGkOw
+qG090FuC8YGasf9yy5CrQT5EJoMXzj1iDotEpgNqYVcLo6PinDY/0HkpYfl
KCcpGnCHmYRKGoRg5YkQOF4ZsXTuWSF+1KybYK72g1OX6wUEjeqglMOlxOcZ
Eer7GsZdvpAh7KFtVe6jVKDvkH7AdtIb7yoqjXKpFUJQh2mxbLYP0Mvwek58
owDF/OHl3JQEsKwgrHYw5ODwj2QS/dRjWI0jruw1I0JzJM/qtHsMiI2FE0pF
C3B8uWh3hHI0nr8UwZZj4A5119LSnzmkoAuLjZ/WQgBUSsiu37VLBZOdOcVG
Oua44fw6oUiwGuLyxNzmGwpwsygt7l9AOYh6WfHc4c2BoVs9twvms6H38LfM
D4wFWKl4IPpDezn8OsyvPulZiqZXxWPfVWdhgmzjZfNLXch6O0vdv9oCckbm
lemGw5DnnOORtwYkLDT0WZIXJMOH4JmOkC1ekNlX7G5x+CwKYeSlEac8aHUJ
ERySJsN9GdYFcl0AaE4frvW/lABq8ioKxfW56KFtLiv4xheXL6h3eD1Lwo19
+d/DBYrwQ2e+22h/HvRwT+v9aquEZWmuqrcyBbB9Pew394oXGm+KkvOu1mDI
9vfylN9kDLZeNT6xhwJPfFoWcz6UogqrIE+hTxzWfp7pFdkar9lOILqHMQ39
NyJN9vXm4Q9r5SvWKvHQ0XGEQWzruxUfPKzwcM/HnozHzq0eZMhsvcy/3zUH
tL/PvNO9XI2pVrXODVEJuP5YSttDswynjm5L3b9BAX1uFo2HBS+QzWWuv7Y4
DsLPWjRcUyJi4QrV/xN9AeynTVvrUG6Gu+fpGR/7V6FGZolP9J8imAxg8m9X
qETPmP3baqqkwTSXSe7jRg0A20W7KdtqIDcI9sZHVGK8RLlpjycfMnXOPRbR
KcHUvZesKXFS2EHfctyaWg1uhy2dVL7EACOX2NRT3kqgZaBZXWcNgmpgvFvJ
ngG9UiZz+o51OPU5K9OrKhu01xrs+S3KwExVQo/hZja8LbcI2qGWj2wloQ3h
T2pQIDQ6TKKmA1qEO3dLhFUg6JeRz0Azeo4ce/NyLRxGeNsE/NszwPOn0EMz
JlsQEbdzPCOthNQ8jqrPjCoow958hryqCoT2EFG6zdMYeMfwQ67f/+9Xqr8s
dVYMPMkbFF2By0j4Y3XWu3fL1/L5SxVblMBTasDhY+FWDp6ovNBPywAEzYxU
BxVNFJf+/fxP41bOukzPf/j/Pbor4ZX3rDhwiq/N6WKSOhJGsUuIwo8y2cr7
zIZ5kGrXwJA0seWDKRN8I6lbeZh6NquVXxIJpWHJR07vRZmkPR377PWAOS7y
r1iyNlAbVgT7jY6jZwRFW5lFBgiE7zu3HxAGAlWp6ERLlzQhPlroUustIIz7
XejQ3wc7wgYzXNTi0HgbvcMXvctAnF3dz/4vHaXN9JqfX6SiMPcJpb+uFOj2
Xmd4/6kaJE59bk3b3YbGqToivH/IcO2tkfbGVC7qLOyo/b7RBPXGOo0eH2Mw
dU+WQYZXO466e9vo7irHRa6Ju0a2WTCR+pHDMaMANZxD/O9NtgBj3Xn9CwHh
ONXafOZsLBFor9C59YzVQZe8mqDmYjXIP/+uHcMYg/cPJ0ovh4dg2X/ClEjZ
bOjUGByyrwrCAnKvb3V/HBCw53FXRQXemdP9tCZLQhdOl6qylEzQd9R0OnTQ
DfXf2E9UdAdCxqW+Dm7DCjy2EnipxrkUp2qWr1WlPcP3fVaW/SGN4HStuYCk
VIpjrY2EjJNVqNarail1MA48Xasr8gZ8sKpe+/TwWiPGTpGGfg/G4sWP5mxE
n3YILF5KefksFv7bSG/75N0MxKdWokwCJEzOn0tMo1Ch7S0l9rBUI852a8l9
HyGD95FIb6afdThIsqx/I5YODjXuBkuivmiT/LaqdSkajjSbhOk4l4L+IBIn
hptRXcXJ9cZPCt5ltbYrZHmBq8OhGxImBXgk7FC5Ck8kTBx845LQHACpjBqm
e8PrgH2MnPmvLg+uCQw25tvFoH7WbsvuP2W4e0VmZjzZGX5/npM4k0fEK8kH
uXTGg4F0/aWIFiMR1PytXpxzqMQ82fjWqvpsXKC7a0PXmwv2stZ2b8T94fe7
d8mGW76kJxEq6SFcjiaulx96WW/xQo+Zzs9SIpxzsAtby8tE682wScOhPAy2
47jB94eEU4/Nd/xly0FGznTrwi7EYbPXhL4tfk7UTdANWy6Ag+NMj6OIuRg2
NsV5n5OIASlqr4zqE/Apd9Z3x7ESoNYVjJxPbAJDwwc212lC8OlKxJH5N8kQ
98Pk2CpjHl6J+CR8kNEL5/feuW4V5glqrV8P/Zn1R5WD4zSxzRTY6dU25GX9
AlSMV68kUUhwpeiojdfW/vX87EnVd+CDg9yCll8vUdGa5luMRmAtOkj4Ofd+
JsKv2lP91cHlcFWkDfTIWfgyw43VQi4X5yU1Bc5v1V1KRjXliwYFQrY55uTq
+GHczcn7O0ajwFZR7b/DXdcwCIXVj7ER4YJIpsGCSyY+Y32W1Z2djWdoR+q0
k8qQduXot0XPUFQ3WMwQxmf4bEPc6iS9N54fcQgYnC5F/3EeV5WZLe48VGKr
OZ+75RuHavqyKkH5Z+tdk7gsKLyR3Fl5PQorSDyiYeeyoSa1f44rqBSJjoKj
E1/McHKhiy5Rogm9zq98uUiph86gk72zXGXowfj54VfWTPTl012SY80C17T9
9cJWjvibWfSTiCcJde++tinanwk7+5bfKJ+kQJjQ9F7764Hgsp2JYeNWAara
+4d19GTA/dvTvJ/IiXjUOTxy/0omVk3Q+Kjt9ILQ7J//LOcigTEoKK7iYDyM
HRP9LNRfBK9HfX4K6VWgNNfb3ttUMgYGVPMzDZhjPX/4fxKS0dBHe5YyMVqL
d55ti+8zzsD2R5v12fcbgT4Nfv9dD4ckqcFptxdhmFO98Vms7Q5eXO/5bC5Z
h2NvSqocep+habaR38//iCjo1ZFssVaLglrSH2gjk8DedsreLaQVe2/9MBLQ
SkGugDdRLBGVoGdo6uN1tAE9TggYk78X4iSb+djeqBwU9fTUSHfyRfNDsly7
iiownvOR4//7JtPUsMaPbWTjve8ubNTT+Tgzeuzkt8RmSEnqqbiunIPHfzLK
f79TgpqCJO5x01o8OF5taXWlFJrN9g0P+DgCffxbCa/hVvzmzZm14NKJ21/R
f2RromD6gdKZVrcICOjTqg3VrcQxlf9a+MjFqMBa/8XetBn9Fe/Qaxk9wyRr
Vv3AoCbcs1eHMb+3AJX/MCSUf4wFfcVQ+9b73lhU1/cqebkYe2/evKkpTsVT
mS9Zy7/b4JTKEL1SOAVpyIHuricp+OeVpoA2eyauvM92yKsqgpbeAsYk2yx0
uWrhsMGx5dcWhgdszGWAeoN8uMlBBjxD/zI++X4DPXftlTLUU0fi1bqXG+za
4Cn8bPKsjSzIKNGejx/aysn+d7nV9suNni182qQ3MkiwLr5+ZUIDCLr/CZ2k
KoCMr6x/50k9kDA1U1a5sMUJyqXstqd0gDCMdOufFMBzD5dTxmdeUCo/+lwm
0BSn7r+jT/ATQ0/OnYMVhxWBsCfDpJXjBhA8vvKRfp4AqkrKqf49muhZqLJL
0P869htMaIz7XQNTlYd1d98qokyftT3XtDYSpnal0nTvBOrw/oqlo9eAYEz8
cIZfGUudfl5UG1bGjaS2DkiOwmN3HHnXzeIwvuOl5ZP4IrxtvW3/Mak2HKup
UxsaqwQhGaajzwKa4GmLxAMtyTZsvL5PsDa3HEYez0VK7gjHEI6l69+eIqw+
l7twYMvvN5dl35R1NKGE+C9J3xv5/6PoTKOpets4fMoQJYRUQghRkiFjcpsq
IURlSOY5opQk5ZjneR475plzHMMx3scsJTTg3yDRRKVUMlR6vZ/2Wnuv/ey1
n+e+n991fdhrYzmxW3nGIgMO3MlK040gI92g4uVMYiRM37/AzhmdiN5mj+b2
b+SnBe56VpNchb5sYg5CJ8io/6+Ge8eDHvhvJS53++cm5CcrmqYVxcBKd9aD
Q8n56C3pYZ2f0AISorSlOK9C8AbVX9fnyNAZwkd7wVkPsfdGGmcch0AnPUmW
J6AeBef9896eoqGAR/lCo0YbBCYZE8KdyFBscjVuXSUZtSgnc8hL6fDO64PB
b4VWWN6+gPF3aWjcHfHMljkF/jb7GocMbtR3xvfMN3eaIXHXHd/HbyNBwlE5
a/EsGYNaZwPPydAQlW2nPGrqoZvp0eXoGDJ23P4rRGvMgXp7h+NhGjXAdJN8
g3WD64UHrF09RctgqG2bAPuPChBxMSO596fjGw7ZDx3evegvePlBeXotNL3Y
ujiWXg8urpe3/RqlgEGffCqTUSrUnDV4fWWkFkeT/9svsZ0CzF6+VgojaZj5
R+Drzl+V0FAWkTFU0gi9wof2f52sBY9IPROLMDLS/psNINuWIMOBW/yO07Uo
MkplUgwsA37HY83bxZrhR+GeIXXvImzdk3enY6UBc8P4d3C8awLnL39pVvFX
4WeH6VCfSB14DOw4+e7+dfio4FiqylUM5666jfSM9yI3fxr9FaTBeuZvY/Mz
5eDx88S1h/tjsH88UndtdwGMh6trO1g3oKm+XqnLoyLc34NfDuk3Q99EL/nD
UAWweylOMHyIhsKDN3a1mlaBib+0Srh3LJDdr7/epZmBH1bEVSwv1oFFhPqq
/slCuH3B3KyVmAFf7DJe1ZQ0QLe4XqumHRlyn+/JTwgvgEt1m05vfRKBlZFv
r9z+RcNHpiQbAYtg/BN66+OWTyXIwYXKt9+2oOXakiszxuAOz/cxHy/XYv7Q
V3XpdjLElhz0MUu2B/EaR8/AURqQUh4F6N+goIN77eZbUwVA0qNbOmY2YYSb
UaXlBv/X5sVoZFOrUab+27dSLRtgddt6979DGUj7qeTK7+aEbfsl5mbT0mBV
s/z03ov1eLVf6mzomWQQzpGaS99LRWYF0UhrchHUhHjT2E8NwPDYoEfd32gk
/cy9dKKkGQ+azHasL5Phl7s+bCOmYvhmvVhvqRRYNlHxlW+Lxs++t+7qCCZD
8cDOvsn6KDAQZGQvUCjHUAaHw18qMoGd6cGtf4klUBQXyPfctBsN5887fTNK
B1GKmbARfxqaVN0sLk/r2uDwS2tRs4EQ/jymPHouFy0EL9pmp9UDfauAP6U7
CFiIAicO5lUCe80Hj2mjDpxZbM/4/l8ROpNmzqaaZoH3bHLOtFk8xpV9qxG6
VosmHof2tJ2moav6dtLDFCrujxGfUSsoRuYDux6+OpALt27zbi4xLgT6OofU
3kgRPLFSpeUukAbhHhQtgxwSuIZT439zNcNVV7Lv+a4cuJFvSZuIIoHvkmyu
afRNqJ47O0bZ3g5y32sfnD5UjZX7TPcXy9zH61d2vtC1pyCn8qHBlH8UyM3G
hOcPG1BGMlqVTqWA063Z4fzCYNw04FfQHd6FVtqBGUTRZDAXizVT9k/Bv9Nm
zjsMO6DJ4sCLJJ4GpHNf+VeymYIE18bwqLSrqJPSNPbuXRWmfGRgdummYP3F
A2z/YtNgdCC3M0gqG4aueqLGXCu++M9asf0cBfQjr32K827feO+UQcXxUMg5
u5+bKEuDEcJMpOJcKyyFnnczDO2EvVv132Ra18ImTtZ2wzoSNN1iE1CZo8OC
34C0SzMNkhNibqyyNWO74tjtsa4IULpXX/BsWwE2UNQTfu+IQ17PWHOVJ0l4
7/Hiim1oPnwyGgnkolBQL04kVDWTjJV/Oh7xs2xwnIy0dOS4B3p+EynYGxuO
xu9GaHHs5kBI2LST1VoH6SsJ8fNGJ5Ao5BL28rwGlm95uD7TpYH0TfxH2VM3
8rB/2+A2NSUk1l7d/YFsgQT7qZ0OypeQIHP4cfgFbSCopAvdvbxx9BJuST2g
h3U1A36S41ZIYD/QfYhfHAn+760PmekDcfyYVpCpItBX1LPUjTdydVqRLe7h
kjrhZnxkLLMJEOWEzlOP6IJGFn3h6UVjIDBGTY8dO4YaP1S79+69AJkjC8NG
xueQ8NXxYo7aXtRgD3Mnt23kcOrxn9ygDESWgOPXvssgIXXQYiFSFOnX945p
6GiAY9h1Te4NTinQ2n9OdDwHU8v/HtwaX4qfLWJvWeoNYMMYyyvXBw2QFJaZ
OUtoh/zsvV/2xvZj/6Qbe31bHHTo7iU12xdApDJnF2tmIzj7J70B6AJeq7a4
ET8Kprx557j1+00kyK7c7UcXbFXjP1s51ATGD5Pe1yeHYC3wnTd7XoJWx1RU
P0XlYbU9356+fQ/wvx7emyTxXnzJaHa5YnMxTkq91nuk0YG6n0buvPW6g+9j
UqS5sQFsz72ZGSq6A5+DpnzMnTfqnm3Z9J8uDXY1/WK4dCkR14lvOMZZiiCr
PN/JIjkIjEcf4NaN9xAycgzN8zsNLAf16R+gDdYHlo/sfZKDLHTTTdZKzQD3
5ZZ4E0ogeuzZtyc+FDg+vfY9ki0XHeynO663d0GHQJcdWzMNPw3d54xs2vDH
Fzu7alPuAbPqMp9rAg3t39oHLl1sQ4JzYI+JiDQoP7kZyOeQCy92KrgVZhXj
wHFfMZL7IE42B1LntOioZ5jiwJ6Vgt++FM9Je1rik8MyQmaOPWB3yeO642oB
zKyp2Fgdq4HWUz7byi3Kcb6dwvXUJBnHNPjHZo8lY6++9UTo9XCo1ehQzd2c
jLvle7lZFzLQ24kvLdS3AVcvrMeRhG7A2a0Fr/+RmiDHI/q+j0Eu6girsHGY
VWHAjfELWVFFqCnsIynwsgKIlMX/tsmGYvm+6drxZ0m4FCE2PRRHw/Evl0b+
ehciu1u6TV1yPNZ3iX1bZEXUe2zi/P16Kvx55Bi2Y5oCGjR+F1slEvAL6Jdd
WKsB27tfMn6OnMcPaiFDKXNluFk+WpNBMxf2HPxSI19KRm+vmMZPpDwsj6Sa
2DDVYt770q9EsTYIUE6v0ggoAlWWhJE8q2CY+m/owbY6EnpUW5vJnyqH6JWs
zYpHC+Bhn/5TjqkkiNegxpyqToVy5ht/zlysB/+nEzwOolR80LdjMlmuBMUD
BmPm6ktA6jTPL97+SqjzPlj061o5Ks7/OL/0OB4HDbJPea+EYetArc7IWgvS
NKdisuIbwDzy1rtl5kYkmP2qcpYpgCCFw7LUt6WorZHQGJHfgqSvkgce5fmh
DJ1PZZNoDPQ+yp6aukABRV2KWQ93NUrbawYouBehwTPR5wMxZRh4ocJq9Ecr
EKXuBzJ4+0H1tUETbWkKRqL2lXeVPqBc92d7tGcJrHLskTua0I/ERfuzhRZW
UB3htM4hVr9xfT/T/VehwFax3GjzE+G27InK6oOpGKz7a5lxoQmxzMYoyjMG
c0t8ohaVmlHLtB6vJZWBx5mevNTNDzB8MqPJ6kApWEd7Z7yUCQFGz+8FRQr1
MKVtxH3AtQizHXpkHw6XQAYD8I7xbXhF4K2iSmoDvrwkw8jmS0ebWIHHg4dS
YZvNo+EaaTIS3tienVuyhpGtm23GHlFgc4lbg4l+AJzMLKNoVpFhcc/+Lzzt
ZLz7bKut4ybEDP/a5/lijWjit/5uy0Ey7G5kId3y70KiU64wh1MTGgw7Ppp0
ykLyJq2HgyopKPPjVewAVMLuud0MUVx5mPp82ElctQFv5J/ivrCRB4v3xzz/
SFWC1/zjA0avS9DwgZu2hTMJExLPnCSH1iAbi/gLHfsOGOTgCojyTIGRBdX7
F3+WAm11xxHn9C70ZdLbxr0nGN+KWo5tM46HuuxNfurLdKitz9vZl1CEu88U
nXvMQkWNzstHeleL4L9z4j/GP7TDdcU8HdfhTDQU1q/sO5SL6WcuW+Wt5GAY
Q7lWo04prOQn5Pf5XsDEi7zit21C8N6AgA3TeCb8Ep0fqNbPg4UUIWXRECqO
+kbfScsuh4iffH91pxJR7urni3ZrMZDv6j+cEkUF/eJkOw4uMrJbuMelvmwB
LYMinri1MrQfeflzcSgSXdMmh/y2dMHcaUOPkcepUGBF3VZZ1w35csE5J09F
4oxyU2KaXynWpTHQ79clY9PK4EndW8kg80bmr8DOAIxfK9+Z+jgPp4UP8J94
Ywe2Wl8qJlO0UaPi+dXr0rpIQM38pqNySFjLeXv+iSyyDGXvYVJQQY3yJqYs
MxPQqP11lZaih4Srl/FO1kZ+Nu1PfbRNGQhTijFdu87jtPPztYL7F5DA+Xkt
zkUAQ2d994oabOTiuBDzXhldIBB7BuX/fekkMp7eofNaHIkFyceeBx1G4g2m
+S8ze5Eo6sRj0nZmwy9fRK4mnAJi4x2yMJcWEMju42cdN3JwdJ8J78ON8dUO
cAz2q6FQvzCPwi4tJAQWvV9v1kPi5iN5UkJmoBHy9/Zfpg3/nFRMYqqRRcKr
3VO3rwjD7ZN3zsfIXcRtSbuafTmrMeCLpAoxLhcNDQJ3Zl0YRLrT/LbQ19Vg
MaByi3S8ALx+Gfw4daoHiR79RPqdJByXuH73T1410P3OyPd8T0OhK61fHFii
wFtJZH7L5D2UDZFXoC53QCalIJe3oBgC0k8nML0uhuWYyaEfRnRk0A+LK6A3
gV9YzMw7/lLIl3p/4Gr6AwzhdX/GcLkcszOecMfz1mNEyNzE/oYQXIOIf2rP
6kGdXh5xY18lyHxJ//zWyxI13HwPZzNTQefBO9/syGqoMBMXO5kwgMT6V8LX
q0aQ/4GMEOVBDuiMGmxLDUHwOtnH8u1XAzzw4Xn0kNiMxtu0tm8oFho4aFys
ul2FfrsOHtfrqsXIaL7leJ48+LeqJCthUA0eocpnHHjbcKWQ1DL0XxiKMgnt
rLdyg7UPfS1BPkXgvrzl8ExJLdxkYawcrurGt9zH+Ixz7dHtUGJWCrUBKo+3
K2W35oDjRyJpW1w/8E1c43UoaYE68uVgj4PNMHCqICeJKwxHct+ccuOswkXP
f+GMX8vRXpCXzzCYggbZKS9YO8hwWt9o2GG2AovTux3ER5rhwJKfbYNvLGS/
JhuJHWmETPftJ+kpZHDaxl6S+F8NBEp/99+9noNGOweTzyRRMPFYqrxBPRVK
DpipsJc3QtqNnQLtMzXQm0prZnsRiyxW+zzMPIJQ7XXi03cOoUAW+7TrmBsJ
OlddPK9vpcEn7uL/Rp4Uo0/iF3v33ArQ6Zph3DJBBKnNmSH//mbDoJ7smuJ4
A97en9zh7deNv1xeb3PjICG5pCVQQIiK5QO7dgWaVIOrn4ehjlcy2FmcytvF
XgpcopdV86tj8PqyZspiQw1+96LfeehcBsw3GCZpnUkQTb/g6BqfDrUfLKz9
bAsgtXm5X8LbB5klt0wdKQxFk5WZRYWDmXjWw2982zIJbry7ok/9TkINE8ux
LsIFYFC4NbMzqBkfTjjtt+nLhcIkn0OBDwrAUmVhWvdBHuSPxMkx3NyYl/jY
eat5Mr7Xkh4utknFzAfBa1RiOVjYVV/VbC9DRSt5E/WoVlTd8bynwYwOjkFP
m8hNFNDiov+n/bgKZNjsfdvnQxEaeXZnXGyDmQ+Cv35vLQBtaqbNsQA6yPQ8
SL0pSYfxtq/PHCfqcchsniZCboClzpclfGZ5qDa9R6rkdhiYthud3ruShtrh
Gv5t/XT4phptKRVHhlOEJMEUr2rIN/1JmlKvQ8eM5Fmj+ALEVyTu0OwC6LB4
sD8woBHkRlb5Lie2wY3i1+/lA3LhqQTDYZXYIrBJOh8YHd0F6CfjuHy2Hi0X
qM7iG+u2+OO00bN1Eu6u6W3WNq8AmRIJ70yoxgZ7uf12DxJR9ms9AZIt4eFg
2tr613R0/usykW1eAKHGSbN6sslY/2LQvKswETVvRZZXNJeinBTv05PNibg9
3UVLUZgELnbpz/USCjBx9B6HwLFmyN/kkZB4zw9iV4Ktw2qKoThLh2X/iyQU
uiYtQtW+gUFGXGYzgjWwfqddNe5VMjq6qYyNSVAxe8iBvyg5B5uGuiv8XUvR
iqaiM3q0DSxPkQ5F9CRDQ6lEezx/JF7sMuZiy6hG9dhVRlmmFow9cZhvwica
pC5qSDzekwcEzd0JtzIAL82l/2VhLEIT5kpVXcUysI2Yi41sTIQ7hNZku7x6
+GHhvWwZ04mMuZ/1/6m0Yb3uuMKhaYSxivG2E5IJoFvU+DartgRL9E8LPoYq
ODg3+La5uB3Mfq7b1HNVw89LjJwzBp241cw47KgqHcSWTI90YA+cFpGK90oo
Q1nfc+KPfMmYXfprn/ZMDZ7ovM7t2U/GXipV8lqDO1Z8//zjQmManOYce0+V
acYnf5la/nTWwhEvHxN6fQxemzwVOXixAkMbjxold1WBVsTx+aCdmbirN6af
K4iOjtl+wp+kr8PooVNHOWcacVt+rtjh/hJob816XzOdB3vH9+xqq2pD1YWM
Fe7MeiT061LOPPzROR054JAceRGInGLVLGyaSFDnfOjz+Tjk7SY77HE2QaKg
cwaTkSFoRC+J7vhlggSvFHNdTnUgdLOltjGKAPHjE2GFxxvnv286IDwlBQRb
vj1N2QQUUvlml5XAi6Tk2W+TBmeBoP9GIUV3I68Cd9lvbTyMhLYe85+pYkjM
OxXs3M0HhNIjR93nFJCgZZ//MOkA0H88ocZK6ADBXF8gl1keiDqO83eGdZEk
decKd5oe2MqZjyy810XiYI4AY8pGXrLoBqvvOQHE1rZ+PxVVJJDk1PlkjgJJ
j8jCLiKLxr+nMzYb74d/CjPg9akEpx6fd/iRnolPJGT/WL5+gDLHblWyxFYC
8Qer5/kvjqgz5O7vU9aKNhclxS49JcGfHJVk84QMoO8Ybrgu1IbS5Jj2U6Ol
2KP5QPqJfj3MM5ND12klIMT1IUWk9jametMVK36QUKnilfEWlQf4+XXT9q2M
rSBjfkxzoa4AL/NaFzQLkNCULSHpT008WopPvmevbsO8uai26MR2MHx3u5X4
rBfLI45to5/IwKY9kkF2E3Q0UL/6ojexA6jJn5YavCtwmlftXKFnA9B/Emm0
nvMQksjHEupWApEvezjn4+JA+sGZxVKFZmzzqDPUUCyEdpZEQvH2TnhZtv7F
YFs/PnyjQ+rYmgupUcd7XpjfBeIrJptDeelA6FpdPHDWGzjb9Bzttjbh5eO3
ft1SqALu2qO5KkYlaM3x0o3HqBMoW46lBg/RwVktT7uaRgHpytX8V8ZNcOG6
1/kxaRpE5B0VZttXg6pHfSVsxMsw3cJJzbO3FympRtQpajzsfPzT8jJbFypK
9naW7u8CWnvliRnTOiC8U6xgvCuHtWnGgv5vs8EjeOtobW4mTsYsOedXkPGn
141UO9l0sC2Y5XpC7Ub7O0dGt32Lwl696Om9OVfhz8HmIsb4HHjOFNxm9q8J
2Tp3SnDK12Db8ycy3vkVQM85U8XtfxYWOE1PC0jUYOUyTaZTtx707y8FXE+t
gOIw7Xe7EtI2OCKtb+FFGcrcFbDY32+PLEx+g7tbEI+7BF4sdCBj9A0GyYTE
EviaeNPj9qsyOP8ydC3jBBk0r2ex73HIB69sqFA9R0Pit16FiDV95JHjzKpP
TwHp54EK3cEhKCjVySOanAHZsbvqNJYTIdNxq0La4wKgLY24SpxrgiGb/6KZ
HwUBXZHhCu8hKt75nqp4cnMsaHT1X355rggZT7/U296ehNGpToshvMnI5nHG
i++oPxpOyTwYsQrBupTUB5ZlzdjFsX83lSkH+U5meqiSyuHC9OeF+skkYCEu
3s2qqAeWyOFLgnv9N+bxg9TBaCrsEDbLuKRVhgF/wsJtWd2Q9Z7Ywr5RMnbJ
SrnzECogzcl9dWAiE/qOuUufHOiCui9lX7Wyqfhk9obgKbZWaDYp3TxWVAqM
pTLMI5/OYceo3592nlLwjOQbVPlWhLd5cjrfDhXhrxhTU+8lGt4Yvq78PSUa
Os59enOtsRHWe3uW+v1bcZJ9Jfq+cjmKLN1Ka1CKgfZHO0+ayzXgJSs5AUxr
wF72ZwFeh5PhKE/Gy4T4a0DU6PC+kxQD2TwNA1vqypBdLL3pnHcQzEnkZW+v
poDllRzew/NUeJOmev/jUiqIibudkVgqhJDP+vZDvI3o0SSydotMxh8tf1Zk
7AuBxYi+ZSG5Ds1fJ1vUz9XDkGPELYkHVEgu4PhQvykHp09yO773uA2i8kuf
eE4GYXL6bpry82Rw/h3rq2nfh6QR1m+1Um7ozzBhLqpAgi/TX57MTXSBzPqK
7OivNqh4xGwSVJWHL3pST3JPb9QZeTKo8R0JVrn/uL5bbEFCpD8TpwcDfjXc
G56tt9EXxMb/jDMfqxMG+QRzuFxwVdBqav54Hnze/54/krUZzeI7VrWL65Fb
6jhrUFkJvMwsu9LLteGJxAcT7xuaQOfge78/re3IX8BhVBgfD1e6qNk/8++h
+pvH1ZzPs7GJFEoUmYpCJZ6/OBvbDavr1CvKqYgLkop2RgwNePP4lm9pI73I
MTWEd3bXgq7gVMuFh4l44krTsV7BStSR+9g81ZcJydyVFV+p6Sj3h2lus1g7
ip6pXp56fQd/sVws8oFS3Mv4+8D5jCo0MNnpMJ8XCtGZhWE2YZXwAZo/LjK3
4PHDCnpKDO34TeduxfOjHeh46gSh8WA8RJq9fM7c0QCcT2WllQcaIXbsR2v2
sWRM6PntMj3dDGtKLTpjx8oxV02O495bKuppvHRf0SvHswlX13VlOuFC+0Nj
PgcS5JZPG/NplyCL/otevkp9FNJbIr/+cAYjf9AN9VqckXD9k6+rEkB1acSV
mUVl0IgyKE68dg6JxjzjK4FiSJDy2ywkvAkJGbvk83mFgBAiczrFyQjpDl6H
FWwUkUBYEracfKcueHTtan76Ru5VvX/Y56q/Ma6iL/sPBRwNV+2wNdjww4Y9
ZI6qNXVOykWOp3IbuaWrarxH5NTG/sf0FHxEUCNp1KvZXAmJfO+7ZbnkQSM0
1k9MyR6Fom0KGyKFgMjVZ6S5m3sjN4UvzPTJ4zTpys7GmxdxeiG346zNSSBI
O9Hr3mz4a1qHgeeeRXU1FDbQEk+E6UCvjy3S93C3omPgnH8ysF9pEXA8+xA9
wsL6ecRqgDTQOozRKcDv0jp3kIGMvqdNCbs9yqFdxf5wf1skqn7m5Vr+0IkN
Ey8euHKVocQLmbH3Qd0QlU4f+dJBwm8X45vtTRLxZJPj6oB/KSgd5p37oUxH
oYJ7xyX31AL9aLT5faNyFN77p9hKph8Mdsy3RFV1gmqOYfWF0nbsXIkN2Eek
Q/TW134ai834qWIh7r5CL2rkqQi4cweC7VB1nRP9HnxeZOHV/+aPk24mJnPf
EuEzS9KyfGw6XtZhoiyOl6Lj5UU9G7V8/DA+l27EXov3SVUWUS7p4N2SeXe3
Qi7YEms/n8/rh0vibTV1pYkoJSV31iq0E83lN7eI+YRC+b3tRT4M8UDTe3OU
2ToBppPKCHoBhcD2+0zGpEEx7Mr0MjzodB+j7dVoaoIN0O2xFlPjRMOIE9oZ
j+y68aGdg8QMezWsh1dS6Huqcfvbn33hKyVw1XrrikdKB7BfKqpbuUfDmsfi
qcoJNDCoyT8i1JMIqw+PxXIfaYXeYg22XVzFeEuNdevvMCpeSwsda8EK9I8Y
xyfpxeB/Zia0y7kOas2L+RfGUmFwi7nQ95UCNPj03OlUcR1utq7/83uD+6d3
TD1nuX4XnkU0H793uAFYd59/Y3AmGTwSeY9VV9TgLx8rwZTUDgg/F+56/1sp
rgiMv1C1MsPusxe/6nzpwft87e5cn5uwt+jMWv73dDBaO898NacRrG5I7JgS
8IevqafsjAQaUG+3p8lfzyr4xX1utpy7Cv6sLIXclKrE80dbjLPvksFCiVs7
LCAS3RPODOdaNCHz1ewTppQg0DwVwBKYXIUPCft/5WaS8Ny7w/edlzIwYOo7
/4vMbHj9tvhpYEkAVj/hI9XSSLg14NrDXa/zQfKOXJDcrS5YKnVPStWJxWQD
lwrSeBnQBd847EANMDRxf5Y8VI3Je2KXIn021ifMK7p4RzsOt7r/8O1Nh+h7
T1qvv63Cgsl/Wz79a8bIdL7ASAoN9LaYakQohEG8/loO49NcyGea1LS83Iil
jZ2usq1lMPT5jafsZRJMr98hzDN7gNwNiUThz/WgV1H18t7GPpxgb+svZdEE
PipB05efVYKNlkeIxTANZN8zveSYJSPdOFdhsjUZPyo8Eq2KIwFR1nwugJ4C
W15HXNO8UYqN0tRCG7sw/Fkv+UM2LwrU2XRSKWsFmMsZzTUGJTgjTBXnLG5G
KbaR2GfLVCDs44qz7yRBvcdApTxfN7BJ3hDPm4yEMf2TesZmiXhQ/1mXUXA7
8lEdL0pIJQNT3DLxr3cu/v6iaBlo0g22j6YGPl9vRCJPO5+WtBNOrnd2hNyO
A2/PHrEzpRRgd41xd/lXD8xyfXb7iAVI91I8qo9+cGJ+/5m9TLUA97zu3Yoo
hVGLhsfZV8PRkHJqVcGdhp6SpV0iyUXwzVBa5UloNlJmo3nUrzbCXfi1NIcZ
0F4wHB3SVQ7O8q/e31QuReP3h+dGrG+idGBiaIhgJ7JXHfsgatKIlf+SbWXG
yFi1XCnMkNsD6TFPONVu5ELM+Pk0Nu67UCzhE5V5pgqNZNTO6XfdBvJTxa+a
HWWYjMEFwzkUlI1h3U/73geq3axn3C4m41FLwtc7X4rxu2/QaANLJMqZ+c0y
RVZjMCvrP85bpeB+X7Blk3AE3P2o1r8YHoOxrDt+eBW1wiklC2s9kxIM/1QQ
v3I4FHLVOA4WF7ZD0IRhQef3Jsw2PTa2uzELvpuyxbSK1uHT2MeRDf7VeCmC
Q6DFpBnfCxbGvamtRvLnqr8iElQIStPyvjNWD+rHxg4JuadArtSH+tkDZXi9
jZbtkVcDxUdmeOtjSlHULepT00QvWPnQ2dZmSkFv6LxaSCEFTwdP5yuKk9HF
cGQqT7MCKFn2L9Q2PHF+Zmt5jxwNCGq3GtXunYKD/2Kk3CISIWvhxZ4XylTM
5JJvxp33kMYQXhUktcEVTL9FnNb2gIa+pt3V7GNA5xEYr0gSQeInU06tMFFs
2Epwust5ADToZxiHd2gjgTtzW5fDCRASOz71r1kTCM8ujF8OPIrEkdS304Xa
oLFTwmdFTRNl/hTd3ztsDhfuttv+s9QAwjGRT1ty9gB9vktC+JExyuwn/zt8
9Qwqp0eebC/WhumPnOvcQWJANDvslHrnMNrSLOnf/YzBu5zLfvnBeSR+mKsr
cTwCpPi4K9t/nIFvMmRTaVRDc0f1YN+Wc0C44+1rvSAOhKiFkletYkhvtv5G
EFJE4tml+5a6skiXeXJ1ncIPUrenP219GQau+Wqzr82qcZrDVTvKmQSCYykO
/SeHsF6q5tXDKAoQng7bdFYIocQf1098ypXwaZ2iFOFcAm9qKAt5l4uxVHKW
3ehbKxbGck94LJDgMf/D18b+ffDRmHWxXjQDrgfcKAz61YjGN4xYbvW3gugr
hiyXgUJMtpH4euRoGRg/Nd5WNFqNRkXWDC29Q/BDqP1owp8ooNY15D3toEL0
zeJtWU5JaPf2sgSTTApMf2/LG9ruBlsIenrxfh3wvtWRlv6vE+mbvk6UvLiG
F8WfEOudqTBeKcL17FkvqH8UPjLq3YTmbBH72K5Wg6/z/lcn7xUAS8m/9S3y
qVga/O7ekBYFm9m+zgSyU3CA1f+R1YuQDS6hjTyPy4KWZWnF4q5cPDrp3b6/
vAzlHGNT2TiL8KuoQtH7wU58eXvL8eatETAyJVNr9HMAMkXceOfCGxDUlZT1
/1RCo9yjNq0DNFj4KOK0pDCEXONzUUHLjfBZyGC306cK8PDX0GDdVwon5974
PbahA+fHg66+3CVwbPoukWEkE+P4K/W942m47lXy0W5zMXyV5+nOaSEBn3VU
sFhfHB7Z/zHvZTMF3bpsYyW3b3D6qqVqk6Ml+kVfDvBpq8SEhIYjRcKt4O/H
4C93KgCaRrCora0ME4V1yoWGY1FXKOII50E/LI7p9zrP4Y38N/bZdR1oxgBl
7l+j4TV48g1jfFdgPNjdDVAOnguBa0odHYWPstEx6pr4r4NV4K5ZNn+dgwxr
fYpnGuLLIeLPui83UwPwBKSEk51TUQZYebcZ3EFxht8PEyQrwF39GW9JRQqG
arGu08g98CooyYWm3oaJDn+qh1Wa4bpYYop1UC/wOy0y9f6JgSTiPSJ3Yia2
b4m8QmlshWnB+Kh/Vw3x6ND0hMHBYFiucN3C1lsK00aGHc1zaqjawz/3LNcf
WTzTFT5+98UFn4Pe7BnZuLt+/ohkfASGt7jsysgrwOk3AqN7r9XC8leepMg/
BSDHR6jacr4Ym5y5RRKZm3CgQrLr3YO8jX6xP117kAJSOl77xfwp6GWTWFCd
SsHw778S9UpKQH+1/WbntQ3vYLswa0GpQ8bcf+9UBWqQ+WNUxOnIRsicdvb+
frgR/XjGyu44NWG7607joewMjD2lbNd8uQyDm8MV9GWrkWfwvLaEbAQQy2bv
Uwb9cA2kRJQYvcFw+HxE5d4KMP5qpBkVlwmVz++e5qfeQ85IAd/3eimQnLHv
5c2xXAykfj9k6diNkR/FQ0L2hEKvQMjvj18TMUlm8NH01lJIyQ7dX3CfitfX
OdLSYloh4bfsposzsTD/E0tsFtuBc8esIIdcCZqwrt9b0CLDj4WVf2+/FYCM
eH3XAWoUZlmKa2lKBKD77j6FQZNE0BryM+uKb8WnYe/Vt+WlgihLyFruVCzQ
n1GX//P2hs9f6Zc+Cgag07Pa7dGCRWjw7sDx8P96gD6wT6C7TBM47sobOJ1o
g8G/huLOt10wcVRli2pGEXSwPGaP1cyFurLdBd8cKWgsVn96JJ2OSrdKWtSH
aXjrwiHldwwVaCJxJcbiUinqvY0aKeUshMq+XtbVnWTwly0qvdafgFsTdG5a
16VD+PQF5WDOXnTUzQkysG0BkxdPWraE3AbPIVe3pG2InF/3rD9xKgLPS3ej
bi3mAkGnJPXWLUfkYrVhSW8therCvs/KsFEHa1+FJC/Xg/uEYbzqqWTwN35N
m7KiouKLDmv1HZWQ/uWXGFtHGvglbxEH22Kwde/rkWG6hU0VtomVfTnga0KY
yObzxgL9ntVoUgTungHvZOY7MDz6Q5zp830wiXpiW0ctALvt0uP7xiJR/Q7b
0+j+TOhtsZSTTyiFoyP3i+oLE6H2oPVZDdtmIKVfv+VAyMOnR3lNz90vBo1G
rT1mO3Lhqz3N5+BQD2bXX4o4np6Pe3N+GxfXNIKNyz9OtvpSUJUYYZhuHcDB
xuibrQNJkHBiW6oAksHJR16/y7ALNWocYnf5KIHGVSkczz4MjomHAnW4LUAj
ZkaRkdcQWhzGsj2cDJA+XLSrK1cbph5O2/oR7FBD2X3cQeE0EnpJtvMOTECX
q/lqEnMMie68Edk68mgcv8uz99wpLI0PzL4sYQQaXjs8uhJNkHyZjeXQ1wuo
kS/O8Wg7AaYzu6+UxZ5C+peIoMVjRkBIvno9Xno3kqzoTE+LDJF4IrXspP+G
XxItovZHbUcSR/MxthVt9I4wHY74IIXys1l/DX6bA2mzj8jJi5Ibzw+oybon
DoL/rBjXPe2B0/6J5qM5U2A1fXWhM8QI/PqHmlTZk4EuLzl85lg+znxa1QGm
Srhy5Fr6Be5hXDi5sl2ajwzb7xx9Ppibhw1XdNnviLaBN/XTl/zaDBBdv6wW
rRMC5p9fuDVGlyPxS9iTwKvxGL6l4OPWoi7YaiF0/DmdCk+b7sZRv7Vj5nzp
alJnOTb5NOjgUwQhE+YrFf1xQO+9ECxpUYzS7O2FqW7t0Cy42TkjZYML/962
yLLrBP+aXXGdYq3oGdj7wG/9EWRK7aVr7b4Hgnnay91elUDal6MbrBeMxiwu
J9+xhUAk9QPL5KUNP/3roiVdUwPSDsrNL92pwNvcLG78pQZt/4mw3rXJwJUW
xYmmwmLo9n4e7GBdhdq1Cu8ap/LxXNpvximHdvxc9KdCqqkb7Bz+dUuIFKMd
m1rc6dt0SBmuLLkp1QBKrMGsbJuC0PO2zcuZ/QUQ1DR7T7vh/98DtLR9PEaB
oh3vW1LNk6Bex0/TXXjDh1CuHjhGYSvHKaFo5kS8nb7zpKlTFn4jab54a0bG
GpGSuPbWW8geYLwpu7cat9LWjtxZLwapfe+mru6MQ1qO9n+qsSScdO0PuCkS
i7wHeB97kAvB/GPM7m3VpcDWOuK2qSUPs/soR1we56NxiVtI1VATFC9cGAjU
LYQLo4Js/jdrsJJ/Lav49obPdBcazlfQINc77eTWM7GglrflWXFuPXKvRvMK
8ZFw6FrLNZdNTWC8y+JUirgphoqJBD+Zy8KqrXsW1ctqUbc+8angpQjY1Pel
9ExkBujIfZy6HlYOuf5UPoupVnwfZt2TH18KueXcIxdPhqL1pbN0rg95+Pmi
wGF8Ug/2gkmfouurMdH0B+/dZ4nQKe4LiWvhcLPuRt3ys0ok0IfUHoixYa68
9hKleMOvVKMled9kIu/2M6sxr3PxwUWLi3/Sq2D2mb3p+dJ6pO++7qrMYY+v
9zH5kdWKkcISxnjQoxgUJq/V859oh8mKR00sbAlo2ChGYn+QC9NROtop75oh
vPbFvH9yG/xt4Jrnq6eAyhvpWU/GOug+NqHSmENCPtksdo9PRbji7COjnF2N
Ip4KGrrxaWh3+GbO36wUIHBuokXWyAK9fQreHyrDUrWBfI63OWhu8uxfvFch
ygcYuuk8qgGhiL12++8HgVbg1UhTAhXpzM8yJcpa8ZJQeJFKfyWmSbR4ZCok
gW7ok+Xxowlo3qvixHOtEr72NY5uLy2AAxLBPnY/S3D7px2MHyjX4CVnNN/4
0Rw0WAj9fWm1Aspvfb9ES+3BZ+NON05wkuBk6uc0/jwKso3SeTVGstFlFV/C
rgocdOnd+WToLn6hfaj/OVuDXR/WhSTNY0DovICRV2oBRrF9GXar3+DWnJDD
9loIAW69Rtt1o3B/VemlHaGNIFdaSEpeLENPK7ePVWwZuIW2Z7KT2IzWJsQY
5+YwaB7PmG0ZJ+NAGhfvgiUZRncGfKgZCsX2LKf8qtl2zFPxq3WzpiH7Wsh+
QcscdOTP8VSYuwYuLtcGxcoTgXUHRWribzz0Lnh+rj5BhlQ2IYGydQr8yXj3
wN+0HGIkDT0ktzzChyoeLwIlcmCwQWVa+78SGLrkMzH6tRniljjaxHq6Qemn
kbmjWBzq32Ys/PWKAqxSiVa2NxrgQKdYwduwTvwGz+fqb7ahtWBdarMKCf9k
mSuOcVIwP6Cr4E1IBlRCMVgmNcKf8r/fGxTjwHFr98gZjUZwPhttu8ZZDbWT
rb3hqQ1Y+T5R7NhEPrqU5+ZoalIgN1Bb4spoFh4nTPQHBoSC12HzAwKiTVCV
M/BdUa0aegScM4mz3SATkBVlnJOFNWwwdCEqC0IZZtRXSypQdU+fWC3kAbMU
N8fknw6UEX3rN3AiGidvH/lWyGOL7V8oblEMiejb7BgQMNgLU34yxyzofiBa
w3eHAVuQ/O7ySydrbyzlj/Xf96wcip7/N8K7WI60haBvx9uL4NGf4Qz3znYg
5Ahpb591hX3PNytwb21AuaLkwatKLeD8ukb5x8HTMJ2648QsnzoS0llaP5VM
d2oUCBu3xB8GrdOj+Z2+pyEx/6OXdLo2ZroscfU+0wONQ7lnUw8fRGLIDzuV
CmEgyPI+Gr6rDiuvvpPqL2vDqJdII3faSWS0nHp87oolyqjHdijJKoKM78uh
nk+6QGIuajgxewoMLvbZ+FtrouXg34Cm4HMgM6xhSbQ5iRospfsbNaVA5qPB
DTE+BdTYK/wudU4MP+4dmyr4ew5tZ8LiPC7r4crYcaHoC8owyup8JfuDOpD3
rLD2zRrhVCgMX7h1DuiXbX5othyGo/+d+cYSLozlUVk2KhEkkEm9+3mWlYRM
kHlk7lo9LDCuHnJpG0KdrxxSPDPFELDb+IizEQ0PMRQe/PK1B0T9RszfV+Tg
PFGp41x/LpS39ROmRAqxlmHxMUdXFW6qJB2zla0GObEwNckLV2EwM7gvX6sF
der1lw8ttmP4yEHJcSrCaf/bBvny3fjR2saBSSMTRSN3aQhxdGL4y2T+RfE8
XKUuaaUZ0oDD4QTzX9M0OPZepzJZtAUe/l6YEhTsBt2LXBJaQi24f1bT5GkB
CXlOC3ae35QI83kZtGNR5ahdddSS/LUHd3Vpb7n+oBGu/23ldmJsQVPz7voD
MnnI16jypV/SDklmmy4umbVCo/D0z5rHTehRK9GZa9gCbE+v+Nw7VogzBYdF
dkdU4e1NZ3WO5zfixKnEIpYaClyTdDjA3ZuNRy9wM2xpTIBUh/Id197Ug/hc
frOBDgVsZkqze/lzsFxf5JnqXA+GTW1aZe0uxIcOm/ImJ4JA0MS0UvNIOUay
16oMRBdAn+ynEvY9FGB7t0e2/VorSBSdNNrFQURBf7dN2sM0YLwdugXTylG1
5O7fH8/aYDTzm/J3Ryqm3FlQ47Nvxh3befTP3qxAwhITMg2XQ+377lF/rQas
J/vqWpKb0K2D7ajclwZIyizm8raux25JzidnN/psib9U/uSbRpCGf0opEyng
sckuSmYoGS/k7Zbb1F6Kh6RVQXcqBvtS75bQkwowe8Qq8cJ0K4qWHRWc2U6B
8KeZZ1xTWvF805OEjqd1qBZzRz6rb8MvozNtr+0KgfkHzDcjxltxfPznrEpt
OhQNXRLIFmrEKtag7oS33SA0+/npidI6eLxIXna5WgG++uIq/+Ya0GRWVGtk
Rw3o/9Nhfq5VDBMF/dE3L+XA2/v8FMXlBlA1+nyX3b8arMT/Gi4HZ+CHitf9
3DdrwKJDJHxosAoUBYscG5RSgOgpFZ/EYw2W7r8miTUb95G4LBUsSBgYZWEm
GUXGvdHSGm5/k7Ht7fyxyff3YEexoN2PwSpc13J5+VqiAIU8KkRWQurwLOFn
w7goHUo+ZlW47qlC88bVlYQ3ZCy42kZs3kOC2EOqtQYbPl9qXOV0ZzYXPCzT
kl2MboD1+GbvLWypKC+1MKC6ngo5ZdVOvAqFyJISECp93RV3Vcrpnl6noEaY
kPSUqDLqeJ7sWmWoRK1O4iZm/XjsNDCXu5Jjh1VCIeG/72XAvhZqt5lRNbof
37+3+Goi8N09n7RGvY2idqXR+eJpqHKjWfmXdSr8mryw5stOheptRhn2mVX4
VD/zw+/gLhReTnceZciCu78VCHtqsyG05MVzUrwX7i8MrFq9EQU725rdRNw3
+Oqdla/1XwpEXloMm9vZCsK7BPXZE2rRVtXXgkOGhmysAkaaPmRQbJjamX88
AiasDG86l3cig1Hds8LQSHxlPn1fbDkfuHa/evYyMRVgVWBtUYoGijGbg47+
LINrrxhnrObq0XfGdNv8WhKothmtRD7MhBiFhm2x8i2gsyv+6aW/yTBbuM/G
7godiznGlYTtS+ClqF50LU8y3nkTIOuknQWKkbdOZlhUoZCUOOM1YwdkT2o8
yzpHgXWlsfOhV7px82ndUJmzpRB3+LOu/0IXKqTdPtF3owDOyazWGR6pgYUA
vMGcGwbRda7tHKeb4Z6MfUaEfBMqFUfzex9pR/fyNG363ya4uPZtDgfo+KF8
KKX0RANkJ2UrTNRkYOcLDvMCyU6YbI0hZ++6AyRvIrVN/xLm53ZlPvck4fhL
C/RTqkVi3Se+u4ZC+KFPJK2iqAlcauUuqBWl4b3CyyY+nu3Qlnq4/9kEDakd
nLFpymmQ+mt3wdiWQjCJS0rINamE7z/E+cUSy3CSPUVp/Xk0XmF46rCFoQif
c4zvoZ8moRpn4kGWEjJeKjfQPh/TB0M89ks/pynA9eSngfN6MpxVy5FI/tuO
fq8av6xO1ePBixrb9Fsr8XrogUitviSM73tqTKtvwMHLe3NrDCzhe5PNBN43
BZlOPgdOfyV0/SrTtPmxJtB6S2502SgDmXWPv2TYUSAu10gfyj+I5axTxetq
5kA/sLM6zXsPEmxE00zfbULvy0XSL6+ooW2w/qg1nwb+auL1HrDfi+R9eq/C
3NSBOP99i4aZBE4vOaT8J3YAp9//CN12fAuWv9428H50B2rkvhi74iIJxH2/
taJ8jwP5akDloSOncPqS+DVmBVOk1+zrM78iilyCOjeUJSzgfdKV4nyO00iT
Wjvk/08Gbb95LZ8+LY9mYwdPaZZdQolHko0+t08A/YHh1QE2aRxVNxeP0rgH
um1hFwRPJqNP/2+zu531MJoktts1qB9Jjb967lISIEisc7cgTxcGthHbXo50
AMu/PbX4sxUfxiWecvLMBnPrO+qXHiXiathIppg+DUcHcF6FIw8t7mjixVdt
KL0wd7u3hoK9J9tevDlXgSuvbq20HkdonKj2LWnvRPOuJ0cmpjshL+cWP9N8
L6pQK5O7/cvwQ1vWYrtBD8rcLe3Orb0Gvjr1YXMvaBioUhiWS6eA76/xyUfU
JvQ7/W79+1AAlJEJBoaq2bj3zq7Q5kPdQLxhGusY5ALj9vP7WdXKceGb0tby
pyQ0ZfZe912vQl2KTNB0Tg4Y35WOa1Mk4ft9BImdSlWw5nkzT8C7ELb4LrP7
LDRjRyQjOf9tH4S3/PL8eTkf6b1l27Sm3VB1VtaVUbsRNAYeSR0w6oAAjxun
40N80ESa9Mcmho6VJ75/I4eTkU+P1ZY7tBcegfllbnItQnxf7V3pWmxVnVkw
+ZIH7vWnX58uq4AqzQCe9d9JSFhZTPCLNcFam4/Tmr7lmGf7ZeyHTy5+DFsu
Ku9rgoe1GiIOBjFgsj1HvoFGQf8X0+aU6AoQmE6R0JkowSeadkJn50hgne3/
MuZ7F7zeO9cQZRMN1NZAGabfGfif3YKO1VojHnWYcB1QrMfRnNMBCte7kH9Q
/3dVaSNait12P2ZABf9NH6Q/JtHgBNN6gf+HIGCZXHxVO56Lhbxruae6qEC3
a/D670gDNrzZ6T3mWw/L7Br3Fz/XYWa1UmrxB1dY37uJen0oBzxtDYurzKkY
PGyaZiHSgpduuixde1MBLW8Tb7uy3QMr5yvVHBvcbOE19OGjUyuAfcbmf44Z
KKL4hV1AvAo1jtRGR5/WhNpP9vclpMqgV5NHaRFLwcDf+YUQDxVLk78XfNCr
AsmOala7yWIMxn20FAESfP7kdu05KxVu0PC+22olsoRmxs6qNWH/0V9PbPVq
sT7q+PHXQuUg2NXytkGOiA8dg1+pGZZA8KuOS7Unq+HxcuYFjhwyUkupAk8F
4lHc9y2fr9ED7LXqVpAdL4FUF0uyRpkvMJ5LznU5Q4TrSZ3VvygtqFE97Gju
V43GGiLvJl6V47TWV98lzwbgl+T48tc/FzanC13eVpUEzrb2p9+fKAdCw9UD
bb4ikCjZEcFRcA35pV7sGDIOgJ61Yu+4YzXAQJT0ahnuwTeXyqx8NzjE1ol8
nl0qGkiyPU9ytLrAyi3co/lCLwY25Rh2aBXh72r1yFaNUmhnEGdVF6Dg/D0f
j4fSqfCk9/QbQe2NvrATeX3MqwTqDq8ztgqn4nY/xgMv/ZMxEYygpbcWFayS
HjLrZOHzeYOtxE/NwPNjKUdcOhdChraGTZ9PxMwV+VBr7xr0K5iKlxSOx/Pi
T/O7k3PR6YlIz7sNPnR1lqQeTIzByOCqt6nCrfCZk4/1ZHwThDZFxZR/Tkcu
+6eysRxF6Pft3bvP+n0w3T4vxueaiwFii3mc5cVoyvCfcvvDcszZzJRYx5yK
z3cwPzzyvRoN4sOsrEil8B9BnAeZm0BqVX73WA4ZbDPo3LdHzoLjuc8vUSMO
WSLtL9XWJCNPZhzXv+kCzHzwzsGkIQ0MLctjrhJI6NManTYh3ort/0Q3Hdwf
CYM9piyMR2mwt32orMapAl+QF4dqJpug6F3rTZ6Ljci7RuVWWcmH5Pcy3kEl
lcDyPVvr0sqG39eqv9Tc4Jfu3ZwNk4t5+LUtqG7XdDAOxzT+OcRZBlO7t+ry
P2yFUCmJoM0f04E4urM4dt4F35eGOp6cbULX9y9jtvlnYABZgCYflQ5uFdrJ
bAUVWK+o5NV1n4o8CfrmIXczcX0X6NTFUjE/jTfj+p1iZMr6fvb2tmawjolo
GjrbCosnp76pl9Bwb9PV6NnHFBRavklffp4Gwrf+bJrqycClG7FfNpciqEWL
H/dwLcPrpVkbcl0FmVs8M9hZ43DFhm77oLsACwXlnX96tyLLmaWki1GccO73
T5/QLzqgwczMWGilAMqu5HIfe2O8yo/9sp0amNsv7KS4wwqraVI3z3SoINuz
GPKddEO0yjvhZ3TZGFeCZ3jUagyAVtNSNewgD6T+8LfGUoLAdWY5wfLZCRSS
/uG0dkkMaZnfJY3vm+HzkbmSN6ZaQFoepiewHoXWRX+Px3IngMxr6TB8XxtJ
072S3c+1Uaj08jZfiT1gm3TpZ2CCHBDdpc/sqD4FHgNnTozdU4J1/j/ZDys1
gSW3dSDNUh29aeqdx/YaIHH1cMx46ilwfWrLebZaC70Fb75/PSOPQsmp7Aml
uUCylj322pOIfG0nDob8qAXxo3aKkTa9uLuIq8+MIw0HXJ/53DzTjSLyzjwP
b3TAa+7EqiznZjx6RMijjrUEg0sJDfVCVIjs/ll4lR4EpMf7knSONKFJJbOB
w94WZMm12RmeEQlJzeSv2yvy8MIBoRxdm3rwvlqafVfEH5eMbu8eVuqH1abp
NrPiVtz6pf6v4q4amHgld457I+eGmBoflSoUg5RZ5hr/8U58eCMhmsW6CyV+
Bk+8/9kDRCXTrWbaHtDGS3j5LI0MfKdfzDhx1CJL8msehq3NoLCDd8Faphtf
tz222HqhAWL/Mw4XKov5///oSwPDqci1bWTvN0oJTKtwaHhwRsB4X8UUk24P
GFJeuyuxFmH3lk2b8j93oZg8h++bhl4oP3LwOVNxOBiAS130nhz8eTCq6f3t
RlSejvdP6POAu9f+ZO9c7YMn0stJDOUPoNDuZdp88j1Qif3+e0qEDuMH6+W8
MR/ivHv1GX/XoWWRzQ9nuw7g8BK9f6OfAk/NT7nvO5SA8jNOWdtrmiGqzsim
Va4UL03seC3/9X8Nl4c7FXwUx6VFmUlDaSAkZGXnyMrKjIQiyk5UQhTZRPbe
194X93LNc61IRLJTiV6hQUUk8foHzvP8zvP7nu/nUwOWRnV8JTda8bycTda7
lXRw3NV+mu5qOYbc0nX/rReOAvcZVHelxIC2cINmSkAohu1bFl41JuLve3dU
ak3S0Ffo1OslQxKsU0zNNydyYG6slW70QBlYrTqkxC1k4lRh3b0SxgJMpe/9
w/k8G9x4oxuOTJFRhDzTIPEsB6vSlTX0TwTDMXGar5q5JbCzP8B1ZLoIRQSa
uujmHmBuvLW403QKxo/XR2pX+cCOo7T3Wa/nwuGwbVahDjnI4NH8Y+ue4IAU
W3OIYBY8KltKC8cSHHcwVHV7WQhfeGnavl0qA57+hzISvZVIZ2XJ8uRsJZxb
HPvI4eIKUlOaO4b2EsH9xaQlOysFHJQ8I+p0U0E1ZYg2fTAa13UcGA5gDPCk
207wPWlBDsa2ijo7RzDdcfxNhW8peLPFesU/LYDp9rG2p79iUIuwJk5v34IJ
pdlLgdsSgPjac47YkA6/ZqWOtBcmob67C3PEPlWkHz76Us4sASooSoLv6K8A
i4VDJKMLEdjK1OwUXxPgZUyE3QfnZKzquEO/MJcLxMnsrqG5WKCRNxE+IOAD
8zfU52nX4+H08YpGDcZkoO6Qjv8kQUIlt8+6m94VYBx75GZ1bCPyvP9cLC9r
hYVBYvyHOzQhdrXgCT85HWOcGGUsJxphMpjd0kI/GyK7mctthrJR6rC77s/R
LT9hJLzVuUREAUrMTM6dUvDlDDdootjg889XDOLZU8DtweCNZHMSUPYxx5i9
pQJPbs3jUzfyYY+ATd1+DgpEXnYvel/tgx5PRfIdacrx6tGyDKUXORh85YRC
woUsoPVcDTwr4QtM1mqq10m+0MJ+NeMgpRGylD8dv77cCJLOVP022ipgeX6E
/x3FABqsOx9FbM9FLi5Bo09qVRAUKXfpuVgbtDsdUdNaqwaCBO3Y2qtcqGDr
/DDXUo/Wi2fN+d/no8ruvdSB0wTcfc2NLbAjBmfZhGIkA/PAo6TQscSrGEgJ
Pjs/hxLg3HOt2qWNHPx9/m1E9kIp/mq6NsoZUgsO286zk9hScO/BhSOctgR8
z9vxkMnuFg5brveS64l4ak/FINt4JXztGN+9uJ4EYs9VXn/rI6LiiDVpU8cK
54WinytfSMdJoWfVKv/CoSiz0Ww1n4jlJbPnnsflgX4Udez7TC4K21hFdmZS
UHH7h4r8ViJwCyTfYZOvQuodVt/GjDb8ofIupSikGI+P6bawfKuDv4G/DN+c
8oXfGosdzJYFkKkeN3p8Kg/V4cE00/lGTAwfJRwszYe49LsNbP5RcJOWR6P+
CBn+SS58kcl4BksHdp0fe1oO6cMKVJJ2GQgaML7KaO0EE7/ExX5VAlj27ZW3
mVXEVhXZwwW7UiGXm/rLIiUWLNIte3m8C7DRkiVku68veCF7zdhGNXZRnBls
HAqhTYJ3smmoGbt4dp56FV8E4/F96b6eUiCtQZLVTucB6j6ztpKgw+Bx8tvX
8ruymPqg2KWJVg85rHoUQ50s4JbkqT80+w1AL3b6j9tJQVyV7lM8qQK4KHv4
789dhrAWVjD3nhsw6WMIB8+oLjzMOfrip4UkrE5Nv7jw7BLmalp1Bt3Rhv0O
fzhNRY1RTZrCEv1WCx5YvFye1JQFvdwjzNVtApBF6/ru9X5uNJ9+fmSPsx56
/A3iIktqwnu3vCO8fCrQuWptOZ4ngadPFNQ2u0mAuWnnFDcKgpiPuNrzD1qQ
whH2+CtFFbOuuWoODCnB0byPKRO+cpAVsRbc9zMZFP+xZkWL+oLcTTvBrqvl
oL7kJ3VMrQnFfNLFzudVIvezGPsB4Vac+b5ZoxTdBPYJVj/VC1u37hg3LJHL
sYIsELpaSwKuuVTxQmEyMCns2i/k0obOkiaRH4x8MGlj4uocmQiKmqanhtmf
gvT28j8uLWlI19N/btY8CmhMjnSLuUWCWD3/v7P92bCgvbBxMKkQ1Ktdd/yT
iEHf7NKUdY5z8KilK+GFbR62B+0kxBKpGOJV8s0gIQcI55x0v/LWYZYe/0uJ
JgOgPllx2xdtgjKnvtuEl2/14qGoVZGcenDOZ1DgpX2xxU9nKLfPV8OeDhnR
/GeJKMhzbK09vABpOtcv1/+mYNy90KWM7Dok+p1r2OS9D6PKNM+G/EOgQ27i
0UXBchylHzifF1wAaSuC4ufHE2HJRt1fSyAG60N3qmqdKsY58YU/KfzVOBNZ
dD7kQQ2KrDSe0VfoxkD73mOmf9JwcKhLhZ2uHoelEi8GahcgUTfy2BV0A7cD
6TpmYa7gHyN7l+0XFS+rJBd2dlairnCA1TVKDPQGjo8T7uQgj2qQyBAxBir7
or/z2ARj245h+0XxRBxcuFS1vq8GC+6zdXFId+H2BfO2jm9EbKeRipSIqsJN
tCnJP5aHb4OckgxZm7BfLMfz9Jb/ktuctK9uvaNU70XQvd1NcMlyOC/SJh9t
7ZJnexa29k1iMWVkCEbrxlrpJ0/dMYhevdGaOwv9r6/MDQQEgKLG42s8igSI
zWNKbdzXCPUjk2khWZVgoCQ6MXExD4WEnvy+JkxEJVX+j+orxfi9Zmp2dSQW
BJQ+bKiXNqBA9ePUGpNsCHx7Sktii1uOd0okcv+rQdcfBz7W+xGxjHPgGsN6
FVqyZXFyPgoHkcIJ24esWUCSV5va/5YA3LF+M94DsVBzobG/LicXHn2w/vsz
JAW7bdIb9ntnwF0m5aHAcRLenGJh582IwvEdG/E5p2vxzIfVVnmWIFwpsJ0a
f1CKgWy/NFvPkZGNd89XDazEv0+Uciff1YPNFRapW17lcPmp/w75e+6Qdqyp
7UpBJZgoXlz8w9yKdE8S+qZdm4BfiZz4gt8L1MbLqSVQhU5yZn/WtvxYICZV
/b9Yb8jkkjmo5Z4MLqXeUs+65fA908xrRxYqzg/wXPQbSIUuayGWvt5GUE9h
6vY8Vgf1wrWfHjZv8Z+UKLPJ3TTUVh1y/nK7CsfSwmYvXamFWZrXYh/tyFhh
7OFd/KQaRVhXGug6VWBKW33PyH95eCBp2DBgOgjE3vDebFarBaEu8SS2oXwQ
OLdL8ZB2IpzmBaOSOVdkeJ/I7yCeg0y59k8PHM3Cu6LTu4VGqkBLoqNX7hkV
hi7eHgkKoYIQ3bsmMV8KJpzOnXDUe44bnn42B4Qo8PRSiXHxDBGWbnr5F3rH
Agen/jm3sCykYbPWPW6WiBPTMv1DMvGQwkyTcYI+DJZyBAm0fIHIvTR1rzKh
AC5Yxx5t31kEj4ZHhIq9tziLLB1sRZOKi0c0Jv/2kyHrzMysoVMkfqnW0z+z
kIAHB4vpFEZzQO8hgTWkshRkT+o4JPG1QvytG83SFZUgzba8SrTKhkZaLtJx
wxDUPHrd3mQ2GTyK9l24kPoYyvocanJp8lE/vILcW0lBdoLlOq9dCyaP9/sm
H6fCvFha613dHBQMd95gvZyO8o+9vlG0t3qy+fwQId8favOpQawUAizKddts
RN6A1nrbUYIUGSVe5OcOyKTg/h7DZeXQRnixdGhA1qEGaZzNI4u1tjz3rtH7
c2coYJk36ZqtX4O919YmlG9WwZI+oc+0IQud+XdRUpkrgXpH//vnMTL0vMw4
5J/ZjvM7rpiGpVTBe+8q75uPgmH9TLm4GkMlesuuTnQOV+Jv00F1C9MWWLxq
edn2czR6eQ64d3AQMSnxXrM/pxuo177TSXe5A3pvRvdqyRJAL1pzRetaKu4Q
qOg46BcNIQ3PlBT4UpFGWo7pxad0KBKzclrPUIXweHfuC+MaGC59+pelrjHk
ep10+VyrCqZcVcpv8/RBzWVnOrOOGXYbR540ZpNHlx+PbWRL96EYQ3ZHZ6Eu
9F/trZawF0eV3E3DmiVJsAyW4BqYkwSFkPCPa5ISYGcRbx2wfBKcdy9OzLYa
gcjVB6TkSUH0ZayfH/HgwdF70bMaNLxYTqu11N5sjDQ6aYx9X/8phDAN3/1F
OgtHc0S/lwhcRMndtQr1MpoQRrqkW2mkDI2zM4dqdvKhoEOAZX8EL3jErt11
czYC0o+h9cl1daR5tcP+v6lNhd3OaiWcdgC+/7nEucilAM3arbxrBwPgmts+
94DFfJi/+dmKlEHF/ms2yjcKa1Fh4Lrp08Em1E6dOqWX2QymjZQcui+VOH5A
rudsYSY+TzkpG+zUCiOyBrN1+7PgoYvEaK9fJ7q6kJxDO6KAvbJh/t9YB3jw
Bzq9lSyAnzIx9kHG7TgZtCntWJkK9gHdja9KW3HFmeo1lkkCYWbxuClfa+TL
f5F8fF8eTq4zNXBVF4Eni6c1aZIKs6xJzCVPAmHA90mZY386rIoH3ZS48gju
rJXfM1Oqxm+50nKGAnW4LiEoO8/lh5ej5KOldwSB5vtlE8N/hZikSde/PkSA
9c75vw9myODDZOel/qoKG2ewkv6QDx4bq6u92Z4HCTpseQ0hJaC7x5Mntb0a
eJOSqvvu1qMs/fCZB7uouOHCdUrkfSE6tEw47t9TgJ8ei0l1VhXBTs2Vh5IH
WuHgegyzaXY1Mvzw9dD8VwQKLxxkIz+WwKOGD9Htr9KAt7y/UOR2AWR02df3
baPgmrlS/ZwMGXsIsY5M6U0wbN7voKOWiRuga3gkqwCT6d/o8svFgmeLxfrp
vjTYFdZ1+h8kQbe6Mn3uj0RkJy4LqRwJAGJpcIp1TyMcqvJ/638tH+vOaZxQ
dyDCyUCtt1on6uGQgrbxlxNuyHJis6piLgtEuujkvrNQ0CSk6OPAAxIySO5c
fXAhBFpE1L5WsZOR9WbbtjRREmQnWXCEP6+CWObyL9PrOZj7MGZzWacWi1t0
Dp50rITRFbrff/tcgM6dj8tytz/+LbfNk8vxBwNXxty/IoUgSK5/Z1TtC1YL
zBc8hvPQWvTdH8V3yeB44Lf8f1FkSGPhI0zM5+MPJ+XDme8rUOUWLa3SUyre
3XkiFU5HQ6nlZUfK0whsMtYjbbuRhVM+t2aMoqJhUmcgntBLRKb34Zzf1uPg
DpP5H2OncPh9/cBYyrYEdPI+W6DPlQWNOZ0cJGoT7E4XPxytVwicVvmuWjrZ
sF04aVX7SxzoGOVX0HbGQvAMifbSQCtEXX/fwbg9FlwZ26hdyy2Y1ljZby1d
jjOtT6SFyLUo4ep4yDU3G/bz2oh+PJqBEeUpeyTmCyBwN298W2U+tid8uvbL
qwijir+WNZmlw7qEPPM/iwBcbUh5kfYyAlrHOHn0BItg8/1aJ9veEtwpyFzE
yF+M9/2YGj/sy0H5e3ZxFFlnGOjX+e+HNRFugwgauRXgWdDoZnarh5WWSbmb
L3JgMfS5uFhiFX68Q/U5eiMdpJ3bpWyPVcPzFxo7aYsz0GO56vS20koQqebl
MLZJgtB1XZnrerlIb39nXV5oy/NfOUesEa6Ce8ZLYiJzDcaFqdY/iq7HrhNB
Z8LIEWCj0b+X3JwBy8bKLnYW5dh3wXT8dVA0mH/7EmCYmQY9apnSi4OVQC80
1GIwmo2zSatPGgHh0L0vAp69bUgyMOANt6GiWvBHc9eTFLCJbteyo6TB2vAp
tUAjX0hQq+1NXSDhsxIJUbXfjSAU122X4JCON59Z3EydCsA+bqZ5z4QqULfR
+ybc5YtcKgEjltWtcPJZ9nK7QwmOM4hvvOMvh+9sb+7fZKjAUurVhXJiJNCF
MvQ+uZoGOWPH23U0o0Bix9gH2ohw5HNxiI9oIaIp35fzGtIJqPK5Rn27ZzUY
nz71z8qLCpY6f3eT3FPRcuFPjI5KJVYTDAXufiWDcEtRo/BEKyiKtFy0md7q
//1v9mt+a0HpLH5WF9lidMku5Xr3lIArdXEcIcEEmCuctmVII8CE6n3Wyrxk
tGfWUfeQQaRhgRu9CnaoR2gGXStEthJ21vS/FJhVHTfz3V8C48t3PSc24+Gq
/lXrk/9RoSrML6X+egXs043U/fmpAiebNd/mu1Gg2STBx5u3CJN5X8fe497y
eotjpyPWPVGx8+LHsEPKyKK+k2x8wwM/Tpu96FDoxEn7tgH+F5pQOB5Ivvqz
GtTXgu3G8n1RTcdhh5dPLiqW3SjT2ZYM5tdHHrp2CsDdi21hhTUqkPyj9vFc
ngb0kS3qzj00wRGK1PeyszLQv//rn9KjErhAoxfjV6WE/QHlMmO7heGASm5V
Uo0uiEjbij5T4EfNjcjjj2WNsHVOkoH1jwLuy+UoiLAQgft/1HkW1YxgikBb
YCKnhfNTtcPXm5Wh54ISkAf1oFT12u3Wg7IYXv9z8HKQEk4EBvRz2ElD+g+6
NmUOYyzs/JUvWikOvqZ+ImoKTNAa/9l3gV4Z9ww63A7oUcbLXM8uOwaY44kJ
ZepiDjcUZlr1hFewYxhT2bcYuYswzVJ6WT7/Ai4rT0h3F8cCXZqRVsm1aLAz
iOist+TBIwo//4xZ1OMql0zwhuRWvmJ5lc7OkHDwu/pLqgUV6iZL3X1LY7FC
xGfmK2cKcu9WdS8NbQECN+FfHmcevpHIVvLY14ZlX3d1D9hfBtbs17fu9LVC
3g/9YLb5FtAgxv7dPYJ4xzafUYrSAopksThjtufYRFc1Qv+yEBJWOWa5a/3A
4cuPgpd32kCCm6aLRTQbHqZfn1ypIALnYIarQm0TsCZxvbNTomKycwspwrAe
fpvFhYW2FkEcnZ+t0jEyJDMFXZLrJGPEvEAJ0acanwX+x7spRMW5PP9p9thq
9Pc0lg18RcH49j0V/GWdkKX8MyivG2FzqDFwNSgdWFYsPub2NOCBw5YZkq0V
mEVcLbb3roeQg63vWq63wN+VT/LP1+MxTibHxlaWDL8z39pUyPijfOavgOyo
YlTN2kllmCLDo22/e72PUIBl6ucbUl8DNgtw7XatyYCzEiNpvWdIqGimxO29
xetHf/0MXHngCy2b03NvXtchs9RGVPzrRnw4G/TkjWwlPE5Zz/FY84Oll8vf
+QW3OPPLmS8q5eXgNDJ0/IBgGuoFdcTQrG7l+Y1lfjGS8YHQf0RbbR9wHVC0
yUhKQ/Zj7s6m6hnoyzL58F1wLdoUtWDi/VgYaZGqN+UtRe+e+17r4UlQy6/3
y+tNOaZcIyjOPK8ATXeDeWn+MNy9LYhRtC8aVw9LbnyujwXv1+/v/XxLQCaT
V5y3anLxetihK5UbJDzeO2V8cVc2lgXctJHqLwaDUIeHdt9IWM+22Vs8kIfm
Hc0DRv6lwMHHs9e6rBDzvX9p+mumY6hT+Q2vl1nYzKEf2mqfAb5jf5Idhre8
ndaCfdg2E7o3V5Rc7+cCP0viEZOAVDRNto0ZXMlFvQcMj+g3AtHR5/KhL1OR
0JMj9umdWTAo00Yp/PxaBndYJj8zfydD68T0ibq/1dhj1zMn/K0CDVwMWw2S
iCCv1Vx08iMB3ez8QzzsKHj7/iGeDuEo9HnwfXA8MRmVFTcUHgUUgpelRdDv
wljI4PyY/Xp7OWS2BGTKTeTBX6vPtAXujegZtviX/n090LPZGpJDy+Dd1RSz
H2cKsSmt/4js9iLwHtctsw2vxLuZgRUfbONQhJwiePx0Kpz0OjHse7gYR/Ie
Nfgnl4Op/JO8O4ebwXlAVmHtYCzwrfW5aFkmgk6yAwpkkOCg26KuxdUgbP+8
v0zalwqdMwx7Y4ULYHnYb5IRknG7rQDjBcFMVDRSWLglVYHeHgfLVYbKUCb4
A15a8ob4vKa9lskkuHb065dqDIaythBn+2MJqN+PMkHMOTDkP9pya54IlkVO
wvwitXDIo3vF41kN/Pzl+yKwPQAzJQe0rlSVwcLD5LbDxyqw78BhwqRNO9Bc
DXvZYJYEf3NDVH5wlKGtugxjs3Qu/KrN/JZnU4I2WtKtk6crkHW5jD9UphKa
NDeC6SoSIP7pUBxXUzFWuHIoL2tQ4ZH3ouregxX4uY3xbWogCXYsRRZIDZWA
5anJiViWBOja9+z7d4MU/PP9xqvjUQTcTH2dvtu9EX55j7iMeMeD99xKS4pd
NdQObRvoUvWHYVHFKT7tC6il/4350uUadFX2n9215e/OPlmumTVE6DSuzjIv
JuHfPzvb7Nwb8NngjrDru+rh2r92ycg5Kiycf+Xu7fIUuj/0MXSubeXkeobw
XQZ/CBQsVV8KL0PNnE85joe3/M0IGH0CwmF1pPFUCRsFfBmEuT3uuwJLWdnF
2/71sDXVUzUlEpeUnfk+xMfBdM7+oydakrDIZVvAFxNfdBTwPGNOXwJ35KPD
A1LTkG00LHP2ZiVU3xItpBuOxx6pHRR2lwx02P5oNJS5Ck9ZLDmu/qSgapT+
UnJsEPrXB9zeaxqKQnm2dlNiFXhaXDuBkZKDOr9OcJ/dnozGaRqdl6qisILv
uKbNvlyU/zw21TlWjhdlDPR60wvg0rFTvzul68GEWXKjooYbli/TP+6avYCS
rqYG3W6KMD9TeDZHUn/rh6W62TbT4iv5UdtHVH344acRrvlQDiR0H9NPXdIC
NOnpL4w1QL/Ph8JZPpuBxKko74RIBYj8wsY3uFML+SeIUn4jmwrOCidYfc+o
4t2kjPuD/4yRU94+segVL7To1Viwi4oiiVGJ0/U9FyoJcp+wGNEGp9yg+wG9
+mjez1pXY64MmZWlPI1turCrjc7y8aAOOjQP6YLhCfw9Vqp97hwfxA89DJvX
lMNFM4daXS99LDqev+e1kjx2CxaNXGY0wKjt1ntNhzjgfzCvPWM=
       "], "Precisions" -> CompressedData["
1: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
LyVj
       "], "NoisePrecision" -> None, "Processor" -> 
      MachineLearning`MLProcessor[
       "Center", <|
        "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
         "StructurePreserving" -> True, 
         "Input" -> <|
          "((f1f2)(f3f4f5f6f7f8f9f10f11f12f13f14f15))" -> <|
            "Type" -> "NumericalVector", "Weight" -> 14.999999999999996`|>|>, 
         "Mean" -> CompressedData["
1:eJwNUnk0lfsaxo4moW4DTVS2ULQLFcXPMWuU3JSijjqtQuomSdMpSTltUtGg
jrlR5xJZ1XHzlOr7fL/tG9Q5jiu5hlBqJ0dkSO7+413vetb7vs+w1jsjdLf/
T9paWlqNmro946h2vqsF0bf757ymDX0usU63J9oMjSDR1r/zVbYy4rxLYbj2
/EDZix/ZCVNsdIipGLndcvX3sqkYb1S61hZmMwt847tNoe163NurUF1WaGNs
ccxeD3nqs65vJi8hXYkv2u0255RFtS9w3yDXgYcL7XnqZ4kptQGnH/griGfy
/bxNpycjsePjt1NWH8pcDNmkQIwicecqtcdGTiCpZXfY0htmiB7VbbTzk5ys
r+p97bfXkrzK4E1VV3SJqL/MSyfYEqvcE6pWGk5FRvjYxy8Un1yO6Gwy2Oc0
BjmVRjMqTeR47rr8YKbMFKX1M2v+d1nEmYpJklutiMPxymfDpko4/vLdCk+5
hFKtoVXOKyU83HBuc8U3EQ89/Ma3j5dgE5G+5phKxA89Re4e1SLsL+UXexWJ
8Ijb0j0okzDW7c7AKGMJ8/x3l0x6KeKeddagZagIB++Y88HBEhpVP/uE6Yko
MavIcbwpojc08caTGRJkTwMN0i0kJDvczzphLuHU8zn7HepFmBWlpY42khCX
IrPbrOl73id1qvQlfCm58DVopITCOCb0zFMRpSaZOdU+EpJevbQeyhWx9fnl
W3pXRei1de9XxYtwtdhedqFRxPV15TbZ/xEht1/SYs6L2KHkmqyHS3hZFLOg
tkqT45B6fVONiGvW/rv700Q0WySdaIkQccmh19U8S0SCXmS+Y4yIjT3mPRP6
ROjyttPvlYsa3e4cr9ESHDvzPr7W+PQ1eZN5RzOPD9tm9vESRWEnb8AFqiBe
Tq9MHqZCx7PAh3YdFG4bHQpHFFFsu74hJHGAoj2himjlqLBySpFv13kKOVH4
1Hur8P7LW+rYpUKIXnvytQMUA9lvbAfuqJCxwF3/RhdFX1tbZWs+Ra1DaENt
I8X0+JEhyi4B167oLdH1EWAWmPGsoVhA6f45T1LWiSj870J37V0i6s7PHZkU
JaIvu08KEQVsa7oXueuTgL76gbTriRosmy37AyK2Vzuq3GaL0JlvadJuq7n7
8N7BuETDbzDOTZ4sICUyYVlvOw9344HB/gsCWttZQVYjwHB4mZehg4DIXv73
jXNFkDB5c0yFgCe/TK0zixLwrOXkLOPlIvhtz+Plvpp/+O2+d8ttAY8bOum/
5CKGEj3eGbwRcIjEcFdOCfi8zn7OkL4A/shnnRAPARec7zp5KETM1I9vaNzH
o9LohyOeJZUYdlFL92t6JW455X6au4BH7vF9i2Z/V6GMFD5yC+KRffXLjZTV
PBLUnj3Ll/EIc3aI3nKOR+PEYj0PUx4hcYPdDf/gkT879tfH83k4pX5+ceAY
jw980+tMiceUPO01e/orYflTlF9bCQu3uyt0LJ4y8Ot0edCfy8BozJyorFoG
g+4XVnU+YtH9asvYI9YsYtMnB5dPYzBueLVnocAgYzRX2NrGwPxBqcPNmSz+
oqNdgq4zuJoZYc+tYWHrYi/tkTFILX7y/qwhi+a5TtuW5LLYoybytssUW++k
xp05x2HJFr+fe15QOPo/HAr4yKEx4LPO4ACHmjEFh1xiKGKbC+OV8ylOS7eU
vh4U6TtZ37YECtPZJxvVJzko//19hT/DYYqFyfQdNzmwjaOmOWt4jLemDZ5d
RmG+qy7CpI3D318rmCvhLDqKmxOD17I4EnRgb8FBFhfTtJ2GDWp8rlypdg5g
8d3PfkLnYRbx3VbhFltYXGsylMb1s7i+vpfd2sfCahpXPfSBQTUnFx62sXij
Krg7dlwFrIK6Uk4srcCVkquPFB0sTNKsfM78xiIs6Gh6w0IWR5v1fL+UM5DN
rLic2MzA3//0qzR7Bp3mb8urOhhE1aQq6r8yqFrvtHz1PgYPrgb9GHaKQb19
1K1Tmr3DapOSvGsM4u0sN9ksZHCsVUfHfQeLnFd9xwVXFrpbTQOnL2LgNHLi
okfZDC4aFBUrL1KSX7Q27tcFlNxbtJ33cufI3+/dlwXsp8QkotZnqTUl3iMq
giZuoER5sC5r2g1K3k12cxqnoOQvn7yqHjkl/aOtFTvnUfL6zwJ1+X1Kmrs+
qNMnUBJq8I05HUVJ2arF/dUMRzIbrVpknynxja70U7pxJGJWBmPeT0l5bsLi
aA+N/tK6rjWxlBw0UBx78IWSlIXyvdHfOOL31kqZ602JkLFxknqAI71af9TE
2HEkz3ynEG5HSfAwxcLFWpT82Rqr+4uSEjN+VupikSParuGdB5o5ErS56+0c
T0r+D5Wp3Ps=
          "], 
         "Output" -> <|
          "((f1f2)(f3f4f5f6f7f8f9f10f11f12f13f14f15))" -> <|
            "Type" -> "NumericalVector", "Weight" -> 14.999999999999996`|>|>, 
         "Version" -> {13.1, 0}, "ID" -> 8750256559455776017|>], 
      "PostProcessor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|
          "Type" -> "NumericalVector", "Weight" -> 14.999999999999996`|>, 
         "Key" -> "((f1f2)(f3f4f5f6f7f8f9f10f11f12f13f14f15))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Method" -> "Multinormal", 
      "Options" -> <|
       "CovarianceType" -> <|"Value" -> "Full", "Options" -> <||>|>, 
        "IntrinsicDimension" -> <|"Value" -> 225, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> LearnDistribution, 
      "EMIterations" -> 1, "ProcessorEntropyShift" -> 135.16370020918984`, 
      "PreprocessingTime" -> 4.211087`7.075939207423866, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[-0.16613224785175978`, 0.009120112818276137], 
         "EvaluationTime" -> 0.000017069473380250538`, "SamplingTime" -> 
         0.000269, "TestSize" -> 391, "ModelMemory" -> 416824, "ModelUtility" -> 
         1.643000904036101, "TrainingSize" -> 1565, "TrainingTime" -> 
         0.3981071705534972, "TrainingMemory" -> 16717120, "ExperimentCount" -> 
         1, "MeanCrossEntropyHistory" -> {
           Around[-0.16613224785175978`, 0.006448893618989412]}, 
         "Configuration" -> {
          "Multinormal", "CovarianceType" -> "Full", "IntrinsicDimension" -> 
           225}, "FinalTrainingSize" -> 1956|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "EvaluationTime", "SamplingTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "Configuration", "FinalTrainingSize"}, {TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 1|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35317054128296627`, 0.02002119300855219], 
              "EvaluationTime" -> 0.000012848384698257531`, "SamplingTime" -> 
              0.000148, "TestSize" -> 500, "ModelMemory" -> 11752, 
              "ModelUtility" -> -3.5717818658833798`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.1, "TrainingMemory" -> 324512, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35317054128296627`, 0.014157121343791946`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2728312088922491, 0.007432054684129326], 
              "EvaluationTime" -> 5.788358031509725*^-6, "SamplingTime" -> 
              0.000162, "TestSize" -> 1700, "ModelMemory" -> 11752, 
              "ModelUtility" -> -2.7432102722673366`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              646128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.2728312088922491, 0.0052552562652970905`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23043463809710327`, 0.022311795897312525`], 
              "EvaluationTime" -> 0.000011294627058970831`, "SamplingTime" -> 
              0.000259, "TestSize" -> 200, "ModelMemory" -> 11752, 
              "ModelUtility" -> -2.349004149248513, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              2826864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.23043463809710327`, 0.015776822179439876`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2340813872827357, 0.016028943647910052`], 
              "EvaluationTime" -> 0.00001576030092114675, "SamplingTime" -> 
              0.000169, "TestSize" -> 391, "ModelMemory" -> 11752, 
              "ModelUtility" -> -2.372905851071706, "TrainingSize" -> 1565, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              14362032, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2340813872827357, 0.011334174748694232`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00001576030092114675, "MeanCrossEntropy" -> 
             Around[0.2340813872827357, 0.016028943647910052`], "ModelMemory" -> 
             11752, "TrainingMemory" -> 14362032, "TrainingTime" -> 
             1.0927834039109872`|>, "Index" -> 1|>, <|
          "Value" -> "KernelDensityEstimation", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Gaussian"|>, 
             Method -> <|"Value" -> "Fixed"|>, 
             "NeighborsNumber" -> <|"Value" -> Automatic|>, 
             "KernelSize" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4980396285150327, 0.005171321604792952], 
              "EvaluationTime" -> 0.000055403372069285264`, "SamplingTime" -> 
              0.000169, "TestSize" -> 1946, "ModelMemory" -> 36392, 
              "ModelUtility" -> -4.990775927425043, "TrainingSize" -> 10, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
              20997736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4980396285150327, 0.003656676574445596]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43287654933480596`, 0.019019656864065388`], 
              "EvaluationTime" -> 0.00027286835077291793`, "SamplingTime" -> 
              0.000173, "TestSize" -> 300, "ModelMemory" -> 125624, 
              "ModelUtility" -> -4.366852415578297, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.1, "TrainingMemory" -> 660968, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.43287654933480596`, 0.0134489283444219]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.40140009431463164`, 0.01299856564914497], 
              "EvaluationTime" -> 0.00048819350884331226`, "SamplingTime" -> 
              0.000171, "TestSize" -> 600, "ModelMemory" -> 557624, 
              "ModelUtility" -> -4.040096187690899, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              8658536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.40140009431463164`, 0.009191373916208926]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.36627392694151356`, 0.012549100167056543`], 
              "EvaluationTime" -> 0.0016130269730747202`, "SamplingTime" -> 
              0.000192, "TestSize" -> 300, "ModelMemory" -> 2834624, 
              "ModelUtility" -> -3.850822663581317, "TrainingSize" -> 1565, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              150111488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.36627392694151356`, 0.012549100167056543`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0016130269730747202`, "MeanCrossEntropy" -> 
             Around[0.36627392694151356`, 0.012549100167056543`], 
             "ModelMemory" -> 2834624, "TrainingMemory" -> 150111488, 
             "TrainingTime" -> 8.803332606513838|>, "Index" -> 2|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 25|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[15405.810114488859`, 168.84169943810292`], 
              "EvaluationTime" -> 6.641747605579401*^-6, "SamplingTime" -> 
              0.000192, "TestSize" -> 1946, "ModelMemory" -> 27048, 
              "ModelUtility" -> -154395.7845796503, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              273160, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[15405.810114488859`, 119.38911061974346`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6377959535434202, 0.011794212270675527`], 
              "EvaluationTime" -> 4.995392070741015*^-6, "SamplingTime" -> 
              0.000188, "TestSize" -> 1896, "ModelMemory" -> 58920, 
              "ModelUtility" -> -6.401587550237073, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              686368, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6377959535434202, 0.008339767475348253]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2271076165806009, 0.005289400555942251], 
              "EvaluationTime" -> 5.484066791360574*^-6, "SamplingTime" -> 
              0.000201, "TestSize" -> 1656, "ModelMemory" -> 58920, 
              "ModelUtility" -> -2.2816945706680887`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              11487688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2271076165806009, 0.00374017100151866]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16895279909090657`, 0.0061135078295439], 
              "EvaluationTime" -> 7.645249698750175*^-6, "SamplingTime" -> 
              0.000205, "TestSize" -> 782, "ModelMemory" -> 58920., 
              "ModelUtility" -> -1.7017946164795315`, "TrainingSize" -> 1565, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              1.4320184*^7, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.17023150500480666`, 0.008627143601992654], 
                Around[0.1676740931770065, 0.008291957614369615]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 7.645249698750175*^-6, "MeanCrossEntropy" -> 
             Around[0.16895279909090657`, 0.0061135078295439], "ModelMemory" -> 
             58920., "TrainingMemory" -> 1.4320184*^7, "TrainingTime" -> 
             1.1714722497368975`|>, "Index" -> 3|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 3|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5521561573524911, 0.014229948218730352`], 
              "EvaluationTime" -> 9.997352253935027*^-6, "SamplingTime" -> 
              0.000158, "TestSize" -> 1946, "ModelMemory" -> 15464, 
              "ModelUtility" -> -5.5500559762816275`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              195808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5521561573524911, 0.010062092881397665`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.27458083942065964`, 0.009353312967953852], 
              "EvaluationTime" -> 8.76749373036656*^-6, "SamplingTime" -> 
              0.000181, "TestSize" -> 1100, "ModelMemory" -> 15464, 
              "ModelUtility" -> -2.7645495482319005`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
              646016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.27458083942065964`, 0.006613791026200241]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.21762011461632544`, 0.02154886373740002], 
              "EvaluationTime" -> 0.000014976311574844394`, "SamplingTime" -> 
              0.00018, "TestSize" -> 200, "ModelMemory" -> 15464, 
              "ModelUtility" -> -2.2193334069362693`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              2832632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.21762011461632544`, 0.015237347675580444`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.21409582832552707`, 0.015143991323043128`], 
              "EvaluationTime" -> 0.00013682338820949518`, "SamplingTime" -> 
              0.000185, "TestSize" -> 391, "ModelMemory" -> 15464, 
              "ModelUtility" -> -2.171280926046648, "TrainingSize" -> 1565, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              14320064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.21409582832552707`, 0.01070841895875403]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00013682338820949518`, "MeanCrossEntropy" -> 
             Around[0.21409582832552707`, 0.015143991323043128`], 
             "ModelMemory" -> 15464, "TrainingMemory" -> 14320064, 
             "TrainingTime" -> 0.8775926233266413|>, "Index" -> 4|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 225|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[15450.531193980647`, 167.23429915632835`], 
              "EvaluationTime" -> 8.506768373470015*^-6, "SamplingTime" -> 
              0.000208, "TestSize" -> 1946, "ModelMemory" -> 27048, 
              "ModelUtility" -> -154839.7805740225, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.1, "TrainingMemory" -> 208360, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[15450.531193980647`, 118.25250698041948`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[-0.16613224785175978`, 0.009120112818276137], 
              "EvaluationTime" -> 0.000017069473380250538`, "SamplingTime" -> 
              0.000269, "TestSize" -> 391, "ModelMemory" -> 416824, 
              "ModelUtility" -> 1.643000904036101, "TrainingSize" -> 1565, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              16717120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[-0.16613224785175978`, 0.006448893618989412]}|>, <|
             "MeanCrossEntropy" -> 
              Around[9167.345835783424, 286.87455299087026`], 
              "EvaluationTime" -> 0.000011294627058970831`, "SamplingTime" -> 
              0.000255, "TestSize" -> 200, "ModelMemory" -> 116584, 
              "ModelUtility" -> -92247.20751019251, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
              745616, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[9167.345835783424, 202.85094176970392`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0332341818943864`, 0.027566320337882755`], 
              "EvaluationTime" -> 0.000012025743549547222`, "SamplingTime" -> 
              0.000249, "TestSize" -> 800, "ModelMemory" -> 416824, 
              "ModelUtility" -> -10.387555783420845`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
              3206640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0332341818943864`, 0.019492332043277535`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000012025743549547222`, "MeanCrossEntropy" -> 
             Around[1.0332341818943864`, 0.027566320337882755`], 
             "ModelMemory" -> 416824, "TrainingMemory" -> 3206640, 
             "TrainingTime" -> 2.1618050344297837`|>, "Index" -> 5|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 9|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3128838548379237, 0.007396548483298655], 
              "EvaluationTime" -> 7.279126756484227*^-6, "SamplingTime" -> 
              0.000193, "TestSize" -> 1896, "ModelMemory" -> 27048, 
              "ModelUtility" -> -3.1436675325019516`, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              655712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3128838548379237, 0.005230149589915551]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20830728485426014`, 0.013507408968042185`], 
              "EvaluationTime" -> 0.0001097004472163311, "SamplingTime" -> 
              0.000176, "TestSize" -> 500, "ModelMemory" -> 27048, 
              "ModelUtility" -> -2.1101236390561238`, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              2826920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.20830728485426014`, 0.009551180477562614]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1874120941221861, 0.0073620030034289895`], 
              "EvaluationTime" -> 0.000027728878696196896`, "SamplingTime" -> 
              0.000192, "TestSize" -> 782, "ModelMemory" -> 27048., 
              "ModelUtility" -> -1.888880853834588, "TrainingSize" -> 1565, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              1.4313493333333332`*^7, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.18920051647991976`, 0.010306500404292093`], 
                Around[0.18562367176445244`, 0.009904618827909122]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000027728878696196896`, "MeanCrossEntropy" -> 
             Around[0.1874120941221861, 0.0073620030034289895`], 
             "ModelMemory" -> 27048., "TrainingMemory" -> 
             1.4313493333333332`*^7, "TrainingTime" -> 1.243972047061945|>, 
           "Index" -> 6|>, <|
          "Value" -> "Multinormal", 
           "Options" -> <|
            "CovarianceType" -> <|"Value" -> "Full"|>, 
             "IntrinsicDimension" -> <|"Value" -> 80|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[9227.268486612567, 179.6856320870544], "EvaluationTime" -> 
              0.000018167631443168827`, "SamplingTime" -> 0.000255, 
              "TestSize" -> 500, "ModelMemory" -> 116584, 
              "ModelUtility" -> -92632.05617668318, "TrainingSize" -> 60, 
              "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              749904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[9227.268486612567, 127.05692893054724`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15917221374904753`, 0.013522573178464059`], 
              "EvaluationTime" -> 0.00002264882593485422, "SamplingTime" -> 
              0.000262, "TestSize" -> 391, "ModelMemory" -> 154512, 
              "ModelUtility" -> -1.618818094135802, "TrainingSize" -> 1565, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              14327024, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15917221374904753`, 0.00956190319358326]}|>, <|
             "MeanCrossEntropy" -> 
              Around[15405.810114488859`, 168.84169943810292`], 
              "EvaluationTime" -> 6.632827270035701*^-6, "SamplingTime" -> 
              0.000208, "TestSize" -> 1946, "ModelMemory" -> 27048, 
              "ModelUtility" -> -154395.78457966627`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.12589254117941673`, "TrainingMemory" -> 
              206760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[15405.810114488859`, 119.38911061974346`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3466416521158775, 0.014916393946564108`], 
              "EvaluationTime" -> 0.0000172379018889643, "SamplingTime" -> 
              0.000266, "TestSize" -> 600, "ModelMemory" -> 154512, 
              "ModelUtility" -> -3.496300117929377, "TrainingSize" -> 300, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              2998648, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3466416521158775, 0.010547483310465448`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0000172379018889643, "MeanCrossEntropy" -> 
             Around[0.3466416521158775, 0.014916393946564108`], "ModelMemory" -> 
             154512, "TrainingMemory" -> 2998648, "TrainingTime" -> 
             4.908170120735141|>, "Index" -> 7|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["KernelDensityEstimation", "Multinormal"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "EvaluationTime", "SamplingTime", "TestSize",
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", 
              "MeanCrossEntropyHistory"}, {TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 7], <||>], "MaxTrainingSize" -> 1956, 
      "PreprocessorEvaluationTime" -> 0.000010703125, "PreprocessorMemory" -> 
      279408, "BaselineLogProbability" -> 0.7405998107523903, 
      "VariableBudget" -> True, 
      "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.867009338693469`16.3399502100404*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 2.285956783229294, 
          "ElapsedTimes" -> 9.436235, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 3.8099279720488215`, 
          "ElapsedTimes" -> 4.232583, "ExperimentCounts" -> 7|>, <|
         "TrainingSizes" -> 300, "TimeBudgets" -> 6.349879953414694, 
          "ElapsedTimes" -> 7.346231, "ExperimentCounts" -> 7|>, <|
         "TrainingSizes" -> 1565, "TimeBudgets" -> 10.583133255691171`, 
          "ElapsedTimes" -> 11.177876, "ExperimentCounts" -> 9|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "NaiveImputer" -> 
    MachineLearning`MLProcessor[
     "ImputeMissing", <|
      "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
       "StructurePreserving" -> True, 
       "Input" -> <|
        "((f1f2)(f3f4f5f6f7f8f9f10f11f12f13f14f15))" -> <|
          "Type" -> "NumericalVector", "Weight" -> 14.999999999999996`|>|>, 
       "Mean" -> CompressedData["
1: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
L0v+AYDL3kU=
        "], "StandardDeviation" -> CompressedData["
1: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
Zrif3dlXDD7vTnKY/JnF31lsjHo=
        "], "Method" -> "NaiveSampler", "VectorLength" -> 225, 
       "Output" -> <|
        "((f1f2)(f3f4f5f6f7f8f9f10f11f12f13f14f15))" -> <|
          "Type" -> "NumericalVector", "Weight" -> 14.999999999999996`|>|>, 
       "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
       8724422543637854673|>], "InputDimension" -> 0, "OutputDimension" -> 
    225, "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           5666716871765230421|>, 
         "f2" -> <|
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           7158574651480620720|>, 
         "f3" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           4770831585434351225|>, 
         "f4" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           4596248546715775464|>, 
         "f5" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           1588399438323982260|>, 
         "f6" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           9175552982104820893|>, 
         "f7" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           3553026957865069703|>, 
         "f8" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           7364786423062993793|>, 
         "f9" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           5198854592003664961|>, 
         "f10" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           6089969665948239010|>, 
         "f11" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           9059181653440726116|>, 
         "f12" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, "ID" -> 
           3788332971758753095|>, 
         "f13" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}}, "ID" -> 
           8094417714564820874|>, 
         "f14" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, "ID" -> 
           7455812052489235256|>, 
         "f15" -> <|
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}, "ID" -> 
           4995864000128738283|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 39.05402, 
      "MaxTrainingMemory" -> 239521672, "DataMemory" -> 12064832, 
      "FunctionMemory" -> 847632, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 7, 17, 1, 15, 40.760549`8.36281500309514}, "Instant", 
        "Gregorian", 8.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64", 
      "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>, "LogPDFDistribution" -> 
    MachineLearning`TailedQuantileDistribution[<|
      "Quantiles" -> CompressedData["
1:eJwBpQFa/iFib1JlAQAAADMAAABO9jU5xEnFv8rokVYQKbG/K6QQp1e9n7+E
F6bt/cZwv+2A1BW9wZI/spoV6gFHpD8HqrJ5jn6pP6wz4OgXCK4/rdFqRFcy
sT+10XFK0lqzP/CdUmy7jLU/I4PBYrwrtz+yj4Zqkla5P46Z6+U+prs/V/tc
oOyhvD/Tyd7Qee+9P3CuiVNtUL8/sPeKRrpAwD+2fp4voNTAP7r4wIQsbME/
7Sow1FYFwj91tC+bFbLCP++VzL/7dsM/Kavt+vnwwz8RvwV810rEP2f3eU4Y
CMU/Thnj/FNtxT8+7pSsIbzFPy2LCxZ+Y8Y/arVAucw4xz8Rm7SKXQfIP8o3
jhCjqMg/+HGSe8ELyT/gmO7KlH3JP/A89KGr7Mk/51Iiya5gyj+LLCfnqt7K
PwJNmeqKY8s/pE6RPnjZyz+pDL7y44bMP6BT8nTq6sw/YGFy4vO0zT83X8gO
LFjOPwabkhvrAc8/BEztxK7dzz9bTG1kPibQP1k7G1wbltA/JVlGcmA00T9a
kLq7LtfRPyeNSNEmBNM/SPQ7bOBU1j84RtTK
        "], "LeftBoundary" -> -0.06703283418201803, "LeftScale" -> 
       0.06345123767740105, "LeftTailNorm" -> 0.020460358056265986`|>], 
    "Entropy" -> Around[-34.375941260237276`, 0.9936698411967257], 
    "EntropySampleSize" -> 391|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866980458219026*^9, 3.866980463540536*^9}, 
   3.8669805408913393`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"ca3aae51-c1d9-4dda-8335-d290d1ca05f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8669805530611973`*^9, 3.866980565325453*^9}, {
   3.866980607331787*^9, 3.866980607971171*^9}, 
   3.866980658167756*^9},ExpressionUUID->"cc0664b6-a5b9-41c9-98eb-\
d09fa06d08d8"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGDgh2Lagg/2NLcCrz3E2g9TR4gmVT219VNKowN62TdY3TdK
DwwNAwPtjpFGwwBh9dK6/Ecqrr63D5zHwvzn+Xv77wWLPz478t6e9X5cUuSv
9/aJBnvOLn303v5KFmfCx8fv7auXPvE+2/TeflHbp78rvr+3F3hzaMeDne/t
RZ7YJCZsf2/P3SJ3LxtojuTT/cniT9/bb+jYsy0ZKF/TfP296Kf39lu1FM7x
/XhvL7fDpKbq+Hv7F4e1hNOB5pa21h4X+//e3qrZcnlEN1C8bj27xAag/h8J
HJ+A6hZq9iqc/Pre3vndhgyWW+/tX+03VH6+972910x3kbnv39v/nO90q/Lb
e/vzzCKhVza+t/9bzrdE6uh7+1s7FZdrv35vPz3s+t6YL+/tAeHBQuA=
   "], {{0, 0}, {15, 15}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.866980556550727*^9, 3.866980621204566*^9}},
 CellLabel->
  "Out[117]=",ExpressionUUID->"a64c5e29-094a-48d6-b4a6-352df834e7d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"entry", "[", 
     RowBox[{"[", "15", "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"entry", ",", "dataset"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.867144072441619*^9, 3.86714411687854*^9}, 
   3.867144189108489*^9, {3.867144311239491*^9, 3.867144314341097*^9}},
 CellLabel->
  "In[300]:=",ExpressionUUID->"ef291484-c362-402f-8972-0f9f044afd61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3747", ",", "15"}], "}"}]], "Output",
 CellChangeTimes->{{3.867144095162321*^9, 3.86714410963196*^9}, 
   3.867144314880862*^9},
 CellLabel->
  "Out[300]=",ExpressionUUID->"c07b1433-086d-4821-9923-d4f68e3cec68"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.867144060120638*^9, 
  3.8671440618875637`*^9}},ExpressionUUID->"a7c39bb8-36c1-467f-8897-\
468c6fa71007"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sp", " ", "=", " ", 
  RowBox[{"SequencePredict", "[", "lddataset", "]"}]}]], "Input",
 CellChangeTimes->{{3.867147148063402*^9, 3.867147154079836*^9}, {
  3.867147197698007*^9, 3.867147197764124*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"9a132627-d2c1-43bc-8a56-e0459355e255"],

Cell[BoxData[
 TemplateBox[{
  "StringForm", "sfr", 
   "\"Item \\!\\(\\*RowBox[{\\\"2\\\"}]\\) requested in \\\"\\!\\(\\*RowBox[{\
\\\"\\\\\\\"Invalid training data type (`1`).SequencePredict can not conform \
the data to any valid type (`2`) for selected method(s).\\\\\\\"\\\"}]\\)\\\" \
out of range; \\!\\(\\*RowBox[{\\\"1\\\"}]\\) items available.\"", 2, 81, 9, 
   18674032287441722627, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8671471755009727`*^9, 3.867147215161153*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"68ab8691-9794-479d-9d68-39f3525a60d1"],

Cell[BoxData[
 TemplateBox[{
  "SequencePredict", "invinpttyp", 
   "\"Invalid training data type \
(\\!\\(\\*RowBox[{\\\"\\\\\\\"BooleanTensor\\\\\\\"\\\"}]\\)).SequencePredict \
can not conform the data to any valid type (`2`) for selected method(s).\"", 
   2, 81, 8, 18674032287441722627, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8671471755009727`*^9, 3.867147215328169*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"91629943-9cdd-472d-a2e6-295beb8c92de"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"SequencePredict", "[", 
       RowBox[{"{", 
         TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}], "]"}], 
     Short[#, 5]& ], "line" -> 81, "sessionID" -> 18674032287441722627, 
   "byteCount" -> 20632896, "size" -> 5, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.867147179078179*^9, 3.8671472204656267`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"a2067adb-0928-4584-907e-a0f8db98a10e"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.867154483253681*^9, 
  3.867154493100733*^9}},ExpressionUUID->"fedd16d3-2755-4795-aed9-\
6ac99b786638"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "\"\<hello\nyep\>\""}]], "Input",
 CellChangeTimes->{{3.867160872873508*^9, 3.86716087848254*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"977bc708-fcbb-4c75-8833-3bae4757fa51"],

Cell[BoxData["\<\"hello\\nyep\"\>"], "Output",
 CellChangeTimes->{3.8671608807792377`*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"4410c8ca-e480-45fa-a38d-02c13f12c64f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudDeploy", "[", 
  RowBox[{
   RowBox[{"ExportForm", "[", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJzs3THS5MjWEOwXcDDGwMDDYhcY1/lNIsaCwMCE4IP4nY+Ij44g8FgG7ABz
FlAL6GWwkDLo25qpq1GVqiSlTuZR5vNExUS3Jl91VlaekypJ59W//I//9d/8
53/89fX13/7pj//8m//w3/+/f/iH//A//u0/+/GXf/f3/+3//y9//3f/6V//
/be/+y9/9w//6j/+kx8b/+8/+vr6n//86+uvfwYAAAAAAAAAAAD4F//+f+96
te4vAAAAAAAAAAAAAAAAAABAFPXXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAA
AAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAA
E/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAA
AAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAA
E/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAA
AAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAA
E/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAA
AAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAA
E/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAA
AAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAA
E/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAA
AAAAAAAAAAAAE/XXAAAAAAAAAAAAAAAAAAAAE/XXAAAAAAAAAAAAAIzp/ofW
HQEAAAAgEfXXAAAAAAAAAAAAAAzoUXmtBBsAAACAOfXXAAAAAADH3G+/PV4f
GyxeEe1Pe2MAAAAAAANY1FwrwQYAAADgQf01AAAAAMAx33/9ZXq9qY9+tJm/
gtqf9sYAit2ftO4R9EN8AeQkP0Mc8QXEUX9dQn6GOOILICf5GeKILyAn9df0
zfoLkJP8DHHEF0BO8jPEaRtf6q8BFp7TskMgOIv4AshJfoY44guoQIY5QH6G
OOILICf5GeKILyA59dd0yfoLkJP8DHHEF0BO8jPEyRNf2+uj67QHaOh9cnb8
AyXEF0BO8jPEEV9AHYuUIsN8JD9DHPEFkJP8DHHEF5Cf+mv6Y/0FyEl+hjji
CyAn+RnipIov9dcADx/zs0MgOEx8AeQkP0Mc8QXUscgn0stH8jPEEV8AOcnP
EEd8Afmpv6Y/1l+AnORniCO+AHKSnyFOnvh61D5vqY+ev4Lan/bGAPZbZOD3
fwV2EV8AOcnPEEd8AeQkP0Mc8QWQk/wMccQXcAnqr+mM9RcgJ/kZ4ogvgJzk
Z4iTKr7UXwM83Gfe/LV1N+GSxBdATvIzxBFfADnJzxBHfAHkJD9DHPEFXIL6
azpj/QXISX6GOOILICf5GeLkjK/77be1V5P2APUtMvDaXx0CwQHiCyAn+Rni
iC+gMlllI/kZ4ogvgJzkZ4gjvoBLUH9NZ6y/ADnJzxBHfAHkJD9DnFTxtVYQ
3Wo7QCv3nVr3F65EfAHkJD9DHPEF1CelbCE/QxzxBZCT/AxxxBfnus207gu9
UX9NT6y/ADnJzxBHfAHkJD9DnGzxdb/99v3XXxavhtsB6tubmR0LwXbiCyAn
+RniiC+gFWnkPfkZ4ogvgJzkZ4gjvjjd7Xb7MTG+/UEJNudSf00frL8AOcnP
EEd8AeQkP0OcnPGl/hogYXKGbogvgJzkZ4gjvoD65JMt5GeII74AcpKfIY74
4lyL4msl2JxO/TV9sP4C5CQ/QxzxBZCT/AxxxBdAToX5WYqGN8QXQE7yM8QR
X0ATMslH8jPEEV8AOcnPEEd8cS7110RTf00frL8AOcnPEEd8AeQkP0OcnPF1
v/02veZ/nr8qb494jwBvlCfnv9wCszRcmvgCyEl+hjjiC2jokUladyQj+Rni
iC+AnORniCO+ON3tdvv2RP01J1J/TQesvwA5yc8QR3wB5CQ/Q5y08fX911+m
19fPOujHX1ttP/fdAbxUnpPrpGi4IvEFkJP8DHHEF5CH1DEnP0Mc8QWQk/wM
ccQXodRfE039NRdl/QXISX6GOOILICf5GeJcIr7UXwMDCsrPrd8WpCC+AHKS
nyGO+ALISX6GOOILICf5GeKIL6ItSrAVX3Mu9ddclPUXICf5GeKIL4Cc5GeI
I74A0jo9RU9avy1IQXwB5CQ/QxzxBZCT/AxxxBdATvIzxBFfRLvNtO4LvVF/
zXVZfwFykp8hjvgCyEl+hjj54+t+++35daD9WfsBqGDKpX+5/f57LR5/nafZ
l7l3LSdH5Ge4KPEFkJP8DHHEFxDqFqz1+wskP0Mc8QWQk/wMccQXdZgVBFF/
zUVZfwFykp8hjvgCyEl+hjiXiK/77bfvv/6yeB1of9Z+oG8vQ5v65jl5/nr/
0Tx/fI+fqtztjfPHfKMJ8QUsiJck5GeII76AhXPj5Xa7Pe/wLCPUX9/lZwgg
voAF8ZKE/AxxxBeHPY/qR627zCbX+uDK66+v9X7pxmIBtf4C4iUJ+RniiC9g
QbwkIT9DnEvEl/prqOA5ri1JGawl2/cWv1KjwvHP3vljvpGB+ALES07PiVd+
hrOILyAoXm6327c/e975t6P6rr+ePCde+RnOIr4A8ZLTc+KVn+Es4otjVsf2
/3zNX8b8Ei4aL4frry/6funMYuJZf2FA4iWn58QrP8NZxBcgXnJ6TrzyM5zl
KvEFBPkY7607yO8WuXd7cg79EPfOH/ONnMQXjEa8XMVdfoYw4gtGExcv8+df
v6m/njdY82j5aD9C/fXCXX6GMOILRiNeruIuP0MY8cV2Lwb2j5rrx38fJdit
O8uq68bLsfrr675f+na3/sJgxMtV3OVnCCO+YDTi5Sru8jOEyRZf99tv02v+
5+mvu9qftZ/z3yG09nE9siRlME+5z1n6sX36X3WOfOYd2z5/zDcSEl8wIPFy
CYs8vCA/QwnxBQOKi5cT668Xxdf38eqvp3ctP0ME8QUDEi+XsMjDC/IzlBBf
7LUc1Ue19fMfyOq68RJUf532/dKxaeJZf2Eo4uUSFnl4QX6GEuILBiReLmGR
hxfkZyiRML6+//rL9Pr6WQc9/+uu9mft5/x3CE0tVpz3f6WhRSqePpSXyfmx
vWavtvz1QHuoQ3zBaMTLVcjPEEd8wWhC48Xzr08kP0Mc8QWjES9XIT9DHPHF
AfeZ+WOv5w/CNuBpXTpeDtRfX/r90jHrL4xGvFyF/AxxxBeMRrxchfwMcRLG
l/prCHWfefPX1t3kd4tPZ7Gx/ie1d/6Yb2QmvmAc4uVa5GeII75gHKHx4vnX
p1t8OouN9TPb3vkTOt+gkPiCcYiXa5GfIY74Yq+/jeqfK68ffzbgaV06Xkrq
r6/4funeYjYuNtafmXvjRXzBduLlWuRniCO+YBzi5VrkZ4iTLb6AOIu4Xvur
wOelvfPHfIPtxBfEES+UkJ8hjviCOKHx4vnX3ZOfIY74gjjihRLyM8QRX5fw
+5D+UXM9fxntzC4dL3HPv875fqEy6y/EES+UkJ8hjviCOOKFEvIzBLnffnt+
HWh/1n6gJ/edWveXXPbOH/MNthNfEEe8UCIiJ5tvMBFfECc6Xjz/um97589e
rd8ftCS+II54oURETjbfYCK+LuRvo/rnymtDndbV42Vv/fXV3y/UtDdexBds
J14oEZGTzTeYiC+II14oEZGTzTeY3G+/ff/1l8XrQPuz9gN9sDZRonz+mG+w
RnxBHPFCifL5Y77BGvEFcerEi+df96p8/uzV+h1DPeIL4ogXSpTPH/MN1oiv
KzK8V9FHvETXX2d7v1BHeX4QX7BGvFCifP6Yb7BGfEEc8UKJ8vljvsF76q8h
gsWIEqcc0phv8JL4gjjihRKnZF3zDV4SXxCnTrx4/nWvCufPXq3fLlQlviCO
eKHEKVnXfIOXxNdFGeFL6CNeqtVft36jUFVhfhBf8IZ4ocQpWdd8g5fEF8QR
L5Q4JeuabwBUZkmiRPn8Md9gjfiCOOKFEuXzx3yDNeIL4tSJF8+/7lX5/Nmr
9TuGesQXxBEvlCifP+YbrBFf12V48+sjXjz/GiKU5wfxBWvECyXK54/5BmvE
F8QRL5Qonz/mG7x3v/02veZ/nv66q/1Z+zn/HUJ15YvRX25WpXGVzx/zDdaI
L4gjXihRPn/MN1gjviBOtXjx/Osulc+fveRnxiG+II54oUT5/DHfYI34urrn
EW7dI/6mm3ipVn+d5P1CBYXJQXzBG+KFEuXzx3yDNeIL4ogXSpTPH/MNPvr+
6y/T6+tnHfT8r7van7Wf898hVGFJosTp82cv842OtQytn8QXHRMvlDh9/uxl
vtGxlqH1k/iiY03ixfOvu3H6/NlLfqZjLUPrJ/FFx8QLJU6fP3uZb3SsZWj9
JL7OtRje1t0ZXZfxUvP51xneLwQpCY1TiC86Jl4ocfr82ct8o2MtQ+sn8UXH
xAslTp8/e5lvjEb9NZwiaD1q/bao5PT5s5f5RscaR5f4omvihRKnz5+9zDc6
1ji6xBddaxIvt2B1ho4v+RkiNY4u8UXXxAslTp8/e5lvdKxxdImvAPPhbd2X
0XUZL/Xrr9u+XwhSnhAKiS86Jl4ocfr82ct8o2ONo0t80TXxQonT589e5hsA
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
IdrHI7EtB2OLQ7JvnT61ebvy49teR3K0+MrG+MPVxa0v8gPEEV9tGX9gjfwA
ccTXWR5jteunjH/fXB+khPxA9w6sm2c5EF/b65enLe9Lnlu1397/UNH5Tf01
Jay/EEd8tWX8gTXyA8QRX22NNv7ziwjvSzJda4A6+SHu/uHD1x+/VvKD7bu2
H5sP4xht/c0m2/jPY2ft9wzXbA8jy5Yfon08Ett4MPZ8SDY/KhtN+fFtryM5
WnxlY/zh6uLWF/kB4oivtow/sEZ+gDji6yyPsdr1U8a/b64PUkJ+oHsH1s2z
HIivkvrrl68m7bf3P1R0flN/TQnrL8QRX20Zf2CN/ABxxFdbo43//LTP2vki
lYMwqZMf4u4f3ns9cb7x5Y/Yvmv7sfkwjuf4eqmb9TebbOOv/hryyJYfop1Y
f/1o+a27pzbvVX582+tIjhZf2Rh/uLq49UV+gDjiqy3jD6yRHyCO+GrL+PfN
9UFKyA90b5rDTf7pvfH1SMJb6pcXr5f/q1X7jf2PHPu/is5v49RfE8H6C3HE
V1vGH1gjP0Ac8dXWaOO/sbBa/TV81coPcfcPq79uu/3YfBjHlvh6zPAO1t9s
so2/+mvII1t+iHZi/fW3fp/avFfc7xe6utHiKxvjD1cXt77IDxBHfLVl/IE1
8gPEEV9tGf++uT5ICfmB7k3TuMk/vTe+HklY/fUpovOb+mtKWH8hjvhqy/gD
a+QHiCO+2hpt/NVfw3Z18kOe519DTbef1mb13NSydX97k2381V9DHtnyQzTP
v47g+ddrRouvbIw/XF3c+iI/QBzx1ZbxB9bIDxBHfJV7PkO7/WeNf99cH6SE
/ED39i6aJzocX/NEvXit/Vup2h/of4To/DZO/fWx40/es/5CHPHVlvEH1sgP
EEd8tTXa+Ku/hu3q5Idbmudfr50Qtv3Ydj66bda6p31KNf4l+cr9FXC6VPkh
2scjsY0HY8+HZD1VDe9Vfnzb8UgOFV8JGX+4tND1RX6AOOKrLeMPrJEfII74
KjR9ZVv760fGv2OuD1JIfqBve1fMc+2Kr2z3d3Vw/1hofhuk/noeQW2jqT/W
X4gjvtoy/sAa+QHiiK+2hhr/57M6L0/4KB6ESYX8cEvz/OuXzWw/vJ0tbutP
mZ+mdx+Lb1p5xl/9NWSTJz9E+3gktuVgbHFI9q27pzbvVX582/dIjhNfORl/
uK7o9UV+gDjiqy3jD6yRHyCO+CoxDdTaX7cw/r1yfZBy8gMdO7Binmt7fGW7
v6uP+8fi8tsI9dfNw6d71l+II77aMv7AGvkB4oivtsYZ/0Vh9eKvj3M+6q/h
ITo/xN0/rP56hPPnl/YmuLpcgrNJNf7qryGVVPkh2on119+6fmrzLnG/X6gD
Q8VXQsYfLi10fZEfII74asv4A2vkB4gjvgo9j9iuHzf+HXN9kELyA307sGie
aFd8Zbu/q4P7x0Lzm/prCll/IY74asv4A2vkB4gjvtoaavxfPuR6/vDrx+mg
+n2DhCrkhzzPv4aaPgbXfM73sQSnkm381V9DHtnyQzTPv47g+ddrRouvbIw/
XF3c+iI/QBzx1ZbxB9bIDxBHfJWbRmntr+8Z/765PkgJ+YHu7VoxzyW+2ooe
f/XXlJAfII74asv4A2vkB4gjvtoabfyf668Xldfqr+GhTn5I9fzrx29jmP+s
7ce2H5sP49gSX49p38H6m0228d8SOPOUFd0eRpYtP0Tz/OsInn+9ZrT4ysb4
w9XFrS/yA8QRX20Zf2CN/ABxxFe5aYjW/vqe8e+b64OUkB/o3q4V81x74yvb
/V1Xv38sOr+NUH/99ecIahhN/bH+Qhzx1ZbxB9bIDxBHfLU12vjPT+k8zvZM
f1V/DQt18kOF51+/+dfn1xPnRdn3VyXbtu/afmw+jGO09TebbOO/8arTI7Ki
28PIsuWHaJ5/HcHzr9eMFl/ZGH+4urbPv5Yf4Bjx1ZbxB9bIDxBHfJV7Hq7t
P2v8++b6ICXkB7q3d9E80d74ynZ/19XvH1N/fZb5cLXuSz+svxBHfLVl/IE1
8gPEEV9tjTb+z/XXX38UXT7+XOc370F+V6m/Xrt/eO/1xGznn6++/dh8GMfH
+JrP8A7W32yyjf/2A49HrIW2h5Flyw/RbsFav782yo9v523uI9VfdxZf2Rh/
uLq49UV+gDjiqy3jD6yRHyCO+GrL+PfN9UFKyA90b5rJTf7pvfGV7f6uq98/
Fp3fxqm/JoL1F+KIr7aMP7BGfoA44qut0cZ//jzcl9caHqeAVGFDnfwQd/+w
64kk92Ours3qzhbfnK47/ntTVnR76M9188NhJxdd/9T6PbVUfnz7rdPnX38N
GV+pGH+4tND1RX6AOOKrLeMPrJEfII74asv4M3F9kGfyA32bznm2+tfFV1uh
46/+mkLyA8QRX20Zf2CN/ABxxFdbQ43/y+dfz+39NbDQtwr5IUl9yo/Yf/zi
hbVfv7D4v4v2e7dfff8ft/ckqLIsVQnb9s4cU+Et7BXa+eeU8uaVsD0M7tLJ
7Zib5zWfqo/xDJr2A8ZXKtXGf+9uTQNGtn3+3yLXl2r5ATILmvbiq61q4793
t6YBI0sy/6vlB8is8rIovr6qXI/b1TjivZzVfgSuD44jyfyvlh+giemc58dm
lZfFl/9Q9P1aHzN8nX+35voSmt+uXn+9fXCOaf3+3knS5z4GEwoFTXvx1Va1
8d+7W9OAkSWZ/9XyA2RWeVkUX3VUG/+9uw2dBm9O7/i1rmSQJA1WyA+3sPuH
915P/PHfHz/yMQM82jzaz19btl99/xu392Ga3vdXvv38zQOFUbm288eErxb1
b3pSrn7u2ihu/Ke42H4zQ7b2QJ78XEf58di3fp/XfMDVx3Oc458xRY//3vkT
Pd8gswPxsgjY55+a/9+964v8zMgc//TN8Q/kkW3+y8+MzPFPK3Wuxzn+uQrX
B0eQbf7Lz3RsmslvGuQ5/om+X2vM+8fi8lsH9ddrI1Mu7aph/YU88qy/RHD+
AfLINv/lZ0bm+KdvAx7/qL8mrdGOf+b7P/f+4WPXH7f0ueQ889X3n+38eajF
5H/89fGHwhD4eIq75iHQ7elh92v9OSDnUVzo+E+55WMKStseBpcqP9dRfjw2
b3NPfKW1jkuP51DHPwOKHv+98yd6vkFmB+Z/6PoiPzMyxz99c/wDeWSb//Iz
I3P801CF63GOfy7E9cHuZZv/8jN9m6bx2v9NdfxTp/56S7e7uX8sNL91UH8d
ffyZjfUX8ki1/nI65x8gj2zzX35mZI5/+jbg8c/HKwjdFA9yOQMe/8z/iZdn
+b4dvX/Y9URKPE/+53gsCYGPwTWf8xVC/mMkbgnGRUh+a/TUzi2ix/+RYd6k
oMztYWTZ8nMd5cdj+TN/Tdcdz9GOf0YTPf5750/0fIPMjs3/uPVFfmZkjn/6
5vgH8sg2/+VnRub4p63o63GOf67F9cG+ZZv/8jPdm6bxy//l+Kdv0ePfQf31
Yhxejs9ioLYff7Z+f0vWX8jD+ts35x8gj2zzX35mZI5/+jbm8Y/6a3Ia8/jn
41m+Laf47q/O7B24/ri924udrO388OXLnPvftX17Z3LKcPzTKt5fRuLGYHwO
yftFzrefO/7zWHj+Bb/Pv+Y3W3sYWbb8XEf58Vj+zF/TdcdztOOf0USPf87z
P5DTsfkft77Iz4zM8U/fHP9AHtnmv/zMyBz/tBV9Pc7xz7W4Pti3bPNffqZ7
0xx++b+yHf9E36812v1j0flN/fX748/W72/J+gt5ZFt/I97jyJx/gDyyzX/5
mZE5/unbgMc/j7M6768vuNBAfWMe/3w8y/fxFN995cze3uuJu6J+sZOX/8Tz
9qvvf9f27Z3Jqf76GBFfx/rzMhK3BOMiJB/tEx6/RY9/tvsl3F8B22XLz3WU
H4/lz/w1XXc8Rzv+GU22z9d8YGTH5n/c+iIeGVm29THiPY4s2+drPjCybPM/
W3+gpmzrY8R7zCz6ely2z9d8eM/1wb5lm//Z+gOnm+bwy/+VbX2Mvl9rtPvH
oj9f9dfvjz9bv7+lbOtdtv5ATdnW34j3OLJsn6/5wMiyzf9s/YGasq2PEe9x
ZNk+3wrzYaq/fpzheXnF4Uv9NS1ky4dXqb9eO7MXfT0x+nxytv1nO38ebcv8
f8zAiPVxPsOvVX+9CMn7Nc+3F45/tvsl3F8B22XLz3WUH4/lz/w1XXc8Rzv+
GU30+O+dP9HzDTI7Nv/j1hf5mZE5/umb4x/II9v8l58ZmeOftqKvxzn+uRbX
B/uWbf7Lz3Rvmskv/1e2459s92tl689e0flN/fX748/W72/J+gt5ZFt/I97j
yJx/gDyyzX/5mZE5/unbaMc/i4dfzy83zC86fKm/poUxj3/i7h92PZES05K0
NusWk//Y/N++/9Pf3cvOvI/ELcG4CMlH+5zHb6Hjn+1+CfkQdkmVn+soPx67
ROav5rrjOdrxz4BCx3/v/Kkw3yCtY/M/dH2RnxmW45/uOf6BJBLOf/mZYTn+
aavC9TjHPxfi+mDfEs5/+Zm+Tavhy//l+Kd7oeOv/vph7fgzFesv5GH97Z7z
D5BEwvkvPzMsxz/dG+r457n++lGF/fjr4xKDaw1UNubxz8ezfN+O3j8cfT3x
+Rc4TBlmbfvV9x/dn5xuG2Te/66enHW+fRGSOc+3T+LGP9v9Eu6vgL3y5Oc6
Pq4CH5eAq2T+Oq4+ntHzf7T4yibb52s+MLID8RK6vohHRhY9/8VXW9k+X/OB
kWWb/9n6AzVFz3/xteZW5Xpcts/XfFjj+uAIss3/bP2BE02r4ZsG0fN/+/6z
3a+VrT/HxH2+6q/zXMXeLjrer94fqCl6/ouvtrJ9vuYDI8s2/7P1B2qKnv/i
q61sn29cf+6z+uvHJYb55YbpD482Je8ajomOx2z9uV32+dcvd/tm+9X3H92f
nG7rT4Gfpt+J8z9i/8d6Uni+/dHy0b5y1toubvyz3S/h/grYK09+rqP8eOwq
mb+Oq4/nOMc/Y8r2+ZoPjKwkXiLWF/HIyLKtj5wr2+drPjCybPM/W3+gpmzr
4zjqXI/L9vmaD2tcHxxBtvmfrT9womkmv2mQZ33Mdr9Wtv4cE/f5qr/ecvyZ
Tbb1Llt/oKY86y8Rsn2+5gMjyzb/s/UHasq2PnKubJ9vaD3U9Ifv6q/JKls+
rJkfXp7l23KK7/7qzJ7663P3n/P8eag3k/+UEIje/+HOvIzEjcH4HJL3rOfb
Q8c/2/0S7q+AXVLl5zrifh/OmC49nkMd/wwo2+drPjCyA/M/dH0Rj4ws2/rI
ubJ9vuYDI8s2/7P1B2rKtj4OpcL1uGyfr/nwhuuD3cs2/7P1B841TeO1/5tq
fcx2v1a2/hwQ+vmqv/54/JlNtvUuW3+gplTrL6fL9vmaD4ws2/zP1h+oKdv6
yLmyfb7R9VDTH76rvyalbPmwQn/i7h92PZESHyd/YQhE77+kPy8jcUswLkLy
0T7hIVz0+Ge7X0I+hO2y5ec64n4fzpiuO56jHf+MJtvnaz4wsmPzP259EY+M
LNv6GPEeR5bt8zUfGFm2+Z+tP1BTtvUx4j1mFn09Ltvnaz685/pg37LN/2z9
gdNNc/jl/8q2Pha/V/4kevzVX78//mz9/payxWO2/kBN1t++Zft8zQdGlm3+
Z+sP1JRtfYx4jyPL9vlWqIea/vAou35+qb+mlWz5sE5/4u4frvD86+m1+LfW
tl99/9H9ySbb+hjxHtf68zISNwbjc0jehzzfviUQ5ikoW3sYWbb8XEf58Vj+
zF/TdcdztOOf0WT7fM0HRtaq/vq+sr6IR0aWbX2MeI8jy/b5mg+MLNv8z9Yf
qCnb+hjxHjOLvh6X7fM1H95zfbBv2eZ/tv7A6aY5/PJ/ZVsfs92vla0/e6m/
fs/9YOfOh6v3B2rKtv5GvMeRZft8zQdGlm3+Z+sP1JRtfYx4jyPL9vnWrL+e
P/B6/gf117SSLR9epf76vnJmL/p64jxj3F+VeC+2X33/0f3J5uP8n0/CiPWx
cP8l/XkZiVuCcRGSj/YJj9+ix3/jVaRHpGRrDyPLlp/rKD8ey5/5a7rueI52
/DOabJ+v+cDIjs3/uPVFPDKybOtjxHscWbbP13xgZNnmf7b+QE3Z1seI95hZ
9PW4bJ+v+fCe64N9yzb/s/UHTjfN5Jf/K9v6mO1+rWz92Sv681V//f74s/X7
W8q23mXrD9SUbf2NeI8jy/b5mg+MLNv8z9YfqCnb+hjxHkeW7fOtUA81/WFe
f/14qb+mrWz5sE5/4u4fjr6emO38dvT+s50/r+DHXHoz606Z/KH739uZUBXe
wl6h47/9V/g+YidVexhcqvxcR/nx2LzNPeWV1pouPZ5DHf8MKNvnaz4wsgPz
P3R9EY+MLNv6yLmyfb7mAyPLNv+z9QdqyrY+DiXkItzMV77P13x4w/XB7mWb
/9n6A+eaznmu/d9U62O2+7Wy9eeA0M+3g/rr6OPPbLKtd9n6AzWlWn85XbbP
13xgZNnmf7b+QE3Z1kfOle3zDe3P/PrC88mfxTkflxioL1s+rNCfW+Tzrzf2
QbCzJvpMcrYz1Vv6s1fN/u+VpP97U1C29tClJPmhmttln9ec09XHM3r+jxZf
2WT7fM0HRnYgXkLXF/HIyKLnv/hqK9vnaz4wsmzzP1t/oKbo+S++3tsyPnvt
3X90/2v2ZxCuD15UtvmfrT9wovf111/51kfOFTf+V6+/nmwZn71av6d3svU/
W3+gpuj5L77ayvb5mg+MLNv8z9YfqCl6/ouvtrJ9vnH92V6P+eX6Ao1Ex2O2
/txy1KcciPfp+dqL15vtV99/dH+Si36PScawPB7v13z+6cfx/5EiXk71tfl/
9fbAwyAxMmz+D9LNeA5y/DOsbJ/v6cdjf9r5yj1Xttu+tr3y8fPGfVZbX05/
j+LX9gvFb7b1kXNl+3zNB0aWbf5n6w/UlG19HMR1v98V7r/7+ZDtep/rg6lk
G/OP/TF/yOzq53/W+nnW9vIOt+1PodP70E39dZ3jz2wyzMnM/YGamq+/hMr2
+ZoPjCzb/M/WH6gp2/rIubJ9vqf3Z++/W/jPQYls+TCoP3Hn96KvB/34qR//
xOL1ZvvV9x/dn+QWsyV0fdyy/8UE/jjmG9sn+X0I9X0c/2nQtieTq7cHHqLz
fxLD5v8g3YznIMc/1dpnk/nzfdn+8PHMjyD6y8+gtN327dsLj59L8snXerxU
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
D+zl+Ec8MqYM62O24xnHP3H7P70/z3t4uXOJnTWOf07PD9d9/vXL3b7ZfvX9
R/cnucXMD10fI/a/Uarfd1rTx/Hfm0+u3h54SJKfow2b/4N0M56DHP8MK9vn
e/rxWPMCQK9LvyofP2+Ml5rPRzs3P4hfr5qvwvjNtj5yrmyfr/nAyLLN/2z9
gZqyrY+DuO73u8L9dz8fsl3vq3x+g/eyzf/Tz8dCTVc///Oy2yduP9DhVP0p
dPrnq/461fXrvS63/kLHmq+/hMr2+ZoPjCzb/M/WH6gp2/rIubJ9vqf3Z7GH
xV8f53xMPDLIlg+D+nPp51+nOr8dvf/k58+jpVof16Z0eftUv++0pi3Xv3bl
k6u3Bx6yHY8FGTb/B+lmPAc5/qnTPqFUn++W9nuPZ5oXAHpd+lVy/HwgP2yM
lybPR3vTn+3Er1fNV+H331TrY7bjGcc/p+9/kO+bXFGF/BCaDw8Qj4ws1fqY
7XgmLv9c9/td4f67z7d7v49kaz8yxz/l52Ohpquf/3nZ7RO3H+hwqv4UOv3z
VX8dd/3a+tvf8TC80Xz9XTQOzT95zj9Uk+rzrdAfOMzxj3hkKKnWx2zHM45/
Tt//6f2Z7+Hx58f+v/4owZbY+cjxz1lhct3nXzOUVOvjNKW/fq5Ziz8Utvf7
TtfGf28+uXp7+H/s3ct541jWJVAY0IM2pw3IYZtTBmgoE3ogA8qINKCGbYoM
4OAvkQoFkw8FQQHnce/a3xqkTuxU3VJApBIXEOQrk5z/mfb1f6cM8/Wc5Oef
mH7BlPr7faS/9ueZ9BsAae0nPz8/8frw4PdL3+ej+f4l0g//+7fU+2O1n2f8
/LP555/kvzelYwJeH3Z9PXwivh9l5pR6f6z288x+rz99//vuh59/+Nfbtf89
Uq0/c/z88/PzsSKRGen8j2yezb/+7r/eb//a+6/XB5kqpd5/q51PCHj92Tul
/n4D1iPydPz84/tRpkqp98dqP8/4+Wfzz7/5es4/w8Xn/Por2+R/SIaPn3+2
+jZp/fzr86/GteXqi9b68++9nuIp9f54/W3+/fH8eL/m7zsNyB+//o8c2Odf
0u59EfnK3q//RTLt6/9OGebrOcnPPzH9gin19/tIf+3PM+k3ANLaT35+fuL1
4cHvl77PR/P9S6Qf/vdvqffHaj/P+Pln888/yX9vSscEvD7s+nr4RHw/yswp
9f5Y7eeZ/V5/+v733Q8///Cvt9X2++wPPh4///z8fKxIZLqf/7n402s/nD+9
4CLr+WE2//t1//V++9fef8f7eVjkm6S//56n2vkE+y+bf36vt1I2fv7x/ShT
pdT7Y7WfZ/z8s/nn33w955/h4nN+/ZVt8j8kw8fPP1t9mwQ8//qb//WffIn+
c3YT9+HWLd4X8+6ff+/11M/euwOPf/7rL/4jrz+P9Gv+vtOYfP/1f/Dv/eur
2r0vIudJ3B0Oy8yv/3tkpK/nDD//xPRrps7f7yP9tT/PpN8ASGs/+fn5udeH
R75fIt9ftn198P1LpJ//92+d98dqP8/4+WePzz/Df29Kx8S8Puz3evhcfD/K
zKnz/ljt55n9Xn/6/vfdzz//2K+31fb77A8+Hj//3PvTP34Sx4+kpPv5n/Nv
6kOB67Wqrefn2fbv1/3X++1fe//d9jOL1E+d/z6tdj4h5vVn79T5+41Zj8hz
8fPPtp9ZpH7qvD9W+3nGzz97fP5t13P+Sb7++fyv6b//4LVdHomff7b6nHs/
//qPC3j6q3T+Ra5wfnvvz7/3eurn63Da7/3xwc9/8+v/zdf88X7N33cak++/
/o//pX99L7Tui8h59n79r5CZX//3yEhfzxl+/onp10ydv99H+mt/nkm/AZDW
fvLz83OvD498v0S+v2z7+uD7l0g//+/fOu+P1X6e8fPPHp9/hv/elI6JeX3Y
7/Xwufh+lJlT5/2x2s8z+73+9P3vu59//rFfb6vt99kffDx+/vnmT/8Yx4/E
p/v5n/Nv6grXa1Vbz8+z7d+v+6/327/2/rvtZxapnzr/fVrtfIL9lz0+v9db
qRk//2z7mUXqp877Y7WfZ/z8s8fn3/x6v8OvWzLvneC6qIncjJ9/tvqcuz7/
+sE1tHuhlvh8vXF88w4S+fnXfrM/2K/5+04Dsu3f79qXlO59kbGz9+t/kUz7
+r9Thvl6TvLzT1i/Wqr9/W7+81j6DYC0tvZ4u548cfLnj8d/2PtL7s8/vn/5
obXH28Wk2vtjtZ9n/Pyz7eef5L83pWn2fn3Y+/VwbXw/ysyp9v5Y7eeZnV5/
hvnvOz///CTV9vva/Xi/efz885PP5viRyql//ke2zeZff/df77p/7f13288v
UjnV3n+rnU+w/7Lt5/d6K5Xj559tP79I5VR7f6z284yff7b9/Juv5/wz3Pxs
/1n5a2Bl5vj5Z5NPW+T83sVX7PDrlzCcfzEvPtTX19cftS8yUqp9f+nrV349
r7b+2fr+vrbtp98ASGvVjufZ+ukHAK1VO5719fX19cfo/71zFklNteNNX19f
X1+/Y18kMtWOf/2x+2vvv662fn19fX19fX19fX19fX19fX393H73VPt66lc4
nk/D8z+9PlrOP9TX19cftS8yUqp9f+nrR/bXptr6Z+uvTbX11+mn3wBIa9WO
59n66QcArVU7nvX19fX1x+if/ybhzeP+6yKpc7zp6+vr6+v37YtEptrxrz9q
/7nnX9dZv76+vr6+vr6+vr6+vr6+vr5+hX73VPt66if2D7/u0T7/o8M/792+
+Jz6+vr6Q/ZFRkq17y99/cj+2lRb/2z9tam2/lL99BsAaa3a8TxbP/0AoLVq
x7O+vr6+/hj9v//++1//zPVt1P96Nu6/rpBSx5u+vr6+vn7Tvkhkqh3/+gP3
n7j/utT69fX19fX19fX19fX19fX19fXT+91T7eupn96/GF5/not/1tfX1x+y
LzJSqn1/6etXfj2vtv7Z+v6+Nuyn3wBIa9WO59n66QcArVU7nvX19fX1x+if
P//6m/uvH7kR+6v51Xf/dYWUOt709fX19fWb9kUiU+341x+4/9z913XWr6+v
r6+vr6+vr6+vr6+vr6+f3u+eal9P/dz+ReH6X7/4PPr6+vqj9kVGSrXvL339
yq/n1dY/W9/f14b99BsAaa3a8TxbP/0AoLVqx7O+vr6+/hj9De+/vrj52v3X
RVLqeNPX19fX12/aF4lMteNff+D+E/dfl1q/vr6+vr6+vr6+vr6+vr6+vn56
v3uqfT31E/v//Yevo+L6CLk+5vX19fVH7YuMlGrfX/r6kf21qbb+2fprU239
1frpNwDSWrXjebZ++gFAa9WOZ319fX39Mfqefz12qh1v+vr6+vr6Hfsikal2
/OuP3V97/3W19evr6+vr6+vr6+vr6+vr6+vr5/a7p9rXUz+9f7j/SwbO//nw
625ufX19/SH7i8hAqfb9pa8f2V9Wptr6Z+svK1Nt/dX66TcA0lq143m2fvoB
QGvVjmd9fX19/TH6nn89dqodb/r6+vr6+h37i0hgqh3/+mP3n7j/utT69fX1
9fX19fX19fX19fX19fVz+0vzVPt66uf2T4Wv/vm/cv1Jvsr6+vr64/UXkYFS
7ftLXz+y7/ulV9/f17b99BsAaa3a8TxbP/0AoLVqx7O+vr6+/hh9z78eO9WO
N319fX19/Y79RSQw1Y5//bH7a++/rrZ+fX19fX19fX19fX19fX19ff3c/tI8
1b6e+nWO53v986G+vr7+DH2RkVLt+0tfP7K/NtXWP1t/baqtv0I//QZAWqt2
PM/WTz8AaK3a8ayvr6+vP0bf86/nSYXjTV9fX19fv3tfJDLVjn/98fpr77+u
tn59fX19fX19fX19fX19fX19/Tr97qn29dSP719/eP6pTn96Gl58qK+vrz9Y
fxEZKNW+v/T1K7+eV1v/bH1/X9v2028ApLVqx/Ns/fQDgNaqHc/6+vr6+mP0
Pf967FQ73vT19fX19Tv2F5HAVDv+9cfur73/utr69fX19fX19fX19fX19fX1
9fVz+0vzVPt66lfoX9SW483a5x19fX394fuLyECp9v2lr1/59bza+mfr+/va
tp9+AyCtVTueZ+unHwC0Vu141tfX19cfo+/512On2vGmr6+vr6/fsb+IBKba
8a8/dv+5+6/rrF9fX19fX19fX19fX19fX19fP7e/NE+1r6d+tf715PqP9PX1
9cfrLyIDpdr3l75+5dfzauufre/va9t++g2AtFbteJ6tn34A0Fq141lfX19f
f4y+51+PnWrHm76+vr6+fsf+IhKYase//tj9n99/3ev/r76+vr6+vr6+vr6+
vr6+vr7+tv2leap9PfXL9s+Hjxw/+vr6+q37IiOl2veXvn5kf22qrX+2/tpU
W3+1fvoNgLRW7XierZ9+ANBateNZX19fX3+Mvudfj51qx5u+vr6+vn7Hvkhk
qh3/+mP3N7z/usX/X319fX19fX19fX19fX19fX39bfvdU+3rqV+hf5qf/9H5
5Pqz6evr64/XFxkp1b6/9PUrv55XW/9sfX9f2/bTbwCktWrH82z99AOA1qod
z/r6+vr6Y/Q9/3rsVDve9PX19fX1O/ZFIlPt+Ncfu//c/dd11q+vr6+vr6+v
r6+vr6+vr6+vn9vvnmpfT/3c/vd/dH3M6Ovr6w/cFxkp1b6/9PUrv55XW/9s
/bWptv5S/fQbAGmt2vE8Wz/9AKC1asezvr6+vv4Y/b93ziLZKXW86evr6+vr
N+2LRKba8a8/cH/t/dfV1q+vr6+vr6+vr6+vr6+vr6+vn97vnmpfT/3E/vkf
neYXn+1ioq+vrz9qfxEZKNW+v/T1K7+eV1v/bH1/X9v2028ApLVqx/Ns/fQD
gNaqHc/6+vr6+mP0T013Xo+aasebvr6+vr5+x/4iEphqx7/+2P21919XW7++
vr6+vr6+vr6+vr6+vr6+fm5/aZ5qX0/9gv3zP7r4UF9fX3/UvshIqfb9pa9f
+fW82vpn6/v72raffgMgrVU7nmfrpx8AtFbteNbX19fXH6N/yt9//334lX8d
c/hnvib/upPzzn/j/usiqXa86evr6+vrd+yLRKba8a8/dn+T+68b/f/V19fX
19fX19fX19fX19fX19+23z3Vvp76FY7n0/D8T6+PlvMP9fX19Ufti4yUat9f
+vqR/bWptv7Z+mtTbf11+uk3ANJateN5tn76AUBr1Y5nfX19ff2R+j+///ri
Fmz3X5dKteNNX19fX1+/Y18kMtWOf/1R+2vvv662fn19fX19fX19fX19fX19
fX39Cv3uqfb11E/sH37do33+R4d/3rt98Tn19fX1h+yLjJRq31/6+pH9tam2
/tn6a1Nt/aX66TcA0lq143m2fvoBQGvVjmd9fX19/WH6i+dfD51qx5u+vr6+
vn7Hvkhkqh3/+gP3n7j/utT69fX19fX19fX19fX19fX19fXT+91T7eupn96/
GF5/not/1tfX1x+yLzJSqn1/6etXfj2vtv7Z+v6+Nuyn3wBIa9WO59n66QcA
rVU7nvX19fX1h+kvnn89dKodb/r6+vr6+h37IpGpdvzrD9x/7v7rOuvX19fX
19fX19fX19fX19fX10/vd0+1r6d+bv+icP2vX3wefX19/VH7IiOl2veXvn7l
1/Nq65+t7+9rw376DYC0Vu14nq2ffgDQWrXjWV9fX19/mP7i+ddDp9rxpq+v
r6+v37EvEplqx7/+wP0n7r8utX59fX19fX19fX19fX19fX19/fR+91T7euon
9v/7D19HxfURcn3M6+vr64/aFxkp1b6/9PUj+2tTbf2z9dem2vqr9dNvAKS1
asfzbP30A4DWqh3P+vr6+vpj9E/x/OtRU+1409fX19fX79gXiUy1419/7P7a
+6+rrV9fX19fX19fX19fX19fX19fP7ffPdW+nvrp/cP9XzJw/s+HX3dz6+vr
6w/ZX0QGSrXvL339yP6yMtXWP1t/WZlq66/WT78BkNaqHc+z9dMPAFqrdjzr
6+vr64/RP/2z51+PmmrHm76+vr6+fsf+IhKYase//tj9J+6/LrV+fX19fX19
fX19fX19fX19ff3c/tI81b6e+rn9U+Grf/6vXH+Sr7K+vr7+eP1FZKBU+/7S
14/s+37p1ff3tW0//QZAWqt2PM/WTz8AaK3a8ayvr6+vP0Z/Ocbzr0dNteNN
X19fX1+/Y38RCUy1419/7P7a+6+rrV9fX19fX19fX19fX19fX19fP7e/NE+1
r6d+neP5Xv98qK+vrz9DX2SkVPv+0teP7K9NtfXP1l+bauuv0E+/AZDWqh3P
s/XTDwBaq3Y86+vr6+uP1Pf86xlS53jT19fX19fv2xeJTLXjX3+8/tr7r6ut
X19fX19fX19fX19fX19fX1+/Tr97qn099eP71x+ef6rTn56GFx/q6+vrD9Zf
RAZKte8vff3Kr+fV1j9b39/Xtv30GwBprdrxPFs//QCgtWrHs76+vr7+GP3T
3POvR021401fX19fX79jfxEJTLXjX3/s/tr7r6utX19fX19fX19fX19fX19f
X18/t780T7Wvp36F/kVtOd6sfd7R19fXH76/iAyUat9f+vqVX8+rrX+2vr+v
bfvpNwDSWrXjebZ++gFAa9WOZ319fX39MfqnP/X861FT7XjT19fX19fv2F9E
AlPt+Ncfu//c/dd11q+vr6+vr6+vr6+vr6+vr6+vn9tfmqfa11O/Wv96cv1H
+vr6+uP1F5GBUu37S1+/8ut5tfXP1vf3tW0//QZAWqt2PM/WTz8AaK3a8ayv
r6+vP0Z/Ocbzr0dNteNNX19fX1+/Y38RCUy1419/7P7P77/u9f9XX19fX19f
X19fX19fX19fX3/b/tI81b6e+mX758NHjh99fX391n2RkVLt+0tfP7K/NtXW
P1t/baqtv1o//QZAWqt2PM/WTz8AaK3a8ayvr6+vP0b/FM+/HjXVjjd9fX19
ff2OfZHIVDv+9cfub3j/dYv/v/r6+vr6+vr6+vr6+vr6+vr62/a7p9rXU79C
/zQ//6PzyfVn09fX1x+vLzJSqn1/6etXfj2vtv7Z+v6+tu2n3wBIa9WO59n6
6QcArVU7nvX19fX1x+if4vnXo6ba8aavr6+vr9+xLxKZase//tj95+6/rrN+
fX19fX19fX19fX19fX19ff3cfvdU+3rq5/a//6PrY0ZfX19/4L7ISKn2/aWv
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

        "], {{0, 360.}, {3936., 0}}, {0, 255},
        ColorFunction->RGBColor,
        ImageResolution->{96, 96}],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{3936., 360.},
      PlotRange->{{0, 3936.}, {0, 360.}}], ",", "\"\<PNG\>\""}], "]"}], ",", 
   RowBox[{"Permissions", "->", "\"\<Public\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.867160883540856*^9, {3.867230098033464*^9, 3.867230173219475*^9}, {
   3.867230562984953*^9, 3.867230569318293*^9}, {3.867230632062974*^9, 
   3.867230646288238*^9}, {3.867232733447628*^9, 3.8672327487809143`*^9}, {
   3.867233227507115*^9, 3.867233235748992*^9}, {3.867233282750174*^9, 
   3.8672332884195023`*^9}, {3.867233633312872*^9, 3.867233709654862*^9}, {
   3.867233855009637*^9, 3.867233863467163*^9}, {3.867233896976097*^9, 
   3.8672340624713306`*^9}},
 CellLabel->
  "In[335]:=",ExpressionUUID->"df289e36-1fa5-4724-aaf3-e94be5490673"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/1993bd2f-d0b9-44ec-83ec-9e538491dc2a\"\
", "https://www.wolframcloud.com/obj/1993bd2f-d0b9-44ec-83ec-9e538491dc2a"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/1993bd2f-d0b9-44ec-83ec-9e538491dc2a"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9, 
   3.867233867268243*^9, 3.867233904868402*^9, 3.867233941224843*^9, 
   3.86723397970732*^9, 3.867234010903051*^9, {3.867234043181788*^9, 
   3.867234064378449*^9}},
 CellLabel->
  "Out[335]=",ExpressionUUID->"9052f48f-12a2-44d3-b516-06aeda97788f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/353633ec-e377-4e69-9e62-c6706633d7cd\"\
", "https://www.wolframcloud.com/obj/353633ec-e377-4e69-9e62-c6706633d7cd"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/353633ec-e377-4e69-9e62-c6706633d7cd"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9, 
   3.867233867268243*^9, 3.867233904868402*^9, 3.867233941224843*^9, 
   3.86723397970732*^9, 3.867234010903051*^9, 3.867234043181788*^9},
 CellLabel->
  "Out[334]=",ExpressionUUID->"92dac3e2-59f9-4ab3-82cc-8c584f0013cc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/d4791678-fb0f-493b-8644-65a3daa12c09\"\
", "https://www.wolframcloud.com/obj/d4791678-fb0f-493b-8644-65a3daa12c09"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/d4791678-fb0f-493b-8644-65a3daa12c09"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9, 
   3.867233867268243*^9, 3.867233904868402*^9, 3.867233941224843*^9, 
   3.86723397970732*^9, 3.867234010903051*^9},
 CellLabel->
  "Out[333]=",ExpressionUUID->"2929c262-5933-47f1-a796-3da73864ed20"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/a0861449-e825-42bd-a06d-e56cdced80a8\"\
", "https://www.wolframcloud.com/obj/a0861449-e825-42bd-a06d-e56cdced80a8"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/a0861449-e825-42bd-a06d-e56cdced80a8"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9, 
   3.867233867268243*^9, 3.867233904868402*^9, 3.867233941224843*^9, 
   3.86723397970732*^9},
 CellLabel->
  "Out[332]=",ExpressionUUID->"4fc1d294-16dc-464a-bee9-4de5fe91d1aa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/65664715-e560-432d-918c-b7be4509ecb0\"\
", "https://www.wolframcloud.com/obj/65664715-e560-432d-918c-b7be4509ecb0"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/65664715-e560-432d-918c-b7be4509ecb0"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9, 
   3.867233867268243*^9, 3.867233904868402*^9, 3.867233941224843*^9},
 CellLabel->
  "Out[331]=",ExpressionUUID->"24a53a6c-b6ba-4c37-bf4c-4f8e5c1d66f4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/02a7838b-6ac5-4491-a550-6414c3fdd40c\"\
", "https://www.wolframcloud.com/obj/02a7838b-6ac5-4491-a550-6414c3fdd40c"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/02a7838b-6ac5-4491-a550-6414c3fdd40c"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9, 
   3.867233867268243*^9, 3.867233904868402*^9},
 CellLabel->
  "Out[330]=",ExpressionUUID->"ac40df37-ec47-4b08-abac-97b874099027"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/bb972b44-0a50-480b-90a5-042e4487d72f\"\
", "https://www.wolframcloud.com/obj/bb972b44-0a50-480b-90a5-042e4487d72f"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/bb972b44-0a50-480b-90a5-042e4487d72f"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9, 
   3.867233867268243*^9},
 CellLabel->
  "Out[328]=",ExpressionUUID->"8df6086e-8804-415b-aba6-fc31f00720c3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/2a8960ac-f087-4151-a73d-28f17ad0f96f\"\
", "https://www.wolframcloud.com/obj/2a8960ac-f087-4151-a73d-28f17ad0f96f"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/2a8960ac-f087-4151-a73d-28f17ad0f96f"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9, 3.867233677375651*^9},
 CellLabel->
  "Out[308]=",ExpressionUUID->"d24b95f5-56f8-49cd-9ad7-55d1a4e16b06"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/916d095e-05ba-4759-a8ae-491755b9f94a\"\
", "https://www.wolframcloud.com/obj/916d095e-05ba-4759-a8ae-491755b9f94a"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/916d095e-05ba-4759-a8ae-491755b9f94a"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9, 3.867233644248878*^9},
 CellLabel->
  "Out[307]=",ExpressionUUID->"589023e3-7248-46b9-84d5-2ef21a1877bf"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/17d83563-90ef-4dc9-b97e-51883ffdaccc\"\
", "https://www.wolframcloud.com/obj/17d83563-90ef-4dc9-b97e-51883ffdaccc"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/17d83563-90ef-4dc9-b97e-51883ffdaccc"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9, 
   3.86723358149391*^9},
 CellLabel->
  "Out[305]=",ExpressionUUID->"da02c4ed-3ed5-4e80-8fb2-aa3bff83440b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/6bfbbb3f-cd90-4df1-adc4-4646cc14fb22\"\
", "https://www.wolframcloud.com/obj/6bfbbb3f-cd90-4df1-adc4-4646cc14fb22"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/6bfbbb3f-cd90-4df1-adc4-4646cc14fb22"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9, 3.8672332391562757`*^9},
 CellLabel->
  "Out[304]=",ExpressionUUID->"de5f7f18-8d6d-436b-871c-dba3234e4d27"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/9bc488a8-13ba-48e6-a60d-3f03f80c9e8b\"\
", "https://www.wolframcloud.com/obj/9bc488a8-13ba-48e6-a60d-3f03f80c9e8b"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/9bc488a8-13ba-48e6-a60d-3f03f80c9e8b"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9, 3.867232752431796*^9},
 CellLabel->
  "Out[303]=",ExpressionUUID->"07f5d83b-9a74-4486-b533-f7e27efab278"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/9efa1c36-2e01-42f1-8537-ba46c5f4f81a\"\
", "https://www.wolframcloud.com/obj/9efa1c36-2e01-42f1-8537-ba46c5f4f81a"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/9efa1c36-2e01-42f1-8537-ba46c5f4f81a"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 3.8672305899672623`*^9}, 
   3.867230656655938*^9},
 CellLabel->
  "Out[302]=",ExpressionUUID->"6052aba0-08e3-4c37-8606-9f0183f49c08"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/ac4c0aef-6687-4f31-a240-462039f34d96\"\
", "https://www.wolframcloud.com/obj/ac4c0aef-6687-4f31-a240-462039f34d96"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/ac4c0aef-6687-4f31-a240-462039f34d96"],
  SelectWithContents->True]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.867230208237932*^9, {3.867230574015192*^9, 
   3.8672305899672623`*^9}},ExpressionUUID->"0304646a-111e-4667-9099-\
9f15f4ef47b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.867230455292615*^9, 3.867230501867717*^9}, {
  3.867230593289122*^9, 
  3.867230616099571*^9}},ExpressionUUID->"c3bc5fae-be2e-47aa-ab85-\
79b9b1efbb02"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
vejNnfPf8wO8U3+AFPt/Rmb9PWbpvNLnBFWpP0CK/T8js/4CKeoPkGL/z8is
v/A8ez+XvmT6fHtLfu95qj/jed1L/VP0oNf9/7y/aO3vzvuT5vb0L/WeP3r9
6XkFo/hUQ9fq47d7N3swenPV/Pf8AFvUHyDF/p+RWX/3WTuv9BhCVeoPkGL/
z8isv0CK+gOk2P8zMusvPMv0mfJvep9+1oPG/JFzVX/G8uqd0j9FL3rc/+uf
0j8FVcxr6Lt53fx0bG9dtQejN2fPf88PsJf6A6TY/zMy6+9+7+eSHjd4AvUH
SLH/Z2TWXyBF/QFS7P8ZmfUXnmPqZzrSAzX1Pk39Uy35o+er/oxD/xS96W3/
f3b/1HttnquQP3r96fkEI3mvn2v18r1ufvrzLelrhbmr5r/nB9ii/gAp9v+M
zPq7X0/nAk+g/gAp9v+MzPoLpKg/QIr9PyOz/sJzvPc17emBWvpMe0v+6Pmq
P+PQP0Vvetv/X/n7pyoeP3r96fkEo/nT/vFDHV2rr1t189u9Jdzhyvnv+QHW
qD9Aiv0/I7P+7nP0vVBgm/oDpNj/MzLrL5Ci/gAp9v+MzPoLzzDvb1r7fPrL
Wv/UN/lvzln9GYP+KXrU0/5f/5T+KajqUz/qVAf31Er7Lqo6c/57foAj1B8g
Rf1gZNZfIEX9AVLUD0Zm/QVS1B8gRf1gZNZfqKti/9Q79ee59E/Ru3T90D+l
fwoqW+pFnergpz7V91pp30VlZ81/zw9wlPoDpKgfjMz6C6SoP0CK+sHIrL9A
ivoDpKgfjMz6CzVV7596UX+eSf8UFSTrx1otXjKvv6Pn03MH+N3ac+m55ela
57/nB/iW+gOkqB+MzPr7Z+/vl6bPBZ5O/QFS1A9GZv0FUtQfIEX9YGTWX6jl
Cf1TE/XnWfRPUUmifmzVWsfXj6fnDAAAAACM6L1vSg8VAAAAAAAAd3lS/xTP
on8K1qX7j6ofT48fAAAAAIxmqV9KDxUAAAAAAAB30D9Fr/RPwbp0/1H14+nx
AwAAAIDR6J8CAAAAAAAgRf8UvdI/Bevm9ZRj0uMHAAAAAKOZeqWWpM8NAAAA
AACAZ9M/Ra/0T8G63n6fU7Xj6fEDAAAAgNH4/VMAAAAAAACkvPc+7fl9HfMe
qNZ8+vrpl/4pWJfuP6p+PD1+AAAAADAa/VMAAAAAAACkHOl9WuqBas2nr59+
6Z+Cden+o+rH0+MHAAAAAAAAAAAAAMA9jvY+zXugWvPp66df+qdg3Te1F7//
EAAAAAAAAAAAAABgNC2fPX//PVLf5tPXT7/0T8G63n6f09qa0Mv5vR9Pjx8A
33vvhT3639Pvz60qfe8BKlv7GmGNfH7soEV6/5aWvv+Y/5Wlx2906fFPS99/
AKgovX6npe8/AMBR6f1TdenxS49/+vyhupbP31X3+hzEt7Vn+nx6Sz59/fRL
/xSsS/cfzf//3r7ZxPktHU+PHwDfaanhPaw/1i+AjJ/vX/3tL1/54/2vgfPp
8YMW6f1b+nj6/mP+Vz6eHr/Rpcc/fTx9/wGgovT6nT6evv8AAEel90/Vj6fH
Lz3+6fOHylo/f5c+/1avPqZXLfmm9+mlNZ++fvqlfwrWpfff7/99hK8fAGjx
/jMtvsmk1x/rF0DGz/eu/tkLdKRvaN5/NGo+PX7QIr1/Sx9P33/M/8rH0+M3
uvT4p4+n7z8AVJRev9PH0/cfAOCo9P6p+vH0+KXHP33+UFnr5+/S599q6md6
1ZOjvU9T/1RLPn399Ev/FKw72rfEn6XHD4CM9Ppj/QLI+Pm+1aw/aOm99iO/
v2mkfHr8oEV6/5aWvv+Y/5Wlx2906fFPS99/AKgovX6npe8/AMBR6f1Tdenx
S49/+vyBut77mvb0QM3rT2s+ff30S/8UrOvh5xl8u3ft4ecxpMcPgO+0fA0x
Xw9S66f1C+B+896gpa9pPvUQTcdGzqfHD1qk92/p4+n7j/lf+Xh6/EaXHv/0
8fT9B4CK0ut3+nj6/gMAHJXeP1U/nh6/9Pinzx8qa/38Xfr8W837m9bqz1SD
PvVPfZNPXz/90j8F69L776Warn8KgKvpn8qPAUBFrxr6qX9o7c/29B+NkE+P
H7RI79/Sx9P3H/O/8vH0+I0uPf7p4+n7DwAVpdfv9PH0/QcAOCq9f6p+PD1+
6fFPnz9Upn9K/xR90j8F69L77297p5Z6qHz9AMBd0uuP9Qsg41VDK/cvpfPp
8YMW6f1b+nj6/mP+Vz6eHr/Rpcc/fTx9/wGgovT6nT6evv8AAEel90/Vj6fH
Lz3+6fMH6tI/Ra/0T8G61v6l0aXHD4DvtNTw9Npj/QLIeb0n9d4TNPUFvbz3
Dk3vXW31H42WT48ftEjv39LS9x/zv7L0+I0uPf5p6fsPABWl1++09P0HADgq
vX+qLj1+6fFPnz9U1vIMPeH50z9Fr/RPwbr0zzNolT7/9PgB8J3Wr9/S64/1
CyBjqX9o6fcu/fF+147+o5Hy6fGDFun9W/p4+v5j/lc+nh6/0aXHP308ff8B
oKL0+p0+nr7/AABHpfdP1Y+nxy89/unzh8r0T+mfok/6p2Bdev+tfwqAitLr
j/ULIONVR/f0Dy0dP9J/9NR8evygRXr/lj6evv+Y/5WPp8dvdOnxTx9P338A
qCi9fqePp+8/AMBR6f1T9ePp8UuPf/r8gbr0T9Er/VOwLr3/1j8FQELrz79I
rz/WL4CMVx391D809Qh92380Qj49ftAivX9LH0/ff8z/ysfT4ze69Pinj6fv
PwBUlF6/08fT9x8A4Kj0/qn68fT4pcc/ff5QWevn79Ln30r/FL3SPwXrzuhh
Gll6/AD4TuvXb9Wl7z9AVa/3pLZ+/9Jab9Ho+fT4QYv0/i0tff8x/ytLj9/o
0uOflr7/AFBRev1OS99/AICj0vun6tLjlx7/9PlDZS3P0BOeP/1T9Er/FKxL
/zyD1v1r+vzT4wdARnr9sX4BZOzpH/r5PldD/9GT8+nxgxbp/Vv6ePr+Y/5X
Pp4ev9Glxz99PH3/AaCi9PqdPp6+/wAAR6X3T9WPp8cvPf7p8wfqeu992vt5
90/9U9/k09dPv/RPwbr0/lv/FAAJ09cQR76WeM+k1x/rF0DGq4ZOvUCfeoTm
x6b//95/NGo+PX7QIr1/Sx9P33/M/8rH0+M3uvT4p4+n7z8AVJRev9PH0/cf
AOCo9P6p+vH0+KXHP33+UFnr5+/S59/qSO/TUg9Uaz59/fRL/xSsS++/j9T9
T2uBrx8AOKrla4ge1h/rF0DGq4Z++v1LW977j0bNp8cPWqT3b+nj6fuP+V/5
eHr8Rpce//Tx9P0HgIrS63f6ePr+AwAcld4/VT+eHr/0+KfPHypr/fxd+vxb
He19mvdAtebT10+/9E/Butb+pdGlxw+A773X8m//u6r0vQeoKl2/q0uPH7RI
Pz9p6fuP+V9ZevxGlx7/tPT9B4CK0ut3Wvr+AwAcld4/VZcev/T4p88fqnt/
lo7+d3UttWfqgWrJp6+ffumfgnXpn2fQKn3+6fEDAAAAAAAAAAAAAOAer8+R
v36H1Demz6e35NPXT7/0T8G6dP+R/ikAAAAAAAAAAAAAACp49TF90wM1ff69
NZ++fvqlfwrWpfuP9E8BAAAAAAAAAAAAAFDB1M90pAfq/fPvrfn09dMv/VOw
7oweppGlxw8AAAAAAAAAAAAAgHu89zXt6YGaf/68NZ++fvqlfwrW3f37ms7+
HVTp80+PHwAAAAAAAAAAAAAA95j3N619/nzp8/Kt+fT10y/9U7Au3X+kfwoA
AAAAAAAAAAAAgAr0T9Er/VOwLt1/pH8KAAAAAAAAAAAAAIAK9E/RK/1TsK61
f2l06fEDAAAAAAAAAAAAAOAe+qfolf4pWHf372s683dPJX7f1Px4evwAAAAA
AAAAAAAAALiH/il6pX8K1qX7j/RPAQAAAAAAAAAAAABQgf4peqV/Ctal+4/0
TwEAAAAAAAAAAAAAUIH+KXqlfwrWndHDNLL0+AEAAAAAAAAAAAAAcA/9U/RK
/xSsu/v3NZ39O6jS558ePwAAAAAAAAAAAAAA7vHe+7T38+6f+qe+yaevn37p
n4J16f4j/VMAAAAAAAAAAAAAAFRwpPdpqQeqNZ++fvqlfwrWpfuP9E8BAAAA
AAAAAAAAAFDB0d6neQ9Uaz59/fRL/xSsa+1fGl16/AAAAAAAAAAAAAAAuEfr
7w5pzaevn37pn4J10+//m6z9vqX5310yev7IvT4jn54/AAAAAAAAAAAAAACj
2Pu58iXT59Nb8unrp1/6p2DdvD9oq3/o/f/PyW/3P52dT88fAAAAAAAAAAAA
AIBRTJ/p/qb36aU1n75++qV/Ctb11n9UPb92r/VPAQAAAAAAAAAAAADUNfUz
HemBmnqfpv6plnz6+umX/ilYN+/fea+tc3v6f0bPr91r/VMAAAAAAAAAAAAA
AHW99zXt6YFa+kx6Sz59/fRL/xSsa/n9TI7rnwIAAAAAAAAAAAAAGMW8v2nt
8+Eva/1T3+TT10+/9E/But76j6ofX7vX+qcAAAAAAAAAAAAAAOrSP0Wv9E/B
ut76j6ofX7vX+qcAAAAAAAAAAAAAAOrSP0Wv9E/BurVavGRef+Wz+fT8AQAA
AAAAAAAAAAAYhf4peqV/CtZt1VrH+z6enj8AAAAAAAAAAAAAAKPQP0Wv9E/B
unT/j+P6pwAAAAAAAAAAAAAAKtA/Ra/0T8G6dP+P4/qnAAAAAAAAAAAAAAAq
0D9Fr/RPwbp5PaWW9PwBAAAAAAAAAAAAABiF/il6pX8K1vX2+5QcP3Y8PX8A
AAAAAAAAAAAAAEbx3vu05/dlzHugWvPp66df+qdgXbr/x3H9UwAAAAAAAAAA
AAAAFRzpfVrqgWrNp6+ffumfgnXp/h/H9U8BAAAAAADn+PHjz9LnAwAAAADw
NEd7n+Y9UK359PXTL/1TsO6b2ks/0vMHAAAAAADow7xnSg8VAAAAAMD5Wj77
/f57pL7Np6+ffumfgnVX/L6ktXp9x+9rSr/+ncfT8weo61VHpt8Be5T6AwAA
AAB90SsFQA/8/FEAAABG0Pr5S5/f5Cr6p7bNn6kjf3fJ3fn0/avuzP6eI32v
V/QXpV9f/xRQyWsN/WYP7vtPAAAAANAf/VMA9OD1PaTpczp38/0rAAAA7tL6
+Uuf3+Qq+qe2vfdj7OlfWuvnSOTT96+6s/p7vv3dg095ff1TQDXTfvrIHtzP
7wMAAACAPumfAqAHP7+P9Pdffex5Wvi7X/P9KwAAAG7S+vlLn9/kKvqntqX7
n/RPZX37e+/pQ3r+AHW976v37MHVHwAAAADo27yHSk8VAHd7fQ9pqT9qrX/q
aC/Ve+5Ped+/AgAA4Catn7/0+U2uon9qW7r/Sf9UP+P/qqff/D6kb3t/zvp9
TOnXTx5Pzx+grvn+eq3+LNXa9PkDAAAAAL+aeqb0TgGQcEf/1FLvlP4pAAAA
7tT6+Uuf3+Qq+qe2pfuf9E/1M/5V+5fSr69/CqjI/hsAAAAAAIAz+f1TAAAA
jED/FL3SP7Ut3f+kf6qf8f+mf+fb3qWlHqaKr58+np4/QF323wAAAAAAAJzJ
758CAABgBPqn6JX+qW3p/if9U1mt/UdkpecPUJf9NwAAAAA8z48f/5I+FwDG
c0f/lN8/BQAAQJr+KXqlf2rb2rO4ZK2XI5FP37/qWn8fUqvqr58+np4/QF32
3wAAAADwPPqnAEi6o3/K758CAAAgTf8UvdI/tS3d/6F/pPb4p/uX0q+fPp6e
P0Bd9t8AAAAA8Dz6pwBIuqN/yu+fAgAAIE3/FL3SP7Ut3f+hf6T2+Kf7l9Kv
nz6enj9AXfbfAAAAAPAc731Tc+lzA2Acfv8UAAAAI9A/Ra/0T21L93/oH8k6
oweJnPT8Aeqy/wYAAACAZ9E7BUDa63tIfv8UAAAAT6d/il7pn9qW7v/QP5LV
2s/WOn7VXz99PD1/gLre995766X1FwAAAAD6pncKgKQ7+qf8/ikAAADSWj9/
6fObXEX/1LZ0/4f+kdrjn+5fSr9++nh6/gB1Hdl7L+3B0+cPAAAAACzTOwVA
yh39U37/FAAAAGmtn7/0+U2uon9qW7r/Q/9I7fFP9y+lXz99PD1/gLqO7r3n
e/D0+QMAAAAAANCX1u/ft0pfPwAAAGNo/fylz29yFf1T29L9H/pHstLvX9Im
PX+Aulpqj/UXAAAAAACAT3zfHAAAgCdr/fylz29yFf1T29L9H94Hy2rtZ2tV
/fXTx9Pzh6zp93dWlb5/1b3qwLf3fqovLfn09Z/hfS9x9L/Jzt/0+UMLXz/V
t7ZHXyOfHzvG5uuXLOtfu3T9TufT0tdf/f4B37F+AlWpX0zzYPq8zstvf//t
p/c/ez82/3ufzP/+z/9v3AGgiffPaeX9S6jJ50fbvOqYz2/SI/1T29b2J3ve
f9zKX/3vp+9fdVePX3r+XP366ePp+UPt5zd9PH3/qnvtg1/38pu980trPn39
rVqu4QnXnzb6/GNs888N3Mnz0+5n7frbX77yx/tfA+fT48fYfP2SZf1rn7+V
63/19SN9/dXvH/A96ydQlfrF0jw4q39qqYfKuANAG++f0zp/vH8JNfn8aBuf
36RX0/sl6fPo2VZ9Sve/PL1+pl09fun5o3+KJ0vPP/M3a9oPv+7n0b3ztP9u
yaevv9V0DUeu5ZsMy0aff4zt5zz+8D3/T58dOI3np9nPuvXP9/KPvO8///zz
qPn0+DE2X79kWf/a52/l+l99/Uhff/X7B3zP+glUpX4xzYMr+qfmf1//FAC0
8/45rfPH+5dQk8+PtvH5TXqlf2rbVn1K9788vX6mndGDRE56/uD5NX9z3vfF
e/bQ8/vfmk9fP7WZf4zsNYf3fm7gm5+9Ov8MgZ/Deq7p/f93S1+rfvo+wOj5
9PgxNl+/5O+/9e976fqdzrv/te8f8D3rJ1CV+sXReXB0Dhh3ADiX989p4f1L
qMvnR9v4/Ca90j+1LV3/Rq+faUf73b7pgVtT/fXTx9Pzh9rPb/p4+v5VN98f
r93/pXrZmk9ff6uWa3jC9aeNPv8Y22sOX/35ET+H9TqvmrT03v/S1xh7Pv88
Wj49fozN1y9Z1r/2+Vu5/ldfP9LXX/3+Ad+zfgJVqV8cnQdH5oBxB4Dzef+c
1vnj/UuoqbX+j75++PwmvdI/tW2rPl3df9L676fvX3VXj196/lz9+unj6flD
7ec3fTx9/6qz/27Tcg1PuP600ecfY7vj8yN+/u51XjXp0/v/a3+25/PPI+TT
48fYfP2SZf1rn7+V63/19SN9/dXvH/A96ydQlfrF0XlwdA4YdwA4l/fPaZ0/
3r+Emlrr/+jrh89v0iv9U9u26lO6/+Xp9TPt6vFLz5+rXz99PD1/qP38po+n
71919t9UZv4xsjs+P+LnsF7nVZMqf346nU+PH2Pz9UuW9a99/lau/9XXj/T1
V79/wPesn0BV6hdH58GROWDcAeB83j+ndf54/xJqaq3/o68fPr9Jr/RPbduq
T+n+l6fXz7TW/iOy0vMHz6/5m2P/3f78JLL8bvT5x9hec9jP361r/v7/9L7+
z7X17b3/vZ9/Hi2fHj/G5uuX/P23/n0vXb/Tefe/9v0Dvmf9BKpSvzg6D47O
AeMOAOfy/jktvH8JdZ39edDR1g+f36RX+qe2pevf6PUz7Wi/25Hetz2qv376
eHr+UPv5TR9P37/q7L/btFzDE64/bfT5x9hec9jP363rVZPm7/8v/dy0P9bb
HZ9/HimfHj/G5uuXLOtf+/ytXP+rrx/p669+/4DvWT+BqtQvjs6DI3PAuAPA
+bx/Tuv88f4l1OTzo218fpNe6Z/aduRZu6L/pPXfT9+/6q4ev/T8ufr108fT
84faz2/6ePr+VWf/TWXmHyO74/Mjfv7udV41ac/7/0vHj3z++an59PgxNl+/
ZFn/2udv5fpfff1IX3/1+wd8z/oJVKV+cXQeHJ0Dxh0AzuX9c1rnj/cvoSaf
H23j85v0Sv/UtiPPWqL/5en1M+3q8UvPn6tfP308PX+o/fymj6fvX3X2321a
ruEJ1582+vxjbHd8fsTPYb3OqyZ9ev9/eo//288/j5BPjx9j8/VLlvWvff5W
rv/V14/09Ve/f8D3rJ9AVeoXR+fBkTlg3AHgfN4/p3X+eP8SavL50TY+v0mv
9E9tO/KsJfpfnl4/087oQSInPX/w/Jq/Ofbf7c9PIsvvRp9/jO01h/383brW
3v+fatba9wZGz6fHj7H5+iV//61/30vX73Te/a99/4DvWT+BqtQvjs6Do3PA
uAPAubx/TgvvX0JdPj/axuc36ZX+qW3p+jd6/Uw72u/2TQ/cmuqvnz6enj/U
fn7Tx9P3r7r3vfPeevdp//1NPn391Gb+MbLXHPbzd+t61aOt9/9/rrMNn39+
cj49fozN1y9Z1r/2+Vu5/ldfP9LXX/3+Ad+zfgJVqV8cnQdH5oBxB4Dzef+c
1vnj/UuoyedH2/j8Jr3SP7Vtqz5d3X/S+u+n7191V49fev5c/frp4+n5Q+3n
N308ff+qO7J3XtpDt+bT199quoYj1/JNhmWjzz/G9prDfv5uXa9aNL2X/+k9
/vmx6f9PtWzkfHr8GJuvX7Ksf+3zt3L9r75+pK+/+v0Dvmf9BKpSvzg6D47O
AeMOAOfy/jmt88f7l1CTz4+28flNeqV/attWfdrzLLbUv9Z/P33/qrt6/NLz
5+rXTx9Pzx9qP7/p4+n7V93RvfN8D92aT19/q5ZreML1p40+/xhb6/61Vfr6
q3vVoaX3/feY6tjI+fT4MTZfv2RZ/9rnb+X6X339SF9/9fsHfM/6Cd/58SN/
DqNTv5jmgd8/BQA1eP+c1vnj/UuoyedH2/j8Jr3SP7Vtqz7teQ5b6l/rv5++
f9Wl37+mTXr+4Pk1f2uO/571dyufvv4z7+E3/012/qbPH85g3a0pvX+qLj1+
jM387YO6U+O+9cb9r33/gHbqBuz36p2apM8F9Wt0rzHx+6cAoAb7MMwfGJPv
X+Tun89vciX9U9vS9W/0+pl2d7+w4+ceT88f4Huv53j6HaxHTfUhmU/fP2oz
/8DPXwVgTNY/ADjO+gn7vPdO6aHqw6j1y+cnxh5/gFH5/i9Ahq8/IMfnN+nV
CP1T82fiyN9dsta/USF/9PrT45eW7v9xXP8UjGpa877Z+76k8+n7R23mH/j5
qwCMyfoHAMdZP2HbUu+UHqq8UevX/Lrv1PN9GGX8AUbl+78AGb7+gByf36RX
I/RPzfuL1v7uvD9pbk//Uu/5o9efHr+0dP+P4/qnnsjPWRjb3vF/7xs+uved
9s/JfPo+U5v5xxWqrb9+/io8R7X6g/FP3y/rH3AG9ZeRWD/7ov707eq+KeN/
/H6NWL9+zo8P5/3p2k/T2X0YcfwBRvXU7//a/43N+FOBrz94oir11+c36ZX+
qT+r0P/Umj96/enxS5uvM9SSnj8sP09LP2vBeD3f0fF/39fu2QPPn/90Pn2/
qc3840xV19/5Ofv5q1BP1fqD8U/fN+sf0EL9ZUTWzz6oPzVc1T9l/L+/byPW
ryPX/c21z6//CffhSeMPMKqnff/X/m9sxp9KfP3Bk1Srvz6/Sa+mZyd9Hlc6
u39qrVejQv7o9afHL+3u35fk+LnH0/OHf1naty3t49LnST/jP9/frj3/Uw34
tH9O5NP3nNrMP85Sef296vMD87/f8z2AyirXH4x/T/fO+gccof4yKutnnvpT
xxX9U8b/vHs3Sv264/OLT7sPTxp/gFE96fu/9n9jM/5U4+sPnqJi/fX5TXo1
PTPp87jS+7Nx9u+fqnj86PWnxy+ttX/H8ezx9Pzhd3v2br3u4ciNf3r/bP9N
kvnHGaqvv1d9fsDPfYLrVa8/GP+e7p/1D9hL/WVk1s++7r/6Mxbjf+79G6V+
3fH5xffcE+7Dk8YfYFRP+f6v/d/YjD8V+fqDJ6haf31+k15Nz0v6PK70/mzo
n9I/1TJ/euwPcnz9eHr+cGzv1uMejtz4p/fP9t8kmX+0esL6e9XnB+Z/v8dr
h8qeUH8w/j3dQ+sfsIf6y+isn/3ce/VnLMb//Hs4Sv264/OLT7sPTxp/gFE9
4fu/9n9jM/5U5esPqqtcf31+k15Nz0r6PK70/mzon9I/ddS8nlJLev5Qe/9G
dvzT+2f7b5LMP1o9Yf2dX4Ofvwo1PKH+YPx7uofWP2AP9ZfRWT/7uffqT79+
/PiV8c8btX4due5vrn1+/U+4D08af4BRPeH7v/Z/YzP+VOXrD6qrXH99fpNe
Tc9K+jyutPYsLVnrxRgxnx6/tK1a63jfx9PzZ3Tf7N1628ORG//0/tn+myTz
jxZPWX+v+vzA/O/3dt1Q2VPqD8a/p/to/QO2qL9g/ezlvqs/fZv3TLX2UBn/
c4xav+74/OLT7sOTxh9gVNW//2v/NzbjT2W+/qCy6vXX5zfp1fScpM/jSun+
jerH0+OXlr7/jpu/lVXfv5Ed//T+2f6bJPOPFk9Zf6/6/ICf+wTXeUr9wfj3
dB+tf8AW9Resn73cd/Wnb0v9Ui09VMb/HKPWrzs+v/iee8J9eNL4A4yq+vd/
7f/GZvypzNcfVFa9/vr8Jr2anpP0eVwp3b9R/Xh6/NLS999x87ey6vs3suOf
3j/bf5Nk/tHiKevvVZ8fmP/93q4bKntK/cH493QfrX/AFvUXrJ+93Hf1p2/6
p/o0av264/OLT7sPTxp/gFFV//6v/d/YjD+V+fqDyqrXX5/fpFfTc5I+jyul
+zeqH0+PX9q8nlJLev6M7jUGlfdvZMc/vX+2/ybJ/KPFU9bf+XX4+avQv6fU
H4x/T/fR+gdsUX/B+tnLfVd/+qZ/qk+j1q8j1/3Ntc+v/wn34UnjDzCq6t//
tf8bm/GnMl9/UFn1+uvzm/Rqek7S53GldP9GdenxS+utn83xY8fT82d01fdv
ZMf/fe+7Z72a74HT+fT9pzbzjxZPWX/n1+Hnr0L/nlJ/MP493UfrH7BF/QXr
Zy/3Xf3p27xXqqV3yvifZ9T6deS6j177U+/Dk8YfYFTVv/9r/zc2409lvv6g
sur11+c36dX0nKTP40rp/o3qx9Pjl5a+/46bv5VV37+RHf8je9+lPXA6n77/
1Gb+0eIp6+9Vnx/wc5/gOk+pPxj/nu6j9Q/Yov6C9bOX+67+9G3ql3pn/PNG
rV93fH7xPfeE+/Ck8QcYVfXv/9r/jc34U5mvP6isev31+U16NT0n6fO4Urp/
o/rx9Pilpe+/4+ZvZdX3b2TH/+jed74HTufT95/azD9aPGX9PfI+pp+/Cn14
Sv3B+Pd0H61/wBb1F6yfvdx39Wcsxv+a+zhK/frmve8zpa9/9PEHGFX17//a
/43N+FOZrz+orHr99flNejU9J+nzuFK6f6P68fT4paX3T7RJz5/Rvcag8v6N
7Pi3mNa0ZD59/6nN/KN1/jxh/Z1fh5+/Cv17Sv3B+Pd0H61/wBb1F6yfvdx3
9Wcsxv+a+zha/Rr9+8ajjz/AaKp//9f+b2zGnycY/esPaqpef1v3P9X3T/Rr
ek7S53Glu9e9p0mPX9qnPrNP9faOfrfRX//I8fT8Gd1rDCrv32jzeg6n36F6
1PR8V86n7z+1mb+0eMr6O78OP38V+veU+oPx7+k+Wv+ALeovWD97ue/qz/33
P834nzOOI9cv1z/29QOMpvr3b+3/xmb8eQL7byqqXn99/o1eTc9J+jyulO7f
0H9S255x+zSOZ4/P6K9v/tZTff9Gm9c+9PUsfrN3fameT99/ajN/afGU9feq
9y/9/FW4zlPqD8a/p/to/QO2qL9g/ezlvqs/de5/K/1T143jaPXL9Y99/QCj
qf79W/u/sRl/nsD+m4pa6+9//3ub1vP3+Td6NT0n6fO4Urp/Q/9JbUfH7n0M
zxyf0V/f/D3XfLyufB1fP49r2o8e2cO+z8vq+fT9pzbzt093rZ9nnOcT1t+r
3r+c//3erhuuYP/PHXod/9b5f/f6b/2Dftj/Qx3Wzz7uu/pz//3/NG8/zf3T
/HNt7HH87f9r1S/XP/b196bK/h+o66rv33r/nzv0Ov7V9v9k2X8znw8Vnv/W
+ttD/5TPv9Gj6TlJn8c39tavdP+G/pPajo4bfUnPn95M92Vpr3TF/Vp6rR6+
fuYe7/vSPXvY+fNbPZ++/9Rm/vbl7vXzjPN9wvo7vw4//wmOs//nTr2Nf+v8
T63/1j/Is/+Heqyffdx39Sd7//f0Tx2Z+/P5P38Oeht/+/+a9cv1j339vai2
/wfqOvv7t97/5069jX/V/T9Z9t9M86DS839F/f3x43ef/v+ZfP6NXk3PSfo8
jjhav+bPA8ekxzvtm963yVn9bKO/fsvx9Pzpyev+3P01657X9P7Jc833p2vP
71KtqZ5P339qM3/7kVg/7zjnCtcyvw4//wmOsf/nbj2Nf+v8T67/1j/Isv+H
mqyffdx39Sd7/6/on1p7Dnoaf/v/uvXL9Y99/T2ouP8H6jrz+7fe/+duPY1/
5f0/WfbfVHz+r6i/P/72l1/7p/7/n11x/j7/Rq+m5yR9Hnt9U7/S/RtLz6T+
kzp6GL/RX9/8bXdkH3XmvqGnr5+5X3r/m86n7z+1mb99SK2fd553pevw859g
P/t/EnoZ/9b5n17/rX+Qk37+7zjvnq8DWlg/+7jv6k/2/l/RP/Wemz8HvYy/
/X/t+uX6x77+tPTzD4znrO/fev+fhF7Gv/r+nyz777FVff6vqL9LvVL6pxjN
9Jykz2OPb+tXun9j6ZnUf1LHt2O3NIbf3P/RX9/8vbd2nr0H7OXrZzLS+990
Pn3/qc38zUuun4lz7+0alq7Dz3+Cfez/Selh/Fvnfw/rv/UPMnp4/u88996u
AVpZP/u47+pP9v5f0T+19hz0MP72//Xrl+sf+/p7uvfWLuAOZ3z/1vv/pPQw
/k/Y/5Nl/z2uys//FfVX/xTU6Z9qqV/p/g39J7W1jh9Z6fnTg9d9qPS1a297
UL6X3v+m8+n7T23mb15y/Uyce2/XsHQdfv4T7GP/T0oP4986/3tY/61/kNHD
83/nufd2DdDK+tnHfVd/svf/iv6p99z8Oehh/O3/69cv1z/29fd0761dwB30
T+XHgNrj/4T9P1n23+Oq/PyfXX/X+qSu6KHy+Td6NT0n6fPY0lK/7u7XeJr0
2Ke13r/WfrbRX7/1eHr+9OB1H5L7v/Trk5Pe/6bz6ftPbeZvXvX1q/r5L12D
n/8E+6Sf//Trk5Ue/9bXT5//0jlY/+AePTz/I58/tLJ+9nPv1Z/cvb+if2rr
OUiPv/1//frl+se+/p7uvfULuEP1/qkeXp+s9Pg/Yf9Plv33uKo//2eev/4p
+N30rKTPY0vL85/u39B/Ult6/EZ/ffM3Wz+f8PrkpPe/6Xz6/lOb+ZtXff2q
fv5L1+DnP8E+6ec//fpkpce/9fXT5790DtY/uEcPz//I5w+trJ/93Hv1J3fv
r+ifes8tPQfp8bf/r1+/XP/Y19/Tvbd+AXfQP0V16fF/wv6fLPvvcVV//s88
f/1T8LvpWUmfx5aW5z/dv6H/pLb0+I3++uZvtn4+4fXJSe9/0/n0/ac28zev
+vpV/fyXrsHPf4J90s9/+vXJSo9/6+unz3/pHKx/cI8env+Rzx9aWT/7uffq
T+7eX9E/tfUcpMff/r9+/XL9Y19/T/fe+gXcQf8U1aXH/wn7f7Lsv8dV/fk/
6/z39Eed3UPl82/0anpW0uexpeX5T/dv6D+p7YwxJCc9f3rxuhfJvV/69clI
73/T+fT9pzbztw/V16+nnb+f/wT7pZ//9OuTlR7/1tfv7fytf3Cf9PM/+vlD
C+tnX/df/cnc9yv6p95zn56D9Pjb/9euX65/7OtPSz//wHjO+v5tun6lX5+s
9PhX3/+TZf89turPf+v5//ixv3/q9XfPOm+ff6NX0/OSPo89vn3+7+7XeJr0
uKe13r/WfrbRX7/1eHr+9GIajz2184rnPv36ZLzvXffWi/f/Xz2fvv/UZv72
ofr69YTzv+L9y/nf7/X9L2iRfv7Tr09WevxbX7+H87f+QUb6+R/9/KGF9TN/
/9WfzH3fO++Pzv0jz0F6/O3/a9cv1z/29aeln39gPGd9/zZdv9KvT1Z6/Kvv
/8my/x5b9ee/9fx/9k/t6Iva+/f28vk3ejU9M+nz2OPb5z/dv7Hnmd16nvWf
5OddavxGf33z95q5/KluXrlnSL8+9zuyd13aw1bPp+8/tZm//ai+flU+//k5
+/lPcEz6+U+/Plnp8W99/eT5W/8gK12/Rj9/+Jb1M0/9ydzzvfP+m7k/n/9r
z0F6/O3/69Yv1z/29fcgXb+AsZz5/dt0/Uq/Plnp8a+8/yfL/pvqz3/L+af7
p77d//j8G1eZnp30eez1zfOf7t848tx+epb1n/Qx5xLjN/rrm7/3zuenvz73
Orp3ne9hq+fT95/azN++VF+/qp7/69yueP9y/ve9f8mTpZ//9OuTlR7/1tdP
nb/1D/LS9Wv084dvWD/7oP70db+v1tv42//XrF+uf+zr70W6fgHjOPv7t+n6
lX59stLjX3X/T5b9N9M8qPz8f3v+P/ui/vaXzX//9XfO7p9q2f/4/BtXqdY/
9XL0+U/3b3zz7M6fY/0n/c43+paePz1K36/063Oflme3df3sIZ++/9Rm/van
+vpV8fxf5+bnP0G79POffn2y0uPf+vqJ87f+QR/S9Wv084ejrJ/9UH/6uudX
6Hn87f/r1S/XP/b19yRdv4AxtOzBPn3/Nl2/0q9PVnr8K+7/ybL/5n0uVH7+
vz3/vf1Td53rnv3PFfsneKnYP/Vy5PlveX6osR6k5treGtzSzzb667ceT8+f
3rzuyfQ7LefuuF+tr//6e6+xfc8dGe/q+bvNz/WI6fkcOZ8eP2ozf/8sXX/T
61er9Prfct5+/hO0ST//6fpZPV9d9fmXOn/rH+Trb3r9apWuv5Bg/exDun5W
z1ef/+n1x/6/Zv1y/WNf/yRdf9PrFzCOs79/W33/la7/6Xx11edf+vzJsP/u
Q7r+ptevM+Zx0/mv9Eed3Tv14vNvJD1t/hx9/tP9G0/rP0nX/8R8S47f6K9/
9vwd3VL9nP4stX878vrz+nN0vKvn77ZU7/fuHaZxHTmfHj9qM3/X78fd9Te9
frVKr/8t5+3nP0Gb9POfrp/V89VVn3+p87f+Qb7+ptevVun6CwnWzz6k62f1
fPX5n15/7P9r1i/XP/b1T9L1N71+AeOY14u9Pn3/tvr+K13/0/nqqs+/9PmT
Yf/dh3T9Ta9fZ8zjpvO/uX+qdf9z9v6JsTxt/hx9/pf6Kt7r1dXHW6XPf2s+
PX3/nx6/0V//7Pk7uvTXf9/W7/e/v1Z/5v929Xx6viyd8969w/v1jJpPjx+1
jT5/e6u/d69fZ9/P9Prfct5+/hO0ST//9v+19v/p8e/t9VPnb/1jRL3VX/t/
qMf62Qf7/0z972X+p9cf+/+a9cv1j3n9vdXf6vt/oI6lmrFl7fu31fZf6fqf
zqfnX3r8e3v99PmTMer+O623+lt9/99avxL9Uy37n7P3T4zlafPn2/q15PX3
rz7eKn3+vdX/xHyjrvT86c3SMzr92R336+jrz2vSVv1Zq2cV8+n58qnu79k7
zMd6xHx6/Kht9PnbW/29e/06+36m1/+W8/bzn6BN+vm3/6+1/0+Pf2+vnzp/
6x8j6q3+2v9DPdbPPtj/Z+p/L/M/vf7Y/9esX65/zOvvrf5W3/8DdbzXmfe6
8cnW92+r7b/S9T+dT8+/9Pj39vrp8ydj1P13Wm/1t/r+/4z6tdQndUXv1M9/
t3H/c/b+ibE8bf4cff7n18MxvdX/xHw76/5tre9Lx0d//dbj6fnTm9c9qvT1
63w+bdWfLdXy6fkyH6utr0+WrnfkfHr8qG30+dtb/b17/brifibX/5bz9vOf
oE36+bf/r7X/T49/b6+fOn/rHyPqrf7a/0M91s8+2P9n6n8v8z+9/tj/16xf
rn/M6++t/lbf/wN1nP3922r7r3T9T+fT8y89/r29fvr8yRh1/53WW/2tvv8/
o36l+qe+2f+cvX9iLE+bP0ef//m1bV372cf31PQ1vZ1/uv4n5lty/EZ//dbj
6fnTm0/7irue19bX36o/T8/fLb1/rZ5Pjx+1mb+/3o9k/U2vX63S63/Lefv5
T9Am/fyn62f1fHXV51/q/K1/kK+/6fWrVbr+QoL1sw/p+lk9X33+p9cf+/+a
9cv1j339k3T9Ta9fwDjO/v5t9f1Xuv6n89VVn3/p8yfD/rsP6fqbXr/OmMet
9evVK/Xjx9v//6F/imd62vw5+vzPr23r2s8+Pr+fR6XPf2k+jbT/T4/f6K9/
9vzlXz2o77X0zme35fXT++d0/m7p/Wv1fHr8qM38/fV+pOtvcv06Q3r9//ac
/fwnaJd+/u3/6+z/exv/Hl4/cf7WP+ij/tr/Qy3Wz37Y/z+nf+qb+Z9ef+z/
69Uv1z/29U96qL/V9/9ADVd8/7by/itd/9P5J6g8/3o4f+5n/92HHupv9f1/
a/362S8175/6cc25+vwbSU+cP0ee//m1bV372cfn9/Oo9Pkvzad0/b97rlFX
ev705nVPpno5PcPvf9b767/Xn/f//Wb/XDF/t/T+tXo+PX7UZv7+ej+S9Te9
frVKr/8t5+3nP0Gb9POfrp/V89VVn3+p87f+Qb7+ptevVun6CwnWzz6k62f1
fPX5n15/7P9r1i/XP/b1T9L1N71+AeM4+/u31fdf6fqfzldXff6lz58M++8+
pOtvev06Yx4fOf///vffmpwx3i37n7P3T4zlafPn6PM/vx6OWZpPI+3/W+/f
1rN25Fkc8fVbj6fnT29e92S+JrzX0d5fP71/Tufvlt6/Vs+nx4/azN9f70ey
/qbXr1bp9b/lvP38J2iTfv7T9bN6vrrq8y91/tY/yNff9PrVKl1/IcH62Yd0
/ayerz7/0+uP/X/N+uX6x77+Sbr+ptcvYBzzGtP6/dvq+690/U/nq6s+/9Ln
T4b9dx/S9Te9fp0xj4+cv/6p/Jwn52nz5+jzv3WtVx9vlT7/pfk00v4/PX6j
v/7Z83d0S/Vz+rPU/u3I66f3z+n83dL71+r59PhRm/n76/1I1t/0+tUqvf63
nLef/wRt0s9/un5Wz1dXff6lzt/6B/n6m16/WqXrLyRYP/uQrp/V89Xnf3r9
sf+vWb9c/9jXP0nX3/T6BYzj7O/fVt9/pet/Ol9d9fmXPn8y7L/7kK6/6fXr
jHl85Py39hpbx88Y75b9z9n7J8bytPlz9/PferxV+vyX5tNI+//0+I3++mfP
39Glv/77tn7P17BP9efTelc1n54v6f1r9Xx6/Kht9PnbW/29e/06+36m1/+W
8/bzn6BN+vm3/6+1/0+Pf2+vnzp/6x8j6q3+2v9DPdbPPtj/Z+p/L/M/vf7Y
/9esX65/zOvvrf5W3/8DdXyqZ99+/7ba/itd/9P59PxLj39vr58+fzJG3X+n
9VZ/q+//vz3/T3uNreOt59u6/zl7/8RYnjZ/7n7+W4+3Sp9/b/U/Md+oKz1/
erP0jE5/dsf9Ovr685q0VX+21rdq+fR8Se9fq+fT40dto8/f3urv3evX2fcz
vf63nLef/wRt0s+//X+t/X96/Ht7/dT5W/8YUW/11/4f6rF+9sH+P1P/e5n/
6fXH/r9m/XL9Y15/b/W3+v4fqOPs799W23+l6386n55/6fHv7fXT50/GqPvv
tN7qb/X9/9Hzn+8njmo939b9z9n7J8bytPlz9/M/ut7qf2K+nXX/lu7P1vHR
X7/1eHr+9OZ1jyp9/TqfT+91Z76m7ZmP1fLp+TIfpz3P+/x6R86nx4/aRp+/
vdXf+T29ev264n5WfP/3dW5+/hO0ST//d9fP6vn0fEmPf2+vnzp/6x8j6q3+
2v9DPdbPPtj/Z+p/L/M/vf7Y/9esX65/zOvvrf5W3/8DdczrzJat799W23+l
6386n55/6fHv7fXT50/GqPvvtN7qb/X9/9HzT3/+unX/c/b+ibE8bf7c/fy3
Ht9zz7fGo6fzT9f/xHxLjt/or59ev59maV/xvjb0/vpb9efp+bsd2Tss7SFG
z6fHj9rM31/vR7L+ptevVun1v+W8/fwnaJN+/tP1s3q+uurzL3X+1j/I19/0
+tUqXX8hwfrZh3T9rJ6vPv/T64/9f8365frHvv5Juv6m1y9gHGd//7b6/itd
/9P56qrPv/T5k2H/3Yd0/U2vX2fM4yPnn/78dev+5+z9E2N52vy5+/lvPX7k
vn8ai+T5L82nkfb/6fEb/fXT6/cTTfXzvZbe+ey2vH56/5zO3+3o3mG+hxg9
nx4/ajN/f70f6fqbXL/OkF7/vz1nP/8J2qWff/v/Ovv/3sa/h9dPnL/1D/qo
v/b/UIv1sx/2/8/pn/pm/qfXH/v/evXL9Y99/ZMe6m/1/T9QwxXfv628/0rX
/3T+CSrPvx7On/vZf/ehh/pbff9/5PzTn79u3f9csX9iHE+cP3c+/63Hv7n3
83FInv/SfErX/7vnGnWl509vXvdkqpfT8/v+Z72/fnr/nM4n5su3Wte/J+TT
40dt5u+fpetvev06Yz4l1/+W8/bzn6BN+vlP18/q+eqqz7/U+Vv/IF9/0+tX
q3T9hQTrZx/S9bN6vvr8T68/9v8165frH/v6J+n6m16/gHGc/f3b6vuvdP1P
56urPv/S50+G/Xcf0vU3vX6dMY+PnH/L/uOM62nd/5y9f2IsT5s/dz//o5vf
z3T9v9v8WpdMz8r8z6f7Ii8vLy8vLy8vLy8vLy8vLy8vLy8vL99bPv3+e1r6
/suPnU/Pf8+PvLy8vLx8vXx6/bd/kK+cN//l5eXl5eXl5eXl5eXl5bfz7//O
J6/80t/79Ofy8vLy8vLy8vLy8vLy8vLy8vLy8vLy6Xz682Np6fsvP3Y+Pf89
P/Ly8vLy8vXy6fXf/kG+ct78l5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eX
l5eXl5eXl5eXHzOf/vxYWvr+y4+dT89/z4+8vLy8vHy9fHr9t3+Qr5w3/+Xl
5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cfMpz8/lpa+//Jj
59Pz3/MjLy8vLy9fL59e/+0f5CvnzX95eXl5eXl5eXl5eXl5+XPzr/+Vl5eX
l5eXl5eXl5eXl5eXl5eXl5eXr5BPf34sLX3/5cfOp+e/50deXl5eXr5ePr3+
2z/IV86b//Ly8vLy8vLy8vLy8vLy5+Wn/333+jN5eXl5eXl5eXl5eXl5eXl5
eXl5eXn5HvPpz4+lpe+//Nj59Pz3/MjLy8vLy9fLp9d/+wf5ynnzX15eXl5e
Xl5eXl5eXl7+vPzr781Nfy4vLy8vLy8vLy8vLy8vLy8vLy8vLy/fWz79+bG0
9P2XHzufnv+eH3l5eXl5+Xr59Ppv/yBfOW/+y8vLy8vLy8vLy8vLy8ufm9/7
5/Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLpfPrzY2np+y8/dj49/z0/8vLy8vLy
9fLp9d/+Qb5y3vyXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eX
l5cfM5/+/Fha+v7Lj51Pz3/Pj7y8vLy8fL18ev23f5CvnDf/5eXl5eXl5eXl
5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlx8ynPz+Wlr7/8mPn0/Pf8yMv
Ly8vL18vn17/7R/kK+fNf3l5eXl5eXl5eXl5eXn57fzkaFZeXl5eXl5eXl5e
Xl5eXl5eXl5eXl6+53z682Np6fsvP3Y+Pf89P/Ly8vLy8vXy6fXf/kG+ct78
l5eXl5eXl5eXl5eXl5ffzr+OvXz6d+Tl5eXl5eXl5eXl5eXl5eXl5eXl5eUr
5tOfH0tL33/5sfPp+e/5kZeXl5eXr5dPr//2D/KV8+a/vLy8vLy8vLy8vLy8
vPy+/Ou/5//O5FNWXl5eXl5eXl5eXl5eXl5eXl5eXl5evud8+vNjaen7Lz92
Pj3/PT/y8vLy8vL18un13/5BvnLe/JeXl5eXl5eXl5eXl5eX35+fTP/O9G/J
y8vLy8vLy8vLy8vLy8vLy8vLy8vLV8ynPz+Wlr7/8mPn0/Pf8yMvLy8vL18v
n17/7R/kK+fNf3l5eXl5eXl5eXl5eXn54/m9x1/H5OXl5eXl5eXl5eXl5eXl
5eXl5eXl5XvNpz8/lpa+//Jj59Pz3/MjLy8vLy9fL59e/+0f5CvnzX95eXl5
eXl5eXl5eXl5+e38+3/PvY698mvH5eXl5eXl5eXl5eXl5eXl5eXl5eXl5XvM
pz8/lpa+//Jj59Pz3/MjLy8vLy9fL59e/+0f5CvnzX95eXl5eXl5eXl5eXl5
+X35199Z8/5vvZOXl5eXl5eXl5eXl5eXl5eXl5eXl5fvNZ/+/Fha+v7Lj51P
z3/Pj7y8vLy8fL18ev23f5CvnDf/5eXl5eXl5eXl5eXl5eW38+//ziev/NLf
+/Tn8vLy8vLy8vLy8vLy8vLy8vLy8vLy8ul8+vNjaen7Lz92Pj3/PT/y8vLy
8vL18un13/5BvnLe/JeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eX
l5eXlx8zn/78WFr6/suPnU/Pf8+PvLy8vLx8vXx6/bd/kK+cN//l5eXl5eXl
5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXHzKc/P5aWvv/yY+fT89/z
Iy8vLy8vXy+fXv/tH+Qr581/eXl5eXl5eXl5eXl5eflz86//lZeXl5eXl5eX
l5eXl5eXl5eXl5eXl6+QT39+LC19/+XHzqfnv+dHXl5eXl6+Xj69/ts/yFfO
m//y8vLy8vLy8vLy8vLy8uflp/999/ozeXl5eXl5eXl5eXl5eXl5eXl5eXl5
+R7z6c+PpaXvv/zY+fT89/zIy8vLy8vXy6fXf/sH+cp5819eXl5eXl5eXl5e
Xl5e/rz86+/NTX8uLy8vLy8vLy8vLy8vLy8vLy8vLy8v31s+/fmxtPT9lx87
n57/nh95eXl5efl6+fT6b/8gXzlv/svLy8vLy8vLy8vLy8vLn5vf++fy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy6Xz682Np6fsvP3Y+Pf89P/Ly8vLy8vXy6fXf
/kG+ct78l5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXHzOf
/vxYWvr+y4+dT89/z4+8vLy8vHy9fHr9t3+Qr5w3/+Xl5eXl5eXl5eXl5eXl
5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cfMpz8/lpa+//Jj59Pz3/MjLy8vLy9f
L59e/+0f5CvnzX95eXl5eXl5eXl5eXl5+e385GhWXl5eXl5eXl5eXl5eXl5e
Xl5eXl5evud8+vNjaen7Lz92Pj3/PT/y8vLy8vL18un13/5BvnLe/JeXl5eX
l5eXl5eXl5eX386/jr18+nfk5eXl5eXl5eXl5eXl5eXl5eXl5eXlK+bTnx9L
S99/+bHz6fnv+ZGXl5eXl6+XT6//9g/ylfPmv7y8vLy8vLy8vLy8vLz8vvzr
v+f/zuRTVl5eXl5eXl5eXl5eXl5eXl5eXl5eXr7nfPrzY2np+y8/dj49/z0/
8vLy8vLy9fLp9d/+Qb5y3vyXl5eXl5eXl5eXl5eXl9+fn0z/zvRvycvLy8vL
y8vLy8vLy8vLy8vLy8vLy1fMpz8/lpa+//Jj59Pz3/MjLy8vLy9fL59e/+0f
5CvnzX95eXl5eXl5eXl5eXl5+eP5vcdfx+Tl5eXl5eXl5eXl5eXl5eXl5eXl
5eV7zac/P5aWvv/yY+fT89/zIy8vLy8vXy+fXv/tH+Qr581/eXl5eXl5eXl5
eXl5efnt/Pt/z72OvfJrx+Xl5eXl5eXl5eXl5eXl5eXl5eXl5eV7zKc/P5aW
vv/yY+fT89/zIy8vLy8vXy+fXv/tH+Qr581/eXl5eXl5eXl5eXl5efnt/P/4
X/8HAAAAAAB4mE/fGwCeL11/AAAAAAAAAAAAAAAArpbu3wBy0vUHAAAAAAAA
AAAAAADgaun+DSAnXX8AAAAAAAAAAAAAAACulu7fAHLS9QcAAAAAAAAAAAAA
AOBq6f4NICddfwAAAAAAAAAAAAAAAK6W7t8ActL1BwAAAAAAAAAAAAAA4Grp
/g0gJ11/AAAAAAAAAAAAAAAArpbu3wBy0vUHAAAAAAAAAAAAAADgaun+DSAn
XX8AAAAAAAAAAAAAAACulu7fAHLS9QcAAAAAAAAAAAAAAOBq6f4NICddfwAA
AAAAAAAAAAAAAK6W7t8ActL1BwAAAAAAAAAAAAAA4Grp/g0gJ11/AAAAAAAA
AAAAAAAArpbu3wBy0vUHAAAAAAAAAAAAAADgaun+DSAnXX8AAAAAAAAAAAAA
AACulu7fAHLS9QcAAAAAAAAAAAAAAOBq6f4NICddfwAAAAAAAAAAAAAAAK6W
7t8ActL1BwAAAAAAAAAAAAAA4Grp/g0gJ11/AAAAAAAAAAAAAAAArpbu3wBy
0vUHAAAAAAAAAAAAAADgaun+DSAnXX8AAAAAAAAAAAAAAACulu7fAHLS9QcA
AAAAAAAAAAAAAOBq6f4NICddfwAAAAAAAAAAAAAAAK6W7t8ActL1BwAAAAAA
AAAAAAAA4Grp/g0gJ11/AAAAAAAAAAAAAAAArpbu3wBy0vUHAAAAAAAAAAAA
AADgaun+DSAnXX8AAAAAAAAAAAAAAACulu7fAHLS9QcAAAAAAAAAAAAAAOBq
6f4NICddfwAAAAAAAAAAAAAAAK6W7t8ActL1BwAAAAAAAAAAAAAA4Grp/g0g
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

    "], {{0, 720.}, {3408., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 3408, "ImageLength" -> 720, "XResolution" -> 72, 
        "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2022, 7, 19, 22, 42, 52.}, "Instant", "Gregorian", 8.], 
        "TimeZoneOffset" -> 8|>, 
      "Comments" -> <|
       "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
        "Creation Time" -> 
        DateObject[{2022, 7, 19, 22, 42, 52.}, "Instant"]|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{3408., 720.},
  PlotRange->{{0, 3408.}, {0, 720.}}]], "Output",
 CellChangeTimes->{{3.8672304621502523`*^9, 3.867230490290745*^9}, 
   3.8672306125567102`*^9},
 CellLabel->
  "Out[301]=",ExpressionUUID->"ce3c9340-597e-4f8a-8692-29c08505065c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudImport", "[", 
  TemplateBox[{
   "\"https://www.wolframcloud.com/obj/bb972b44-0a50-480b-90a5-042e4487d72f\"\
", "https://www.wolframcloud.com/obj/bb972b44-0a50-480b-90a5-042e4487d72f"},
   "HyperlinkURL"], "]"}]], "Input",
 CellChangeTimes->{{3.867233608492415*^9, 3.867233609699276*^9}, {
  3.867233873343831*^9, 3.867233877271862*^9}},
 CellLabel->
  "In[329]:=",ExpressionUUID->"fdfc70af-51e8-4777-b026-d94813fd2c87"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
PLP1edI75GQvukj7oKUPKAApvp9/387DIpxq+fQOBCbR59Wt9weiW3qHw4HO
XDsjtPQBPYfiHwBIlH3eObuldzg0RP1GW6qNV7V8+gCx1PFNgLXnkrNaeoec
bE0N1Z7PAqo9f/Tj6QMKQIrvYn+f19Z8egcCk+jz6nRz4PUZ+7TzdnqHw4Gq
XZ+2/nj6gJ5G8Q8AZKl2/nG+gjq23j+Jzqd3SHHVxqtaPn2AWOr4PsCzc8iL
ubrpPLP1edI7pEj/b+3P6PE66vmdnwGI8P1Hvc3lUWnN/MHbny8/63Pq5NM7
EJhEn1ff3hyYjtnnnLfTOxwOVO36tPXH0wf0TL3e9AOA4qqdf5yvoI6t90+i
8+kdUly18aqWTx8gltT/zCfqpvPM1udJ75Ai/b+1P6PH66jnd34GIML3o+/b
eeby5Pt5EvPpHQhMos+ra24OTCftE87b6R0OB6p2fdr64+kDClBBrx8KQBHV
zj/OV1DH1vsn0fn0Dimu2nhVy6cPEEvqf+azdNN5ZuvzpHfIyVZuDtrKlj6g
AKTIfv/Z29I7EJhk7we/tBfXU0e19A6HA0Wvl9Fa+oACpPP3A0K07PPO2S29
w6EhmxbX1vsnH+TTO6S46P5vPZ8+QCx1fM7fND9PaOkdcrIKNec9PZ4+oMBp
pr9f9ZAYMGd99c34Qru+glv6DwgHsl4Ymfl/iLuW/noA3vr++VdOr9HB5ynu
b7Rl6/yslk/vQOPVdD59QFlq6JA/n05vA3ce1lck5te8/vQO36la/Uzrj6cP
KHCa6+z7Fd8eruwPsIn11TfjC+36+vq6/zDyuDbO57kMwnphZOb/fg9b+qsC
eO32MdzKD6M7uN53f6MtW+dntXx6BxqvpvPpA8pSQyf8eV3N459lVoczd31e
n5OVX/P60zv8qPEqUj/T+uPpA9qcAX97qxT9v8fd8elZm2LpLxg2yd0frK++
GV/vv/q/XT867fdf2/Kjyd8/bUaEdMfuD9YLIzP/j3JU5Y/zD/DMsfvD7Sr+
+91H0tOFf/qPf8jPO/L9jbZsnZ/V8ukdaLyazqcPKEvqf1Lya15/eofv9PpY
om1t6QPakNs1xd0vcLkLof8bMj9BvT5iXV3f0ZQK+4P11beRx7fC+hqZ/j+k
D+8+t334ee6aD3an5JQ3FiSK2B+sF0Zm/h9lanvGwvkHeChif5gu5F98JN3T
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
Pv/Wx9MHdL/o65FS1zvVLO9XzN/B5w/e/lCw/0vd/zltvL5nV3Pz49btD1Mm
/QV35oT1Eq3a/C/1eqyvvhUc32rvj7zwwf5fbXw7mA/7P8+9+s3xUVWb/03U
P1gvfSh4/WL+JzqwHuNZLw11/im4vko5Yb6xfggOn//VXs9on0cXvL9x3s+u
/kf9hvFqKp8+AVi6tfSXscazCXbU41tb9OtJ7/Cdovuz9ecfbT78Vu/+wFDu
7lfc/eM059X/FDHy9V0FJ6yXaNXmf6nXY331reD4Vnt/5IUP9v9q49vBfNj/
ee7vfnN8VNXmfxP1D9ZLHwpev5j/iQ6sx5iSd7001Pmn4Poq5YT5xvohOHz+
V3s9o30eXfD+xnk/u/qf0/Ppg268ms6nTwCWbi39ZazxbIId9fjWFv160jt8
p+j+bP35R5sPv9W7PzCU66NfSrrOflnpNs3U/xQx8vVdBSesl2jV5n+p12N9
9a3g+FZ7f+SFD/b/auPbwXzY/3nu1W+Oj6ra/G+i/sF66UPB6xfzP9GB9RjP
emmo80/B9VXKCfON9UNw+Pyv9npG+zy64P2Nk37w53U+Z5YAVauvUL9hvCrn
0ycAS7eW/jLWeDbBjnp8a4t+PekdvtMHXaq9aOkDeoi3lwA7L0ain79dy/sV
d3cqvo+4X1FtfNudD3fXdw9993h9V8Q56yVatflf5/VYX32rOb7V3h955rP9
v9r4tj4f9n+e+7vfHB9Ytfl/5v5gvYys5vWL+Z/lwHqMKbnspXHOPzXXVx3n
zDfWj0LEeqzzekb7PLrm/Y3wn/r6pv7netbH2dXqK9RvGK/K+fQJwNKtpb+M
NS6DtfQOP3m85pvGs83k2d7S4vNvfTx9QA/x9Ud7cfjff38g9PnbdVr9T6nx
bXc+zEfnZjpozU9cUyb9BXemj/t71eZ/nddjffWt5vhWe3/kmY/rf0qNb+vz
4Wv357lXvzk+sGrz/4T9wXrht6rXL+Z/lrc9s6Zz3vbSOOefmuurjnPmG29H
YZDzz/Rh9OV5m3+skz40O9W8vxH+U//RPvt/D+//TfOt9Xz60BuvpvPpE4Cl
MzfMnaLrK15M42dzW73HC9H92frzjzYfJl8/2/Lkf8jFSPTzN2p5v2KaYNOf
52/oZft/6/M3Oh8eXt8tK66nTPoL7sxp6yVatflf5PVYX30rO77V3h956OP9
v9r4Nj0fvnZ/nvu73xwfW7X5H/p6rBduyl6/mP8p3vbMys6Z98/DXhrk/FN2
fRVx2nzj7UCMcP55+2H0tCr7WI9l72/E/tR/tM/+38P7f9N8az2fPvTGq+l8
+gRg6cwNc6fo+oq3M3k5sdV7vBDdn60//2jzYe7rSWvl+Vs0r9d9+Mb9/fP3
lW4q9//W529xPszH6OH+MN+jOtsfKjhzvUSrNv8rvB7rq2+Vx7fa+yNLe/b/
auPb7nz48n0O7FZt/se9HuuFm8rXL+b/+Z71+VHtnPH97PkjXk/l9VXBnrm0
pqX/gA2p1ocRr2fNh9HzhZk+KDtVvr8R+FNfC/39X5vmW+v59KE3Xk3n0ycA
S+p/1HsE2dqf2uuWPqDHir4eKXW9U8H8F5Ge3a+4i1Xu/63P39x8WH++unR0
fVfHyeslWrX5n/56rK++FR/fau+P3Nm5/1cb30bnw5fvc+AI1eZ/0OuxXrgp
fv1i/qd42O0725nj+/HzH/56iq+vIg6ZYHGzaBzVevLw17P+Yj/lev9wxe9v
BP7gL+t/TnsZW+db6/n0cTdeTefTJwBLDdX/bJpvHbT0Dj95vLbWSrX+/Fsf
Tx/QY+fG/Msqp9+jyXr+2xdm3n15ZkP5TV5cOBz1Nl1tfKNfT4SVvzg27O+X
nTkQ0eslen+I3g+3qrAeh71/MojK+2e198dq55no/WeTD/b/auNbYb/9zJfv
cxiA889R69F64c4J1y9btT7/2z3/nNM/Q51/Cq6vOrwfreH8s389fv/6F2C9
1sS1z2vTz3JIrC0P63x2Fv9snT+j5e8mVfr5p1r/yL/Op28ag6s8Xtd16z20
vmJri3496RNmp+j+bP35R5sPd3Pjbrc5ds/Z+vzz/WdNn1fLb3I9vf4nfXyj
X0+E+TC9fbMu/rM07YT1Er0/RO+HW1VYjy+GNW6gOU3l/bPa+2O180z0/rPJ
B/t/tfGtsN9+Zv/nR793/X0OfXD+OWo9Wi/cOeH6ZavW53+7559z+meo80/B
9VWH96M1nH/2r8f5a652vR/hWvj+RvjPHlD/s3X+jJZ/1ldZ559q/SO/fv5w
vsrjdV2x3p/VRRz1+NYW/XrSJ8xO0f3Z+vOPNh/u5sbdhnM9/f7ArWOnzMP9
Z/4k1fKf9cz1+c2KaRr3Mb5nvp4Id2/Hz9rO+cDbUQhaL2fuDxH74Z5erbAe
347s4bsiZ6q8f0bP/4j1Xi1/2iz6YGeoML5nvp44fn+8V84/EevRemHus/ev
aC3O/z7OPynf/9Px+afm+qrD+9Ezzj/Hrse7l/3MtDDTJ8BOy5/oYTtkvKoJ
qv/ZNH9Gy1c7/1TrH/nX+fRNY3DVxuuz/eHORf1PVR90qfaipQ/osXPjbs+5
Jn3+Ne1CD/efh2uzSP6znrmecr+iwvie+Xoi3L3at9JfcJfi1suZ+0PEfrin
Vyusx7cje/iuyJkq758V3h+rnWfO3H82zaIPdoYK43vm64nj98d75fwTsR6t
F+bOud7fqsX538f5x/f/HPt6aq6vOrwfPeP8c+x6nJ5teuVL84WZPgF2uuu9
t9Jf8ME//q/VPjuLf37bPn9Gy1c7/1TrH/nX+fQdY3DVxmvrer8M1tInzE5b
f9637wuXffOh2vNvfTx9QI+dG3fbzvX0+wPzsXu2/zxrFfIfdMu0wz87d03/
bwfje+briTB/O372fj1/105/wf0JXS9n7g9r5v8J+8+m13Pa4K5pnb3/jqDy
/hk9/yPWe7X8mVNo6/5fYXzPfD1x/P54r87cH9bM/zP3n7j1aL0wOe16f6sW
53/0fnXO/uP7fw58PWXXVx3ej545c39YM//P2X/Wv56t5k/4ej3uf/0VVL6/
ccaPH1b/s3L+jJbfuj9E56v1j/zrfPqOMbhq47V1vc8ff/bi9zx+2diiX0/6
hDlwfCP6s/XnH20+LOdG3Bl16/M/239aya9064fpCR++I1wOqv8pNb7RryfC
/PruRWviZ2nUaeslen+I3g+3qrAeV66vW+vs/XcElffP6Pkfvd6r5YN8vP9X
G98K++1n/P74CJx/jlqP1guT065ftmp9/rd7/jnt+39GOP+UXV91eD9aw/ln
/3p8uPqWH6lMLX3Qd6p8f+OMH//Pf/qxG/zPP1/V/5xav1Hh/FOtf+TXzx/O
V3m81qz3+ePPXvyexy8bW/TrSZ8wO0X3Z+vPP9p8WE6P6Wh6Dfhl5E3PX+E8
sye/xtQbt2ebvx3M/0OXQ/8KsCLje8LrOdzg13fpzlwvJ+wPofvhB9LX48r1
Nc2Bk18eOxXfP6Pnf+h6r5aPsHP/LzW+J7yeIH5/fATOP0c9ufXCzcnX+1s1
Pf/bPf+ctj90f/4pvr6K8H60hvPPIevxbuk9/EhlaumDvv/nvaxovd4fvrXl
n/f056b5M1r+rq/Szz/V+kd+/fzhfJXHa816nz/+7MXvefyysUW/nvQJs9PW
/tRet/QBPXZuXH9+7ef0hwN/xq3PP+0/0/8u95/K+TWW9yvmW+78v3LZfcui
2vhGv54Ig1/fpTtzvUTvD9H74VYV1uPK9XXI+HK+yvtn9PyPXu/V8qHz54P9
v9r4VthvP+P3x0fg/HPUerReuDnz+mWr1ud/u+ef077/p/vzT+X1VYf3ozWc
fw5Zj9eqn29GqHx/I8J//6eXTT7oz03zZ7T8XV+ln3+q9Y/8+vnD+SqP15r1
fhmspU+Ynbb+vM8m5NuJ2ujzb308fUCPnRvz7Wi6Csh6/grnmT35Neb3K6bn
nL8d3P4wZXoa3+jXE2F5fXf34qcHb39If8GdOXO9RO8P0fvhVhXW43J9vX5z
P/O1sV/l/bPa+2O180z0/rNp/nyw/1cb3wr77Wf8/vgInH+OWo/WCzdnXr9s
1fr8b/f8c07/jHD+qby+6vB+tIbzzyHrcfLwM5TvXz/WSR/0na6F729EUP+T
m7/rq/TzT7X+kV8/fzhf5fFas96fveCjHt/aol9P+oTZKbo/W3/+0ebD3dy4
O6zuP//vef4K55k9+TWuJ96vqDa+0a8nwt313d0/TiPVzfVdNWeul+j9IXo/
3KrCerwu7p+8fnM/87WxX+X9s9r7Y7XzTPT+s2n+fLD/VxvfCvvtZ/z++Aic
f45aj9YLN2dev2zV+vxv9/xz5vf/9H3+qby+6vB+tIbzzyHrcfLwM5TvXz/W
SR/0nSrf34jwbECfPf5Bf26aP6Pl7/oq/fxTrX/k188fzld5vNas92cv+KjH
t7bo15M+YXaK7s/Wn3+0+XA3N9LvD9w6dr4lLvef5Z5ZJ7+1T64n3q+oML5n
vp4I19kF3fTn6fVffl7iXXu5vqsmer2cuT9E7Id7+rbCerz+esPk7Zt7+oRk
k8r7Z4X3x2rnmTP3n03z54P9v8L4nvl64vj98V45/0SsR+uFmz3vX9FanP99
nH9Svv+ny/NP5fVVh/ejZ5x/Dl+Pd321NL+lkz4Bdpr2n4L3NyI8G9Bnj3/Q
n5vmz2j5auefav0j/zqfvoEMrtp4fbY/LF/wUY9vbdGvJ33C7PRBl2ovWvqA
Hjs3Dj//b33++XJ7tv882ycr5Lf2yfXX+xXPzlFTpvXxPfP1RLguru+uv17Z
TW+R/e0PFUSvlzP3h4j9cE/fVliP8/X1tu38eTlf5f2zwvtjtfPMmfvPpvnz
wf5fYXzPfD1x/P54r5x/Itaj9cLNmdf7W7U4//s4//j+n6NeT+X1VYf3o2ec
fw5fj/N199D8lk76BNhp2n8K3t+IcNnYPujPTfNntHz0frU1X61/5F/n0zeQ
wVUbr63r/TJYS58wO239eecD/Wxy7pkP1Z5/6+PpA3rs3Ei/PzAfu2nnmW+P
L8a6Qn5rn8yvDua77vwP039l53yrML5nvp4Io13fVRO9Xs7cH9bM/+j9Z+vr
OW1817TO3n9HUHn/jJ7/Eeu9Wv60+fPB/l9hfM98PXH8/nivztwf1sz/M/ef
uPVovXBz5vX+Vi3O/+j96pz9x/f/HPV6Kq+vOrwfPXPm/rBm/p+z/6x/PVvN
n+1Zm/8U6RNgp/lPOu/DS4H7GxGiPy/bOn9Gy89bhfNPtf6Rf51P30AGV228
5v/dNet96/6/9fEX3fKsr0JfT/qEOXB8I/qz9ecfbT4s58bdJcDl0PsDm57/
2f7TSn6Nh/cr7v4T07TfOd+qjW/064mwvL6bxm76cys/S4vOXC/R+0P0frhV
hfX4+iR81zp7/x1B5f0zev5Hr/dq+dD588H+X218K+y3n/H74yNw/jlqPVov
3Jx5/bJV6/O/3fPPad//0/35p/L6qsP70RrOP4esxzW3dKYlmT7oO1W+vxEh
+vOyrfNntPxdX6Wff6r1j/zrfPoGMrjK47VmvW/d/7c+/rZnlh0V+nrSJ8xO
0f3Z+vOPNh+W02Pajq4Bv4y86fkrnGf25NeYb/4P59t8zu+fb6XG94TXc7j5
pfHDN+7vn7/fcZP+gjtz5no5YX8I3Q8/kL4e1xyGD9wPOVnx/bPU+2O188wJ
+89bO/f/UuN7wusJ4vfHR+D8c9STWy/cnHy9v1XT87/d889p+0P355/i66sI
70drOP8cux5ft/OvJSMUv79xuOjPy7bOn9Hyd32Vfv6p1j/yr/PpG8jgKo/X
mvW+df/f+vjKzpn3UujrSZ8wO23tT+11Sx/QY+fGdHCdn2Cznr/CeWZPfo31
+//liO//KTW+0a8nwjRez8buNkbzGBH9f8J6id4fovfDrSqsxzPHl/NV3j+j
53/0eq+Wj7Bnf6g2vhX228/4/fEROP8ctR6tF24qn29bn//tnn9O+/6f7s8/
lddXHd6P1nD+2b8e1y/GPtZj5fsbETaN7wc/79b5M1r+bu6ln3+if175Y/Pp
G8jgKo/X4eu9g5Y+YXaaD+idy+zLCecjLi8vLy8vLy8vLy8vL39C3vWgvLy8
vLy8vLy8vLy8fIt516fy8vLy8vLn56d/a+nyR73360fk5eXl5eXl5eXl5eXl
g/LR9T/Vfl55eXl5eXl5eXl5eXn5PvKuT+Xl5eXl5eXl5eXl5eXl5eXl5eXl
b4+o/5GXl5eXl5eXl5eXl5dvMe/6VF5eXl5eXl5eXl5eXl5eXl5eXl7+9oj6
H3l5eXl5eXl5eXl5efkW865P5eXl5eXlC+Yvf/ytYfLy8vLy8vLy8vLy8vIn
59Prf4r3j7y8vLy8vLy8vLy8vHzNvOtTeXl5eXn5avnb/07txz/Ky8vLy8vL
y8vLy8vLn5PPrf+p3z/y8vLy8vLy8vLy8vLyNfOuT+Xl5eXl5avlf/y/c5cV
9UXy8vLy8vLy8vLy8vLyh+TTv/+neP/Iy8vLy8vLy8vLy8vL18y7PpWXl5eX
ly+Yf/2IvLy8vLy8vLy8vLy8fFA+vf6neP/Iy8vLy8vLy8vLy8vL18y7PpWX
l5eXl5eXl5eXl5eXl5eXl5eXvz2i/kdeXl5eXl5eXl5eXl6+xbzrU3l5eXl5
eXl5eXl5eXl5eXl5eXn52yPqf+Tl5eXl5eXl5eXl5eVbzLs+lZeXl5eXPz9/
a2vC8vLy8vLy8vLy8vLy8mfmo+t/qv288vLy8vLy8vLy8vLy8n3kXZ/Ky8vL
y8ufn//x4A/Lf0teXl5eXl5eXl5eXl4+N3/C9/+U+nnl5eXl5eXl5eXl5eXl
+8i7PpWXl5eXl0/J//jD/N+6tWVYXl5eXl5eXl5eXl5e/sz8CfU/pX5eeXl5
eXl5eXl5eXl5+T7yrk/l5eXl5eWz8je3f+v2L8rLy8vLy8vLy8vLy8vn5s+p
/6nz88rLy8vLy8vLy8vLy8v3kXd9Ki8vLy8vn5t//fjljyYvLy8vLy8vLy8v
Ly9/Tv7M+p8KP6+8vLy8vLy8vLy8vLx8H3nXp/Ly8vLy8ufnpz/M2/cftUMP
H5eXl5eXl5eXl5eXl5c/Jx9d/1Pt55WXl5eXl5eXl5eXl5fvI+/6VF5eXl5e
PiV//fk1QXemf3EiLy8vLy8vLy8vLy8vf1r+hPqfUj+vvLy8vLy8vLy8vLy8
fB9516fy8vLy8vLn56d/a+my+Nag5SPy8vLy8vLy8vLy8vLyQfno+p9qP6+8
vLy8vLy8vLy8vLx8H3nXp/Ly8vLy8vLy8vLy8vLy8vLy8vLyt0fU/8jLy8vL
y8vLy8vLy8u3mHd9Ki8vLy8vLy8vLy8vLy8vLy8vLy9/e0T9j7y8vLy8vLy8
vLy8vHyLeden8vLy8vLyBfOXP/7WMHl5eXl5eXl5eXl5efmT8+n1P8X7R15e
Xl5eXl5eXl5eXr5m3vWpvLy8vLx8tfztf6f24x/l5eXl5eXl5eXl5eXlz8nn
1v/U7x95eXl5eXl5eXl5eXn5mnnXp/Ly8vLy8tXyP/7fucuK+iJ5eXl5eXl5
eXl5eXn5Q/Lp3/9TvH/k5eXl5eXl5eXl5eXla+Zdn8rLy8vLyxfMv35EXl5e
Xl5eXl5eXl5ePiifXv9TvH/k5eXl5eXl5eXl5eXla+Zdn8rLy8vLy8vLy8vL
y8vLy8vLy8vL3x5R/yMvLy8vLy8vLy8vLy/fYt71qby8vLy8vLy8vLy8vLy8
vLy8vLz87RH1P/Ly8vLy8vLy8vLy8vIt5l2fysvLy8vLn5+/tTVheXl5eXl5
eXl5eXl5+TPz0fU/1X5eeXl5eXl5eXl5eXl5+T7yrk/l5eXl5eXPz/948Ifl
vyUvLy8vLy8vLy8vLy+fmz/h+39K/bzy8vLy8vLy8vLy8vLyfeRdn8rLy8vL
y6fkf/xh/m/d2jIsLy8vLy8vLy8vLy8vf2b+hPqfUj+vvLy8vLy8vLy8vLy8
fB9516fy8vLy8vJZ+Zvbv3X7F+Xl5eXl5eXl5eXl5eVz8+fU/9T5eeXl5eXl
5eXl5eXl5eX7yLs+lZeXl5eXz82/fvzyR5OXl5eXl5eXl5eXl5c/J39m/U+F
n1deXl5eXl5eXl5eXl6+j7zrU3l5eXl5+fPz0x/m7fuP2qGHj8vLy8vLy8vL
y8vLy8ufk4+u/6n288rLy8vLy8vLy8vLy8v3kXd9Ki8vLy8vf37+f/9X/y8A
AAB0b3lRrGnjtPQFCAAAAAAAAACwU3b9haZltvQFCAAAAAAAAACwU3b9haZl
tvQFCAAAAAAAAACwU3b9haZltvQFCAAAAAAAAACwU3b9haZltvQFCAAAAAAA
AACwU3b9haZltvQFCAAAAAAAAACwU3b9haZltvQFCAAAAAAAAACwU3b9haZl
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
BAAAAKCr/wH43/na
    "], {{0, 360.}, {2304., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96, 96}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 3072, "ImageLength" -> 480, "XResolution" -> 96, 
        "YResolution" -> 96, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2022, 7, 19, 23, 37, 46.}, "Instant", "Gregorian", 8.], 
        "TimeZoneOffset" -> 8|>, 
      "Comments" -> <|
       "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
        "Creation Time" -> 
        DateObject[{2022, 7, 19, 23, 37, 46.}, "Instant"]|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{2304., 360.},
  PlotRange->{{0, 2304.}, {0, 360.}}]], "Output",
 CellChangeTimes->{3.867233610450178*^9, 3.86723387815993*^9},
 CellLabel->
  "Out[329]=",ExpressionUUID->"82bd779e-009a-4182-91dd-4f44a724f275"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudDeploy", "[", 
  RowBox[{
   RowBox[{"Import", "[", "\"\<Wolfram/Archive.zip\>\"", "]"}], ",", 
   RowBox[{"Permissions", "->", "\"\<Public\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.867233727328445*^9, 3.867233735264276*^9}, {
  3.867233766215024*^9, 3.867233773748274*^9}},
 CellLabel->
  "In[326]:=",ExpressionUUID->"72437900-581a-4c84-8b82-6ebad7632d21"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/8a20a190-adf2-43af-bb84-f897fa997681\"\
", "https://www.wolframcloud.com/obj/8a20a190-adf2-43af-bb84-f897fa997681"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/8a20a190-adf2-43af-bb84-f897fa997681"],
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.867233767568802*^9, 3.867233775303174*^9}},
 CellLabel->
  "Out[326]=",ExpressionUUID->"c5a366f6-4036-40d4-971d-24f99f22f841"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CloudImport", "[", 
  TemplateBox[{
   "\"https://www.wolframcloud.com/obj/8a20a190-adf2-43af-bb84-f897fa997681\"\
", "https://www.wolframcloud.com/obj/8a20a190-adf2-43af-bb84-f897fa997681"},
   "HyperlinkURL"], "]"}]], "Input",
 CellChangeTimes->{{3.867233747775662*^9, 3.8672337840257263`*^9}},
 CellLabel->
  "In[327]:=",ExpressionUUID->"3873a8fd-ea37-43e3-a248-7c90d51ee66a"],

Cell[BoxData[
 RowBox[{"Notebook", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Cell", "[", 
     RowBox[{
      RowBox[{"BoxData", "[", 
       RowBox[{"RowBox", "[", 
        RowBox[{"{", 
         RowBox[{"\<\"{\"\>", ",", 
          RowBox[{"RowBox", "[", 
           RowBox[{"{", 
            
            RowBox[{"\<\"\\\"mapl61.png\\\"\"\>", ",", "\<\",\"\>", 
             ",", "\<\"\\\"__MACOSX/._mapl61.png\\\"\"\>", ",", "\<\",\"\>", 
             ",", "\<\"\\\"mapl71.png\\\"\"\>", ",", "\<\",\"\>", 
             ",", "\<\"\\\"__MACOSX/._mapl71.png\\\"\"\>"}], "}"}], "]"}], 
          ",", "\<\"}\"\>"}], "}"}], "]"}], "]"}], ",", "\<\"Output\"\>"}], 
     "]"}], "}"}], ",", 
   RowBox[{
   "FrontEndVersion", 
    "\[Rule]", "\<\"13.1 for Mac OS X x86 (64-bit) (June 21, 2022)\"\>"}], 
   ",", 
   RowBox[{"StyleDefinitions", "\[Rule]", "\<\"Default.nb\"\>"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.867233762188545*^9, 3.867233785189349*^9}},
 CellLabel->
  "Out[327]=",ExpressionUUID->"e2889f2e-22da-4218-9c08-0d24bb248bdb"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{2048, 1227},
WindowMargins->{{190, Automatic}, {Automatic, 1}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Mac OS X x86 (64-bit) (June 21, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"eba04284-64c4-4e0b-ad68-65d4fe98ddac"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 183, 3, 98, "Title",ExpressionUUID->"3c6aaa4b-051c-474a-a12b-8412ef28bce2"],
Cell[CellGroupData[{
Cell[791, 29, 230, 4, 69, "Chapter",ExpressionUUID->"215ba60d-b7ed-434b-98a8-c25726cea34a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1024, 35, 563, 10, 35, "Text",ExpressionUUID->"cf227777-fca4-4742-b0b7-9db9a0a2b9fe",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1590, 47, 356, 7, 30, "Input",ExpressionUUID->"f49790f6-8fd1-4e7b-beb1-cbd6b6845771",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[1949, 56, 8263, 223, 325, "Input",ExpressionUUID->"d07f06cf-649f-4bd7-b221-75fe99765e93",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[10215, 281, 20250, 337, 140, "Output",ExpressionUUID->"71b5ce3d-2f2a-4260-a67e-f100ae1a0729",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[30468, 620, 24770, 411, 139, "Output",ExpressionUUID->"87b2d136-d1f3-4556-8349-c8378796a6fa",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[55241, 1033, 22771, 378, 139, "Output",ExpressionUUID->"7cd0bb6e-63e2-4f29-8a81-b3e57aa3712a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[78015, 1413, 22409, 372, 126, "Output",ExpressionUUID->"d7976b17-b29b-42b8-be18-bfa5cb96499a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[100427, 1787, 19574, 325, 140, "Output",ExpressionUUID->"5372431b-6229-452b-be9a-7d4c4fdca1a3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[120004, 2114, 24089, 400, 139, "Output",ExpressionUUID->"0d81f452-5ef2-4dc0-bf16-78cb3954a44d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[144096, 2516, 23613, 392, 153, "Output",ExpressionUUID->"8da2136f-d337-4b3c-a433-e82354b02243",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[167712, 2910, 34835, 576, 84, "Output",ExpressionUUID->"e8971c48-af18-4c30-af43-5c88eda5f360",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[202550, 3488, 23658, 393, 146, "Output",ExpressionUUID->"e779e081-c3aa-4ce1-83a9-0c88711dc65e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[226211, 3883, 34679, 574, 119, "Output",ExpressionUUID->"693f1f67-39cf-4505-984b-84f152b47437",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[260893, 4459, 25305, 420, 139, "Output",ExpressionUUID->"b4e1d3da-fd15-408e-9f8b-de83aa9fbbd1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[286201, 4881, 256, 5, 30, "Input",ExpressionUUID->"179f804a-97f0-4351-8a26-cc49ddd86b9a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[286460, 4888, 240, 4, 35, "Text",ExpressionUUID->"b4bf4493-d9ca-4ffb-8826-767a27ab4fc9",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[286703, 4894, 8479, 227, 221, "Input",ExpressionUUID->"e6b0581c-1c02-4fcd-9f44-90558531da00",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[295185, 5123, 1933, 30, 32, "Input",ExpressionUUID->"10828b27-8969-4f58-8817-fb0680278dcb",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[297121, 5155, 394, 8, 35, "Text",ExpressionUUID->"0b22f77c-f25d-4236-bf16-a3c272165f00",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[297518, 5165, 4853, 117, 304, "Input",ExpressionUUID->"4c9c30e0-c59a-4e6f-8871-663d2df6d813",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[302374, 5284, 1005, 15, 30, "Input",ExpressionUUID->"490dfe87-d4b0-466a-bcba-4de758c8240c",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[303382, 5301, 13390, 309, 151, "Output",ExpressionUUID->"9e5c302d-8efd-4689-a9ee-2c46eef8a940",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[316775, 5612, 539, 12, 30, "Input",ExpressionUUID->"1d3cb908-4371-444f-85d7-a84704fda7d2",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[317317, 5626, 651, 16, 37, "Output",ExpressionUUID->"bd8de73a-bcb9-4829-9ca3-d54029d7b332",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[317983, 5645, 152, 3, 30, "Input",ExpressionUUID->"5c69446e-04c7-4e97-bc9d-ae094326f5ff"],
Cell[318138, 5650, 1365, 26, 30, "Input",ExpressionUUID->"d1a9d3a4-7425-4e77-9934-095ba8d92f38"],
Cell[CellGroupData[{
Cell[319528, 5680, 190, 3, 69, "Chapter",ExpressionUUID->"0733f795-cd7d-4547-a93c-996b96b5d093"],
Cell[319721, 5685, 410, 8, 58, "Text",ExpressionUUID->"f9e17c73-e37e-47e1-a62e-049f6fb4d679"],
Cell[320134, 5695, 4055, 126, 325, "Input",ExpressionUUID->"16441144-4ba6-4e09-9b57-cfe9ae44401a"],
Cell[324192, 5823, 225, 4, 35, "Text",ExpressionUUID->"84fe5298-348d-4509-82c3-22bccbe7c4ea"],
Cell[CellGroupData[{
Cell[324442, 5831, 2732, 70, 199, "Input",ExpressionUUID->"48b77066-157a-4370-a70d-4d5e702d6cd9"],
Cell[327177, 5903, 1429, 31, 162, "Output",ExpressionUUID->"54bae1e7-0234-4474-8138-b9090f49df4b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[328655, 5940, 163, 3, 58, "Chapter",ExpressionUUID->"53db4947-c6c6-41c3-a06a-11f1bec9a0a0"],
Cell[CellGroupData[{
Cell[328843, 5947, 304, 5, 30, "Input",ExpressionUUID->"0ed3c8a5-d912-4a59-8011-b277e3dfa040"],
Cell[329150, 5954, 178420, 3014, 76, "Output",ExpressionUUID->"6c2c0a53-cdd6-4c44-bb2c-9e7c78be509b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[507607, 8973, 349, 7, 30, "Input",ExpressionUUID->"a3d8e4c5-6ad3-4efc-99c9-79c9dee9b317"],
Cell[507959, 8982, 1759, 32, 376, "Output",ExpressionUUID->"e91b9cfb-3e13-4251-973a-ddd686957ddd"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[509779, 9021, 154, 3, 98, "Title",ExpressionUUID->"565de1e4-5222-4ddf-a9d3-d3538bc9a736"],
Cell[509936, 9026, 244, 6, 35, "Text",ExpressionUUID->"e8593761-379c-4038-bca5-0478f8c15c8e"],
Cell[510183, 9034, 1223, 35, 115, "Input",ExpressionUUID->"c531896b-37b1-4f3b-a3ef-ed446a5fd4d9"],
Cell[511409, 9071, 442, 10, 30, "Input",ExpressionUUID->"325fabbf-a57b-4bff-992d-b8edffd0781b"],
Cell[511854, 9083, 1208, 30, 157, "Input",ExpressionUUID->"e5809f1f-f64a-426b-90df-3f69658d639f"],
Cell[513065, 9115, 1434, 34, 115, "Input",ExpressionUUID->"9382f085-56c0-4767-92cf-c5e14dbd8426"],
Cell[514502, 9151, 1107, 23, 52, "Input",ExpressionUUID->"5398aea2-4229-4fd4-a042-84d983a00f65"],
Cell[CellGroupData[{
Cell[515634, 9178, 217, 4, 30, "Input",ExpressionUUID->"8872cdf6-c85e-4106-8d6a-54123002e6af"],
Cell[515854, 9184, 348, 7, 34, "Output",ExpressionUUID->"8713ff13-454b-414d-8572-a48f4cddbc43"]
}, Open  ]],
Cell[516217, 9194, 184, 3, 35, "Text",ExpressionUUID->"b66e573a-1716-48d2-b92c-b8b9d650baa9"],
Cell[516404, 9199, 313, 9, 30, "Input",ExpressionUUID->"4cecfb69-c143-46dc-be3b-c29e884e0943"],
Cell[516720, 9210, 481, 12, 30, "Input",ExpressionUUID->"e3fcf359-bf9f-4052-83fc-46ff4220a7a6"],
Cell[517204, 9224, 655, 18, 30, "Input",ExpressionUUID->"008054af-a887-48bb-865c-b6f60dcd3591"],
Cell[CellGroupData[{
Cell[517884, 9246, 159, 3, 53, "Subtitle",ExpressionUUID->"81f63e6f-70c2-40bf-a4d2-10bc4c262037"],
Cell[518046, 9251, 400, 10, 30, "Input",ExpressionUUID->"5e4ed616-ec06-4251-a781-32f31295d426"],
Cell[CellGroupData[{
Cell[518471, 9265, 1963, 44, 241, "Input",ExpressionUUID->"011f4876-867d-4bbe-abf5-f5dff45bca1b"],
Cell[520437, 9311, 36828, 753, 62, "Output",ExpressionUUID->"4fcffc51-4b77-43b7-bbf1-a1179dc0d752"]
}, Open  ]],
Cell[557280, 10067, 308, 7, 30, "Input",ExpressionUUID->"7775ba2b-3c67-4810-9234-cfdf486b64f9"],
Cell[CellGroupData[{
Cell[557613, 10078, 1018, 19, 52, "Input",ExpressionUUID->"5399283c-cef7-40e4-a3b5-672f5bc3f867"],
Cell[558634, 10099, 433, 10, 28, "Message",ExpressionUUID->"85b43c87-9b81-444a-be64-c9716e4c736c"],
Cell[559070, 10111, 159, 3, 34, "Output",ExpressionUUID->"97e5b360-b447-419e-b0bb-b610e7124162"]
}, Open  ]],
Cell[559244, 10117, 668, 13, 52, "Input",ExpressionUUID->"90a5c0d5-7620-463e-9c53-8b2d28d510bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[559949, 10135, 155, 3, 53, "Subtitle",ExpressionUUID->"e11db3c0-2514-4cb5-a9f2-337b3502a1a7"],
Cell[560107, 10140, 715, 15, 73, "Input",ExpressionUUID->"e57ca6ba-5db1-4725-9e2e-a9fa564616ae"],
Cell[CellGroupData[{
Cell[560847, 10159, 2014, 44, 241, "Input",ExpressionUUID->"cca276fe-f65f-4fc7-bb00-222e78d174e6"],
Cell[562864, 10205, 52777, 1071, 62, "Output",ExpressionUUID->"e05a31e4-d003-441a-a402-fae0887726df"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[615690, 11282, 171, 3, 53, "Subtitle",ExpressionUUID->"e2e7a837-ae22-44e2-a4a8-7250bd44204c"],
Cell[CellGroupData[{
Cell[615886, 11289, 389, 8, 30, "Input",ExpressionUUID->"fbe60a2e-6803-45c5-b5bb-2137369333cd"],
Cell[616278, 11299, 121910, 2177, 108, "Output",ExpressionUUID->"ed11cf66-5726-418a-b8e1-fa24b6ce7b70"]
}, Open  ]],
Cell[738203, 13479, 511, 13, 52, "Input",ExpressionUUID->"4582b163-1a91-4202-809e-64723d4b9be9"],
Cell[738717, 13494, 552, 14, 52, "Input",ExpressionUUID->"b7e66b47-2735-4b18-9f4d-b41b32f9e9ec"],
Cell[739272, 13510, 151, 3, 35, "Text",ExpressionUUID->"ef15349f-5aea-4ae6-8608-b3273ecee771"],
Cell[739426, 13515, 1122, 23, 30, "Input",ExpressionUUID->"2dbae7e0-eb28-4308-b56c-4617097a74ae"],
Cell[CellGroupData[{
Cell[740573, 13542, 564, 11, 30, "Input",ExpressionUUID->"5bd2c45c-0d66-40c6-b23b-d6c58081bd45"],
Cell[741140, 13555, 2836, 53, 425, "Output",ExpressionUUID->"b0243e91-94f8-4f98-8bb7-9a3229c7f8d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[744013, 13613, 1995, 42, 199, "Input",ExpressionUUID->"54e9ed7b-7d26-4b3e-aef9-ac72735c0f1f"],
Cell[746011, 13657, 536, 10, 34, "Output",ExpressionUUID->"c494721b-6216-4174-8395-c19caf2e6976"],
Cell[746550, 13669, 120591, 2164, 108, "Output",ExpressionUUID->"d0917988-df7b-4850-a344-123f46475f9b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[867178, 15838, 477, 11, 30, "Input",ExpressionUUID->"9b627813-0b2e-41f2-a0a9-76760ec50e80"],
Cell[867658, 15851, 248, 5, 34, "Output",ExpressionUUID->"1ed581d0-e339-4e1a-a665-57d4f47dcb4a"]
}, Open  ]],
Cell[867921, 15859, 513, 13, 30, "Input",ExpressionUUID->"ebf2dbbf-422c-4442-841c-48d8d6ba9815"],
Cell[868437, 15874, 298, 7, 30, "Input",ExpressionUUID->"1cc05b98-2385-4725-99e0-fd21ce240c8f"],
Cell[868738, 15883, 152, 3, 30, "Input",ExpressionUUID->"47076a7b-303a-486c-a9c9-4336a6fe38bc"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[868939, 15892, 187, 3, 72, "Title",ExpressionUUID->"1ba7cdf3-ddb3-4479-a197-fdec74167f83"],
Cell[869129, 15897, 310, 7, 35, "Text",ExpressionUUID->"2cbe9e94-49e4-420e-ae36-21eea59241ed"],
Cell[869442, 15906, 578, 16, 30, "Input",ExpressionUUID->"1f221009-c453-4cc0-ac40-58bbff65bcd1"],
Cell[870023, 15924, 2249, 60, 220, "Input",ExpressionUUID->"68dff247-9103-4696-a490-e70d5f256841"],
Cell[872275, 15986, 383, 10, 30, "Input",ExpressionUUID->"e1a5b630-af41-40f4-a68e-bc5cdcabc569"],
Cell[872661, 15998, 667, 16, 94, "Input",ExpressionUUID->"274ddfef-e260-4ea1-9ed7-d754e391b7a7"],
Cell[873331, 16016, 152, 3, 30, "Input",ExpressionUUID->"59053a84-b4a9-4424-94d0-e78fd0a94d02"],
Cell[CellGroupData[{
Cell[873508, 16023, 1362, 34, 199, "Input",ExpressionUUID->"5eea67f2-d075-4551-bd1f-b51ef0405afb"],
Cell[874873, 16059, 36632, 749, 62, "Output",ExpressionUUID->"5ecca018-d31a-4c4d-a9d2-525c93e57993"]
}, Open  ]],
Cell[911520, 16811, 2170, 52, 241, "Input",ExpressionUUID->"7e2421ad-fd60-41a7-924a-e9f365500b36"],
Cell[CellGroupData[{
Cell[913715, 16867, 248, 4, 30, "Input",ExpressionUUID->"44b0b3e9-fe1d-4144-860c-69ca935f6ce0"],
Cell[913966, 16873, 1246, 27, 454, "Output",ExpressionUUID->"c3eacd3d-06ca-473c-a207-7530aab09403"]
}, Open  ]],
Cell[915227, 16903, 262, 6, 35, "Text",ExpressionUUID->"eb3c9e01-91d5-4d9a-89ac-d9a6adb4e2cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[915526, 16914, 164, 3, 98, "Title",ExpressionUUID->"5b1c3baa-5563-4a29-a461-7669d995f1c2"],
Cell[915693, 16919, 177, 3, 30, "Input",ExpressionUUID->"307f54b7-184c-455b-b420-271fac866f4e"],
Cell[915873, 16924, 441, 7, 30, "Input",ExpressionUUID->"819bbb57-386e-4f77-9056-c2b9e8b8d036"],
Cell[CellGroupData[{
Cell[916339, 16935, 248, 5, 30, "Input",ExpressionUUID->"2e2aefad-2cae-4920-9892-044d23284195"],
Cell[916590, 16942, 203, 4, 34, "Output",ExpressionUUID->"b9327bc6-de99-48fe-b08e-8fa49834c988"]
}, Open  ]],
Cell[916808, 16949, 179, 3, 30, "Input",ExpressionUUID->"56681829-4029-4987-9e06-e3b5e925243f"],
Cell[916990, 16954, 975, 24, 157, "Input",ExpressionUUID->"5d96b633-589a-43d7-9c1c-0218699a931d"],
Cell[917968, 16980, 687, 10, 30, "Input",ExpressionUUID->"ef5f8009-f7ed-4264-8826-fa967d6c17ef"],
Cell[CellGroupData[{
Cell[918680, 16994, 459, 11, 30, "Input",ExpressionUUID->"0b17174b-6cb1-4bc3-bd19-0847736a1289"],
Cell[919142, 17007, 3384, 83, 77, "Output",ExpressionUUID->"ba02f2a4-69dc-4ba3-9061-6ed5630634e0"]
}, Open  ]],
Cell[922541, 17093, 627, 17, 30, "Input",ExpressionUUID->"7f7da584-88ba-4b9e-b194-ce3c8add0b12"],
Cell[CellGroupData[{
Cell[923193, 17114, 235, 5, 30, "Input",ExpressionUUID->"8f4defe8-8ede-4bf0-8be6-d53d6e8caa31"],
Cell[923431, 17121, 2649, 48, 279, "Output",ExpressionUUID->"718390c0-ea0b-4694-b633-e2a35da31372"]
}, Open  ]],
Cell[CellGroupData[{
Cell[926117, 17174, 221, 4, 30, "Input",ExpressionUUID->"5d0a194c-4d74-4d4f-b42c-4aa439acbae2"],
Cell[926341, 17180, 203, 5, 34, "Output",ExpressionUUID->"f764d8ea-1a14-4444-b062-4f35f0116e48"]
}, Open  ]],
Cell[926559, 17188, 1364, 27, 30, "Input",ExpressionUUID->"04f84abf-77c8-4ec6-be29-9913585e7622"],
Cell[CellGroupData[{
Cell[927948, 17219, 156, 3, 30, "Input",ExpressionUUID->"452f95c3-13f0-4194-80ad-4e454c89afa7"],
Cell[928107, 17224, 3393, 81, 77, "Output",ExpressionUUID->"edb2f06c-6935-443f-9019-8d9a6c950d97"]
}, Open  ]],
Cell[CellGroupData[{
Cell[931537, 17310, 219, 4, 30, "Input",ExpressionUUID->"ee7dcd91-97db-4a38-8b09-a3763d3dae94"],
Cell[931759, 17316, 156, 3, 34, "Output",ExpressionUUID->"de5977b0-8160-4569-9a55-57f962c879d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[931952, 17324, 1514, 38, 52, "Input",ExpressionUUID->"aca08f6b-09f8-4ed8-a90d-6d609f72d5b0"],
Cell[933469, 17364, 36574, 747, 62, "Output",ExpressionUUID->"54d5eedc-34c9-4ea9-89b6-af34cd655f46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[970080, 18116, 2160, 50, 157, "Input",ExpressionUUID->"548f7711-430b-40d7-aa9b-b59d787cda49"],
Cell[972243, 18168, 46457, 945, 62, "Output",ExpressionUUID->"2644b411-ea54-4607-a882-53df98553973"]
}, Open  ]],
Cell[1018715, 19116, 989, 26, 52, "Input",ExpressionUUID->"ba7e5d1c-6afa-4760-b072-e528bfe85cb9"],
Cell[1019707, 19144, 152, 3, 30, "Input",ExpressionUUID->"99f2299c-4c2d-4854-9a9e-340ce4d6282a"],
Cell[1019862, 19149, 1073, 23, 115, "Input",ExpressionUUID->"56897ab4-5a13-40f8-89ca-c91dfcb799dc"],
Cell[1020938, 19174, 663, 17, 30, "Input",ExpressionUUID->"933c5349-d088-49ee-a13b-2ca534188c2b"],
Cell[CellGroupData[{
Cell[1021626, 19195, 591, 15, 30, "Input",ExpressionUUID->"1f3601c7-98da-49bb-a6ef-70c848cdd3ed"],
Cell[1022220, 19212, 3277, 79, 77, "Output",ExpressionUUID->"6df4b00c-c062-444b-9cdc-a12f0e87b0b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1025534, 19296, 177, 3, 30, "Input",ExpressionUUID->"10556794-5ae2-489c-8210-b47486888a2d"],
Cell[1025714, 19301, 689407, 11531, 62, "Output",ExpressionUUID->"ca3aae51-c1d9-4dda-8335-d290d1ca05f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1715158, 30837, 227, 4, 30, "Input",ExpressionUUID->"cc0664b6-a5b9-41c9-98eb-d09fa06d08d8"],
Cell[1715388, 30843, 1235, 27, 376, "Output",ExpressionUUID->"a64c5e29-094a-48d6-b4a6-352df834e7d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1716660, 30875, 461, 11, 30, "Input",ExpressionUUID->"ef291484-c362-402f-8972-0f9f044afd61"],
Cell[1717124, 30888, 251, 6, 34, "Output",ExpressionUUID->"c07b1433-086d-4821-9923-d4f68e3cec68"]
}, Open  ]],
Cell[1717390, 30897, 154, 3, 30, "Input",ExpressionUUID->"a7c39bb8-36c1-467f-8897-468c6fa71007"],
Cell[CellGroupData[{
Cell[1717569, 30904, 304, 5, 30, "Input",ExpressionUUID->"9a132627-d2c1-43bc-8a56-e0459355e255"],
Cell[1717876, 30911, 615, 12, 28, "Message",ExpressionUUID->"68ab8691-9794-479d-9d68-39f3525a60d1"],
Cell[1718494, 30925, 514, 11, 28, "Message",ExpressionUUID->"91629943-9cdd-472d-a2e6-295beb8c92de"],
Cell[1719011, 30938, 593, 10, 85, "Output",ExpressionUUID->"a2067adb-0928-4584-907e-a0f8db98a10e"]
}, Open  ]],
Cell[1719619, 30951, 152, 3, 30, "Input",ExpressionUUID->"fedd16d3-2755-4795-aed9-6ac99b786638"],
Cell[CellGroupData[{
Cell[1719796, 30958, 214, 4, 52, "Input",ExpressionUUID->"977bc708-fcbb-4c75-8833-3bae4757fa51"],
Cell[1720013, 30964, 173, 3, 56, "Output",ExpressionUUID->"4410c8ca-e480-45fa-a38d-02c13f12c64f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1720223, 30972, 48328, 799, 30, "Input",ExpressionUUID->"df289e36-1fa5-4724-aaf3-e94be5490673"],
Cell[1768554, 31773, 931, 20, 37, "Output",ExpressionUUID->"9052f48f-12a2-44d3-b516-06aeda97788f"],
Cell[1769488, 31795, 903, 19, 37, "Output",ExpressionUUID->"92dac3e2-59f9-4ab3-82cc-8c584f0013cc"],
Cell[1770394, 31816, 881, 19, 37, "Output",ExpressionUUID->"2929c262-5933-47f1-a796-3da73864ed20"],
Cell[1771278, 31837, 859, 19, 37, "Output",ExpressionUUID->"4fc1d294-16dc-464a-bee9-4de5fe91d1aa"],
Cell[1772140, 31858, 834, 18, 37, "Output",ExpressionUUID->"24a53a6c-b6ba-4c37-bf4c-4f8e5c1d66f4"],
Cell[1772977, 31878, 812, 18, 37, "Output",ExpressionUUID->"ac40df37-ec47-4b08-abac-97b874099027"],
Cell[1773792, 31898, 790, 18, 37, "Output",ExpressionUUID->"8df6086e-8804-415b-aba6-fc31f00720c3"],
Cell[1774585, 31918, 764, 17, 37, "Output",ExpressionUUID->"d24b95f5-56f8-49cd-9ad7-55d1a4e16b06"],
Cell[1775352, 31937, 742, 17, 37, "Output",ExpressionUUID->"589023e3-7248-46b9-84d5-2ef21a1877bf"],
Cell[1776097, 31956, 720, 17, 37, "Output",ExpressionUUID->"da02c4ed-3ed5-4e80-8fb2-aa3bff83440b"],
Cell[1776820, 31975, 695, 16, 37, "Output",ExpressionUUID->"de5f7f18-8d6d-436b-871c-dba3234e4d27"],
Cell[1777518, 31993, 671, 16, 37, "Output",ExpressionUUID->"07f5d83b-9a74-4486-b533-f7e27efab278"],
Cell[1778192, 32011, 649, 16, 37, "Output",ExpressionUUID->"6052aba0-08e3-4c37-8606-9f0183f49c08"],
Cell[1778844, 32029, 601, 15, 37, "Output",ExpressionUUID->"0304646a-111e-4667-9099-9f15f4ef47b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1779482, 32049, 201, 4, 30, "Input",ExpressionUUID->"c3bc5fae-be2e-47aa-ab85-79b9b1efbb02"],
Cell[1779686, 32055, 45056, 747, 384, "Output",ExpressionUUID->"ce3c9340-597e-4f8a-8692-29c08505065c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1824779, 32807, 450, 9, 34, "Input",ExpressionUUID->"fdfc70af-51e8-4777-b026-d94813fd2c87"],
Cell[1825232, 32818, 31131, 518, 288, "Output",ExpressionUUID->"82bd779e-009a-4182-91dd-4f44a724f275"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1856400, 33341, 393, 8, 30, "Input",ExpressionUUID->"72437900-581a-4c84-8b82-6ebad7632d21"],
Cell[1856796, 33351, 546, 12, 37, "Output",ExpressionUUID->"c5a366f6-4036-40d4-971d-24f99f22f841"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1857379, 33368, 403, 8, 34, "Input",ExpressionUUID->"3873a8fd-ea37-43e3-a248-7c90d51ee66a"],
Cell[1857785, 33378, 1050, 27, 34, "Output",ExpressionUUID->"e2889f2e-22da-4218-9c08-0d24bb248bdb"]
}, Open  ]]
}, Open  ]]
}
]
*)

